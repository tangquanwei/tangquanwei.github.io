{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"source/images/IMG_20211223_131849.jpg","path":"images/IMG_20211223_131849.jpg","modified":0,"renderable":0},{"_id":"source/images/alipay.jpg","path":"images/alipay.jpg","modified":0,"renderable":0},{"_id":"source/images/banner.jpg","path":"images/banner.jpg","modified":0,"renderable":0},{"_id":"source/images/maomi.png","path":"images/maomi.png","modified":0,"renderable":0},{"_id":"source/images/p1.jpg","path":"images/p1.jpg","modified":0,"renderable":0},{"_id":"source/images/p2.jpg","path":"images/p2.jpg","modified":0,"renderable":0},{"_id":"source/images/wechatpay.png","path":"images/wechatpay.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/React-版-Postman/2023-06-09-18-42-16.png","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1686307336327},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-43-56.png","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1686307437007},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-45-40.png","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1686307540400},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-45-53.png","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1686307553883},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-46-52.png","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1686307612651},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-47-20.png","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1686307640706},{"_id":"source/_posts/Archlinux-BspWM-外接显示器.md","hash":"a4a3448c6bb233f5043d3b4e5147d724c96dbc7c","modified":1687482517759},{"_id":"source/_posts/Archlinux-触摸板调教.md","hash":"f9c2aeae809e3b3179586e26655badff1b0b55a6","modified":1687481946850},{"_id":"source/_posts/Archlinux-Mail.md","hash":"b6c26e4b0060ab1fa0a2ab26927b3ebfae924683","modified":1687481939876},{"_id":"source/_posts/Archlinux-入门.md","hash":"df217370719bfa692ee1a32117b3c0ab983fd909","modified":1683446810580},{"_id":"source/_posts/Archlinux-软件.md","hash":"433f5fb9e8b4d58d7d429d6f5c793263fec9d129","modified":1683447449435},{"_id":"source/_posts/Docker-Chevereto-图床.md","hash":"f559c06fa0362791f344ebb3c6bd4019cbae1199","modified":1691402566947},{"_id":"source/_posts/Blender.md","hash":"e54be52b65749aad35880dc3c7892295dc243791","modified":1703771065205},{"_id":"source/_posts/Docker-Draw-io.md","hash":"781cedba5aabf0e12a0391672dfaa292a57af0a7","modified":1688741225825},{"_id":"source/_posts/Docker-Elasticsearch.md","hash":"65e8d9e640b3545ee4cb93c55cee9483f35d5238","modified":1697095134629},{"_id":"source/_posts/Docker-MySQL.md","hash":"47b0c41db8a4198f1caca741e4cd885ee5ec8157","modified":1688457804283},{"_id":"source/_posts/Docker-Oracle-12c.md","hash":"b2b102dcec6296adf2b7d04a910d71026156c9b0","modified":1687481995785},{"_id":"source/_posts/Docker-Oracle-11g.md","hash":"51fad93a1dc19a5b649dc3a3f8a2d8872c9be65b","modified":1687481962572},{"_id":"source/_posts/Docker-PostgreSQL.md","hash":"ef259f6e2628578c7d0eea727449cddeddd69278","modified":1690979466423},{"_id":"source/_posts/Git-FQA.md","hash":"e5ccf82deb52297974af687972ada52ea9796218","modified":1703770754760},{"_id":"source/_posts/Fast-API.md","hash":"b6e0659a6284bd12f3ddcd9c81d5d8802456f7c4","modified":1703771279440},{"_id":"source/_posts/Docker-最佳实践.md","hash":"34e347e71511cefed3e2d6b9153e5202f2590c0f","modified":1687482008547},{"_id":"source/_posts/GraphQL-Apollo.md","hash":"1426d9df394a36a3ae1745e173ae478a5e3e2015","modified":1687483687177},{"_id":"source/_posts/GraphQL.md","hash":"8ae730dee2a387f01c0b30a2669acc14091ca031","modified":1687482125688},{"_id":"source/_posts/Java-多线程.md","hash":"3d9d80a0abfb867ea95b1d07e71a0259c81bf847","modified":1683447116499},{"_id":"source/_posts/Git-自动部署网站.md","hash":"93f2bdbbbb20b7699aa9566825fb93014942fd09","modified":1687482031086},{"_id":"source/_posts/Linux-系统管理.md","hash":"f00a1103273b06e71c779328df15ce04c003a321","modified":1685320099766},{"_id":"source/_posts/MongoDB.md","hash":"ba04693586067c0e49494848091ef8da36d3d38d","modified":1688972765994},{"_id":"source/_posts/Netty-框架入门.md","hash":"e0316c9f96617ef77737113f8a7b9dc1664e1e00","modified":1687482239681},{"_id":"source/_posts/ORACLE-PLSQL-函数.md","hash":"6a75847eb063bb2b49815b93583da5ded428d590","modified":1687482292138},{"_id":"source/_posts/ORACLE-PLSQL-包.md","hash":"d25d344c01d433d8e72e21d9e95b73e165593d10","modified":1687482306529},{"_id":"source/_posts/Java-语言特性.md","hash":"b346ec9311543832a3b16ec8dc79eef06d76e38e","modified":1685716268173},{"_id":"source/_posts/Java-更多-特性.md","hash":"80cdc15bb0721125bbb2a471a3ffd7e16bed6f79","modified":1685866673556},{"_id":"source/_posts/Java实现文件上传下载.md","hash":"0999bc0984bdebbd1bec47d298e4f9c1eefbf0f2","modified":1685279884771},{"_id":"source/_posts/Jenkins-Gitlab.md","hash":"90923d0d4f4d583544d5e106a053fcfc244de272","modified":1687482161691},{"_id":"source/_posts/Java-数据库框架.md","hash":"ec416de1a9591d2e7aa4c06229b9211e84b13238","modified":1687482139096},{"_id":"source/_posts/KeyCloak.md","hash":"1de991500036c4b5f74f28a36ee5f3355b241aa0","modified":1690973265555},{"_id":"source/_posts/Linux-User.md","hash":"d4deac9f28aa974e36197e787684731117849095","modified":1687576457882},{"_id":"source/_posts/Linux-Vim.md","hash":"89c94ffaf533ea248c3bf37bc03bf46970de6a2c","modified":1687482186136},{"_id":"source/_posts/Linux 命令.md","hash":"d364206b89fa3344c881b4b6623c775e683806d6","modified":1687596953791},{"_id":"source/_posts/Linux-使用-Windows-字体.md","hash":"3a5e9e72dcf65408ed68c060da191bebfb6451a9","modified":1686210966688},{"_id":"source/_posts/Linux-三剑客.md","hash":"f091c951ea371a831393a129251f571ea48ef172","modified":1687596528544},{"_id":"source/_posts/Linux-小技巧.md","hash":"1b01f9c78daa23f73812e06147d0c74958b10287","modified":1687482194947},{"_id":"source/_posts/Linux-AT-T-汇编.md","hash":"75d3900dbf53debf3777e471ac783fc74faf7871","modified":1687482175252},{"_id":"source/_posts/Linux-期末复习.md","hash":"26f3f7433b4223e1648c6395b8b984bb90455561","modified":1687595646480},{"_id":"source/_posts/Linux-权限.md","hash":"a686bd123fecce01e795db6539ee89a58b53e0cd","modified":1684647995338},{"_id":"source/_posts/Linux-环境变量.md","hash":"726e789601ec0f6560fa42367f4933e3dadcce31","modified":1683447326011},{"_id":"source/_posts/Linux-计划任务.md","hash":"a783297777d414f150d3074e1ab9a802292b7e3a","modified":1684749244249},{"_id":"source/_posts/Love-Story-App.md","hash":"c92b8bee1df8282d9f919a4c18ce8f5ad1bdf60f","modified":1701918383188},{"_id":"source/_posts/ORACLE-PLSQL-基础.md","hash":"476a613e39b8f1c7ce8b62891a9322ec6c18387f","modified":1687482310006},{"_id":"source/_posts/Neo4j.md","hash":"d4583df6512df1d889ece6a1453983fde8813eca","modified":1703772250315},{"_id":"source/_posts/ORACLE-PLSQL-存储过程.md","hash":"13703be07e5652571af1f265fcf11a19d34783cb","modified":1687482313713},{"_id":"source/_posts/OpenGauss-Database.md","hash":"d39daa96cc3a0f0152a5d38d7fa2609e146c20bd","modified":1687482256229},{"_id":"source/_posts/ORACLE-PLSQL-游标.md","hash":"677366d79d76e2dfaa8eca0261e34a9655ae1df5","modified":1687482317493},{"_id":"source/_posts/Oracle-Log-File.md","hash":"60d971a811f39c993d55a1ee75a29a0061bd6461","modified":1687482271576},{"_id":"source/_posts/Oracle-DBA.md","hash":"386db2024b7a7a92479c91a85850037153029d6c","modified":1687482264256},{"_id":"source/_posts/ORACLE-PLSQL-触发器.md","hash":"f6a2f452864b6319df9c80c5d32c2a537c09d776","modified":1687482321727},{"_id":"source/_posts/Oracle-User.md","hash":"5c75ee80e96d41de591c01f0eef7b64809e19d09","modified":1687482325524},{"_id":"source/_posts/Oracle-Object.md","hash":"59e2b7bafcc954f0df006b2af811d3ce814550f4","modified":1687482283321},{"_id":"source/_posts/OracleDB-最佳实践.md","hash":"57c771e15c8ae708bdfaea2add7861c756e0d872","modified":1687482329590},{"_id":"source/_posts/RHEL-YUM-本地源配置.md","hash":"160d9fcd04358b519c12fa792b3ead1d3b60b07d","modified":1684377937797},{"_id":"source/_posts/RHEL-RPM-软件包管理.md","hash":"5badb3e9d9fa617353a62024ef5b1f5edb8152b6","modified":1684379899352},{"_id":"source/_posts/React-Websocket-实现网络聊天室.md","hash":"aa6e2630545baea41c4f256db4387d38b3aa496f","modified":1687482361646},{"_id":"source/_posts/RESTful-API.md","hash":"45b9aa84f1412ce5070add910723efe20eb320ee","modified":1687482382431},{"_id":"source/_posts/React-版-Postman.md","hash":"761d4b3ffb4964079e91dfd7c0ed1016d13fc0af","modified":1687482375867},{"_id":"source/_posts/PostgreSQL-快速入门.md","hash":"9e088a9ad709c38e0471f32eaeda101d07772f6d","modified":1691402432625},{"_id":"source/_posts/Webscoket-核心.md","hash":"dfb48619b7ef9f73eb144d0c8e0b5654460432ef","modified":1687482409989},{"_id":"source/_posts/React-中的hook.md","hash":"f6f12469d841375f36973cfea912c2e5fff586a5","modified":1687482371397},{"_id":"source/_posts/三门问题和贝叶斯定理.md","hash":"56f410f5762e4c44e7fe39e2bcca1ae6d6051fa0","modified":1684643412291},{"_id":"source/_posts/如何看论文.md","hash":"4270174b65332cfe99c5755eb20a79e821b42fb4","modified":1697008825834},{"_id":"source/_posts/堆栈.md","hash":"a5b50d8caa878f4aa66d2342f18acacd3e559964","modified":1650016298000},{"_id":"source/_posts/基于大语言模型的医药问答研究.md","hash":"69e6c593f83383eeb0882ee71df20401824edb66","modified":1703572025322},{"_id":"source/_posts/如何阅读.md","hash":"9e4b1acb85502d6df94369bc5f1c52ab74b5b839","modified":1695982166108},{"_id":"source/_posts/将Gitee-Pages-转移到自己的服务器.md","hash":"e7d27c999847e92cf9908de0db652c4550a1a0e4","modified":1687482424154},{"_id":"source/_posts/数据结构基本概念.md","hash":"602982cb587330731810fa83efa2775d41a6d6d3","modified":1650017236000},{"_id":"source/_posts/线性表-数组.md","hash":"3965949b288c9fa1b3bdc915bbd8a60cc4c6df33","modified":1650016676000},{"_id":"source/_posts/线性表-链表.md","hash":"b01cb31f45d5bd80a3ff241f7253faff6647221f","modified":1650016300000},{"_id":"source/_posts/软件测试.md","hash":"457d795fe5345d348754137410e1c443d660717e","modified":1687482464899},{"_id":"source/_posts/队列.md","hash":"6ba244d0c37aab296f4e4c65d76eef0810849281","modified":1650017234000},{"_id":"source/link/index.md","hash":"839ce1b0fbf084aff2278be2b07dbb361c775c16","modified":1683446988711},{"_id":"source/_posts/自然语言处理学习规划.md","hash":"52af95669572c178929dfe69e7da1884b45e5790","modified":1696166280387},{"_id":"source/_posts/网络编程模型.md","hash":"23734fd05f8f35db94205d87792034ee99f0e544","modified":1687482439845},{"_id":"source/about/index.md","hash":"6fb104cc9cf232b0628131e21830ef4260464d81","modified":1683447175630},{"_id":"source/images/maomi.png","hash":"8e7f249cd7ba5bb364db5261411a0428d1bf2051","modified":1645352296000},{"_id":"source/tags/index.md","hash":"e60ee89079e464f3171e769cdb1a30477305af7c","modified":1687482564712},{"_id":"source/_posts/Archlinux-Mail/mail.jpg","hash":"61aa2b7dddca86be3761acbc14a5bcc45ad59fa0","modified":1680677753793},{"_id":"source/_posts/Docker-PostgreSQL/2023-08-02-19-36-43.png","hash":"41368ef77f47a0bc4c46daf59d86d78d8cb38569","modified":1690976203676},{"_id":"source/_posts/Docker-PostgreSQL/2023-08-02-19-37-22.png","hash":"c6852e818ace05a48243b0e66ebbfffc85bf92d1","modified":1690976242668},{"_id":"source/_posts/Docker-PostgreSQL/2023-08-02-19-44-15.png","hash":"f3afb04989ada323dce36b736a7d15ef20cffd39","modified":1690976655927},{"_id":"source/_posts/Docker-PostgreSQL/2023-08-02-19-46-38.png","hash":"380846f153139366643327053981e9e85feb31a9","modified":1690976798075},{"_id":"source/_posts/Docker-Oracle-12c/logs.png","hash":"41c1572adf4dc9d4426606fa25b08e3f45886258","modified":1665977382450},{"_id":"source/_posts/GraphQL/2023-06-21-20-17-07.png","hash":"1bd251919c75f182c8907ad7dcce7aff3a0c2b9f","modified":1687349827121},{"_id":"source/_posts/GraphQL-Apollo/2023-06-23-09-26-28.png","hash":"c09d972f46b0d79d7d6dab97f6f022f0a0dbe262","modified":1687483588534},{"_id":"source/_posts/KeyCloak/2023-08-02-17-57-00.png","hash":"37841fd5c8f375b49600949d49e3902ff8efa1c9","modified":1690970220890},{"_id":"source/_posts/KeyCloak/2023-08-02-18-02-37.png","hash":"a55f67fb96a626b6231041058e775d49c462d4f5","modified":1690970557693},{"_id":"source/_posts/KeyCloak/2023-08-02-18-03-23.png","hash":"9e87b0b61f51887d8703b528860f846a025e4174","modified":1690970603888},{"_id":"source/_posts/KeyCloak/2023-08-02-18-04-00.png","hash":"b855539d55fdb8634e157f3066e6cbb3157b0f08","modified":1690970640269},{"_id":"source/_posts/Linux-小技巧/2023-06-12-18-11-54.png","hash":"9604dc44664edf9789e948f44aa5e9fec5e62ff7","modified":1686564714120},{"_id":"source/_posts/Linux-期末复习/2023-06-12-19-25-43.png","hash":"129d3e46472d8d448fde9503faa244f05d06a0c6","modified":1686569143815},{"_id":"source/_posts/Linux-期末复习/2023-06-12-19-25-52.png","hash":"3ea571d2943e754fc906e96aa67a8538a9ab82e3","modified":1686569152831},{"_id":"source/_posts/Linux-权限/2023-05-21-13-15-56.png","hash":"ea48583aa096806a3911e3450ac82d21396639b7","modified":1684646156097},{"_id":"source/_posts/Linux-权限/2023-05-21-13-19-41.png","hash":"573ebd8938e784c5c3c8b381fd08121a24732e28","modified":1684646381719},{"_id":"source/_posts/Linux-权限/2023-05-21-13-40-02.png","hash":"2ea66d17194ac5b07ee046ba1394f4ade9965a72","modified":1684647602797},{"_id":"source/_posts/Linux-权限/2023-05-21-13-45-20.png","hash":"92c24ad876d6b4db0849cd6e4217e38f1a2e2ea0","modified":1684647920904},{"_id":"source/_posts/Linux-计划任务/2023-05-22-17-07-46.png","hash":"7794e0ab671c0c89145a8548af0be2e037a9e068","modified":1684746466597},{"_id":"source/_posts/Linux-计划任务/2023-05-22-17-08-24.png","hash":"93408b34be9c28ad3b7a6e8ea942809b80af8447","modified":1684746505002},{"_id":"source/_posts/Linux-计划任务/2023-05-22-17-11-14.png","hash":"8c0bf9ad2a21796fe75b6c5b3d6bfdeac047f21c","modified":1684746674644},{"_id":"source/_posts/Linux-计划任务/2023-05-22-17-11-34.png","hash":"d72da24a87b0cd59c86405dea404f221887621c1","modified":1684746694204},{"_id":"source/_posts/MongoDB/2023-06-10-20-54-19.png","hash":"85a6279b036fdf1d307aa7f33f54172596dfa80c","modified":1686401659516},{"_id":"source/_posts/MongoDB/2023-06-10-21-02-13.png","hash":"02715dccda385d05b4a87e7da4aa58f0e1b8b6f7","modified":1686402133837},{"_id":"source/_posts/MongoDB/2023-06-10-21-02-34.png","hash":"0496abad066f992441a5a71b84684f04197abd1e","modified":1686402154601},{"_id":"source/_posts/MongoDB/2023-06-10-21-02-58.png","hash":"0a5b5903c64f03a0d7398e6a79d95455f189765f","modified":1686402178067},{"_id":"source/_posts/Oracle-DBA/2023-05-07-17-15-34.png","hash":"aac348603973c80eac7aac5e8ab2b492326f8ea7","modified":1683450934209},{"_id":"source/_posts/Oracle-DBA/2023-05-07-17-21-09.png","hash":"163495c077dac5af0d1f0a357ffabf92adcd45a9","modified":1683451270020},{"_id":"source/_posts/Oracle-DBA/2023-05-07-17-44-18.png","hash":"c181a48fd10612e232d8da98afdc92e7674cf5d7","modified":1683452659068},{"_id":"source/_posts/Oracle-DBA/2023-05-07-18-03-58.png","hash":"32af74cbea330d8b469eb71920d1b7fa82cf5928","modified":1683453838120},{"_id":"source/_posts/Oracle-DBA/2023-05-07-18-04-36.png","hash":"18ec8bb198012002c8a97d3a4d38a58a9cc9fd9b","modified":1683453877018},{"_id":"source/_posts/Oracle-Log-File/P%.png","hash":"2821bdb3f5fd129e67ecde62e2f471df0de362d7","modified":1680612530928},{"_id":"source/_posts/Oracle-Log-File/P3.png","hash":"758f487d464440608074cec98a24eedbe1bf6b63","modified":1680612348242},{"_id":"source/_posts/Oracle-Log-File/P4.png","hash":"a1415ebef91301e39f42fd5a643a5a2da860e513","modified":1680612440247},{"_id":"source/_posts/Oracle-Log-File/P6.png","hash":"b3887c6942048f55aed6679ea26ad97a8435668c","modified":1680612679588},{"_id":"source/_posts/Oracle-Log-File/Picture2.png","hash":"a78a427aaad22f84b940096cdc17f31ca13690ff","modified":1680611491179},{"_id":"source/_posts/RESTful-API/2023-06-21-21-23-36.png","hash":"b1dfa258c7b2191353d10a25d9a52ec78a0bbd5e","modified":1687353816720},{"_id":"source/_posts/RHEL-YUM-本地源配置/2023-05-18-10-10-50.png","hash":"f616d39430185c6ad94649f668a7ac2efe94b94b","modified":1684375850568},{"_id":"source/_posts/RHEL-YUM-本地源配置/2023-05-18-10-15-20.png","hash":"55e50fda178a3579240c358e912f22cd8773e21b","modified":1684376120443},{"_id":"source/_posts/RHEL-YUM-本地源配置/2023-05-18-10-28-51.png","hash":"31d997dfb8cc4f1f192c547fae7d1c0f915e4651","modified":1684376931682},{"_id":"source/_posts/RHEL-YUM-本地源配置/2023-05-18-10-45-28.png","hash":"99afc7cf251fafa84a7ade9384475e21d386b46c","modified":1684377928047},{"_id":"source/_posts/RHEL-RPM-软件包管理/2023-05-18-10-39-54.png","hash":"3cdb5a93dfb5610ace60f850b84d9a2afbf598c9","modified":1684377594114},{"_id":"source/_posts/RHEL-RPM-软件包管理/2023-05-18-10-41-18.png","hash":"ce28acaaa7c973f5889f6adb010597372d080dea","modified":1684377678507},{"_id":"source/_posts/RHEL-RPM-软件包管理/2023-05-18-10-46-24.png","hash":"64307c37cfd125e92bbd146fbfc3f6228cbe17f0","modified":1684377984065},{"_id":"source/_posts/RHEL-RPM-软件包管理/2023-05-18-11-02-55.png","hash":"ab80e5f89929c91b0143fdb1ccd0130976eeefe3","modified":1684378975767},{"_id":"source/_posts/RHEL-RPM-软件包管理/2023-05-18-11-04-40.png","hash":"aead873ef2bef1f4209fb83f3a5a7c8068cc514a","modified":1684379080247},{"_id":"source/_posts/RHEL-RPM-软件包管理/2023-05-18-11-07-13.png","hash":"11c8bc2e10396bb77826e1ee0d80b2293de780a8","modified":1684379233454},{"_id":"source/_posts/RHEL-RPM-软件包管理/2023-05-18-11-08-52.png","hash":"00e60791df0aa75c98f559889dda230aa48d22d3","modified":1684379333037},{"_id":"source/_posts/RHEL-RPM-软件包管理/2023-05-18-11-13-57.png","hash":"6cc6eb50b2dfb664bb18595c498ff2c8cfb87093","modified":1684379637853},{"_id":"source/_posts/RHEL-RPM-软件包管理/2023-05-18-11-09-38.png","hash":"e21fa58b83cd8c5cb8ae2abe177cc8e2304f415a","modified":1684379378872},{"_id":"source/_posts/RHEL-RPM-软件包管理/2023-05-18-11-15-25.png","hash":"404af0fb3ca99409109c863a08ff679381a4bfe2","modified":1684379725575},{"_id":"source/_posts/RHEL-RPM-软件包管理/2023-05-18-11-16-17.png","hash":"fbc59272221865de918cb130498ba5686881e60c","modified":1684379777990},{"_id":"source/_posts/React-Websocket-实现网络聊天室/2023-06-09-16-16-42.png","hash":"088ef5823453798cc59a2102926d86587f8b8aeb","modified":1686298602873},{"_id":"source/_posts/React-中的hook/2023-06-04-17-08-49.png","hash":"4c9a37beb68006655e8513aae12d094e08dd388d","modified":1685869729684},{"_id":"source/_posts/将Gitee-Pages-转移到自己的服务器/2023-05-22-19-24-53.png","hash":"9ab15c679747c27ca31adaa8eea9043cd65add74","modified":1684754693899},{"_id":"source/_posts/将Gitee-Pages-转移到自己的服务器/2023-05-22-19-50-03.png","hash":"c9724a2437028d9cb645b9849825912212a6ae03","modified":1684756203882},{"_id":"source/_posts/将Gitee-Pages-转移到自己的服务器/2023-05-22-19-30-02.png","hash":"c73db86c0d6abdfade130b5e4faba7a880f1c61b","modified":1684755002404},{"_id":"source/_posts/将Gitee-Pages-转移到自己的服务器/2023-05-22-19-50-32.png","hash":"781199c35307cddde534ce43a220fb161a9a9a0c","modified":1684756232590},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-40-16.png","hash":"8f9dda2e907cfcdc230c84ff7c131829022b21a3","modified":1686307216807},{"_id":"source/_posts/Java-基础.md","hash":"d9218c447459f37ccc646b3dd23b3ee646d699ff","modified":1681002064752},{"_id":"source/images/IMG_20211223_131849.jpg","hash":"13a5d72e03f0289991cec51d869616edeeb29f25","modified":1640236746000},{"_id":"source/images/alipay.jpg","hash":"b8c24253f4f9b662364a069b98bbf2a8981281e5","modified":1645353010000},{"_id":"source/_posts/Archlinux-Mail/2023-04-04_21-56.png","hash":"0c393f8f5b5b0ef76bf588fb7958fb3331219b59","modified":1680616621180},{"_id":"source/_posts/Docker-PostgreSQL/2023-08-02-20-01-25.png","hash":"7a9c2ea1b53c962d1bf974ec0c11783b19cadae5","modified":1690977685191},{"_id":"source/_posts/KeyCloak/2023-08-02-18-03-04.png","hash":"976fbd36b1d365250b32cc27779440e496da5ec4","modified":1690970584941},{"_id":"source/_posts/KeyCloak/2023-08-02-18-04-29.png","hash":"b132896375dc60f070595c98f306930003b93a9d","modified":1690970669214},{"_id":"source/_posts/KeyCloak/2023-08-02-18-04-49.png","hash":"4a6b308fbc54ea99f6cfa447823d1c36e9bbcb83","modified":1690970689098},{"_id":"source/_posts/Linux-命令/2023-06-24-11-21-34.png","hash":"e56b919635fefadb11b5c7ccbd9a2e07ebf2a9b2","modified":1687576894304},{"_id":"source/_posts/MongoDB/2023-06-10-21-22-01.png","hash":"639a8750cecaaee6d7ea25b9f5895606299652ec","modified":1686403321777},{"_id":"source/_posts/Oracle-DBA/2023-05-07-17-11-39.png","hash":"1ac96877fa6576ee27349662a3805e96669e1ff2","modified":1683450699196},{"_id":"source/_posts/Oracle-Log-File/Picture1.png","hash":"611015e2f796528a8b3e13c993294a8234dd8dc3","modified":1680610800005},{"_id":"source/_posts/RHEL-RPM-软件包管理/2023-05-18-11-05-26.png","hash":"57bd81f91730b3fac4d8a09c257c50b47428b753","modified":1684379126085},{"_id":"source/_posts/RHEL-RPM-软件包管理/2023-05-18-11-05-53.png","hash":"3fdad9932b58f6801f216b9135a8e73091953f33","modified":1684379153659},{"_id":"source/_posts/RHEL-RPM-软件包管理/2023-05-18-11-18-14.png","hash":"a17ada048e766f7a99f9a1de31fca511740a1235","modified":1684379894735},{"_id":"source/_posts/React-Websocket-实现网络聊天室/2023-06-11-20-41-29.png","hash":"5367da526259770b8043e7ada9b317939b87c4d0","modified":1686487289350},{"_id":"source/_posts/将Gitee-Pages-转移到自己的服务器/2023-05-22-19-27-41.png","hash":"63b06aaad22e76e5639d54a0aa412665324c2193","modified":1684754861847},{"_id":"source/images/wechatpay.png","hash":"7052239bd5d72709b3905b388d656e36a0a9b1d2","modified":1645353020000},{"_id":"source/_posts/Docker-PostgreSQL/2023-08-02-19-44-54.png","hash":"6ff548fb89a6d4a121a3bb3921ff202cfc90deef","modified":1690976694744},{"_id":"source/_posts/RHEL-YUM-本地源配置/2023-05-18-10-04-26.png","hash":"5634f1f1d93a42304700ab61bfe9ef136c02c255","modified":1684375466930},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-44-26.png","hash":"f5218442d44f239d9fd1f10ee3a5ad0c5c885045","modified":1686307466961},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-44-45.png","hash":"71c44cc09651d972c7e1e6f6963dc4a8e59ab3fe","modified":1686307485768},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-46-36.png","hash":"48911dcdbfdb274e1603f19247c910d8193e9c36","modified":1686307596048},{"_id":"source/_posts/网络编程模型/2023-05-22-21-59-46.png","hash":"0104fd2ea77ee90214ec6a02ca76bc1beaf8c8fa","modified":1684763986673},{"_id":"source/_posts/网络编程模型/2023-05-22-22-02-22.png","hash":"d07cb15c16d56c9fbe65c5aad52cece06fb21832","modified":1684764142782},{"_id":"source/_posts/网络编程模型/2023-05-22-22-12-09.png","hash":"75a0c897ad1f72e06b8599b5d7297723e65819a1","modified":1684764729803},{"_id":"source/_posts/网络编程模型/2023-05-22-22-25-16.png","hash":"4217f288d105690f94ea72e39ea0498465937f62","modified":1684765516682},{"_id":"source/_posts/网络编程模型/2023-05-22-22-19-44.png","hash":"aa0f6748c98d334bf9c326bf47e6780ace1622e3","modified":1684765184065},{"_id":"source/_posts/网络编程模型/2023-05-22-22-29-46.png","hash":"d15f54edf4aa87524daf9fd36ca6fd9921592d5f","modified":1684765786154},{"_id":"source/_posts/网络编程模型/2023-05-22-22-34-09.png","hash":"f1a5fefb9e42e7dc010979d2773ec1fa5e30d9ee","modified":1684766049810},{"_id":"themes/butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1680673742828},{"_id":"themes/butterfly/README.md","hash":"c34579d9d7239828ce7d8abc235521eaf4ea9e17","modified":1680673742828},{"_id":"themes/butterfly/README_CN.md","hash":"25cfdbaf9883095322259c4f49bd08f0a7cffa0e","modified":1680673742828},{"_id":"themes/butterfly/_config.yml","hash":"57cea25e4e64a096ec04a9b0b0ea42bb25f5de5f","modified":1681616959114},{"_id":"themes/butterfly/package-lock.json","hash":"b3089e55ea14d3603f959532e183033e874f2cbd","modified":1703769709275},{"_id":"themes/butterfly/package.json","hash":"bd5ad5964ea343cb62368e372e0d09e70ce54bc0","modified":1680673742835},{"_id":"themes/butterfly/plugins.yml","hash":"20741046d3c58d059ab0e503e7d569a7fda1baf1","modified":1680673742835},{"_id":"themes/butterfly/languages/default.yml","hash":"9b9c5b8158d1296c64a354e57a3b0b809575a77d","modified":1680673742828},{"_id":"themes/butterfly/languages/en.yml","hash":"e0e52a7ba52fa70c3557f00ddf681f66098ac8b7","modified":1680673742828},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"5b9ce449bd4f7e3ba46131546e75976efe31a1f6","modified":1680673742828},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"0b994863599d62c56d2bc50d20b94332ed9d98cf","modified":1680673742828},{"_id":"themes/butterfly/layout/archive.pug","hash":"a0c034c2d319320a54046805e80b58dc48b7e233","modified":1680673742828},{"_id":"themes/butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":1680673742828},{"_id":"themes/butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1680673742835},{"_id":"themes/butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":1680673742835},{"_id":"themes/butterfly/layout/post.pug","hash":"fc9f45252d78fcd15e4a82bfd144401cba5b169a","modified":1680673742835},{"_id":"themes/butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1680673742835},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"fc468a93a64c7a3e408fbac921c9f5a5a8f32027","modified":1680673742825},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"7dfe7189ffeaebb6db13842237f8e124649bea3d","modified":1680673742825},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"996640605ed1e8e35182f0fd9a60a88783b24b03","modified":1680673742825},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1680673742825},{"_id":"themes/butterfly/.github/workflows/stale.yml","hash":"ac62b989b5550c756e1986fcc68f243170705383","modified":1680673742828},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":1680673742828},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"c63de7ad306943115696555457d58e8bb043f4bf","modified":1680673742828},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":1680673742828},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"a8720f01c429c839149d7f5991c49541011f4796","modified":1680673742828},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"12a1e92257855cc1a6a48d8eb442472459c88b5e","modified":1680673742828},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"4c85de4dea4dca4e5088097a79bd6d7009cbf8ef","modified":1680673742828},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"83a1f2d31792206d432e8e2041e284d88327c02e","modified":1680673742828},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"8d39473ed112d113674a0f689f63fae06c72abd2","modified":1680673742828},{"_id":"themes/butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1680673742835},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"5351e0bc09e6b5b3f6d30f333a2520626a28ca3a","modified":1680673742835},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"f5cbd41c6afb49639b59ab5ad659da0d3b7f25dd","modified":1680673742835},{"_id":"themes/butterfly/scripts/events/init.js","hash":"3ace1139182d3d367149db138990891427f3356e","modified":1680673742835},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"9819f0996234fbd80d6c50a9e526c56ebf22588d","modified":1680673742835},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"f28bab0b9d0d80a45ffdca8fa26021c67d14fa04","modified":1683446448272},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"932df912976261929f809b7dbd4eb473e7787345","modified":1680673742835},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"d1a5b26c8239189493c1f7d8fd0b8f8ec3d11eaa","modified":1680673742835},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1680673742835},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":1680673742835},{"_id":"themes/butterfly/scripts/helpers/findArchiveLength.js","hash":"9ea86bd7a3c3fca3324f70b1cd4d9e42f9efb08d","modified":1680673742835},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"867b839501d5bbf7ab79da991952d8926f8d8805","modified":1680673742835},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"4e412f6a3e2a9a4855a0c110ace6c1b1c3a88938","modified":1680673742835},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"4677be4175da6800c0b3b8c1614e593f73df8831","modified":1680673742835},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"91d954f6e9fe6e571eb8ec9f8996294b2dc3688e","modified":1680673742835},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"ab62919fa567b95fbe14889517abda649991b1ee","modified":1680673742835},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"9457b64392014044e9d6fc9145651e940944378a","modified":1680673742835},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"396c3ab1bcf1c7693ad7e506eadd13016c6769b6","modified":1680673742835},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":1680673742835},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"03b2afef41d02bd1045c89578a02402c28356006","modified":1680673742835},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"531808a290b8bdd66bac2faab211ada8e9646a37","modified":1680673742835},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"d51812b43924f1bbf413c67499510dd125022005","modified":1680673742835},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"300eb779588bf35a1b687d9f829d866074b707e3","modified":1680673742835},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"6c6e415623d0fd39da016d9e353bb4f5cca444f5","modified":1680673742835},{"_id":"themes/butterfly/source/css/index.styl","hash":"861998e4ac67a59529a8245a9130d68f826c9c12","modified":1680673742838},{"_id":"themes/butterfly/source/css/var.styl","hash":"30abbb8eed880d51f61f336064d93abd709e0115","modified":1680673742838},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1680673742838},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1680673742841},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1680673742841},{"_id":"themes/butterfly/source/js/main.js","hash":"05c825962e365af62096d3f1b4d7c9ee1b5fc2f5","modified":1680673742841},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"76d0c5c172cae44b34b0bd3125fd068b2c3cbd4a","modified":1680673742841},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"8aa8d799aedbfd811195b84a451bc4b6e2647c12","modified":1680673742828},{"_id":"themes/butterfly/source/js/utils.js","hash":"85bae4adcec638fa3ef1e734414025c6b2c90f3c","modified":1680673742841},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"67e1c3b48e4ca7ee0b2c76d3ca7476b9883cf105","modified":1680673742828},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"428e3c39053b44760463682848f2eae238ff9d64","modified":1680673742828},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"7df90c8e432e33716517ab918b0a125bc284041b","modified":1680673742828},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1680673742828},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":1680673742828},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"a03b3ddc06e7aa9fd07eea0d5f97c8d5addd2315","modified":1680673742828},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1680673742828},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1680673742828},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"0c1551ef80bbece550fe520d91e21f083cbc14fe","modified":1680673742828},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"31346a210f4f9912c5b29f51d8f659913492f388","modified":1680673742828},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"f61659aa457d1a2d1baa3a13157996cfac4d6609","modified":1680673742828},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"9698f22751778dde063cbfbd01c59ca4462ccd85","modified":1680673742828},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"0d953e51d04a9294a64153c89c20f491a9ec42d4","modified":1680673742828},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"c4b86758f3a3deae4612c31d725814c8753a7804","modified":1680673742828},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"131f344d68b4c241d6e03849b243ee792fcd3cea","modified":1680673742828},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"278855fe4399489bdef0393697bb87420e671fe9","modified":1680673742828},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"90554c2ca5ba946f4c02e1bc5fe2859cef1b1594","modified":1680673742828},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"294df7a74cf36af3a7030274d8b745979c1c8c70","modified":1680673742828},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1680673742828},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1680673742828},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"a59bcfbb609a099c1bf5be40b7a94e7e2b06fc4a","modified":1680673742828},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"9621991359e22b14049346f1cf87bdedc94edf5a","modified":1680673742828},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"ebecba46a5f4efe1c98a386df06c56e26fbd07b9","modified":1680673742828},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"864869c43fe5b5bb6f4ac6b13dd4bfb16ea47550","modified":1680673742828},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"c7cfade2b160380432c47eef4cd62273b6508c58","modified":1680673742831},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"6528e86656906117a1af6b90e0349c2c4651d5e1","modified":1680673742831},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"0f024e36b8116118233e10118714bde304e01e12","modified":1680673742831},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"fc0b09068009edd4026d90a669608cbe211aeecf","modified":1680673742831},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"ffb9ea15a2b54423cd4cd441e2d061b8233e9b58","modified":1680673742831},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"35223531f8e086d57caec2d17d45ddbcb39deb74","modified":1680673742831},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1680673742831},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":1680673742835},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1680673742835},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"e37468e63db2a0ac09b65d21b7de3e62425bb455","modified":1680673742835},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1680673742835},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1680673742835},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"6d93564a8bd13cb9b52ee5e178db3bcbf18b1bc6","modified":1680673742835},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"3057a2f6f051355e35d3b205121af8735100eacf","modified":1680673742835},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"e5aac7b28ed4123d75797263c64e74ac547945bc","modified":1680673742835},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"51df61ddcaf5b9723efa15f178979f2f0caac413","modified":1680673742835},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1680673742835},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"35ce167c5a275211bfc1fa3d49adfde5b404d98f","modified":1680673742835},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"010e3d548ababca2280c4fc4168d9a4a1ee4f536","modified":1680673742835},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"7fdfbe8f97b41588bbd5c6f27e7e85a881b28954","modified":1680673742835},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"4f5636c326f794417296bdb6bcfd6a8b207d69d8","modified":1680673742835},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"2f95e99b8351fbecd9037a1bbdc3fee9d6ea8a77","modified":1680673742835},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":1680673742838},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"2099b302735146031334f7e133a3a888aeb935dd","modified":1680673742838},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"f9a5d3f1fc5ed0ed2ee4c1eaa58ed650d11ddebd","modified":1680673742838},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"c61dccca690d486c3d9c29cf028d87b777385141","modified":1680673742838},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"83553445fbc92cad4ad220fbd87b4c3db958c32a","modified":1680673742838},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"45d71dbb2a61e30989851ba29bb8be7094574d14","modified":1680673742838},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"ac2aeee9926f75b2a0098efe1c114126987430f2","modified":1680673742838},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"fb9f78bfbb79579f1d752cb73fb6d25c8418e0fd","modified":1680673742838},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"23db4e3cab68fed78601fc8a9c39ff5753bcc716","modified":1680673742838},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":1680673742838},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"c5cfed620708807a48076b5ee59b0ba84e29aa80","modified":1680673742838},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"bbc884d6b2158a833b77a1bbc07248e17874b22e","modified":1680673742838},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"631ca35a38bc4ac052e9caf47508ff1f99842fc7","modified":1680673742838},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"7ff0c456fae2717ddbbb9f8fae2734d449a5448b","modified":1680673742838},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"56389925671c7e8da0c033769421269e15e8f795","modified":1680673742838},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"ffea9e7c1543edcf080381e7b99828954c2f2cef","modified":1680673742838},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"c9e98027f2dd730ce389c2047f62ebb748955fcf","modified":1680673742838},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":1680673742838},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":1680673742838},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"a58d35d698885f1034dedbe99f7dbc1a801412c6","modified":1680673742838},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"98d755b686ee833e9da10afaa40c4ec2bd66c19a","modified":1680673742838},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"bb470da1d2ba292cae0a30a252f82f37c4130d2d","modified":1680673742838},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":1680673742838},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"bd0f7363244eff39a12d1ea658325ddaf5916ccd","modified":1680673742838},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"39d61cbe0c1e937f83ba3b147afaa29b4de2f87d","modified":1680673742838},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"dd021a44177e2184bbf26e5d2460938841bdb310","modified":1680673742838},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"45f0c32bdea117540f6b14ebac6450d7142bd710","modified":1680673742838},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"81ad85acf0e0fe7f9ee23c16a700e7154574d5dd","modified":1680673742838},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1680673742838},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1680673742838},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"ce489ca2e249e2a3cf71584e20d84bdb022e3475","modified":1680673742838},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":1680673742838},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"85ae91c83691ea4511f4277da1194a185251cc78","modified":1680673742838},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"bf9568444dd54e39dc59b461323dcd38942f27d9","modified":1680673742838},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"f071156d439556e7463ed4bc61ceee87170d5d08","modified":1680673742838},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1680673742838},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"5f4294337c28324e088908ed0ceb237a2a360ae5","modified":1680673742841},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"5f2ddfd705a85c6a6d327ffcb51d530d8f167e52","modified":1680673742841},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"99d9b17668260b242749c16851d9ec1024d31899","modified":1680673742831},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":1680673742831},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"b2aadea7351fae8382b8c2a3b9de810d922b0ec1","modified":1680673742831},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"b2d274db84ef22fbd6d5ea8f4404821898934209","modified":1680673742831},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"001e8be47854b891efe04013c240c38fed4185eb","modified":1680673742831},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"58406a7a3bf45815769f652bf3ef81e57dcd07eb","modified":1680673742831},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"39427e107230a10790972349c9dd4c4f31d55eb7","modified":1680673742831},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"55acc455ca8e13211e3906cf78e487cc92accee5","modified":1680673742831},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"481cd5053bafb1a19f623554a27d3aa077ea59c3","modified":1680673742831},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"cfe63e7d26a6665df6aa32ca90868ad48e05ec04","modified":1680673742831},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"76634112c64023177260d1317ae39cef2a68e35f","modified":1680673742831},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"0611d9216f4c128ebdea4cc21454c3dc4a6398d5","modified":1680673742831},{"_id":"themes/butterfly/layout/includes/third-party/chat/gitter.pug","hash":"d1d2474420bf4edc2e43ccdff6f92b8b082143df","modified":1680673742831},{"_id":"themes/butterfly/layout/includes/third-party/chat/messenger.pug","hash":"ccb7d8ce3ded7364f9a15334b68ad73869fca757","modified":1680673742831},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"24a926756c2300b9c561aaab6bd3a71fdd16e16d","modified":1680673742831},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"95738f110598f999d627234e78ff9e9decac1b9b","modified":1680673742831},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"8ec24c1939895ac0db2b2e8700bc9307b4ceb53c","modified":1680673742831},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"3ba842bf4801b2f115c2cfe5657f35a732ce589f","modified":1680673742831},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"591ef23c583690bd74af0cafb09af64ba5bd8151","modified":1680673742831},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"eefdaa94956adc7a3ca90dd8edcd70a7574b439c","modified":1680673742831},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"351fe25fbf02635b1f9e86e5e244c7d61f69baa7","modified":1680673742831},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"1c3a87393cb49915940c2dd206356c2a16549767","modified":1680673742831},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"00ed91c52939b9675b316137f854d13684c895a6","modified":1680673742831},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"e9bdf80d6796afc04eb809dbbe780d97f22c7fcd","modified":1680673742831},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":1680673742831},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"e18fbd88d8942e53e771f29b26209ab735c5c567","modified":1680673742831},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"a737046e730eb7264606ba0536218964044492f9","modified":1680673742831},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"e55b9c0f8ced231f47eb88bd7f4ec99f29c5c29d","modified":1680673742831},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"26ba1fc99117993087b1c6e02daa2626627d8eb1","modified":1680673742831},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"dfcbd9881be569ea420eff1a6b00e4f4dbe2138e","modified":1680673742831},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-43-47.png","hash":"01e0c0806e665f70db900996ad274a0ff62f930d","modified":1686307427416},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-47-53.png","hash":"facf6b39c2bf805927f1c18f9dc2dfec44f73eb9","modified":1686307673116},{"_id":"source/_posts/网络编程模型/2023-05-22-21-55-38.png","hash":"ee38b9082ab2d3e4b7d30a32703de8f163562a7b","modified":1684763738923},{"_id":"source/_posts/Docker-Oracle-12c/j1.png","hash":"44835e0fc11aaa0514617fc7a9eb1bc7b210275f","modified":1666612714485},{"_id":"source/_posts/Linux-Vim/2023-05-07-16-24-23.png","hash":"232e49c66fbe69ede5407e03abc65eca0c06479d","modified":1683447864074},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-44-13.png","hash":"a9d9cb882f7cca1bf40f45c58b3eef90695ce763","modified":1686307453777},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-46-31.png","hash":"df7dc785d39a95655f749c45531a18549e8a0de7","modified":1686307591578},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-47-48.png","hash":"73b150c5e94cd339133c69c944624dd15569f346","modified":1686307668116},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1680673742831},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"0ea633b11b357afa50c200290d19c32467d58a1d","modified":1680673742831},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"e6ebbe137dd86b6d8750a6843e350fcd16030981","modified":1680673742831},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"8e33aca36a4d3ae9e041ba05ced8eff56ae38f77","modified":1680673742831},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"e846ddfe4a63b15d1416f6055f5756af5e3da7c6","modified":1680673742831},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"04b2a5882e789a988e41d45abe606f0617b08e38","modified":1680673742831},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"4ec0642f2d5444acfab570a6f8c7868e7ff43fde","modified":1680673742831},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"233907dd7f5b5f33412701d2ccffbc0bbae8707b","modified":1680673742831},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"ab167c00da4506f591b96f0591bf5bd214a26d4b","modified":1680673742831},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"d19e1c2c0a50f0e4547d71a17b9be88e8152f17c","modified":1680673742831},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"441d87067d87d9996b53b25c05b8e620bd94b027","modified":1680673742831},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"662268ed67c85120091a3f076b0fe78cf9614a62","modified":1680673742831},{"_id":"themes/butterfly/layout/includes/third-party/search/docsearch.pug","hash":"1c3e101445c5571ba998ce293d3984319df1b3b0","modified":1680673742831},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"a99a41334387ee9a46c6f8e8212331a29a10d159","modified":1680673742831},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"15928e341f5cedaa24a06d6ead16b980a5c6d69c","modified":1680673742831},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1680673742831},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":1680673742831},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"c7dd2b2ae9b23aa0a60fffd7df9e9f76ef52033e","modified":1680673742831},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4c4a9c15215ae8ac5eadb0e086b278f76db9ee92","modified":1680673742831},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":1680673742835},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1680673742835},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":1680673742835},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":1680673742838},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"5dc2e0bcae9a54bfb9bdcc82d02ae5a3cf1ca97d","modified":1680673742835},{"_id":"source/_posts/Linux-Vim/morden1.png","hash":"7be68664d7ea1fd926433817eb93520fb53d38cf","modified":1683448008379},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-45-59.png","hash":"54eaec4bd04d320f6e16bed6bb216d504b0c3c7a","modified":1686307559610},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-47-10.png","hash":"02cd5aa2a11e5af7f615e624d7164dd785b3e3c1","modified":1686307630432},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-45-47.png","hash":"2eaadc049f277abde089e7849f273994e4cb127f","modified":1686307547883},{"_id":"source/_posts/Archlinux-入门/arch.png","hash":"bd37e2f190c7aad7658350e1743a6637a7b14f29","modified":1683446717564},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-44-50.png","hash":"fc1fd1a4a0ba16c56f6af031553f4b5ceadba676","modified":1686307490561},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-44-04.png","hash":"eb23679b94b8a751e00f560d9414d210f9673aaf","modified":1686307444470},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-45-34.png","hash":"d0193e259dbe65d28544368d7d0ed672a58f18f2","modified":1686307534063},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-46-22.png","hash":"ab699bd27cb6e11830fd09f6bcb60e64f22c0d75","modified":1686307582284},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-41-35.png","hash":"da3c28d713ee9c999c124b9406ec3890aa4b8388","modified":1686307295366},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-42-30.png","hash":"e4919c15a796f0edce186b978aa46ddbc35b590e","modified":1686307350814},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-42-36.png","hash":"0e0d56d73534648bfeb129a2ffcb5c66173f7fe9","modified":1686307356184},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-45-09.png","hash":"f52bc6b6be719eb839c930938eb34c6501561144","modified":1686307509965},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-45-27.png","hash":"0864c36d4d9c835fdcd63f0817c0473fa1719d62","modified":1686307527936},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-41-59.png","hash":"6c5ab3f1c83d9063c0f9bbbf4e45934f56fcabcf","modified":1686307319663},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-47-14.png","hash":"5ce8d39721e004ff956a2ed96f3d9e34fc6e9a9e","modified":1686307634905},{"_id":"source/_posts/Linux-Vim/entry1.png","hash":"45715eaed7488b4412a3744cbc73a9730c7ca64a","modified":1683447993335},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-46-59.png","hash":"b656a5df110a4ace0ce4ca0daae56880eb6b6f42","modified":1686307619102},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-47-29.png","hash":"581ac50c8d1e7de4b4962c2d8c18d88b7d5a0878","modified":1686307650049},{"_id":"source/_posts/Linux-Vim/text1.png","hash":"028713e967478956af0649f0b7a611434ba2d33b","modified":1683448015113},{"_id":"source/images/p1.jpg","hash":"6094df274f6e002ec7ad4bd16f3b7148a2ccdd4e","modified":1663754207153},{"_id":"source/_posts/Linux-Vim/advanced1.png","hash":"847b6d5c2e01351a7118a01aed86eae232e74ed3","modified":1683448001799},{"_id":"source/images/p2.jpg","hash":"03e49f9311949d68153b12adf96acb37213fb222","modified":1663754207283},{"_id":"source/images/banner.jpg","hash":"319482ab10908432d5d240e4ab06cecdc90e7b29","modified":1663754206876},{"_id":"public/js/markmap.js","hash":"a8484baa1bf9eabeff2bcd84e79e4591d9b967ad","modified":1703773641884},{"_id":"public/about/index.html","hash":"98d1b605daec11089f5673bfff868d972cf6f51f","modified":1703773641884},{"_id":"public/2023/12/28/Neo4j/index.html","hash":"922b5fdb3c53b7e445cf6bfe23f97b68bec93a48","modified":1703773641884},{"_id":"public/link/index.html","hash":"8a7b4df7691e608fc1b6ba313d324e5e1b838118","modified":1703773641884},{"_id":"public/tags/index.html","hash":"ba9727199f93ebbb5cf826954095467b8371b381","modified":1703773641884},{"_id":"public/2023/12/28/Git-FQA/index.html","hash":"5b98c3f8752ce26efcc7a9c5afa3e2c798e2d61c","modified":1703773641884},{"_id":"public/2023/12/26/Fast-API/index.html","hash":"934aa358c59d7472add1855959d894eb6ceb33a2","modified":1703773641884},{"_id":"public/2023/12/15/基于大语言模型的医药问答研究/index.html","hash":"17ee9829f401d35e5ce30fc57c346393999039a5","modified":1703773641884},{"_id":"public/2023/12/07/Love-Story-App/index.html","hash":"7b175fdc3a97ec040d3f751caebb28ff5a30ad16","modified":1703773641884},{"_id":"public/2023/10/11/如何看论文/index.html","hash":"46deb5ff91be421036ec1c36361ed2c26869dd1f","modified":1703773641884},{"_id":"public/2023/10/01/自然语言处理学习规划/index.html","hash":"fdda9b0f0123d240ff667e952a1e9bfcc21777f4","modified":1703773641884},{"_id":"public/2023/09/29/如何阅读/index.html","hash":"35a0bf67e75e622564036297c74557fa49de9941","modified":1703773641884},{"_id":"public/2023/08/02/PostgreSQL-快速入门/index.html","hash":"5151f3ac011bea245a402abecc70814b46e89797","modified":1703773641884},{"_id":"public/2023/08/02/Docker-PostgreSQL/index.html","hash":"7fb0cfc3c7c7f03aebe3026de98af3683f62ffca","modified":1703773641884},{"_id":"public/2023/08/02/KeyCloak/index.html","hash":"22dfb1ed5a5bb2befe226e5790d2348c66734fc8","modified":1703773641884},{"_id":"public/2023/07/10/Docker-Chevereto-图床/index.html","hash":"826b7fbb641d27b6ad30d1341deed2387cb458a3","modified":1703773641884},{"_id":"public/2023/07/07/Docker-Draw-io/index.html","hash":"2189d307a08ca574eb79a8490ce35f4ec2716f80","modified":1703773641884},{"_id":"public/2023/07/05/Docker-Elasticsearch/index.html","hash":"80c7cf3f88ea3a51c3b8a0910701b6123b4636d4","modified":1703773641884},{"_id":"public/2023/07/04/Docker-MySQL/index.html","hash":"551bccf491522b7d5b48f80eb0769e2a24916b2f","modified":1703773641884},{"_id":"public/2023/07/01/Blender/index.html","hash":"4df5d8d92ac4d74bfca56890ba8239eb4889bc32","modified":1703773641884},{"_id":"public/2023/06/23/GraphQL-Apollo/index.html","hash":"d86d047f13737a12130085ba7ef7968f95e5d4ab","modified":1703773641884},{"_id":"public/2023/06/21/RESTful-API/index.html","hash":"7a32059c3102c10a7d47035512047b15e1e4e70c","modified":1703773641884},{"_id":"public/2023/06/21/GraphQL/index.html","hash":"88afc3076915019824c288e00d83660a65d0a465","modified":1703773641884},{"_id":"public/2023/06/13/软件测试/index.html","hash":"4101c53d2ba34cd04262b2632440b54165400b92","modified":1703773641884},{"_id":"public/2023/06/12/Linux-期末复习/index.html","hash":"403fc4ae7f91a750e18f10ce98b99051847312f6","modified":1703773641884},{"_id":"public/2023/06/12/Linux-小技巧/index.html","hash":"2c5041da6c5a349e3dd2303121ac10a90db42efc","modified":1703773641884},{"_id":"public/2023/06/11/Webscoket-核心/index.html","hash":"3a561602ddfad80c270b8d618839f2f013e70863","modified":1703773641884},{"_id":"public/2023/06/10/MongoDB/index.html","hash":"20d9a409b988d0f9e002b8a44540b9a9c8bf11e5","modified":1703773641884},{"_id":"public/2023/06/08/Archlinux-BspWM-外接显示器/index.html","hash":"2fb72ab6fa20593519a210e597c5aebbcace842b","modified":1703773641884},{"_id":"public/2023/06/08/Archlinux-触摸板调教/index.html","hash":"01ea4e3b944e72e96659df053971d3330d7ea6a4","modified":1703773641884},{"_id":"public/2023/06/06/React-版-Postman/index.html","hash":"79c1bae8cbbef496479962c564fa5df99375ccaf","modified":1703773641884},{"_id":"public/2023/06/04/React-中的hook/index.html","hash":"640edd290bc5c8e5c1eab817e3a939f20c934af7","modified":1703773641884},{"_id":"public/2023/06/02/Java-更多-特性/index.html","hash":"7ed5f8144f310e21ab42754fda334c9e3e14d51d","modified":1703773641884},{"_id":"public/2023/06/02/Java-语言特性/index.html","hash":"41b0ea1aba12c44b7db81d4d3f5c7cbae1f6bca9","modified":1703773641884},{"_id":"public/2023/06/01/Linux-三剑客/index.html","hash":"ef2088794cb2caeb1341f4e5f71cdeb9255edbd9","modified":1703773641884},{"_id":"public/2023/05/28/Java-数据库框架/index.html","hash":"037368bf3c84407ca7f829b9bea45f7a774fbe36","modified":1703773641884},{"_id":"public/2023/05/28/Java实现文件上传下载/index.html","hash":"c859d77bc25c1c9fa0dbed663548da25be44cd3a","modified":1703773641884},{"_id":"public/2023/05/22/网络编程模型/index.html","hash":"b42acf269f8e919768382a89305c46d049f9f355","modified":1703773641884},{"_id":"public/2023/05/22/将Gitee-Pages-转移到自己的服务器/index.html","hash":"56763250156101597305ad6c57cfeb0fcea58da5","modified":1703773641884},{"_id":"public/2023/05/22/Linux-系统管理/index.html","hash":"d2a89ce403a0e3cae509793bdad04fd8a09bf3ce","modified":1703773641884},{"_id":"public/2023/05/21/Linux-AT-T-汇编/index.html","hash":"43f6a05525fc530d41452d5d98e479bbedda4044","modified":1703773641884},{"_id":"public/2023/05/20/三门问题和贝叶斯定理/index.html","hash":"db3217da77c7d6cc32501e7cc24daf3966291f2c","modified":1703773641884},{"_id":"public/2023/05/18/Netty-框架入门/index.html","hash":"5520954fabc8c18102e72a90ae6ea467b3dde8cb","modified":1703773641884},{"_id":"public/2023/05/18/RHEL-RPM-软件包管理/index.html","hash":"81376e4e1e755cbf607190681abc8c96dc93871c","modified":1703773641884},{"_id":"public/2023/05/18/RHEL-YUM-本地源配置/index.html","hash":"a67f0a001b981e2c44dfb6e51c2a9011ad4d980c","modified":1703773641884},{"_id":"public/2023/05/08/ORACLE-PLSQL-触发器/index.html","hash":"3097321cdfae979f05d84b7ecb3fdba5a3445860","modified":1703773641884},{"_id":"public/2023/05/08/Linux-权限/index.html","hash":"cbb0375da867135d9bd21f418ad5facbad45ab39","modified":1703773641884},{"_id":"public/2023/05/01/ORACLE-PLSQL-包/index.html","hash":"c3b52cd192a6739be8dd6eecfd536d36b97a4ea2","modified":1703773641884},{"_id":"public/2023/04/26/ORACLE-PLSQL-函数/index.html","hash":"db0aa61105a6af3b7e6902f2d6ffc91f0e06bfa1","modified":1703773641884},{"_id":"public/2023/04/26/ORACLE-PLSQL-存储过程/index.html","hash":"f5e770309d95664fd16c5dbedf132d5b8a3157a5","modified":1703773641884},{"_id":"public/2023/04/25/ORACLE-PLSQL-游标/index.html","hash":"62d949c4a7c2e00314948294187ec4297d74407a","modified":1703773641884},{"_id":"public/2023/04/24/Linux-Vim/index.html","hash":"5500d6fda65c0c0885cb5ce046fc75cbf3d5993d","modified":1703773641884},{"_id":"public/2023/04/15/Java-多线程/index.html","hash":"1730d71a2e1ed726fb06be3211f7b2023d8fbba2","modified":1703773641884},{"_id":"public/2023/04/12/ORACLE-PLSQL-基础/index.html","hash":"26d68398f656fafa61ebef1c236a5c06fcf4269b","modified":1703773641884},{"_id":"public/2023/04/12/Oracle-User/index.html","hash":"3973ed6bb1c5e95a33ecf692e7a8d561f41ce36a","modified":1703773641884},{"_id":"public/2023/04/09/Oracle-Object/index.html","hash":"8c7563eb060492e6861969ea4693c6dba9f9a682","modified":1703773641884},{"_id":"public/2023/04/07/OpenGauss-Database/index.html","hash":"60e06e9ade7cf7bf537312be36ef8c82a9c929ec","modified":1703773641884},{"_id":"public/2023/04/04/Archlinux-Mail/index.html","hash":"8e7b7f17f6abf0f7342608be00f5f545b3d0d651","modified":1703773641884},{"_id":"public/2023/04/03/Oracle-Log-File/index.html","hash":"2b78d82c426a7120b7ecd0e28ced6ab58e5732d5","modified":1703773641884},{"_id":"public/2023/03/24/Linux-User/index.html","hash":"72bfe10faaf090d1a2295cf4553424f7a8a21ff1","modified":1703773641884},{"_id":"public/2023/03/24/Docker-Oracle-11g/index.html","hash":"8d09ef3eb8e5111c339deff8722677ef804ec055","modified":1703773641884},{"_id":"public/2023/03/24/Oracle-DBA/index.html","hash":"a80f8af5e840928ffdd6053e3db3b26be1e8c01b","modified":1703773641884},{"_id":"public/2023/03/13/Linux 命令/index.html","hash":"797e4a7bb80333b27d2765a44c96f3f60496fc32","modified":1703773641884},{"_id":"public/2023/03/06/Jenkins-Gitlab/index.html","hash":"450d5e6f620a128acd029dec316f53d320e158a7","modified":1703773641884},{"_id":"public/2023/02/09/React-Websocket-实现网络聊天室/index.html","hash":"d7b4a9c4950687fd0f1c5640b01999692060b70e","modified":1703773641884},{"_id":"public/2023/02/08/Archlinux-软件/index.html","hash":"42d87e5242fe4866784b64edf7158a865cbae5fe","modified":1703773641884},{"_id":"public/2023/01/08/Linux-使用-Windows-字体/index.html","hash":"20244fe343440b44ff9165cfa80894e612e9bb68","modified":1703773641884},{"_id":"public/2022/09/24/Linux-计划任务/index.html","hash":"3e7dd9eddf3abd7f2caa1ec481758e5472b23554","modified":1703773641884},{"_id":"public/2022/09/24/OracleDB-最佳实践/index.html","hash":"c122733a61214af284efda19a0eb34b43ba1048d","modified":1703773641884},{"_id":"public/2022/09/24/Docker-Oracle-12c/index.html","hash":"e23137deef6fa6733b683fd8dc8899cbcb4f5181","modified":1703773641884},{"_id":"public/2022/09/24/Linux-环境变量/index.html","hash":"78c94365596ee2717f7632f532422bab1aaeabdc","modified":1703773641884},{"_id":"public/2022/09/24/Archlinux-入门/index.html","hash":"2ebd9486235936c5655f2ff0b0bc22780ff1f63c","modified":1703773641884},{"_id":"public/2022/09/24/Docker-最佳实践/index.html","hash":"a6c32fd50cfd9ef7f2da4aceb9533c43ca7d7dab","modified":1703773641884},{"_id":"public/2022/08/08/Git-自动部署网站/index.html","hash":"d187e562aa743a3cceb8ebc5370fd92b0a5b1ded","modified":1703773641884},{"_id":"public/2022/04/15/数据结构基本概念/index.html","hash":"c340bcb69dfca197b47f750a9a69838b623f529c","modified":1703773641884},{"_id":"public/2022/04/13/队列/index.html","hash":"c5277cdee9746f3e61f673ff86e1afabb7d0694a","modified":1703773641884},{"_id":"public/2022/04/12/堆栈/index.html","hash":"2665dad5285b7fa9b45f5ca9948048699e6ab65d","modified":1703773641884},{"_id":"public/2022/03/09/线性表-数组/index.html","hash":"74f95c60eaa77e86bc505a21768f917d9c57500d","modified":1703773641884},{"_id":"public/2022/03/09/线性表-链表/index.html","hash":"2220fd2cd2fa55fffb0c75ddd7cd02bc07374be8","modified":1703773641884},{"_id":"public/2022/01/28/Java-基础/index.html","hash":"616a63cd4040c0a1e97df84657718a7a8d6b8c25","modified":1703773641884},{"_id":"public/archives/index.html","hash":"d6990fcaab2d13845014525017a28131a5ea015e","modified":1703773641884},{"_id":"public/archives/page/2/index.html","hash":"b2275fbc75934d002a5b0738ca79fbdc6298d8f5","modified":1703773641884},{"_id":"public/archives/page/3/index.html","hash":"1ee0507e58ee6e7521146b16a3df43da0c99f3e1","modified":1703773641884},{"_id":"public/archives/page/4/index.html","hash":"0bc39a91486efd16e1758d2597eedb683904b1e9","modified":1703773641884},{"_id":"public/archives/page/6/index.html","hash":"35b8276f4597d41e524b86a7dc9da14f77714248","modified":1703773641884},{"_id":"public/archives/page/5/index.html","hash":"196073620c7acd77d8cbbe75df99c2bb8332fe37","modified":1703773641884},{"_id":"public/archives/page/7/index.html","hash":"88b5de2773b923040eb3bf28fb19a665934dd7ed","modified":1703773641884},{"_id":"public/archives/2022/index.html","hash":"0eac34a35fe956efd3b443481d49ed55753dffea","modified":1703773641884},{"_id":"public/archives/page/8/index.html","hash":"2b8dd3951515fe0181ebc9e2f14824b7728b20c2","modified":1703773641884},{"_id":"public/archives/2022/page/2/index.html","hash":"5d68641f8d5eecd3721b713e644b256bbf0e00c4","modified":1703773641884},{"_id":"public/archives/2022/01/index.html","hash":"8fd5ff58a638d788b5d53ea50af83ab1b2dfbad5","modified":1703773641884},{"_id":"public/archives/2022/03/index.html","hash":"0c590660d53b6b9c5dee5e3d404f62016d18896c","modified":1703773641884},{"_id":"public/archives/2022/04/index.html","hash":"44f16bb34cb040ae3660f5a7e95c3f90187ed465","modified":1703773641884},{"_id":"public/archives/2022/08/index.html","hash":"12630fcb2e00d0595533a625924271879273802a","modified":1703773641884},{"_id":"public/archives/2022/09/index.html","hash":"52e8ce1d24001f2dac4e6ef2f3ea2ad5a55ac949","modified":1703773641884},{"_id":"public/archives/2023/index.html","hash":"1fef725112ca93068227b50f030d9a7b55eaf200","modified":1703773641884},{"_id":"public/archives/2023/page/2/index.html","hash":"28f20e19ceb458b252b12e45eed3a012b719aab8","modified":1703773641884},{"_id":"public/archives/2023/page/3/index.html","hash":"e3c13c8d43d6c5e5be61732a26d574b3584e5544","modified":1703773641884},{"_id":"public/archives/2023/page/4/index.html","hash":"74279977e1f488cb5ee115a6f80db345a9e8e782","modified":1703773641884},{"_id":"public/archives/2023/page/5/index.html","hash":"5174158ab51f60b0a45e7cdc29c1fd3121cd328f","modified":1703773641884},{"_id":"public/archives/2023/01/index.html","hash":"c67c61127c6f4578afed64a9f26f76b382af0fe1","modified":1703773641884},{"_id":"public/archives/2023/page/7/index.html","hash":"3c13168ec450db930cc66203db5ef858385cc2e3","modified":1703773641884},{"_id":"public/archives/2023/page/6/index.html","hash":"773205fbf6e9f0778fb870d8db6f6ad5a0fac984","modified":1703773641884},{"_id":"public/archives/2023/02/index.html","hash":"11ef2dc0a04ab282ab254bb7e2e91681fc296c40","modified":1703773641884},{"_id":"public/archives/2023/03/index.html","hash":"0802b2167c4b81a1eb56f71a401346d536d3f6d6","modified":1703773641884},{"_id":"public/archives/2023/04/index.html","hash":"fcacaabd2598a53e7d77151268d6bc94c89b9080","modified":1703773641884},{"_id":"public/archives/2023/04/page/2/index.html","hash":"12294736922394a7d3371ccbb93661dbfa98bba1","modified":1703773641884},{"_id":"public/archives/2023/05/index.html","hash":"a29c4a0ef8cf0cbefe0430128728e5ef9f1d6a51","modified":1703773641884},{"_id":"public/archives/2023/05/page/2/index.html","hash":"8091926cb82d416d2160ca386b54042306a05364","modified":1703773641884},{"_id":"public/archives/2023/06/index.html","hash":"a2b68e452f41761a7e5121da85a36f1fbbfe75ca","modified":1703773641884},{"_id":"public/archives/2023/06/page/2/index.html","hash":"66ee385118e8760089e644e718f8e4c4d98d9ca8","modified":1703773641884},{"_id":"public/archives/2023/07/index.html","hash":"c87f1faa71f8ea884c08f836b104ccf8463fc153","modified":1703773641884},{"_id":"public/archives/2023/08/index.html","hash":"bd011b666d8d3b2a100d85eb20445a1f44d49613","modified":1703773641884},{"_id":"public/archives/2023/09/index.html","hash":"a1ffa6f25557df9ca3a4948daa65d29daa61260a","modified":1703773641884},{"_id":"public/archives/2023/10/index.html","hash":"41197e227a0d3acb156d6ac9acc6c3b5e905bf2f","modified":1703773641884},{"_id":"public/archives/2023/12/index.html","hash":"926959b5bdfcd54354bcc1df2e0c32ce8e531142","modified":1703773641884},{"_id":"public/index.html","hash":"3a866e7468ac0724284581851e1b17a44a013bc3","modified":1703773641884},{"_id":"public/page/2/index.html","hash":"6d0574884cc4d1d2a13e9d4759da5473f103beab","modified":1703773641884},{"_id":"public/page/3/index.html","hash":"220d14e0134c3130a7192544bef770f88e046a5b","modified":1703773641884},{"_id":"public/page/4/index.html","hash":"39a8de13f4edc2921d8efd546c604d95d8171725","modified":1703773641884},{"_id":"public/page/5/index.html","hash":"120bba4f8f26532f7f6ccce107127f3b5890dfbb","modified":1703773641884},{"_id":"public/page/6/index.html","hash":"6c0119851924b5bfd0f9cb218d932d9da5f821f8","modified":1703773641884},{"_id":"public/page/7/index.html","hash":"1ce7bbc573dc5083e49595457233cf51a3a6f385","modified":1703773641884},{"_id":"public/page/8/index.html","hash":"1edeb7b9e71361bdd2f7a9756cc1bd97fd277589","modified":1703773641884},{"_id":"public/tags/Linux/index.html","hash":"98d27f466bc5d5ff1ca85193cca750020e15a8c8","modified":1703773641884},{"_id":"public/tags/Linux/page/2/index.html","hash":"1d09fa65a67a0857ccb300f1f4127925b0e10261","modified":1703773641884},{"_id":"public/tags/Blender/index.html","hash":"299ab162f1d482df5dcf6b59bc30d0928b8676a7","modified":1703773641884},{"_id":"public/tags/3D/index.html","hash":"bc113c058ba56a503e4b98d4ca6151bd8c795584","modified":1703773641884},{"_id":"public/tags/Docker/index.html","hash":"b2799946e9a6ad34996a9c98ed6ca196e05b5018","modified":1703773641884},{"_id":"public/tags/Chevereto-图床/index.html","hash":"75540773b5f1d24414f13c592c8757015df07513","modified":1703773641884},{"_id":"public/tags/Draw-io/index.html","hash":"be7cd3e69b4ab5071a80d454facc2a18efabc2f6","modified":1703773641884},{"_id":"public/tags/Elasticsearch/index.html","hash":"e4b642978e3c68573d371f6d00f8a5225fd4a26a","modified":1703773641884},{"_id":"public/tags/Database/index.html","hash":"045cb1150952db27d5995c08660e4ab20eabb53b","modified":1703773641884},{"_id":"public/tags/Database/page/2/index.html","hash":"740d87e30d9da661fef240360b5859055c3f79fb","modified":1703773641884},{"_id":"public/tags/Oracle/index.html","hash":"8b152f90d1f7e5ca8452a3dc10147a3686917505","modified":1703773641884},{"_id":"public/tags/Oracle/page/2/index.html","hash":"67cc21b841634e7d900db9de0ef934682a0d3d0e","modified":1703773641884},{"_id":"public/tags/Docker-MySQL/index.html","hash":"e2b38b9a1586553b53f905ca28c143837b3bc162","modified":1703773641884},{"_id":"public/tags/PostgreSQL/index.html","hash":"2b25cb6aae0c1ae363b3afef7a326ade90c85d42","modified":1703773641884},{"_id":"public/tags/FastAPI/index.html","hash":"c032e35a48a7aebc1d5ecdd000289631fc415cbf","modified":1703773641884},{"_id":"public/tags/Python/index.html","hash":"1909aec76b50218f3ba132530e8808cec4a109dd","modified":1703773641884},{"_id":"public/tags/Git/index.html","hash":"e60be0825b814d34acc8a7d34d689d39fa375536","modified":1703773641884},{"_id":"public/tags/GraphQL/index.html","hash":"dd73fd132af553cfa502f9eeaa09b6a26246246e","modified":1703773641884},{"_id":"public/tags/JavaScript/index.html","hash":"dec6b9d6fa0eb58b72f1d1efca85adc2941d1d43","modified":1703773641884},{"_id":"public/tags/Java/index.html","hash":"6bb7331baa4ce75f116ef3ec7b8b7504c5688e76","modified":1703773641884},{"_id":"public/tags/Jenkins/index.html","hash":"190233feb0807f158d673809319bf53935636feb","modified":1703773641884},{"_id":"public/tags/Gitlab/index.html","hash":"57ecf86bcbcb568b2b2b1f2eff6259f964d065a3","modified":1703773641884},{"_id":"public/tags/Identity/index.html","hash":"f6663567867c4e0440b073f6953cf537ba425ca7","modified":1703773641884},{"_id":"public/tags/AT-T/index.html","hash":"fb73e1ab26a10d051c72b85042605849588fc583","modified":1703773641884},{"_id":"public/tags/KeyCloak/index.html","hash":"e73374b15be88ce3b9518328d62a8312232beda4","modified":1703773641884},{"_id":"public/tags/ASM/index.html","hash":"fc1291f266fc34905dd1c8d9301245a1f0db5303","modified":1703773641884},{"_id":"public/tags/Vim/index.html","hash":"7d88a9dfac6ba80589c40cd8d6c95dde879f7385","modified":1703773641884},{"_id":"public/tags/App/index.html","hash":"bc78d3ea57bce3931e0f435b2940a850eda7b851","modified":1703773641884},{"_id":"public/tags/Android/index.html","hash":"2903230b9fe79c1f65317d9eb1454acc03a6b278","modified":1703773641884},{"_id":"public/tags/Neo4j/index.html","hash":"fb90e8f0a6b0b29e998f9f411826c79bd8d8622d","modified":1703773641884},{"_id":"public/tags/Netty/index.html","hash":"0b06ea903133d878b336f7e75ee1fb77bd91a156","modified":1703773641884},{"_id":"public/tags/PL-SQL/index.html","hash":"d3b05026bb8664aea7ffcf87ef2c37b4891e86f1","modified":1703773641884},{"_id":"public/tags/OpenGauss/index.html","hash":"fa3cd97ea9cc98ed520a56373df711db5641b633","modified":1703773641884},{"_id":"public/tags/RESTful/index.html","hash":"e8c40cbeb7269768e0a8134dedc6cd25ccc52254","modified":1703773641884},{"_id":"public/tags/LINUX/index.html","hash":"bb98e877610b962177719ec9a17c945c14f95e43","modified":1703773641884},{"_id":"public/tags/WebScoket/index.html","hash":"76db7ff79b4eb31f2bad4f4dc925c935762b69df","modified":1703773641884},{"_id":"public/tags/React/index.html","hash":"c2241d6acdb0bdb8019c725f03b38caa538320d4","modified":1703773641884},{"_id":"public/tags/WebSocket/index.html","hash":"4f1bece457f4798a7a6591519ef502453476bf01","modified":1703773641884},{"_id":"public/tags/基于大语言模型的医药问答研究/index.html","hash":"81b64147ccd9f85762204557b9da8f09fcb2617c","modified":1703773641884},{"_id":"public/tags/Data-Structure/index.html","hash":"915ff5a589e4dae7543b4d101d5b5bda2ac5c60d","modified":1703773641884},{"_id":"public/tags/如何看论文/index.html","hash":"22b188f9cbfab9a272f7609bd448e307bfcfc30b","modified":1703773641884},{"_id":"public/tags/如何阅读/index.html","hash":"993666644e65dcf1f485dc753d8aebc512960fcc","modified":1703773641884},{"_id":"public/tags/网络/index.html","hash":"2ec0b6821b844fcedc9713213a860a746be7c813","modified":1703773641884},{"_id":"public/tags/自然语言处理学习规划/index.html","hash":"649c1842013ed5b15e49a6312ea8432b6bc6b2b4","modified":1703773641884},{"_id":"public/tags/软件测试/index.html","hash":"a707890f9074c11c293eb66216dd26dfc8b6cd9f","modified":1703773641884},{"_id":"public/2023/06/06/React-版-Postman/2023-06-09-18-42-16.png","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1703773641884},{"_id":"public/2023/06/06/React-版-Postman/2023-06-09-18-43-56.png","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1703773641884},{"_id":"public/2023/06/06/React-版-Postman/2023-06-09-18-45-40.png","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1703773641884},{"_id":"public/2023/06/06/React-版-Postman/2023-06-09-18-45-53.png","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1703773641884},{"_id":"public/2023/06/06/React-版-Postman/2023-06-09-18-46-52.png","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1703773641884},{"_id":"public/2023/06/06/React-版-Postman/2023-06-09-18-47-20.png","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1703773641884},{"_id":"public/2023/06/21/RESTful-API/2023-06-21-21-23-36.png","hash":"b1dfa258c7b2191353d10a25d9a52ec78a0bbd5e","modified":1703773641884},{"_id":"public/2023/05/18/RHEL-RPM-软件包管理/2023-05-18-11-09-38.png","hash":"e21fa58b83cd8c5cb8ae2abe177cc8e2304f415a","modified":1703773641884},{"_id":"public/2023/05/18/RHEL-RPM-软件包管理/2023-05-18-11-13-57.png","hash":"6cc6eb50b2dfb664bb18595c498ff2c8cfb87093","modified":1703773641884},{"_id":"public/2023/05/18/RHEL-RPM-软件包管理/2023-05-18-11-15-25.png","hash":"404af0fb3ca99409109c863a08ff679381a4bfe2","modified":1703773641884},{"_id":"public/2023/08/02/KeyCloak/2023-08-02-18-02-37.png","hash":"a55f67fb96a626b6231041058e775d49c462d4f5","modified":1703773641884},{"_id":"public/2023/08/02/KeyCloak/2023-08-02-18-03-23.png","hash":"9e87b0b61f51887d8703b528860f846a025e4174","modified":1703773641884},{"_id":"public/2023/08/02/KeyCloak/2023-08-02-18-04-00.png","hash":"b855539d55fdb8634e157f3066e6cbb3157b0f08","modified":1703773641884},{"_id":"public/2023/06/12/Linux-期末复习/2023-06-12-19-25-43.png","hash":"129d3e46472d8d448fde9503faa244f05d06a0c6","modified":1703773641884},{"_id":"public/2023/06/12/Linux-小技巧/2023-06-12-18-11-54.png","hash":"9604dc44664edf9789e948f44aa5e9fec5e62ff7","modified":1703773641884},{"_id":"public/2023/06/12/Linux-期末复习/2023-06-12-19-25-52.png","hash":"3ea571d2943e754fc906e96aa67a8538a9ab82e3","modified":1703773641884},{"_id":"public/2023/05/08/Linux-权限/2023-05-21-13-15-56.png","hash":"ea48583aa096806a3911e3450ac82d21396639b7","modified":1703773641884},{"_id":"public/2023/05/08/Linux-权限/2023-05-21-13-40-02.png","hash":"2ea66d17194ac5b07ee046ba1394f4ade9965a72","modified":1703773641884},{"_id":"public/2023/05/08/Linux-权限/2023-05-21-13-19-41.png","hash":"573ebd8938e784c5c3c8b381fd08121a24732e28","modified":1703773641884},{"_id":"public/2023/05/08/Linux-权限/2023-05-21-13-45-20.png","hash":"92c24ad876d6b4db0849cd6e4217e38f1a2e2ea0","modified":1703773641884},{"_id":"public/2022/09/24/Linux-计划任务/2023-05-22-17-08-24.png","hash":"93408b34be9c28ad3b7a6e8ea942809b80af8447","modified":1703773641884},{"_id":"public/2022/09/24/Linux-计划任务/2023-05-22-17-07-46.png","hash":"7794e0ab671c0c89145a8548af0be2e037a9e068","modified":1703773641884},{"_id":"public/2023/05/18/RHEL-RPM-软件包管理/2023-05-18-11-16-17.png","hash":"fbc59272221865de918cb130498ba5686881e60c","modified":1703773641884},{"_id":"public/2023/02/09/React-Websocket-实现网络聊天室/2023-06-09-16-16-42.png","hash":"088ef5823453798cc59a2102926d86587f8b8aeb","modified":1703773641884},{"_id":"public/2023/06/04/React-中的hook/2023-06-04-17-08-49.png","hash":"4c9a37beb68006655e8513aae12d094e08dd388d","modified":1703773641884},{"_id":"public/2023/06/06/React-版-Postman/2023-06-09-18-40-16.png","hash":"8f9dda2e907cfcdc230c84ff7c131829022b21a3","modified":1703773641884},{"_id":"public/2023/05/22/将Gitee-Pages-转移到自己的服务器/2023-05-22-19-24-53.png","hash":"9ab15c679747c27ca31adaa8eea9043cd65add74","modified":1703773641884},{"_id":"public/2023/05/22/将Gitee-Pages-转移到自己的服务器/2023-05-22-19-30-02.png","hash":"c73db86c0d6abdfade130b5e4faba7a880f1c61b","modified":1703773641884},{"_id":"public/2023/05/22/将Gitee-Pages-转移到自己的服务器/2023-05-22-19-50-03.png","hash":"c9724a2437028d9cb645b9849825912212a6ae03","modified":1703773641884},{"_id":"public/2023/05/22/将Gitee-Pages-转移到自己的服务器/2023-05-22-19-50-32.png","hash":"781199c35307cddde534ce43a220fb161a9a9a0c","modified":1703773641884},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1703773641884},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1703773641884},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1703773641884},{"_id":"public/images/maomi.png","hash":"8e7f249cd7ba5bb364db5261411a0428d1bf2051","modified":1703773641884},{"_id":"public/2023/04/04/Archlinux-Mail/mail.jpg","hash":"61aa2b7dddca86be3761acbc14a5bcc45ad59fa0","modified":1703773641884},{"_id":"public/2022/09/24/Docker-Oracle-12c/logs.png","hash":"41c1572adf4dc9d4426606fa25b08e3f45886258","modified":1703773641884},{"_id":"public/2023/08/02/Docker-PostgreSQL/2023-08-02-19-36-43.png","hash":"41368ef77f47a0bc4c46daf59d86d78d8cb38569","modified":1703773641884},{"_id":"public/2023/08/02/Docker-PostgreSQL/2023-08-02-19-37-22.png","hash":"c6852e818ace05a48243b0e66ebbfffc85bf92d1","modified":1703773641884},{"_id":"public/2023/08/02/Docker-PostgreSQL/2023-08-02-19-44-15.png","hash":"f3afb04989ada323dce36b736a7d15ef20cffd39","modified":1703773641884},{"_id":"public/2023/08/02/Docker-PostgreSQL/2023-08-02-19-46-38.png","hash":"380846f153139366643327053981e9e85feb31a9","modified":1703773641884},{"_id":"public/2023/06/23/GraphQL-Apollo/2023-06-23-09-26-28.png","hash":"c09d972f46b0d79d7d6dab97f6f022f0a0dbe262","modified":1703773641884},{"_id":"public/2023/06/21/GraphQL/2023-06-21-20-17-07.png","hash":"1bd251919c75f182c8907ad7dcce7aff3a0c2b9f","modified":1703773641884},{"_id":"public/2023/08/02/KeyCloak/2023-08-02-17-57-00.png","hash":"37841fd5c8f375b49600949d49e3902ff8efa1c9","modified":1703773641884},{"_id":"public/2022/09/24/Linux-计划任务/2023-05-22-17-11-14.png","hash":"8c0bf9ad2a21796fe75b6c5b3d6bfdeac047f21c","modified":1703773641884},{"_id":"public/2022/09/24/Linux-计划任务/2023-05-22-17-11-34.png","hash":"d72da24a87b0cd59c86405dea404f221887621c1","modified":1703773641884},{"_id":"public/2023/06/10/MongoDB/2023-06-10-20-54-19.png","hash":"85a6279b036fdf1d307aa7f33f54172596dfa80c","modified":1703773641884},{"_id":"public/2023/06/10/MongoDB/2023-06-10-21-02-13.png","hash":"02715dccda385d05b4a87e7da4aa58f0e1b8b6f7","modified":1703773641884},{"_id":"public/2023/06/10/MongoDB/2023-06-10-21-02-34.png","hash":"0496abad066f992441a5a71b84684f04197abd1e","modified":1703773641884},{"_id":"public/2023/06/10/MongoDB/2023-06-10-21-02-58.png","hash":"0a5b5903c64f03a0d7398e6a79d95455f189765f","modified":1703773641884},{"_id":"public/2023/03/24/Oracle-DBA/2023-05-07-17-15-34.png","hash":"aac348603973c80eac7aac5e8ab2b492326f8ea7","modified":1703773641884},{"_id":"public/2023/03/24/Oracle-DBA/2023-05-07-17-21-09.png","hash":"163495c077dac5af0d1f0a357ffabf92adcd45a9","modified":1703773641884},{"_id":"public/2023/03/24/Oracle-DBA/2023-05-07-17-44-18.png","hash":"c181a48fd10612e232d8da98afdc92e7674cf5d7","modified":1703773641884},{"_id":"public/2023/03/24/Oracle-DBA/2023-05-07-18-03-58.png","hash":"32af74cbea330d8b469eb71920d1b7fa82cf5928","modified":1703773641884},{"_id":"public/2023/03/24/Oracle-DBA/2023-05-07-18-04-36.png","hash":"18ec8bb198012002c8a97d3a4d38a58a9cc9fd9b","modified":1703773641884},{"_id":"public/2023/04/03/Oracle-Log-File/P%.png","hash":"2821bdb3f5fd129e67ecde62e2f471df0de362d7","modified":1703773641884},{"_id":"public/2023/04/03/Oracle-Log-File/P3.png","hash":"758f487d464440608074cec98a24eedbe1bf6b63","modified":1703773641884},{"_id":"public/2023/04/03/Oracle-Log-File/P4.png","hash":"a1415ebef91301e39f42fd5a643a5a2da860e513","modified":1703773641884},{"_id":"public/2023/04/03/Oracle-Log-File/P6.png","hash":"b3887c6942048f55aed6679ea26ad97a8435668c","modified":1703773641884},{"_id":"public/2023/04/03/Oracle-Log-File/Picture2.png","hash":"a78a427aaad22f84b940096cdc17f31ca13690ff","modified":1703773641884},{"_id":"public/2023/05/18/RHEL-YUM-本地源配置/2023-05-18-10-10-50.png","hash":"f616d39430185c6ad94649f668a7ac2efe94b94b","modified":1703773641884},{"_id":"public/2023/05/18/RHEL-YUM-本地源配置/2023-05-18-10-15-20.png","hash":"55e50fda178a3579240c358e912f22cd8773e21b","modified":1703773641884},{"_id":"public/2023/05/18/RHEL-YUM-本地源配置/2023-05-18-10-28-51.png","hash":"31d997dfb8cc4f1f192c547fae7d1c0f915e4651","modified":1703773641884},{"_id":"public/2023/05/18/RHEL-YUM-本地源配置/2023-05-18-10-45-28.png","hash":"99afc7cf251fafa84a7ade9384475e21d386b46c","modified":1703773641884},{"_id":"public/2023/05/18/RHEL-RPM-软件包管理/2023-05-18-10-39-54.png","hash":"3cdb5a93dfb5610ace60f850b84d9a2afbf598c9","modified":1703773641884},{"_id":"public/2023/05/18/RHEL-RPM-软件包管理/2023-05-18-10-41-18.png","hash":"ce28acaaa7c973f5889f6adb010597372d080dea","modified":1703773641884},{"_id":"public/2023/05/18/RHEL-RPM-软件包管理/2023-05-18-10-46-24.png","hash":"64307c37cfd125e92bbd146fbfc3f6228cbe17f0","modified":1703773641884},{"_id":"public/2023/05/18/RHEL-RPM-软件包管理/2023-05-18-11-02-55.png","hash":"ab80e5f89929c91b0143fdb1ccd0130976eeefe3","modified":1703773641884},{"_id":"public/2023/05/18/RHEL-RPM-软件包管理/2023-05-18-11-04-40.png","hash":"aead873ef2bef1f4209fb83f3a5a7c8068cc514a","modified":1703773641884},{"_id":"public/2023/05/18/RHEL-RPM-软件包管理/2023-05-18-11-07-13.png","hash":"11c8bc2e10396bb77826e1ee0d80b2293de780a8","modified":1703773641884},{"_id":"public/2023/05/18/RHEL-RPM-软件包管理/2023-05-18-11-08-52.png","hash":"00e60791df0aa75c98f559889dda230aa48d22d3","modified":1703773641884},{"_id":"public/2023/08/02/KeyCloak/2023-08-02-18-03-04.png","hash":"976fbd36b1d365250b32cc27779440e496da5ec4","modified":1703773641884},{"_id":"public/2023/08/02/KeyCloak/2023-08-02-18-04-49.png","hash":"4a6b308fbc54ea99f6cfa447823d1c36e9bbcb83","modified":1703773641884},{"_id":"public/2023/08/02/KeyCloak/2023-08-02-18-04-29.png","hash":"b132896375dc60f070595c98f306930003b93a9d","modified":1703773641884},{"_id":"public/2023/05/18/RHEL-RPM-软件包管理/2023-05-18-11-18-14.png","hash":"a17ada048e766f7a99f9a1de31fca511740a1235","modified":1703773641884},{"_id":"public/2023/02/09/React-Websocket-实现网络聊天室/2023-06-11-20-41-29.png","hash":"5367da526259770b8043e7ada9b317939b87c4d0","modified":1703773641884},{"_id":"public/2023/05/22/将Gitee-Pages-转移到自己的服务器/2023-05-22-19-27-41.png","hash":"63b06aaad22e76e5639d54a0aa412665324c2193","modified":1703773641884},{"_id":"public/images/IMG_20211223_131849.jpg","hash":"13a5d72e03f0289991cec51d869616edeeb29f25","modified":1703773641884},{"_id":"public/images/alipay.jpg","hash":"b8c24253f4f9b662364a069b98bbf2a8981281e5","modified":1703773641884},{"_id":"public/css/index.css","hash":"cad37dfd416ad62623eaae297ee9d7e3f683929f","modified":1703773641884},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1703773641884},{"_id":"public/js/main.js","hash":"05c825962e365af62096d3f1b4d7c9ee1b5fc2f5","modified":1703773641884},{"_id":"public/js/tw_cn.js","hash":"76d0c5c172cae44b34b0bd3125fd068b2c3cbd4a","modified":1703773641884},{"_id":"public/js/utils.js","hash":"85bae4adcec638fa3ef1e734414025c6b2c90f3c","modified":1703773641884},{"_id":"public/js/search/algolia.js","hash":"5f4294337c28324e088908ed0ceb237a2a360ae5","modified":1703773641884},{"_id":"public/js/search/local-search.js","hash":"5f2ddfd705a85c6a6d327ffcb51d530d8f167e52","modified":1703773641884},{"_id":"public/2023/04/04/Archlinux-Mail/2023-04-04_21-56.png","hash":"0c393f8f5b5b0ef76bf588fb7958fb3331219b59","modified":1703773641884},{"_id":"public/2023/08/02/Docker-PostgreSQL/2023-08-02-20-01-25.png","hash":"7a9c2ea1b53c962d1bf974ec0c11783b19cadae5","modified":1703773641884},{"_id":"public/2023/06/10/MongoDB/2023-06-10-21-22-01.png","hash":"639a8750cecaaee6d7ea25b9f5895606299652ec","modified":1703773641884},{"_id":"public/2023/03/24/Oracle-DBA/2023-05-07-17-11-39.png","hash":"1ac96877fa6576ee27349662a3805e96669e1ff2","modified":1703773641884},{"_id":"public/2023/04/03/Oracle-Log-File/Picture1.png","hash":"611015e2f796528a8b3e13c993294a8234dd8dc3","modified":1703773641884},{"_id":"public/2023/05/18/RHEL-RPM-软件包管理/2023-05-18-11-05-26.png","hash":"57bd81f91730b3fac4d8a09c257c50b47428b753","modified":1703773641884},{"_id":"public/2023/05/18/RHEL-RPM-软件包管理/2023-05-18-11-05-53.png","hash":"3fdad9932b58f6801f216b9135a8e73091953f33","modified":1703773641884},{"_id":"public/2023/06/06/React-版-Postman/2023-06-09-18-44-26.png","hash":"f5218442d44f239d9fd1f10ee3a5ad0c5c885045","modified":1703773641884},{"_id":"public/2023/06/06/React-版-Postman/2023-06-09-18-44-45.png","hash":"71c44cc09651d972c7e1e6f6963dc4a8e59ab3fe","modified":1703773641884},{"_id":"public/2023/06/06/React-版-Postman/2023-06-09-18-46-36.png","hash":"48911dcdbfdb274e1603f19247c910d8193e9c36","modified":1703773641884},{"_id":"public/2023/05/22/网络编程模型/2023-05-22-21-59-46.png","hash":"0104fd2ea77ee90214ec6a02ca76bc1beaf8c8fa","modified":1703773641884},{"_id":"public/2023/05/22/网络编程模型/2023-05-22-22-02-22.png","hash":"d07cb15c16d56c9fbe65c5aad52cece06fb21832","modified":1703773641884},{"_id":"public/2023/05/22/网络编程模型/2023-05-22-22-12-09.png","hash":"75a0c897ad1f72e06b8599b5d7297723e65819a1","modified":1703773641884},{"_id":"public/2023/05/22/网络编程模型/2023-05-22-22-19-44.png","hash":"aa0f6748c98d334bf9c326bf47e6780ace1622e3","modified":1703773641884},{"_id":"public/2023/05/22/网络编程模型/2023-05-22-22-25-16.png","hash":"4217f288d105690f94ea72e39ea0498465937f62","modified":1703773641884},{"_id":"public/2023/05/22/网络编程模型/2023-05-22-22-29-46.png","hash":"d15f54edf4aa87524daf9fd36ca6fd9921592d5f","modified":1703773641884},{"_id":"public/images/wechatpay.png","hash":"7052239bd5d72709b3905b388d656e36a0a9b1d2","modified":1703773641884},{"_id":"public/2023/08/02/Docker-PostgreSQL/2023-08-02-19-44-54.png","hash":"6ff548fb89a6d4a121a3bb3921ff202cfc90deef","modified":1703773641884},{"_id":"public/2023/05/18/RHEL-YUM-本地源配置/2023-05-18-10-04-26.png","hash":"5634f1f1d93a42304700ab61bfe9ef136c02c255","modified":1703773641884},{"_id":"public/2023/06/06/React-版-Postman/2023-06-09-18-43-47.png","hash":"01e0c0806e665f70db900996ad274a0ff62f930d","modified":1703773641884},{"_id":"public/2023/06/06/React-版-Postman/2023-06-09-18-47-53.png","hash":"facf6b39c2bf805927f1c18f9dc2dfec44f73eb9","modified":1703773641884},{"_id":"public/2023/05/22/网络编程模型/2023-05-22-21-55-38.png","hash":"ee38b9082ab2d3e4b7d30a32703de8f163562a7b","modified":1703773641884},{"_id":"public/2023/05/22/网络编程模型/2023-05-22-22-34-09.png","hash":"f1a5fefb9e42e7dc010979d2773ec1fa5e30d9ee","modified":1703773641884},{"_id":"public/2023/04/24/Linux-Vim/2023-05-07-16-24-23.png","hash":"232e49c66fbe69ede5407e03abc65eca0c06479d","modified":1703773641884},{"_id":"public/2023/06/06/React-版-Postman/2023-06-09-18-44-13.png","hash":"a9d9cb882f7cca1bf40f45c58b3eef90695ce763","modified":1703773641884},{"_id":"public/2023/06/06/React-版-Postman/2023-06-09-18-46-31.png","hash":"df7dc785d39a95655f749c45531a18549e8a0de7","modified":1703773641884},{"_id":"public/2023/06/06/React-版-Postman/2023-06-09-18-47-48.png","hash":"73b150c5e94cd339133c69c944624dd15569f346","modified":1703773641884},{"_id":"public/2022/09/24/Docker-Oracle-12c/j1.png","hash":"44835e0fc11aaa0514617fc7a9eb1bc7b210275f","modified":1703773641884},{"_id":"public/2023/04/24/Linux-Vim/morden1.png","hash":"7be68664d7ea1fd926433817eb93520fb53d38cf","modified":1703773641884},{"_id":"public/2023/06/06/React-版-Postman/2023-06-09-18-45-59.png","hash":"54eaec4bd04d320f6e16bed6bb216d504b0c3c7a","modified":1703773641884},{"_id":"public/2023/06/06/React-版-Postman/2023-06-09-18-47-10.png","hash":"02cd5aa2a11e5af7f615e624d7164dd785b3e3c1","modified":1703773641884},{"_id":"public/2023/06/06/React-版-Postman/2023-06-09-18-45-47.png","hash":"2eaadc049f277abde089e7849f273994e4cb127f","modified":1703773641884},{"_id":"public/2023/06/06/React-版-Postman/2023-06-09-18-44-50.png","hash":"fc1fd1a4a0ba16c56f6af031553f4b5ceadba676","modified":1703773641884},{"_id":"public/2022/09/24/Archlinux-入门/arch.png","hash":"bd37e2f190c7aad7658350e1743a6637a7b14f29","modified":1703773641884},{"_id":"public/2023/06/06/React-版-Postman/2023-06-09-18-44-04.png","hash":"eb23679b94b8a751e00f560d9414d210f9673aaf","modified":1703773641884},{"_id":"public/2023/06/06/React-版-Postman/2023-06-09-18-45-34.png","hash":"d0193e259dbe65d28544368d7d0ed672a58f18f2","modified":1703773641884},{"_id":"public/2023/06/06/React-版-Postman/2023-06-09-18-46-22.png","hash":"ab699bd27cb6e11830fd09f6bcb60e64f22c0d75","modified":1703773641884},{"_id":"public/2023/06/06/React-版-Postman/2023-06-09-18-41-35.png","hash":"da3c28d713ee9c999c124b9406ec3890aa4b8388","modified":1703773641884},{"_id":"public/2023/06/06/React-版-Postman/2023-06-09-18-42-36.png","hash":"0e0d56d73534648bfeb129a2ffcb5c66173f7fe9","modified":1703773641884},{"_id":"public/2023/06/06/React-版-Postman/2023-06-09-18-42-30.png","hash":"e4919c15a796f0edce186b978aa46ddbc35b590e","modified":1703773641884},{"_id":"public/2023/06/06/React-版-Postman/2023-06-09-18-45-09.png","hash":"f52bc6b6be719eb839c930938eb34c6501561144","modified":1703773641884},{"_id":"public/2023/06/06/React-版-Postman/2023-06-09-18-45-27.png","hash":"0864c36d4d9c835fdcd63f0817c0473fa1719d62","modified":1703773641884},{"_id":"public/2023/06/06/React-版-Postman/2023-06-09-18-41-59.png","hash":"6c5ab3f1c83d9063c0f9bbbf4e45934f56fcabcf","modified":1703773641884},{"_id":"public/2023/06/06/React-版-Postman/2023-06-09-18-47-14.png","hash":"5ce8d39721e004ff956a2ed96f3d9e34fc6e9a9e","modified":1703773641884},{"_id":"public/2023/04/24/Linux-Vim/entry1.png","hash":"45715eaed7488b4412a3744cbc73a9730c7ca64a","modified":1703773641884},{"_id":"public/2023/06/06/React-版-Postman/2023-06-09-18-46-59.png","hash":"b656a5df110a4ace0ce4ca0daae56880eb6b6f42","modified":1703773641884},{"_id":"public/2023/06/06/React-版-Postman/2023-06-09-18-47-29.png","hash":"581ac50c8d1e7de4b4962c2d8c18d88b7d5a0878","modified":1703773641884},{"_id":"public/2023/04/24/Linux-Vim/text1.png","hash":"028713e967478956af0649f0b7a611434ba2d33b","modified":1703773641884},{"_id":"public/images/p1.jpg","hash":"6094df274f6e002ec7ad4bd16f3b7148a2ccdd4e","modified":1703773641884},{"_id":"public/2023/04/24/Linux-Vim/advanced1.png","hash":"847b6d5c2e01351a7118a01aed86eae232e74ed3","modified":1703773641884},{"_id":"public/images/p2.jpg","hash":"03e49f9311949d68153b12adf96acb37213fb222","modified":1703773641884},{"_id":"public/images/banner.jpg","hash":"319482ab10908432d5d240e4ab06cecdc90e7b29","modified":1703773641884}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2023-04-05T06:30:42.000Z","type":"about","_content":"\n# ABOUT\n<center>\n<blockquote class=\"blockquote-center\">\n幸得识卿桃花面，从此阡陌多暖春\n</blockquote>\n```\n                                         )  (  (    (\n                                         (  )  () @@  )  (( (\n                                     (      (  )( @@  (  )) ) (\n                                   (    (  ( ()( /---\\   (()( (\n     _______                            )  ) )(@ !O O! )@@  ( ) ) )\n    <   ____)                      ) (  ( )( ()@ \\ o / (@@@@@ ( ()( )\n /--|  |(  o|                     (  )  ) ((@@(@@ !o! @@@@(@@@@@)() (\n|Q  >   \\___|                      ) ( @)@@)@ /---\\-/---\\ )@@@@@()( )\n|U /---------+                    (@@@@)@@@( // /-----\\ \\\\ @@@)@@@@@(  .\n|A|    \\ =========______/|@@@@@@@@@@@@@(@@@ // @ /---\\ @ \\\\ @(@@@(@@@ .  .\n|W \\   \\\\=========------\\|@@@@@@@@@@@@@@@@@ O @@@ /-\\ @@@ O @@(@@)@@ @   .\n|E  \\   \\----+--\\-)))           @@@@@@@@@@ !! @@@@ % @@@@ !! @@)@@@ .. .\n|I  |\\______|_)))/             .    @@@@@@ !! @@ /---\\ @@ !! @@(@@@ @ . .\n \\__==========           *        .    @@ /MM  /\\O   O/\\  MM\\ @@@@@@@. .\n    |   |-\\   \\          (       .      @ !!!  !! \\-/ !!  !!! @@@@@ .\n    |   |  \\   \\          )   -tang-   .  @@@@ !!     !!  .(. @.  .. .\n    |   |   \\   \\        (    /   .(  . \\)). ( |O  )( O! @@@@ . )      .\n    |   |   /   /         ) (      )).  ((  .) !! ((( !! @@ (. ((. .   .\n    |   |  /   /   ()  ))   ))   .( ( ( ) ). ( !!  )( !! ) ((   ))  ..\n    |   |_<   /   ( ) ( (  ) )   (( )  )).) ((/ |  (  | \\(  )) ((. ).\n____<_____\\\\__\\__(___)_))_((_(____))__(_(___.oooO_____Oooo.(_(_)_)((___\n     _____                    ___                                _\n    |_   _|_ _ _ __   __ _   / _ \\ _   _  __ _ _ ____      _____(_)\n      | |/ _` | '_ \\ / _` | | | | | | | |/ _` | '_ \\ \\ /\\ / / _ \\ |\n      | | (_| | | | | (_| | | |_| | |_| | (_| | | | \\ V  V /  __/ |\n      |_|\\__,_|_| |_|\\__, |  \\__\\_\\\\__,_|\\__,_|_| |_|\\_/\\_/ \\___|_|\n                     |___/\n\n```\n</center>","source":"about/index.md","raw":"---\ntitle: about\ndate: 2023-04-05 14:30:42\ntype: \"about\"\n---\n\n# ABOUT\n<center>\n<blockquote class=\"blockquote-center\">\n幸得识卿桃花面，从此阡陌多暖春\n</blockquote>\n```\n                                         )  (  (    (\n                                         (  )  () @@  )  (( (\n                                     (      (  )( @@  (  )) ) (\n                                   (    (  ( ()( /---\\   (()( (\n     _______                            )  ) )(@ !O O! )@@  ( ) ) )\n    <   ____)                      ) (  ( )( ()@ \\ o / (@@@@@ ( ()( )\n /--|  |(  o|                     (  )  ) ((@@(@@ !o! @@@@(@@@@@)() (\n|Q  >   \\___|                      ) ( @)@@)@ /---\\-/---\\ )@@@@@()( )\n|U /---------+                    (@@@@)@@@( // /-----\\ \\\\ @@@)@@@@@(  .\n|A|    \\ =========______/|@@@@@@@@@@@@@(@@@ // @ /---\\ @ \\\\ @(@@@(@@@ .  .\n|W \\   \\\\=========------\\|@@@@@@@@@@@@@@@@@ O @@@ /-\\ @@@ O @@(@@)@@ @   .\n|E  \\   \\----+--\\-)))           @@@@@@@@@@ !! @@@@ % @@@@ !! @@)@@@ .. .\n|I  |\\______|_)))/             .    @@@@@@ !! @@ /---\\ @@ !! @@(@@@ @ . .\n \\__==========           *        .    @@ /MM  /\\O   O/\\  MM\\ @@@@@@@. .\n    |   |-\\   \\          (       .      @ !!!  !! \\-/ !!  !!! @@@@@ .\n    |   |  \\   \\          )   -tang-   .  @@@@ !!     !!  .(. @.  .. .\n    |   |   \\   \\        (    /   .(  . \\)). ( |O  )( O! @@@@ . )      .\n    |   |   /   /         ) (      )).  ((  .) !! ((( !! @@ (. ((. .   .\n    |   |  /   /   ()  ))   ))   .( ( ( ) ). ( !!  )( !! ) ((   ))  ..\n    |   |_<   /   ( ) ( (  ) )   (( )  )).) ((/ |  (  | \\(  )) ((. ).\n____<_____\\\\__\\__(___)_))_((_(____))__(_(___.oooO_____Oooo.(_(_)_)((___\n     _____                    ___                                _\n    |_   _|_ _ _ __   __ _   / _ \\ _   _  __ _ _ ____      _____(_)\n      | |/ _` | '_ \\ / _` | | | | | | | |/ _` | '_ \\ \\ /\\ / / _ \\ |\n      | | (_| | | | | (_| | | |_| | |_| | (_| | | | \\ V  V /  __/ |\n      |_|\\__,_|_| |_|\\__, |  \\__\\_\\\\__,_|\\__,_|_| |_|\\_/\\_/ \\___|_|\n                     |___/\n\n```\n</center>","updated":"2023-05-07T08:12:55.630Z","path":"about/index.html","comments":1,"layout":"page","_id":"clqpau5tt0000lv9e2we11yic","content":"<h1 id=\"ABOUT\"><a href=\"#ABOUT\" class=\"headerlink\" title=\"ABOUT\"></a>ABOUT</h1><center>\n<blockquote class=\"blockquote-center\">\n幸得识卿桃花面，从此阡陌多暖春\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">                                         )  (  (    (</span><br><span class=\"line\">                                         (  )  () @@  )  (( (</span><br><span class=\"line\">                                     (      (  )( @@  (  )) ) (</span><br><span class=\"line\">                                   (    (  ( ()( /---\\   (()( (</span><br><span class=\"line\">     _______                            )  ) )(@ !O O! )@@  ( ) ) )</span><br><span class=\"line\">    &lt;   ____)                      ) (  ( )( ()@ \\ o / (@@@@@ ( ()( )</span><br><span class=\"line\"> /--|  |(  o|                     (  )  ) ((@@(@@ !o! @@@@(@@@@@)() (</span><br><span class=\"line\">|Q  &gt;   \\___|                      ) ( @)@@)@ /---\\-/---\\ )@@@@@()( )</span><br><span class=\"line\">|U /---------+                    (@@@@)@@@( // /-----\\ \\\\ @@@)@@@@@(  .</span><br><span class=\"line\">|A|    \\ =========______/|@@@@@@@@@@@@@(@@@ // @ /---\\ @ \\\\ @(@@@(@@@ .  .</span><br><span class=\"line\">|W \\   \\\\=========------\\|@@@@@@@@@@@@@@@@@ O @@@ /-\\ @@@ O @@(@@)@@ @   .</span><br><span class=\"line\">|E  \\   \\----+--\\-)))           @@@@@@@@@@ !! @@@@ % @@@@ !! @@)@@@ .. .</span><br><span class=\"line\">|I  |\\______|_)))/             .    @@@@@@ !! @@ /---\\ @@ !! @@(@@@ @ . .</span><br><span class=\"line\"> \\__==========           *        .    @@ /MM  /\\O   O/\\  MM\\ @@@@@@@. .</span><br><span class=\"line\">    |   |-\\   \\          (       .      @ !!!  !! \\-/ !!  !!! @@@@@ .</span><br><span class=\"line\">    |   |  \\   \\          )   -tang-   .  @@@@ !!     !!  .(. @.  .. .</span><br><span class=\"line\">    |   |   \\   \\        (    /   .(  . \\)). ( |O  )( O! @@@@ . )      .</span><br><span class=\"line\">    |   |   /   /         ) (      )).  ((  .) !! ((( !! @@ (. ((. .   .</span><br><span class=\"line\">    |   |  /   /   ()  ))   ))   .( ( ( ) ). ( !!  )( !! ) ((   ))  ..</span><br><span class=\"line\">    |   |_&lt;   /   ( ) ( (  ) )   (( )  )).) ((/ |  (  | \\(  )) ((. ).</span><br><span class=\"line\">____&lt;_____\\\\__\\__(___)_))_((_(____))__(_(___.oooO_____Oooo.(_(_)_)((___</span><br><span class=\"line\">     _____                    ___                                _</span><br><span class=\"line\">    |_   _|_ _ _ __   __ _   / _ \\ _   _  __ _ _ ____      _____(_)</span><br><span class=\"line\">      | |/ _` | &#x27;_ \\ / _` | | | | | | | |/ _` | &#x27;_ \\ \\ /\\ / / _ \\ |</span><br><span class=\"line\">      | | (_| | | | | (_| | | |_| | |_| | (_| | | | \\ V  V /  __/ |</span><br><span class=\"line\">      |_|\\__,_|_| |_|\\__, |  \\__\\_\\\\__,_|\\__,_|_| |_|\\_/\\_/ \\___|_|</span><br><span class=\"line\">                     |___/</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</center>","site":{"data":{}},"cover":false,"excerpt":"","more":"<h1 id=\"ABOUT\"><a href=\"#ABOUT\" class=\"headerlink\" title=\"ABOUT\"></a>ABOUT</h1><center>\n<blockquote class=\"blockquote-center\">\n幸得识卿桃花面，从此阡陌多暖春\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">                                         )  (  (    (</span><br><span class=\"line\">                                         (  )  () @@  )  (( (</span><br><span class=\"line\">                                     (      (  )( @@  (  )) ) (</span><br><span class=\"line\">                                   (    (  ( ()( /---\\   (()( (</span><br><span class=\"line\">     _______                            )  ) )(@ !O O! )@@  ( ) ) )</span><br><span class=\"line\">    &lt;   ____)                      ) (  ( )( ()@ \\ o / (@@@@@ ( ()( )</span><br><span class=\"line\"> /--|  |(  o|                     (  )  ) ((@@(@@ !o! @@@@(@@@@@)() (</span><br><span class=\"line\">|Q  &gt;   \\___|                      ) ( @)@@)@ /---\\-/---\\ )@@@@@()( )</span><br><span class=\"line\">|U /---------+                    (@@@@)@@@( // /-----\\ \\\\ @@@)@@@@@(  .</span><br><span class=\"line\">|A|    \\ =========______/|@@@@@@@@@@@@@(@@@ // @ /---\\ @ \\\\ @(@@@(@@@ .  .</span><br><span class=\"line\">|W \\   \\\\=========------\\|@@@@@@@@@@@@@@@@@ O @@@ /-\\ @@@ O @@(@@)@@ @   .</span><br><span class=\"line\">|E  \\   \\----+--\\-)))           @@@@@@@@@@ !! @@@@ % @@@@ !! @@)@@@ .. .</span><br><span class=\"line\">|I  |\\______|_)))/             .    @@@@@@ !! @@ /---\\ @@ !! @@(@@@ @ . .</span><br><span class=\"line\"> \\__==========           *        .    @@ /MM  /\\O   O/\\  MM\\ @@@@@@@. .</span><br><span class=\"line\">    |   |-\\   \\          (       .      @ !!!  !! \\-/ !!  !!! @@@@@ .</span><br><span class=\"line\">    |   |  \\   \\          )   -tang-   .  @@@@ !!     !!  .(. @.  .. .</span><br><span class=\"line\">    |   |   \\   \\        (    /   .(  . \\)). ( |O  )( O! @@@@ . )      .</span><br><span class=\"line\">    |   |   /   /         ) (      )).  ((  .) !! ((( !! @@ (. ((. .   .</span><br><span class=\"line\">    |   |  /   /   ()  ))   ))   .( ( ( ) ). ( !!  )( !! ) ((   ))  ..</span><br><span class=\"line\">    |   |_&lt;   /   ( ) ( (  ) )   (( )  )).) ((/ |  (  | \\(  )) ((. ).</span><br><span class=\"line\">____&lt;_____\\\\__\\__(___)_))_((_(____))__(_(___.oooO_____Oooo.(_(_)_)((___</span><br><span class=\"line\">     _____                    ___                                _</span><br><span class=\"line\">    |_   _|_ _ _ __   __ _   / _ \\ _   _  __ _ _ ____      _____(_)</span><br><span class=\"line\">      | |/ _` | &#x27;_ \\ / _` | | | | | | | |/ _` | &#x27;_ \\ \\ /\\ / / _ \\ |</span><br><span class=\"line\">      | | (_| | | | | (_| | | |_| | |_| | (_| | | | \\ V  V /  __/ |</span><br><span class=\"line\">      |_|\\__,_|_| |_|\\__, |  \\__\\_\\\\__,_|\\__,_|_| |_|\\_/\\_/ \\___|_|</span><br><span class=\"line\">                     |___/</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</center>"},{"title":"link","date":"2023-04-05T06:26:58.000Z","type":"link","_content":"\n# 网站：[quanwei.fun](quanwei.fun)\n\n# [Gitee](https://gitee.com/quanw20)\n\n# [Github](https://github.com/)","source":"link/index.md","raw":"---\ntitle: link\ndate: 2023-04-05 14:26:58\ntype: \"link\"\n---\n\n# 网站：[quanwei.fun](quanwei.fun)\n\n# [Gitee](https://gitee.com/quanw20)\n\n# [Github](https://github.com/)","updated":"2023-05-07T08:09:48.711Z","path":"link/index.html","comments":1,"layout":"page","_id":"clqpau5ty0002lv9eh8t04by8","content":"<h1 id=\"网站：quanwei-fun\"><a href=\"#网站：quanwei-fun\" class=\"headerlink\" title=\"网站：quanwei.fun\"></a>网站：<a href=\"quanwei.fun\">quanwei.fun</a></h1><h1 id=\"Gitee\"><a href=\"#Gitee\" class=\"headerlink\" title=\"Gitee\"></a><a href=\"https://gitee.com/quanw20\">Gitee</a></h1><h1 id=\"Github\"><a href=\"#Github\" class=\"headerlink\" title=\"Github\"></a><a href=\"https://github.com/\">Github</a></h1>","site":{"data":{}},"cover":false,"excerpt":"","more":"<h1 id=\"网站：quanwei-fun\"><a href=\"#网站：quanwei-fun\" class=\"headerlink\" title=\"网站：quanwei.fun\"></a>网站：<a href=\"quanwei.fun\">quanwei.fun</a></h1><h1 id=\"Gitee\"><a href=\"#Gitee\" class=\"headerlink\" title=\"Gitee\"></a><a href=\"https://gitee.com/quanw20\">Gitee</a></h1><h1 id=\"Github\"><a href=\"#Github\" class=\"headerlink\" title=\"Github\"></a><a href=\"https://github.com/\">Github</a></h1>"},{"title":"tags","date":"2023-04-05T06:25:50.000Z","type":"tags","orderby":"random","order":1,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2023-04-05 14:25:50\ntype: \"tags\"\norderby: random\norder: 1\n---\n","updated":"2023-06-23T01:09:24.712Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clqpau5u10005lv9ecznxev34","content":"","site":{"data":{}},"cover":false,"excerpt":"","more":""}],"Post":[{"title":"Archlinux BspWM 外接显示器","date":"2023-06-08T07:43:50.000Z","cover":false,"_content":"\n## 了解\n\n```bash\nman xrandr # 查看帮助\n\nxrandr # 获取显示器接口信息\n```\n\n## 显示配置\n\n非必要\n\n```bash\nvim /etc/X11/xorg.conf.d/10-monitor.conf\n```\n\n```conf\nSection \"Monitor\"\n        Identifier \"eDP-1-1\"\n        Option \"Primary\" \"true\"\n        Option \"DPMS\" \"true\"\n        Option \"PreferredMode\" \"1920x1080_60.00\"\nEndSection\n\nSection \"Monitor\"\n        Identifier \"HDMI-0\"\n        Option \"DPMS\" \"true\"\n        Option \"PreferredMode\" \"1920x1080_60.00\"\n        Option \"RightOf\" \"eDP-1-1\"\nEndSection\n```\n\n\n## 切换\n\n```bash\n#! /bin/bash\n\nif [ $# -lt 1 ]; then\n  echo 'Usage screen <action>'\n  echo 'action:'\n  echo '  (s)ingle   仅[电脑]显示器'\n  echo '  (e)xtend   双显示器[扩展]'\n  echo '  s(y)nc     双显示器[同步]'\nfi\n\nintern=eDP-1-1\nextern=HDMI-0\n\ncase $1 in \n  single|s)\n    echo '仅[电脑]显示器'\n    xrandr --output \"$intern\" --auto --output \"$extern\" --off\n    # bspc monitor -d I II III IV V VI VII VIII IX X\n    ;;\n  extend|e)\n    echo '双显示器[扩展]'\n    xrandr --output \"$intern\" --auto --output \"$extern\" --primary --auto --right-of \"$intern\"\n    bspc monitor \"$intern\" -d I II III IV V \n    bspc monitor HDMI-0 -d I II III IV V \n    ;;\n  left|l)\n    echo '双显示器[扩展 LEFT]'\n    xrandr --output \"$intern\" --primary --auto --output \"$extern\"  --auto --right-of \"$intern\"\n    bspc monitor \"$intern\" -d I II III IV V \n    bspc monitor HDMI-0 -d I II III IV V \n    ;;\n  sync|y|d)\n    echo '双显示器[同步]'\n    xrandr --output \"$intern\" --auto --output \"$extern\" --same-as \"$intern\" --auto  \n    bspc monitor \"$intern\" -d I II III IV V \n    bspc monitor HDMI-0 -d I II III IV V    \n     ;;\n  *)\n    echo '未知参数[' $1 ']'\n    ;;\nesac\n```","source":"_posts/Archlinux-BspWM-外接显示器.md","raw":"---\ntitle: Archlinux BspWM 外接显示器\ndate: 2023-06-08 15:43:50\ntags: Linux\ncover:\n---\n\n## 了解\n\n```bash\nman xrandr # 查看帮助\n\nxrandr # 获取显示器接口信息\n```\n\n## 显示配置\n\n非必要\n\n```bash\nvim /etc/X11/xorg.conf.d/10-monitor.conf\n```\n\n```conf\nSection \"Monitor\"\n        Identifier \"eDP-1-1\"\n        Option \"Primary\" \"true\"\n        Option \"DPMS\" \"true\"\n        Option \"PreferredMode\" \"1920x1080_60.00\"\nEndSection\n\nSection \"Monitor\"\n        Identifier \"HDMI-0\"\n        Option \"DPMS\" \"true\"\n        Option \"PreferredMode\" \"1920x1080_60.00\"\n        Option \"RightOf\" \"eDP-1-1\"\nEndSection\n```\n\n\n## 切换\n\n```bash\n#! /bin/bash\n\nif [ $# -lt 1 ]; then\n  echo 'Usage screen <action>'\n  echo 'action:'\n  echo '  (s)ingle   仅[电脑]显示器'\n  echo '  (e)xtend   双显示器[扩展]'\n  echo '  s(y)nc     双显示器[同步]'\nfi\n\nintern=eDP-1-1\nextern=HDMI-0\n\ncase $1 in \n  single|s)\n    echo '仅[电脑]显示器'\n    xrandr --output \"$intern\" --auto --output \"$extern\" --off\n    # bspc monitor -d I II III IV V VI VII VIII IX X\n    ;;\n  extend|e)\n    echo '双显示器[扩展]'\n    xrandr --output \"$intern\" --auto --output \"$extern\" --primary --auto --right-of \"$intern\"\n    bspc monitor \"$intern\" -d I II III IV V \n    bspc monitor HDMI-0 -d I II III IV V \n    ;;\n  left|l)\n    echo '双显示器[扩展 LEFT]'\n    xrandr --output \"$intern\" --primary --auto --output \"$extern\"  --auto --right-of \"$intern\"\n    bspc monitor \"$intern\" -d I II III IV V \n    bspc monitor HDMI-0 -d I II III IV V \n    ;;\n  sync|y|d)\n    echo '双显示器[同步]'\n    xrandr --output \"$intern\" --auto --output \"$extern\" --same-as \"$intern\" --auto  \n    bspc monitor \"$intern\" -d I II III IV V \n    bspc monitor HDMI-0 -d I II III IV V    \n     ;;\n  *)\n    echo '未知参数[' $1 ']'\n    ;;\nesac\n```","slug":"Archlinux-BspWM-外接显示器","published":1,"updated":"2023-06-23T01:08:37.759Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5tv0001lv9ednprexea","content":"<h2 id=\"了解\"><a href=\"#了解\" class=\"headerlink\" title=\"了解\"></a>了解</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">man xrandr <span class=\"comment\"># 查看帮助</span></span><br><span class=\"line\"></span><br><span class=\"line\">xrandr <span class=\"comment\"># 获取显示器接口信息</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"显示配置\"><a href=\"#显示配置\" class=\"headerlink\" title=\"显示配置\"></a>显示配置</h2><p>非必要</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/X11/xorg.conf.d/10-monitor.conf</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Section &quot;Monitor&quot;</span><br><span class=\"line\">        Identifier &quot;eDP-1-1&quot;</span><br><span class=\"line\">        Option &quot;Primary&quot; &quot;true&quot;</span><br><span class=\"line\">        Option &quot;DPMS&quot; &quot;true&quot;</span><br><span class=\"line\">        Option &quot;PreferredMode&quot; &quot;1920x1080_60.00&quot;</span><br><span class=\"line\">EndSection</span><br><span class=\"line\"></span><br><span class=\"line\">Section &quot;Monitor&quot;</span><br><span class=\"line\">        Identifier &quot;HDMI-0&quot;</span><br><span class=\"line\">        Option &quot;DPMS&quot; &quot;true&quot;</span><br><span class=\"line\">        Option &quot;PreferredMode&quot; &quot;1920x1080_60.00&quot;</span><br><span class=\"line\">        Option &quot;RightOf&quot; &quot;eDP-1-1&quot;</span><br><span class=\"line\">EndSection</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"切换\"><a href=\"#切换\" class=\"headerlink\" title=\"切换\"></a>切换</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#! /bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$#</span> -lt 1 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;Usage screen &lt;action&gt;&#x27;</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;action:&#x27;</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;  (s)ingle   仅[电脑]显示器&#x27;</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;  (e)xtend   双显示器[扩展]&#x27;</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;  s(y)nc     双显示器[同步]&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">intern=eDP-1-1</span><br><span class=\"line\">extern=HDMI-0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"variable\">$1</span> <span class=\"keyword\">in</span> </span><br><span class=\"line\">  single|s)</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;仅[电脑]显示器&#x27;</span></span><br><span class=\"line\">    xrandr --output <span class=\"string\">&quot;<span class=\"variable\">$intern</span>&quot;</span> --auto --output <span class=\"string\">&quot;<span class=\"variable\">$extern</span>&quot;</span> --off</span><br><span class=\"line\">    <span class=\"comment\"># bspc monitor -d I II III IV V VI VII VIII IX X</span></span><br><span class=\"line\">    ;;</span><br><span class=\"line\">  extend|e)</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;双显示器[扩展]&#x27;</span></span><br><span class=\"line\">    xrandr --output <span class=\"string\">&quot;<span class=\"variable\">$intern</span>&quot;</span> --auto --output <span class=\"string\">&quot;<span class=\"variable\">$extern</span>&quot;</span> --primary --auto --right-of <span class=\"string\">&quot;<span class=\"variable\">$intern</span>&quot;</span></span><br><span class=\"line\">    bspc monitor <span class=\"string\">&quot;<span class=\"variable\">$intern</span>&quot;</span> -d I II III IV V </span><br><span class=\"line\">    bspc monitor HDMI-0 -d I II III IV V </span><br><span class=\"line\">    ;;</span><br><span class=\"line\">  left|l)</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;双显示器[扩展 LEFT]&#x27;</span></span><br><span class=\"line\">    xrandr --output <span class=\"string\">&quot;<span class=\"variable\">$intern</span>&quot;</span> --primary --auto --output <span class=\"string\">&quot;<span class=\"variable\">$extern</span>&quot;</span>  --auto --right-of <span class=\"string\">&quot;<span class=\"variable\">$intern</span>&quot;</span></span><br><span class=\"line\">    bspc monitor <span class=\"string\">&quot;<span class=\"variable\">$intern</span>&quot;</span> -d I II III IV V </span><br><span class=\"line\">    bspc monitor HDMI-0 -d I II III IV V </span><br><span class=\"line\">    ;;</span><br><span class=\"line\">  <span class=\"built_in\">sync</span>|y|d)</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;双显示器[同步]&#x27;</span></span><br><span class=\"line\">    xrandr --output <span class=\"string\">&quot;<span class=\"variable\">$intern</span>&quot;</span> --auto --output <span class=\"string\">&quot;<span class=\"variable\">$extern</span>&quot;</span> --same-as <span class=\"string\">&quot;<span class=\"variable\">$intern</span>&quot;</span> --auto  </span><br><span class=\"line\">    bspc monitor <span class=\"string\">&quot;<span class=\"variable\">$intern</span>&quot;</span> -d I II III IV V </span><br><span class=\"line\">    bspc monitor HDMI-0 -d I II III IV V    </span><br><span class=\"line\">     ;;</span><br><span class=\"line\">  *)</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;未知参数[&#x27;</span> <span class=\"variable\">$1</span> <span class=\"string\">&#x27;]&#x27;</span></span><br><span class=\"line\">    ;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"了解\"><a href=\"#了解\" class=\"headerlink\" title=\"了解\"></a>了解</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">man xrandr <span class=\"comment\"># 查看帮助</span></span><br><span class=\"line\"></span><br><span class=\"line\">xrandr <span class=\"comment\"># 获取显示器接口信息</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"显示配置\"><a href=\"#显示配置\" class=\"headerlink\" title=\"显示配置\"></a>显示配置</h2><p>非必要</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/X11/xorg.conf.d/10-monitor.conf</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Section &quot;Monitor&quot;</span><br><span class=\"line\">        Identifier &quot;eDP-1-1&quot;</span><br><span class=\"line\">        Option &quot;Primary&quot; &quot;true&quot;</span><br><span class=\"line\">        Option &quot;DPMS&quot; &quot;true&quot;</span><br><span class=\"line\">        Option &quot;PreferredMode&quot; &quot;1920x1080_60.00&quot;</span><br><span class=\"line\">EndSection</span><br><span class=\"line\"></span><br><span class=\"line\">Section &quot;Monitor&quot;</span><br><span class=\"line\">        Identifier &quot;HDMI-0&quot;</span><br><span class=\"line\">        Option &quot;DPMS&quot; &quot;true&quot;</span><br><span class=\"line\">        Option &quot;PreferredMode&quot; &quot;1920x1080_60.00&quot;</span><br><span class=\"line\">        Option &quot;RightOf&quot; &quot;eDP-1-1&quot;</span><br><span class=\"line\">EndSection</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"切换\"><a href=\"#切换\" class=\"headerlink\" title=\"切换\"></a>切换</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#! /bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$#</span> -lt 1 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;Usage screen &lt;action&gt;&#x27;</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;action:&#x27;</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;  (s)ingle   仅[电脑]显示器&#x27;</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;  (e)xtend   双显示器[扩展]&#x27;</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;  s(y)nc     双显示器[同步]&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">intern=eDP-1-1</span><br><span class=\"line\">extern=HDMI-0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"variable\">$1</span> <span class=\"keyword\">in</span> </span><br><span class=\"line\">  single|s)</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;仅[电脑]显示器&#x27;</span></span><br><span class=\"line\">    xrandr --output <span class=\"string\">&quot;<span class=\"variable\">$intern</span>&quot;</span> --auto --output <span class=\"string\">&quot;<span class=\"variable\">$extern</span>&quot;</span> --off</span><br><span class=\"line\">    <span class=\"comment\"># bspc monitor -d I II III IV V VI VII VIII IX X</span></span><br><span class=\"line\">    ;;</span><br><span class=\"line\">  extend|e)</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;双显示器[扩展]&#x27;</span></span><br><span class=\"line\">    xrandr --output <span class=\"string\">&quot;<span class=\"variable\">$intern</span>&quot;</span> --auto --output <span class=\"string\">&quot;<span class=\"variable\">$extern</span>&quot;</span> --primary --auto --right-of <span class=\"string\">&quot;<span class=\"variable\">$intern</span>&quot;</span></span><br><span class=\"line\">    bspc monitor <span class=\"string\">&quot;<span class=\"variable\">$intern</span>&quot;</span> -d I II III IV V </span><br><span class=\"line\">    bspc monitor HDMI-0 -d I II III IV V </span><br><span class=\"line\">    ;;</span><br><span class=\"line\">  left|l)</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;双显示器[扩展 LEFT]&#x27;</span></span><br><span class=\"line\">    xrandr --output <span class=\"string\">&quot;<span class=\"variable\">$intern</span>&quot;</span> --primary --auto --output <span class=\"string\">&quot;<span class=\"variable\">$extern</span>&quot;</span>  --auto --right-of <span class=\"string\">&quot;<span class=\"variable\">$intern</span>&quot;</span></span><br><span class=\"line\">    bspc monitor <span class=\"string\">&quot;<span class=\"variable\">$intern</span>&quot;</span> -d I II III IV V </span><br><span class=\"line\">    bspc monitor HDMI-0 -d I II III IV V </span><br><span class=\"line\">    ;;</span><br><span class=\"line\">  <span class=\"built_in\">sync</span>|y|d)</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;双显示器[同步]&#x27;</span></span><br><span class=\"line\">    xrandr --output <span class=\"string\">&quot;<span class=\"variable\">$intern</span>&quot;</span> --auto --output <span class=\"string\">&quot;<span class=\"variable\">$extern</span>&quot;</span> --same-as <span class=\"string\">&quot;<span class=\"variable\">$intern</span>&quot;</span> --auto  </span><br><span class=\"line\">    bspc monitor <span class=\"string\">&quot;<span class=\"variable\">$intern</span>&quot;</span> -d I II III IV V </span><br><span class=\"line\">    bspc monitor HDMI-0 -d I II III IV V    </span><br><span class=\"line\">     ;;</span><br><span class=\"line\">  *)</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;未知参数[&#x27;</span> <span class=\"variable\">$1</span> <span class=\"string\">&#x27;]&#x27;</span></span><br><span class=\"line\">    ;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br></pre></td></tr></table></figure>"},{"title":"Archlinux Mail","date":"2023-04-04T13:49:23.000Z","cover":"2023/04/04/Archlinux-Mail/mail.jpg","_content":"\n# Archlinux Mail\n\n## 安装\n\n```bash\nsudo pacman -S s-nail\n```\n\n## 编辑配置文件\n\nsudo vim /etc/mail.rc\n```\nset from=\"<USERNAME>@qq.com\"\nset smtp-auth=login\nset mta=smtps://<USERNAME>:<QQ邮箱授权码>@smtp.qq.com:465\t#smtp服务器端口是465\nset v15-compat\t#必须要\nset nss-config-dir=/root/.certs\n```\n\n## 获得邮箱的SSL证书并存放到本地\n\n最后一行的nss-config-dir就是制定的存放QQ邮箱SSL证书的位置\n\n手动的获取QQ邮箱的证书保存到本地指定的目录里以备调用和验证\n\n```bash\nsu root\nmkdir -p /root/.certs/\necho -n | openssl s_client -connect smtp.qq.com:465 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > ~/.certs/qq.crt\ncertutil -A -n \"GeoTrust SSL CA\" -t \"C,,\" -d ~/.certs -i ~/.certs/qq.crt\ncertutil -A -n \"GeoTrust Global CA\" -t \"C,,\" -d ~/.certs -i ~/.certs/qq.crt\ncertutil -L -d /root/.certs\ncd /root/.certs\ncertutil -A -n \"GeoTrust SSL CA - G3\" -t \"Pu,Pu,Pu\" -d ./ -i qq.crt\n```\n![](2023-04-04_21-56.png)\n\n## 测试\n\n```bash\nmailx -s \"TEST FROM LINUX\" xxx@qq.com < ./mail_file.txt\n```","source":"_posts/Archlinux-Mail.md","raw":"---\ntitle: Archlinux Mail\ndate: 2023-04-04 21:49:23\ntags: \n- Linux\ncover: mail.jpg\n---\n\n# Archlinux Mail\n\n## 安装\n\n```bash\nsudo pacman -S s-nail\n```\n\n## 编辑配置文件\n\nsudo vim /etc/mail.rc\n```\nset from=\"<USERNAME>@qq.com\"\nset smtp-auth=login\nset mta=smtps://<USERNAME>:<QQ邮箱授权码>@smtp.qq.com:465\t#smtp服务器端口是465\nset v15-compat\t#必须要\nset nss-config-dir=/root/.certs\n```\n\n## 获得邮箱的SSL证书并存放到本地\n\n最后一行的nss-config-dir就是制定的存放QQ邮箱SSL证书的位置\n\n手动的获取QQ邮箱的证书保存到本地指定的目录里以备调用和验证\n\n```bash\nsu root\nmkdir -p /root/.certs/\necho -n | openssl s_client -connect smtp.qq.com:465 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > ~/.certs/qq.crt\ncertutil -A -n \"GeoTrust SSL CA\" -t \"C,,\" -d ~/.certs -i ~/.certs/qq.crt\ncertutil -A -n \"GeoTrust Global CA\" -t \"C,,\" -d ~/.certs -i ~/.certs/qq.crt\ncertutil -L -d /root/.certs\ncd /root/.certs\ncertutil -A -n \"GeoTrust SSL CA - G3\" -t \"Pu,Pu,Pu\" -d ./ -i qq.crt\n```\n![](2023-04-04_21-56.png)\n\n## 测试\n\n```bash\nmailx -s \"TEST FROM LINUX\" xxx@qq.com < ./mail_file.txt\n```","slug":"Archlinux-Mail","published":1,"updated":"2023-06-23T00:58:59.876Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5ty0003lv9e99kd1mgw","content":"<h1 id=\"Archlinux-Mail\"><a href=\"#Archlinux-Mail\" class=\"headerlink\" title=\"Archlinux Mail\"></a>Archlinux Mail</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S s-nail</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"编辑配置文件\"><a href=\"#编辑配置文件\" class=\"headerlink\" title=\"编辑配置文件\"></a>编辑配置文件</h2><p>sudo vim &#x2F;etc&#x2F;mail.rc</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set from=&quot;&lt;USERNAME&gt;@qq.com&quot;</span><br><span class=\"line\">set smtp-auth=login</span><br><span class=\"line\">set mta=smtps://&lt;USERNAME&gt;:&lt;QQ邮箱授权码&gt;@smtp.qq.com:465\t#smtp服务器端口是465</span><br><span class=\"line\">set v15-compat\t#必须要</span><br><span class=\"line\">set nss-config-dir=/root/.certs</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"获得邮箱的SSL证书并存放到本地\"><a href=\"#获得邮箱的SSL证书并存放到本地\" class=\"headerlink\" title=\"获得邮箱的SSL证书并存放到本地\"></a>获得邮箱的SSL证书并存放到本地</h2><p>最后一行的nss-config-dir就是制定的存放QQ邮箱SSL证书的位置</p>\n<p>手动的获取QQ邮箱的证书保存到本地指定的目录里以备调用和验证</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su root</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /root/.certs/</span><br><span class=\"line\"><span class=\"built_in\">echo</span> -n | openssl s_client -connect smtp.qq.com:465 | sed -ne <span class=\"string\">&#x27;/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p&#x27;</span> &gt; ~/.certs/qq.crt</span><br><span class=\"line\">certutil -A -n <span class=\"string\">&quot;GeoTrust SSL CA&quot;</span> -t <span class=\"string\">&quot;C,,&quot;</span> -d ~/.certs -i ~/.certs/qq.crt</span><br><span class=\"line\">certutil -A -n <span class=\"string\">&quot;GeoTrust Global CA&quot;</span> -t <span class=\"string\">&quot;C,,&quot;</span> -d ~/.certs -i ~/.certs/qq.crt</span><br><span class=\"line\">certutil -L -d /root/.certs</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /root/.certs</span><br><span class=\"line\">certutil -A -n <span class=\"string\">&quot;GeoTrust SSL CA - G3&quot;</span> -t <span class=\"string\">&quot;Pu,Pu,Pu&quot;</span> -d ./ -i qq.crt</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2023/04/04/Archlinux-Mail/2023-04-04_21-56.png\"></p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mailx -s <span class=\"string\">&quot;TEST FROM LINUX&quot;</span> xxx@qq.com &lt; ./mail_file.txt</span><br></pre></td></tr></table></figure>","site":{"data":{}},"cover_type":"img","excerpt":"","more":"<h1 id=\"Archlinux-Mail\"><a href=\"#Archlinux-Mail\" class=\"headerlink\" title=\"Archlinux Mail\"></a>Archlinux Mail</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S s-nail</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"编辑配置文件\"><a href=\"#编辑配置文件\" class=\"headerlink\" title=\"编辑配置文件\"></a>编辑配置文件</h2><p>sudo vim &#x2F;etc&#x2F;mail.rc</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set from=&quot;&lt;USERNAME&gt;@qq.com&quot;</span><br><span class=\"line\">set smtp-auth=login</span><br><span class=\"line\">set mta=smtps://&lt;USERNAME&gt;:&lt;QQ邮箱授权码&gt;@smtp.qq.com:465\t#smtp服务器端口是465</span><br><span class=\"line\">set v15-compat\t#必须要</span><br><span class=\"line\">set nss-config-dir=/root/.certs</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"获得邮箱的SSL证书并存放到本地\"><a href=\"#获得邮箱的SSL证书并存放到本地\" class=\"headerlink\" title=\"获得邮箱的SSL证书并存放到本地\"></a>获得邮箱的SSL证书并存放到本地</h2><p>最后一行的nss-config-dir就是制定的存放QQ邮箱SSL证书的位置</p>\n<p>手动的获取QQ邮箱的证书保存到本地指定的目录里以备调用和验证</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su root</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /root/.certs/</span><br><span class=\"line\"><span class=\"built_in\">echo</span> -n | openssl s_client -connect smtp.qq.com:465 | sed -ne <span class=\"string\">&#x27;/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p&#x27;</span> &gt; ~/.certs/qq.crt</span><br><span class=\"line\">certutil -A -n <span class=\"string\">&quot;GeoTrust SSL CA&quot;</span> -t <span class=\"string\">&quot;C,,&quot;</span> -d ~/.certs -i ~/.certs/qq.crt</span><br><span class=\"line\">certutil -A -n <span class=\"string\">&quot;GeoTrust Global CA&quot;</span> -t <span class=\"string\">&quot;C,,&quot;</span> -d ~/.certs -i ~/.certs/qq.crt</span><br><span class=\"line\">certutil -L -d /root/.certs</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /root/.certs</span><br><span class=\"line\">certutil -A -n <span class=\"string\">&quot;GeoTrust SSL CA - G3&quot;</span> -t <span class=\"string\">&quot;Pu,Pu,Pu&quot;</span> -d ./ -i qq.crt</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2023/04/04/Archlinux-Mail/2023-04-04_21-56.png\"></p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mailx -s <span class=\"string\">&quot;TEST FROM LINUX&quot;</span> xxx@qq.com &lt; ./mail_file.txt</span><br></pre></td></tr></table></figure>"},{"title":"Arch linux","date":"2022-09-24T07:47:12.000Z","cover":"2022/09/24/Archlinux-入门/arch.png","_content":"\n\n## 安装软件\n\n  使用 pacman 安装、删除、升级\n\n* 安装指定的包\n```bash\n  pacman -S <包名_1> <包名_2> ...\n```\n* 安装一个本地包(不从源里下载）\n```bash\n  pacman -U /path/to/package/package_name-version.pkg.tar.zst\n```\n* 安装一个远程包（不在 pacman 配置的源里面）\n```bash\n  pacman -U <http://www.example.com/repo/example.pkg.tar.zst>\n```\n* 删除单个软件包，保留其全部已经安装的依赖关系\n```bash\n  pacman -R package_name\n```\n* 删除指定软件包，及其所有没有被其他已安装软件包使用的依赖关系\n```bash\n  pacman -Rs package_name\n```\n* 上面这条命令在移除包含其他所需包的组时有时候会拒绝运行。这种情况下可以尝试\n```bash\n  pacman -Rsu package_name\n```\n* 升级所有软件包\n```bash\n  pacman -Syu\n```\n* 查询包数据库\n```bash\n  pacman 使用 -Q 参数查询本地软件包数据库， -S 查询同步数据库，以及 -F查询文件数据库\n```\n* pacman 可以在包数据库中查询软件包，查询位置包含了软件包的名字和描述\n```bash\n  pacman -Ss string1 string2 ...\n```\n* 要查询已安装的软件包\n```bash\n  pacman -Qs string1 string2 ...\n```\n* 按文件名查找软件库\n```bash\n  pacman -F string1 string2 ...\n```\n* 显示软件包的详尽的信息\n```bash\n  pacman -Si package_name\n```\n* 使用两个 -i 将同时显示备份文件和修改状态\n```bash\n  pacman -Qii package_name\n```\n* 要获取已安装软件包所包含文件的列表\n```bash\n  pacman -Ql package_name\n```\n* 要罗列所有不再作为依赖的软件包(孤立orphans)\n```bash\n  pacman -Qdt\n```\n* 清理软件包缓存\n```bash\n  pacman 将下载的软件包保存在 /var/cache/pacman/pkg/ 并且不会自动移除旧的和未安装版本的软件包\n```\n* 删除所有缓存的版本和已卸载的软件包，除了最近的3个会被保留\n```bash\n  paccache -r\n```\n\n## 更新系统\n\n日常更新\n\n```bash\nsudo pacman -Syu \n```\n或者\n\n```bash\nyay -Syu\n```\n\n<!-- more -->\n\n手头上保留 Arch 安装盘有问题时可以进行修正\n\n旧配置文件\n\n  ~/.config/        – 软件保存配置文件的地方\n  ~/.cache/         – 程序缓存大小可能持续增加\n  ~/.local/share/   – 可能有旧文件\n\n手动处理\n\n  warning: /etc/pam.d/usermod installed as /etc/pam.d/usermod.pacnew\n  warning: /etc/pam.d/usermod saved as /etc/pam.d/usermod.pacsave\n\n### 网络\n\narp ->\tip neighbor\nifconfig ->\tip address, ip link\nnetstat ->\tss\nroute ->\tip route \n\n### 切换 Java 版本\n\n```                        \narchlinux-java <COMMAND>\n\nCOMMAND:\n\tstatus\t\tList installed Java environments and enabled one\n\tget\t\tReturn the short name of the Java environment set as default\n\tset <JAVA_ENV>\tForce <JAVA_ENV> as default\n\tunset\t\tUnset current default Java environment\n\tfix\t\tFix an invalid/broken default Java environment configuration\n```\n\n切换Java版本\n```bash\nsudo archlinux-java set java-17-openjdk\n```\n\n### 解压 .zip 文件乱码\n\n原因：\n\n由于zip格式中并没有指定编码格式，Windows下生成的zip文件中的编码是GBK/GB2312等。\n因此，导致这些zip文件在Linux下解压时出现乱码问题，因为Linux下的默认编码是UTF8。\n\n解决：\n\n安装修改版的 unzip\n```bash\nyay -S unzip-natspec \n```\n\n解压时指定\n```bash\nunzip -O cp936 <filename>.zip\n```","source":"_posts/Archlinux-入门.md","raw":"---\ntitle: Arch linux \ndate: 2022-09-24 15:47:12\ntags: Linux\ncover: arch.png\n---\n\n\n## 安装软件\n\n  使用 pacman 安装、删除、升级\n\n* 安装指定的包\n```bash\n  pacman -S <包名_1> <包名_2> ...\n```\n* 安装一个本地包(不从源里下载）\n```bash\n  pacman -U /path/to/package/package_name-version.pkg.tar.zst\n```\n* 安装一个远程包（不在 pacman 配置的源里面）\n```bash\n  pacman -U <http://www.example.com/repo/example.pkg.tar.zst>\n```\n* 删除单个软件包，保留其全部已经安装的依赖关系\n```bash\n  pacman -R package_name\n```\n* 删除指定软件包，及其所有没有被其他已安装软件包使用的依赖关系\n```bash\n  pacman -Rs package_name\n```\n* 上面这条命令在移除包含其他所需包的组时有时候会拒绝运行。这种情况下可以尝试\n```bash\n  pacman -Rsu package_name\n```\n* 升级所有软件包\n```bash\n  pacman -Syu\n```\n* 查询包数据库\n```bash\n  pacman 使用 -Q 参数查询本地软件包数据库， -S 查询同步数据库，以及 -F查询文件数据库\n```\n* pacman 可以在包数据库中查询软件包，查询位置包含了软件包的名字和描述\n```bash\n  pacman -Ss string1 string2 ...\n```\n* 要查询已安装的软件包\n```bash\n  pacman -Qs string1 string2 ...\n```\n* 按文件名查找软件库\n```bash\n  pacman -F string1 string2 ...\n```\n* 显示软件包的详尽的信息\n```bash\n  pacman -Si package_name\n```\n* 使用两个 -i 将同时显示备份文件和修改状态\n```bash\n  pacman -Qii package_name\n```\n* 要获取已安装软件包所包含文件的列表\n```bash\n  pacman -Ql package_name\n```\n* 要罗列所有不再作为依赖的软件包(孤立orphans)\n```bash\n  pacman -Qdt\n```\n* 清理软件包缓存\n```bash\n  pacman 将下载的软件包保存在 /var/cache/pacman/pkg/ 并且不会自动移除旧的和未安装版本的软件包\n```\n* 删除所有缓存的版本和已卸载的软件包，除了最近的3个会被保留\n```bash\n  paccache -r\n```\n\n## 更新系统\n\n日常更新\n\n```bash\nsudo pacman -Syu \n```\n或者\n\n```bash\nyay -Syu\n```\n\n<!-- more -->\n\n手头上保留 Arch 安装盘有问题时可以进行修正\n\n旧配置文件\n\n  ~/.config/        – 软件保存配置文件的地方\n  ~/.cache/         – 程序缓存大小可能持续增加\n  ~/.local/share/   – 可能有旧文件\n\n手动处理\n\n  warning: /etc/pam.d/usermod installed as /etc/pam.d/usermod.pacnew\n  warning: /etc/pam.d/usermod saved as /etc/pam.d/usermod.pacsave\n\n### 网络\n\narp ->\tip neighbor\nifconfig ->\tip address, ip link\nnetstat ->\tss\nroute ->\tip route \n\n### 切换 Java 版本\n\n```                        \narchlinux-java <COMMAND>\n\nCOMMAND:\n\tstatus\t\tList installed Java environments and enabled one\n\tget\t\tReturn the short name of the Java environment set as default\n\tset <JAVA_ENV>\tForce <JAVA_ENV> as default\n\tunset\t\tUnset current default Java environment\n\tfix\t\tFix an invalid/broken default Java environment configuration\n```\n\n切换Java版本\n```bash\nsudo archlinux-java set java-17-openjdk\n```\n\n### 解压 .zip 文件乱码\n\n原因：\n\n由于zip格式中并没有指定编码格式，Windows下生成的zip文件中的编码是GBK/GB2312等。\n因此，导致这些zip文件在Linux下解压时出现乱码问题，因为Linux下的默认编码是UTF8。\n\n解决：\n\n安装修改版的 unzip\n```bash\nyay -S unzip-natspec \n```\n\n解压时指定\n```bash\nunzip -O cp936 <filename>.zip\n```","slug":"Archlinux-入门","published":1,"updated":"2023-05-07T08:06:50.580Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5u10006lv9e2eib86g5","content":"<h2 id=\"安装软件\"><a href=\"#安装软件\" class=\"headerlink\" title=\"安装软件\"></a>安装软件</h2><p>  使用 pacman 安装、删除、升级</p>\n<ul>\n<li>安装指定的包<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman -S &lt;包名_1&gt; &lt;包名_2&gt; ...</span><br></pre></td></tr></table></figure></li>\n<li>安装一个本地包(不从源里下载）<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman -U /path/to/package/package_name-version.pkg.tar.zst</span><br></pre></td></tr></table></figure></li>\n<li>安装一个远程包（不在 pacman 配置的源里面）<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman -U &lt;http://www.example.com/repo/example.pkg.tar.zst&gt;</span><br></pre></td></tr></table></figure></li>\n<li>删除单个软件包，保留其全部已经安装的依赖关系<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman -R package_name</span><br></pre></td></tr></table></figure></li>\n<li>删除指定软件包，及其所有没有被其他已安装软件包使用的依赖关系<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman -Rs package_name</span><br></pre></td></tr></table></figure></li>\n<li>上面这条命令在移除包含其他所需包的组时有时候会拒绝运行。这种情况下可以尝试<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman -Rsu package_name</span><br></pre></td></tr></table></figure></li>\n<li>升级所有软件包<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman -Syu</span><br></pre></td></tr></table></figure></li>\n<li>查询包数据库<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman 使用 -Q 参数查询本地软件包数据库， -S 查询同步数据库，以及 -F查询文件数据库</span><br></pre></td></tr></table></figure></li>\n<li>pacman 可以在包数据库中查询软件包，查询位置包含了软件包的名字和描述<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman -Ss string1 string2 ...</span><br></pre></td></tr></table></figure></li>\n<li>要查询已安装的软件包<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman -Qs string1 string2 ...</span><br></pre></td></tr></table></figure></li>\n<li>按文件名查找软件库<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman -F string1 string2 ...</span><br></pre></td></tr></table></figure></li>\n<li>显示软件包的详尽的信息<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman -Si package_name</span><br></pre></td></tr></table></figure></li>\n<li>使用两个 -i 将同时显示备份文件和修改状态<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman -Qii package_name</span><br></pre></td></tr></table></figure></li>\n<li>要获取已安装软件包所包含文件的列表<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman -Ql package_name</span><br></pre></td></tr></table></figure></li>\n<li>要罗列所有不再作为依赖的软件包(孤立orphans)<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman -Qdt</span><br></pre></td></tr></table></figure></li>\n<li>清理软件包缓存<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman 将下载的软件包保存在 /var/cache/pacman/pkg/ 并且不会自动移除旧的和未安装版本的软件包</span><br></pre></td></tr></table></figure></li>\n<li>删除所有缓存的版本和已卸载的软件包，除了最近的3个会被保留<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">paccache -r</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"更新系统\"><a href=\"#更新系统\" class=\"headerlink\" title=\"更新系统\"></a>更新系统</h2><p>日常更新</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -Syu </span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yay -Syu</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<p>手头上保留 Arch 安装盘有问题时可以进行修正</p>\n<p>旧配置文件</p>\n<p>  ~&#x2F;.config&#x2F;        – 软件保存配置文件的地方<br>  ~&#x2F;.cache&#x2F;         – 程序缓存大小可能持续增加<br>  ~&#x2F;.local&#x2F;share&#x2F;   – 可能有旧文件</p>\n<p>手动处理</p>\n<p>  warning: &#x2F;etc&#x2F;pam.d&#x2F;usermod installed as &#x2F;etc&#x2F;pam.d&#x2F;usermod.pacnew<br>  warning: &#x2F;etc&#x2F;pam.d&#x2F;usermod saved as &#x2F;etc&#x2F;pam.d&#x2F;usermod.pacsave</p>\n<h3 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h3><p>arp -&gt;\tip neighbor<br>ifconfig -&gt;\tip address, ip link<br>netstat -&gt;\tss<br>route -&gt;\tip route </p>\n<h3 id=\"切换-Java-版本\"><a href=\"#切换-Java-版本\" class=\"headerlink\" title=\"切换 Java 版本\"></a>切换 Java 版本</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">archlinux-java &lt;COMMAND&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">COMMAND:</span><br><span class=\"line\">\tstatus\t\tList installed Java environments and enabled one</span><br><span class=\"line\">\tget\t\tReturn the short name of the Java environment set as default</span><br><span class=\"line\">\tset &lt;JAVA_ENV&gt;\tForce &lt;JAVA_ENV&gt; as default</span><br><span class=\"line\">\tunset\t\tUnset current default Java environment</span><br><span class=\"line\">\tfix\t\tFix an invalid/broken default Java environment configuration</span><br></pre></td></tr></table></figure>\n\n<p>切换Java版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo archlinux-java <span class=\"built_in\">set</span> java-17-openjdk</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"解压-zip-文件乱码\"><a href=\"#解压-zip-文件乱码\" class=\"headerlink\" title=\"解压 .zip 文件乱码\"></a>解压 .zip 文件乱码</h3><p>原因：</p>\n<p>由于zip格式中并没有指定编码格式，Windows下生成的zip文件中的编码是GBK&#x2F;GB2312等。<br>因此，导致这些zip文件在Linux下解压时出现乱码问题，因为Linux下的默认编码是UTF8。</p>\n<p>解决：</p>\n<p>安装修改版的 unzip</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yay -S unzip-natspec </span><br></pre></td></tr></table></figure>\n\n<p>解压时指定</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unzip -O cp936 &lt;filename&gt;.zip</span><br></pre></td></tr></table></figure>","site":{"data":{}},"cover_type":"img","excerpt":"<h2 id=\"安装软件\"><a href=\"#安装软件\" class=\"headerlink\" title=\"安装软件\"></a>安装软件</h2><p>  使用 pacman 安装、删除、升级</p>\n<ul>\n<li>安装指定的包<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman -S &lt;包名_1&gt; &lt;包名_2&gt; ...</span><br></pre></td></tr></table></figure></li>\n<li>安装一个本地包(不从源里下载）<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman -U /path/to/package/package_name-version.pkg.tar.zst</span><br></pre></td></tr></table></figure></li>\n<li>安装一个远程包（不在 pacman 配置的源里面）<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman -U &lt;http://www.example.com/repo/example.pkg.tar.zst&gt;</span><br></pre></td></tr></table></figure></li>\n<li>删除单个软件包，保留其全部已经安装的依赖关系<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman -R package_name</span><br></pre></td></tr></table></figure></li>\n<li>删除指定软件包，及其所有没有被其他已安装软件包使用的依赖关系<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman -Rs package_name</span><br></pre></td></tr></table></figure></li>\n<li>上面这条命令在移除包含其他所需包的组时有时候会拒绝运行。这种情况下可以尝试<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman -Rsu package_name</span><br></pre></td></tr></table></figure></li>\n<li>升级所有软件包<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman -Syu</span><br></pre></td></tr></table></figure></li>\n<li>查询包数据库<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman 使用 -Q 参数查询本地软件包数据库， -S 查询同步数据库，以及 -F查询文件数据库</span><br></pre></td></tr></table></figure></li>\n<li>pacman 可以在包数据库中查询软件包，查询位置包含了软件包的名字和描述<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman -Ss string1 string2 ...</span><br></pre></td></tr></table></figure></li>\n<li>要查询已安装的软件包<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman -Qs string1 string2 ...</span><br></pre></td></tr></table></figure></li>\n<li>按文件名查找软件库<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman -F string1 string2 ...</span><br></pre></td></tr></table></figure></li>\n<li>显示软件包的详尽的信息<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman -Si package_name</span><br></pre></td></tr></table></figure></li>\n<li>使用两个 -i 将同时显示备份文件和修改状态<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman -Qii package_name</span><br></pre></td></tr></table></figure></li>\n<li>要获取已安装软件包所包含文件的列表<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman -Ql package_name</span><br></pre></td></tr></table></figure></li>\n<li>要罗列所有不再作为依赖的软件包(孤立orphans)<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman -Qdt</span><br></pre></td></tr></table></figure></li>\n<li>清理软件包缓存<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman 将下载的软件包保存在 /var/cache/pacman/pkg/ 并且不会自动移除旧的和未安装版本的软件包</span><br></pre></td></tr></table></figure></li>\n<li>删除所有缓存的版本和已卸载的软件包，除了最近的3个会被保留<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">paccache -r</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"更新系统\"><a href=\"#更新系统\" class=\"headerlink\" title=\"更新系统\"></a>更新系统</h2><p>日常更新</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -Syu </span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yay -Syu</span><br></pre></td></tr></table></figure>","more":"<p>手头上保留 Arch 安装盘有问题时可以进行修正</p>\n<p>旧配置文件</p>\n<p>  ~&#x2F;.config&#x2F;        – 软件保存配置文件的地方<br>  ~&#x2F;.cache&#x2F;         – 程序缓存大小可能持续增加<br>  ~&#x2F;.local&#x2F;share&#x2F;   – 可能有旧文件</p>\n<p>手动处理</p>\n<p>  warning: &#x2F;etc&#x2F;pam.d&#x2F;usermod installed as &#x2F;etc&#x2F;pam.d&#x2F;usermod.pacnew<br>  warning: &#x2F;etc&#x2F;pam.d&#x2F;usermod saved as &#x2F;etc&#x2F;pam.d&#x2F;usermod.pacsave</p>\n<h3 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h3><p>arp -&gt;\tip neighbor<br>ifconfig -&gt;\tip address, ip link<br>netstat -&gt;\tss<br>route -&gt;\tip route </p>\n<h3 id=\"切换-Java-版本\"><a href=\"#切换-Java-版本\" class=\"headerlink\" title=\"切换 Java 版本\"></a>切换 Java 版本</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">archlinux-java &lt;COMMAND&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">COMMAND:</span><br><span class=\"line\">\tstatus\t\tList installed Java environments and enabled one</span><br><span class=\"line\">\tget\t\tReturn the short name of the Java environment set as default</span><br><span class=\"line\">\tset &lt;JAVA_ENV&gt;\tForce &lt;JAVA_ENV&gt; as default</span><br><span class=\"line\">\tunset\t\tUnset current default Java environment</span><br><span class=\"line\">\tfix\t\tFix an invalid/broken default Java environment configuration</span><br></pre></td></tr></table></figure>\n\n<p>切换Java版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo archlinux-java <span class=\"built_in\">set</span> java-17-openjdk</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"解压-zip-文件乱码\"><a href=\"#解压-zip-文件乱码\" class=\"headerlink\" title=\"解压 .zip 文件乱码\"></a>解压 .zip 文件乱码</h3><p>原因：</p>\n<p>由于zip格式中并没有指定编码格式，Windows下生成的zip文件中的编码是GBK&#x2F;GB2312等。<br>因此，导致这些zip文件在Linux下解压时出现乱码问题，因为Linux下的默认编码是UTF8。</p>\n<p>解决：</p>\n<p>安装修改版的 unzip</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yay -S unzip-natspec </span><br></pre></td></tr></table></figure>\n\n<p>解压时指定</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unzip -O cp936 &lt;filename&gt;.zip</span><br></pre></td></tr></table></figure>"},{"title":"ArchLinux 触摸板调教","date":"2023-06-08T07:30:46.000Z","cover":false,"_content":"\n## 开始之前\n\n    OS：Archlinux\n    WM：bspwm\n\n## 安装触摸板驱动\n\nsudo pacman -S xf86-input-libinput\n\n配置文件\n\n```Bash\nsudo vim /etc/X11/xorg.conf.d/30-touchpad.conf\n```\n\n```Bash\nSection \"InputClass\"\n    Identifier \"touchpad\"\n    Driver \"libinput\"\n    MatchIsTouchpad \"on\"\n    Option \"Tapping\" \"on\"\n    Option \"TappingButtonMap\" \"lmr\"\nEndSection\n```\n\n写入配置之后记得重新启动一下\n\n\n## 配置触摸板手势\n\n安装配置 libinput-gestures\n\n```Bash\nsudo pacman -S libinput-gestures\n```\n\nlibinput-gestures的文档中说了：必须是input组的成员才能具有读取触摸板设备的权限，所以需要添加用户到input\n\n```bash\nsudo gpasswd -a $USER input\n```\n\n退出登录后生效（或者重启）\n\n## 写入配置\n\n```bash\nvim .config/libinput-gestures.conf\n```\n\n```\ngesture swipe left 4 bspc node -s west\ngesture swipe right 4 bspc node -s east\ngesture swipe up 4 bspc desktop -f prev.local\ngesture swipe down 4 bspc desktop -f next.local\ngesture swipe left 3 bspc node -f west\ngesture swipe right 3 bspc node -f east\ngesture swipe down 3 flameshot gui\ngesture swipe up 3 rofi -show drun\n```\n\n```\nlibinput-gestures-setup autostart\nlibinput-gestures-setup start\n```","source":"_posts/Archlinux-触摸板调教.md","raw":"---\ntitle: ArchLinux 触摸板调教\ndate: 2023-06-08 15:30:46\ntags: Linux\ncover:\n---\n\n## 开始之前\n\n    OS：Archlinux\n    WM：bspwm\n\n## 安装触摸板驱动\n\nsudo pacman -S xf86-input-libinput\n\n配置文件\n\n```Bash\nsudo vim /etc/X11/xorg.conf.d/30-touchpad.conf\n```\n\n```Bash\nSection \"InputClass\"\n    Identifier \"touchpad\"\n    Driver \"libinput\"\n    MatchIsTouchpad \"on\"\n    Option \"Tapping\" \"on\"\n    Option \"TappingButtonMap\" \"lmr\"\nEndSection\n```\n\n写入配置之后记得重新启动一下\n\n\n## 配置触摸板手势\n\n安装配置 libinput-gestures\n\n```Bash\nsudo pacman -S libinput-gestures\n```\n\nlibinput-gestures的文档中说了：必须是input组的成员才能具有读取触摸板设备的权限，所以需要添加用户到input\n\n```bash\nsudo gpasswd -a $USER input\n```\n\n退出登录后生效（或者重启）\n\n## 写入配置\n\n```bash\nvim .config/libinput-gestures.conf\n```\n\n```\ngesture swipe left 4 bspc node -s west\ngesture swipe right 4 bspc node -s east\ngesture swipe up 4 bspc desktop -f prev.local\ngesture swipe down 4 bspc desktop -f next.local\ngesture swipe left 3 bspc node -f west\ngesture swipe right 3 bspc node -f east\ngesture swipe down 3 flameshot gui\ngesture swipe up 3 rofi -show drun\n```\n\n```\nlibinput-gestures-setup autostart\nlibinput-gestures-setup start\n```","slug":"Archlinux-触摸板调教","published":1,"updated":"2023-06-23T00:59:06.850Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5u20007lv9ea9lu8qse","content":"<h2 id=\"开始之前\"><a href=\"#开始之前\" class=\"headerlink\" title=\"开始之前\"></a>开始之前</h2><pre><code>OS：Archlinux\nWM：bspwm\n</code></pre>\n<h2 id=\"安装触摸板驱动\"><a href=\"#安装触摸板驱动\" class=\"headerlink\" title=\"安装触摸板驱动\"></a>安装触摸板驱动</h2><p>sudo pacman -S xf86-input-libinput</p>\n<p>配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/X11/xorg.conf.d/30-touchpad.conf</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Section <span class=\"string\">&quot;InputClass&quot;</span></span><br><span class=\"line\">    Identifier <span class=\"string\">&quot;touchpad&quot;</span></span><br><span class=\"line\">    Driver <span class=\"string\">&quot;libinput&quot;</span></span><br><span class=\"line\">    MatchIsTouchpad <span class=\"string\">&quot;on&quot;</span></span><br><span class=\"line\">    Option <span class=\"string\">&quot;Tapping&quot;</span> <span class=\"string\">&quot;on&quot;</span></span><br><span class=\"line\">    Option <span class=\"string\">&quot;TappingButtonMap&quot;</span> <span class=\"string\">&quot;lmr&quot;</span></span><br><span class=\"line\">EndSection</span><br></pre></td></tr></table></figure>\n\n<p>写入配置之后记得重新启动一下</p>\n<h2 id=\"配置触摸板手势\"><a href=\"#配置触摸板手势\" class=\"headerlink\" title=\"配置触摸板手势\"></a>配置触摸板手势</h2><p>安装配置 libinput-gestures</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S libinput-gestures</span><br></pre></td></tr></table></figure>\n\n<p>libinput-gestures的文档中说了：必须是input组的成员才能具有读取触摸板设备的权限，所以需要添加用户到input</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gpasswd -a <span class=\"variable\">$USER</span> input</span><br></pre></td></tr></table></figure>\n\n<p>退出登录后生效（或者重启）</p>\n<h2 id=\"写入配置\"><a href=\"#写入配置\" class=\"headerlink\" title=\"写入配置\"></a>写入配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim .config/libinput-gestures.conf</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gesture swipe left 4 bspc node -s west</span><br><span class=\"line\">gesture swipe right 4 bspc node -s east</span><br><span class=\"line\">gesture swipe up 4 bspc desktop -f prev.local</span><br><span class=\"line\">gesture swipe down 4 bspc desktop -f next.local</span><br><span class=\"line\">gesture swipe left 3 bspc node -f west</span><br><span class=\"line\">gesture swipe right 3 bspc node -f east</span><br><span class=\"line\">gesture swipe down 3 flameshot gui</span><br><span class=\"line\">gesture swipe up 3 rofi -show drun</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">libinput-gestures-setup autostart</span><br><span class=\"line\">libinput-gestures-setup start</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"开始之前\"><a href=\"#开始之前\" class=\"headerlink\" title=\"开始之前\"></a>开始之前</h2><pre><code>OS：Archlinux\nWM：bspwm\n</code></pre>\n<h2 id=\"安装触摸板驱动\"><a href=\"#安装触摸板驱动\" class=\"headerlink\" title=\"安装触摸板驱动\"></a>安装触摸板驱动</h2><p>sudo pacman -S xf86-input-libinput</p>\n<p>配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/X11/xorg.conf.d/30-touchpad.conf</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Section <span class=\"string\">&quot;InputClass&quot;</span></span><br><span class=\"line\">    Identifier <span class=\"string\">&quot;touchpad&quot;</span></span><br><span class=\"line\">    Driver <span class=\"string\">&quot;libinput&quot;</span></span><br><span class=\"line\">    MatchIsTouchpad <span class=\"string\">&quot;on&quot;</span></span><br><span class=\"line\">    Option <span class=\"string\">&quot;Tapping&quot;</span> <span class=\"string\">&quot;on&quot;</span></span><br><span class=\"line\">    Option <span class=\"string\">&quot;TappingButtonMap&quot;</span> <span class=\"string\">&quot;lmr&quot;</span></span><br><span class=\"line\">EndSection</span><br></pre></td></tr></table></figure>\n\n<p>写入配置之后记得重新启动一下</p>\n<h2 id=\"配置触摸板手势\"><a href=\"#配置触摸板手势\" class=\"headerlink\" title=\"配置触摸板手势\"></a>配置触摸板手势</h2><p>安装配置 libinput-gestures</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S libinput-gestures</span><br></pre></td></tr></table></figure>\n\n<p>libinput-gestures的文档中说了：必须是input组的成员才能具有读取触摸板设备的权限，所以需要添加用户到input</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gpasswd -a <span class=\"variable\">$USER</span> input</span><br></pre></td></tr></table></figure>\n\n<p>退出登录后生效（或者重启）</p>\n<h2 id=\"写入配置\"><a href=\"#写入配置\" class=\"headerlink\" title=\"写入配置\"></a>写入配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim .config/libinput-gestures.conf</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gesture swipe left 4 bspc node -s west</span><br><span class=\"line\">gesture swipe right 4 bspc node -s east</span><br><span class=\"line\">gesture swipe up 4 bspc desktop -f prev.local</span><br><span class=\"line\">gesture swipe down 4 bspc desktop -f next.local</span><br><span class=\"line\">gesture swipe left 3 bspc node -f west</span><br><span class=\"line\">gesture swipe right 3 bspc node -f east</span><br><span class=\"line\">gesture swipe down 3 flameshot gui</span><br><span class=\"line\">gesture swipe up 3 rofi -show drun</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">libinput-gestures-setup autostart</span><br><span class=\"line\">libinput-gestures-setup start</span><br></pre></td></tr></table></figure>"},{"title":"Archlinux 软件","date":"2023-02-08T12:20:20.000Z","_content":"\n# 软件\n\n## 桌面环境\nbspwm 窗口管理器\nsxhkd 响应快捷键\nfeh 壁纸\npicom 窗口特效\npolybar 状态栏\nrofi (dmenu) app启动\ndunst 通知管理器\nxf86-input-libinput 触控板手势\nzsh shell\n\n## 基础软件\nneovim 文本编辑器\nkitty 终端模拟器\nfcitx 中文输入法\nvs code 文本编辑器&IDE\nnautilus 文件管理器\nfirefox 浏览器\ngoogle-chrome 浏览器\nflameshot 截屏\nredshift 护眼\ngit 版本控制\n\n## 开发工具\nintellij-idea-ultimate-edition\nnodejs \nopen-jdk JDK\nconda python包、环境管理\ndocker 容器\npostman 接口测试\nblender 3D建模\nvirtualbox 虚拟机\ndbeaver-ue 数据库连接\n\n## 即时通讯\nlinux-qq QQ \ndeepin-wine-wechat Wechat\nDingTalk\nwemeet-bin\n\n## 影音视听&办公\nwps-office-cn\nlibre-ofice\ncalibre\nnetease-cloud-music 网易云音乐\ncopyq\ngimagereader-gtk 光学字符识别\ngimp 修图","source":"_posts/Archlinux-软件.md","raw":"---\ntitle: Archlinux 软件\ndate: 2023-02-08 20:20:20\ntags: Linux\n---\n\n# 软件\n\n## 桌面环境\nbspwm 窗口管理器\nsxhkd 响应快捷键\nfeh 壁纸\npicom 窗口特效\npolybar 状态栏\nrofi (dmenu) app启动\ndunst 通知管理器\nxf86-input-libinput 触控板手势\nzsh shell\n\n## 基础软件\nneovim 文本编辑器\nkitty 终端模拟器\nfcitx 中文输入法\nvs code 文本编辑器&IDE\nnautilus 文件管理器\nfirefox 浏览器\ngoogle-chrome 浏览器\nflameshot 截屏\nredshift 护眼\ngit 版本控制\n\n## 开发工具\nintellij-idea-ultimate-edition\nnodejs \nopen-jdk JDK\nconda python包、环境管理\ndocker 容器\npostman 接口测试\nblender 3D建模\nvirtualbox 虚拟机\ndbeaver-ue 数据库连接\n\n## 即时通讯\nlinux-qq QQ \ndeepin-wine-wechat Wechat\nDingTalk\nwemeet-bin\n\n## 影音视听&办公\nwps-office-cn\nlibre-ofice\ncalibre\nnetease-cloud-music 网易云音乐\ncopyq\ngimagereader-gtk 光学字符识别\ngimp 修图","slug":"Archlinux-软件","published":1,"updated":"2023-05-07T08:17:29.435Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5u20008lv9ef75e2qjt","content":"<h1 id=\"软件\"><a href=\"#软件\" class=\"headerlink\" title=\"软件\"></a>软件</h1><h2 id=\"桌面环境\"><a href=\"#桌面环境\" class=\"headerlink\" title=\"桌面环境\"></a>桌面环境</h2><p>bspwm 窗口管理器<br>sxhkd 响应快捷键<br>feh 壁纸<br>picom 窗口特效<br>polybar 状态栏<br>rofi (dmenu) app启动<br>dunst 通知管理器<br>xf86-input-libinput 触控板手势<br>zsh shell</p>\n<h2 id=\"基础软件\"><a href=\"#基础软件\" class=\"headerlink\" title=\"基础软件\"></a>基础软件</h2><p>neovim 文本编辑器<br>kitty 终端模拟器<br>fcitx 中文输入法<br>vs code 文本编辑器&amp;IDE<br>nautilus 文件管理器<br>firefox 浏览器<br>google-chrome 浏览器<br>flameshot 截屏<br>redshift 护眼<br>git 版本控制</p>\n<h2 id=\"开发工具\"><a href=\"#开发工具\" class=\"headerlink\" title=\"开发工具\"></a>开发工具</h2><p>intellij-idea-ultimate-edition<br>nodejs<br>open-jdk JDK<br>conda python包、环境管理<br>docker 容器<br>postman 接口测试<br>blender 3D建模<br>virtualbox 虚拟机<br>dbeaver-ue 数据库连接</p>\n<h2 id=\"即时通讯\"><a href=\"#即时通讯\" class=\"headerlink\" title=\"即时通讯\"></a>即时通讯</h2><p>linux-qq QQ<br>deepin-wine-wechat Wechat<br>DingTalk<br>wemeet-bin</p>\n<h2 id=\"影音视听-办公\"><a href=\"#影音视听-办公\" class=\"headerlink\" title=\"影音视听&amp;办公\"></a>影音视听&amp;办公</h2><p>wps-office-cn<br>libre-ofice<br>calibre<br>netease-cloud-music 网易云音乐<br>copyq<br>gimagereader-gtk 光学字符识别<br>gimp 修图</p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h1 id=\"软件\"><a href=\"#软件\" class=\"headerlink\" title=\"软件\"></a>软件</h1><h2 id=\"桌面环境\"><a href=\"#桌面环境\" class=\"headerlink\" title=\"桌面环境\"></a>桌面环境</h2><p>bspwm 窗口管理器<br>sxhkd 响应快捷键<br>feh 壁纸<br>picom 窗口特效<br>polybar 状态栏<br>rofi (dmenu) app启动<br>dunst 通知管理器<br>xf86-input-libinput 触控板手势<br>zsh shell</p>\n<h2 id=\"基础软件\"><a href=\"#基础软件\" class=\"headerlink\" title=\"基础软件\"></a>基础软件</h2><p>neovim 文本编辑器<br>kitty 终端模拟器<br>fcitx 中文输入法<br>vs code 文本编辑器&amp;IDE<br>nautilus 文件管理器<br>firefox 浏览器<br>google-chrome 浏览器<br>flameshot 截屏<br>redshift 护眼<br>git 版本控制</p>\n<h2 id=\"开发工具\"><a href=\"#开发工具\" class=\"headerlink\" title=\"开发工具\"></a>开发工具</h2><p>intellij-idea-ultimate-edition<br>nodejs<br>open-jdk JDK<br>conda python包、环境管理<br>docker 容器<br>postman 接口测试<br>blender 3D建模<br>virtualbox 虚拟机<br>dbeaver-ue 数据库连接</p>\n<h2 id=\"即时通讯\"><a href=\"#即时通讯\" class=\"headerlink\" title=\"即时通讯\"></a>即时通讯</h2><p>linux-qq QQ<br>deepin-wine-wechat Wechat<br>DingTalk<br>wemeet-bin</p>\n<h2 id=\"影音视听-办公\"><a href=\"#影音视听-办公\" class=\"headerlink\" title=\"影音视听&amp;办公\"></a>影音视听&amp;办公</h2><p>wps-office-cn<br>libre-ofice<br>calibre<br>netease-cloud-music 网易云音乐<br>copyq<br>gimagereader-gtk 光学字符识别<br>gimp 修图</p>\n"},{"title":"Blender","date":"2023-07-01T02:55:42.000Z","cover":false,"_content":"## Blender\n\nBlender集成了完整的3D创作工具, 建模、UV映射、贴图、绑定、动画、渲染、合成和运动跟踪等功能\n\n## 学习路径\n\n### 第一阶段：基础入门\n\n1. **软件安装**：下载并安装Blender最新版本。\n2. **界面熟悉**：了解Blender的用户界面和基本操作。\n3. **视图操作**：学习如何使用视图导航和视图设置。\n4. **基本几何体**：熟悉并练习创建基本几何体，如盒子、球体、圆柱体等。\n5. **编辑模式**：掌握编辑模式下的基本操作，如选择、移动、缩放和旋转。\n6. **简单建模**：尝试创建简单的物体，如桌子、椅子等。\n7. **材质和纹理**：了解如何为物体添加材质和纹理。\n8. **照明和相机**：学习基本的照明设置和相机使用。\n\n### 第二阶段：中级技能\n\n1. **复杂建模**：学习如何创建更复杂的模型，包括多边形建模和细节雕刻。\n2. **UV展开**：掌握如何为模型创建UV布局，以及如何展开和编辑UV。\n3. **贴图绘制**：学习如何在图像编辑软件中创建和编辑贴图。\n4. **绑定和角色设置**：了解如何为角色模型设置骨骼、蒙皮和绑定。\n5. **动画基础**：学习基本的动画制作，如关键帧动画和运动规律。\n6. **渲染设置**：熟悉Cycles渲染器的使用和渲染设置。\n\n### 第三阶段：高级应用\n\n1. **高级建模技术**：学习高级建模技术，如布尔运算、细分曲面和多边形细化。\n2. **动态模拟**：了解如何使用Blender的物理模拟功能，如流体模拟、布料模拟和粒子系统。\n3. **高级材质和着色**：学习创建高级材质和着色器，以及使用节点编辑器。\n4. **动画高级技巧**：掌握高级动画技术，如表情动画、角色动画和动力学动画。\n5. **渲染优化**：学习如何优化渲染设置，提高渲染效率和质量。\n6. **Python脚本**：了解如何使用Python脚本来扩展Blender的功能。\n\n### 第四阶段：专业实践\n\n1. **完整项目制作**：从头到尾完成一个复杂的3D项目，如短片、游戏资产或视觉效果。\n2. **协作和团队工作**：学习如何在团队环境中使用Blender，包括版本控制和协作工具。\n3. **持续学习**：保持对Blender新功能和行业趋势的关注，不断学习和实践。\n\n\n## 快捷键\n\n1. 小键盘0摄像机视角，N面板里有锁定相机视角，Ctrl+Alt+0锁定现在视角\n2. Ctrl+Alt+Q四视图，7、1、3对应视图，Ctrl+对应数字时背面视图，9翻转视图\n3. 选中物体，“.”放大当前物体，/键选中聚焦，其他屏蔽掉\n4. Ctrl+“.”四视图同时聚焦物体，HOME回到场景\n5. G、R、S——移动、旋转、缩放，Ctrl+~开启，旋转时再按R可以深度旋转，开启后，Alt+R旋转清零\n6. Shift+左键，加选，再次取消\n7. w切换选择模式，选择模式好几种，A全选，再次取消\n8. 添加，shift+A\n9. X,删除\n10. 三要素：物体、摄像机、灯光\n11. 文件 > 关联，导入模型，灯光也可以旋转、缩放，\n12. 世界属性 > 颜色小点 > 环境纹理，打开 > 图形就可以，导入背景\n13. I插入关键帧，鼠标放在参数上，变色才可以记录，选中关键帧，右键线性输出，再打印机图标哪里输出\n14. 窗口添加和去除，\n15. Ctrl+空格，最大化；Ctrl+Alt+空格，全屏","source":"_posts/Blender.md","raw":"---\ntitle: Blender\ntags: \n- Blender\n- 3D\ndate: 2023-07-01 10:55:42\ncover:\n---\n## Blender\n\nBlender集成了完整的3D创作工具, 建模、UV映射、贴图、绑定、动画、渲染、合成和运动跟踪等功能\n\n## 学习路径\n\n### 第一阶段：基础入门\n\n1. **软件安装**：下载并安装Blender最新版本。\n2. **界面熟悉**：了解Blender的用户界面和基本操作。\n3. **视图操作**：学习如何使用视图导航和视图设置。\n4. **基本几何体**：熟悉并练习创建基本几何体，如盒子、球体、圆柱体等。\n5. **编辑模式**：掌握编辑模式下的基本操作，如选择、移动、缩放和旋转。\n6. **简单建模**：尝试创建简单的物体，如桌子、椅子等。\n7. **材质和纹理**：了解如何为物体添加材质和纹理。\n8. **照明和相机**：学习基本的照明设置和相机使用。\n\n### 第二阶段：中级技能\n\n1. **复杂建模**：学习如何创建更复杂的模型，包括多边形建模和细节雕刻。\n2. **UV展开**：掌握如何为模型创建UV布局，以及如何展开和编辑UV。\n3. **贴图绘制**：学习如何在图像编辑软件中创建和编辑贴图。\n4. **绑定和角色设置**：了解如何为角色模型设置骨骼、蒙皮和绑定。\n5. **动画基础**：学习基本的动画制作，如关键帧动画和运动规律。\n6. **渲染设置**：熟悉Cycles渲染器的使用和渲染设置。\n\n### 第三阶段：高级应用\n\n1. **高级建模技术**：学习高级建模技术，如布尔运算、细分曲面和多边形细化。\n2. **动态模拟**：了解如何使用Blender的物理模拟功能，如流体模拟、布料模拟和粒子系统。\n3. **高级材质和着色**：学习创建高级材质和着色器，以及使用节点编辑器。\n4. **动画高级技巧**：掌握高级动画技术，如表情动画、角色动画和动力学动画。\n5. **渲染优化**：学习如何优化渲染设置，提高渲染效率和质量。\n6. **Python脚本**：了解如何使用Python脚本来扩展Blender的功能。\n\n### 第四阶段：专业实践\n\n1. **完整项目制作**：从头到尾完成一个复杂的3D项目，如短片、游戏资产或视觉效果。\n2. **协作和团队工作**：学习如何在团队环境中使用Blender，包括版本控制和协作工具。\n3. **持续学习**：保持对Blender新功能和行业趋势的关注，不断学习和实践。\n\n\n## 快捷键\n\n1. 小键盘0摄像机视角，N面板里有锁定相机视角，Ctrl+Alt+0锁定现在视角\n2. Ctrl+Alt+Q四视图，7、1、3对应视图，Ctrl+对应数字时背面视图，9翻转视图\n3. 选中物体，“.”放大当前物体，/键选中聚焦，其他屏蔽掉\n4. Ctrl+“.”四视图同时聚焦物体，HOME回到场景\n5. G、R、S——移动、旋转、缩放，Ctrl+~开启，旋转时再按R可以深度旋转，开启后，Alt+R旋转清零\n6. Shift+左键，加选，再次取消\n7. w切换选择模式，选择模式好几种，A全选，再次取消\n8. 添加，shift+A\n9. X,删除\n10. 三要素：物体、摄像机、灯光\n11. 文件 > 关联，导入模型，灯光也可以旋转、缩放，\n12. 世界属性 > 颜色小点 > 环境纹理，打开 > 图形就可以，导入背景\n13. I插入关键帧，鼠标放在参数上，变色才可以记录，选中关键帧，右键线性输出，再打印机图标哪里输出\n14. 窗口添加和去除，\n15. Ctrl+空格，最大化；Ctrl+Alt+空格，全屏","slug":"Blender","published":1,"updated":"2023-12-28T13:44:25.205Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5u4000blv9e8gpp6j8k","content":"<h2 id=\"Blender\"><a href=\"#Blender\" class=\"headerlink\" title=\"Blender\"></a>Blender</h2><p>Blender集成了完整的3D创作工具, 建模、UV映射、贴图、绑定、动画、渲染、合成和运动跟踪等功能</p>\n<h2 id=\"学习路径\"><a href=\"#学习路径\" class=\"headerlink\" title=\"学习路径\"></a>学习路径</h2><h3 id=\"第一阶段：基础入门\"><a href=\"#第一阶段：基础入门\" class=\"headerlink\" title=\"第一阶段：基础入门\"></a>第一阶段：基础入门</h3><ol>\n<li><strong>软件安装</strong>：下载并安装Blender最新版本。</li>\n<li><strong>界面熟悉</strong>：了解Blender的用户界面和基本操作。</li>\n<li><strong>视图操作</strong>：学习如何使用视图导航和视图设置。</li>\n<li><strong>基本几何体</strong>：熟悉并练习创建基本几何体，如盒子、球体、圆柱体等。</li>\n<li><strong>编辑模式</strong>：掌握编辑模式下的基本操作，如选择、移动、缩放和旋转。</li>\n<li><strong>简单建模</strong>：尝试创建简单的物体，如桌子、椅子等。</li>\n<li><strong>材质和纹理</strong>：了解如何为物体添加材质和纹理。</li>\n<li><strong>照明和相机</strong>：学习基本的照明设置和相机使用。</li>\n</ol>\n<h3 id=\"第二阶段：中级技能\"><a href=\"#第二阶段：中级技能\" class=\"headerlink\" title=\"第二阶段：中级技能\"></a>第二阶段：中级技能</h3><ol>\n<li><strong>复杂建模</strong>：学习如何创建更复杂的模型，包括多边形建模和细节雕刻。</li>\n<li><strong>UV展开</strong>：掌握如何为模型创建UV布局，以及如何展开和编辑UV。</li>\n<li><strong>贴图绘制</strong>：学习如何在图像编辑软件中创建和编辑贴图。</li>\n<li><strong>绑定和角色设置</strong>：了解如何为角色模型设置骨骼、蒙皮和绑定。</li>\n<li><strong>动画基础</strong>：学习基本的动画制作，如关键帧动画和运动规律。</li>\n<li><strong>渲染设置</strong>：熟悉Cycles渲染器的使用和渲染设置。</li>\n</ol>\n<h3 id=\"第三阶段：高级应用\"><a href=\"#第三阶段：高级应用\" class=\"headerlink\" title=\"第三阶段：高级应用\"></a>第三阶段：高级应用</h3><ol>\n<li><strong>高级建模技术</strong>：学习高级建模技术，如布尔运算、细分曲面和多边形细化。</li>\n<li><strong>动态模拟</strong>：了解如何使用Blender的物理模拟功能，如流体模拟、布料模拟和粒子系统。</li>\n<li><strong>高级材质和着色</strong>：学习创建高级材质和着色器，以及使用节点编辑器。</li>\n<li><strong>动画高级技巧</strong>：掌握高级动画技术，如表情动画、角色动画和动力学动画。</li>\n<li><strong>渲染优化</strong>：学习如何优化渲染设置，提高渲染效率和质量。</li>\n<li><strong>Python脚本</strong>：了解如何使用Python脚本来扩展Blender的功能。</li>\n</ol>\n<h3 id=\"第四阶段：专业实践\"><a href=\"#第四阶段：专业实践\" class=\"headerlink\" title=\"第四阶段：专业实践\"></a>第四阶段：专业实践</h3><ol>\n<li><strong>完整项目制作</strong>：从头到尾完成一个复杂的3D项目，如短片、游戏资产或视觉效果。</li>\n<li><strong>协作和团队工作</strong>：学习如何在团队环境中使用Blender，包括版本控制和协作工具。</li>\n<li><strong>持续学习</strong>：保持对Blender新功能和行业趋势的关注，不断学习和实践。</li>\n</ol>\n<h2 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h2><ol>\n<li>小键盘0摄像机视角，N面板里有锁定相机视角，Ctrl+Alt+0锁定现在视角</li>\n<li>Ctrl+Alt+Q四视图，7、1、3对应视图，Ctrl+对应数字时背面视图，9翻转视图</li>\n<li>选中物体，“.”放大当前物体，&#x2F;键选中聚焦，其他屏蔽掉</li>\n<li>Ctrl+“.”四视图同时聚焦物体，HOME回到场景</li>\n<li>G、R、S——移动、旋转、缩放，Ctrl+~开启，旋转时再按R可以深度旋转，开启后，Alt+R旋转清零</li>\n<li>Shift+左键，加选，再次取消</li>\n<li>w切换选择模式，选择模式好几种，A全选，再次取消</li>\n<li>添加，shift+A</li>\n<li>X,删除</li>\n<li>三要素：物体、摄像机、灯光</li>\n<li>文件 &gt; 关联，导入模型，灯光也可以旋转、缩放，</li>\n<li>世界属性 &gt; 颜色小点 &gt; 环境纹理，打开 &gt; 图形就可以，导入背景</li>\n<li>I插入关键帧，鼠标放在参数上，变色才可以记录，选中关键帧，右键线性输出，再打印机图标哪里输出</li>\n<li>窗口添加和去除，</li>\n<li>Ctrl+空格，最大化；Ctrl+Alt+空格，全屏</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Blender\"><a href=\"#Blender\" class=\"headerlink\" title=\"Blender\"></a>Blender</h2><p>Blender集成了完整的3D创作工具, 建模、UV映射、贴图、绑定、动画、渲染、合成和运动跟踪等功能</p>\n<h2 id=\"学习路径\"><a href=\"#学习路径\" class=\"headerlink\" title=\"学习路径\"></a>学习路径</h2><h3 id=\"第一阶段：基础入门\"><a href=\"#第一阶段：基础入门\" class=\"headerlink\" title=\"第一阶段：基础入门\"></a>第一阶段：基础入门</h3><ol>\n<li><strong>软件安装</strong>：下载并安装Blender最新版本。</li>\n<li><strong>界面熟悉</strong>：了解Blender的用户界面和基本操作。</li>\n<li><strong>视图操作</strong>：学习如何使用视图导航和视图设置。</li>\n<li><strong>基本几何体</strong>：熟悉并练习创建基本几何体，如盒子、球体、圆柱体等。</li>\n<li><strong>编辑模式</strong>：掌握编辑模式下的基本操作，如选择、移动、缩放和旋转。</li>\n<li><strong>简单建模</strong>：尝试创建简单的物体，如桌子、椅子等。</li>\n<li><strong>材质和纹理</strong>：了解如何为物体添加材质和纹理。</li>\n<li><strong>照明和相机</strong>：学习基本的照明设置和相机使用。</li>\n</ol>\n<h3 id=\"第二阶段：中级技能\"><a href=\"#第二阶段：中级技能\" class=\"headerlink\" title=\"第二阶段：中级技能\"></a>第二阶段：中级技能</h3><ol>\n<li><strong>复杂建模</strong>：学习如何创建更复杂的模型，包括多边形建模和细节雕刻。</li>\n<li><strong>UV展开</strong>：掌握如何为模型创建UV布局，以及如何展开和编辑UV。</li>\n<li><strong>贴图绘制</strong>：学习如何在图像编辑软件中创建和编辑贴图。</li>\n<li><strong>绑定和角色设置</strong>：了解如何为角色模型设置骨骼、蒙皮和绑定。</li>\n<li><strong>动画基础</strong>：学习基本的动画制作，如关键帧动画和运动规律。</li>\n<li><strong>渲染设置</strong>：熟悉Cycles渲染器的使用和渲染设置。</li>\n</ol>\n<h3 id=\"第三阶段：高级应用\"><a href=\"#第三阶段：高级应用\" class=\"headerlink\" title=\"第三阶段：高级应用\"></a>第三阶段：高级应用</h3><ol>\n<li><strong>高级建模技术</strong>：学习高级建模技术，如布尔运算、细分曲面和多边形细化。</li>\n<li><strong>动态模拟</strong>：了解如何使用Blender的物理模拟功能，如流体模拟、布料模拟和粒子系统。</li>\n<li><strong>高级材质和着色</strong>：学习创建高级材质和着色器，以及使用节点编辑器。</li>\n<li><strong>动画高级技巧</strong>：掌握高级动画技术，如表情动画、角色动画和动力学动画。</li>\n<li><strong>渲染优化</strong>：学习如何优化渲染设置，提高渲染效率和质量。</li>\n<li><strong>Python脚本</strong>：了解如何使用Python脚本来扩展Blender的功能。</li>\n</ol>\n<h3 id=\"第四阶段：专业实践\"><a href=\"#第四阶段：专业实践\" class=\"headerlink\" title=\"第四阶段：专业实践\"></a>第四阶段：专业实践</h3><ol>\n<li><strong>完整项目制作</strong>：从头到尾完成一个复杂的3D项目，如短片、游戏资产或视觉效果。</li>\n<li><strong>协作和团队工作</strong>：学习如何在团队环境中使用Blender，包括版本控制和协作工具。</li>\n<li><strong>持续学习</strong>：保持对Blender新功能和行业趋势的关注，不断学习和实践。</li>\n</ol>\n<h2 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h2><ol>\n<li>小键盘0摄像机视角，N面板里有锁定相机视角，Ctrl+Alt+0锁定现在视角</li>\n<li>Ctrl+Alt+Q四视图，7、1、3对应视图，Ctrl+对应数字时背面视图，9翻转视图</li>\n<li>选中物体，“.”放大当前物体，&#x2F;键选中聚焦，其他屏蔽掉</li>\n<li>Ctrl+“.”四视图同时聚焦物体，HOME回到场景</li>\n<li>G、R、S——移动、旋转、缩放，Ctrl+~开启，旋转时再按R可以深度旋转，开启后，Alt+R旋转清零</li>\n<li>Shift+左键，加选，再次取消</li>\n<li>w切换选择模式，选择模式好几种，A全选，再次取消</li>\n<li>添加，shift+A</li>\n<li>X,删除</li>\n<li>三要素：物体、摄像机、灯光</li>\n<li>文件 &gt; 关联，导入模型，灯光也可以旋转、缩放，</li>\n<li>世界属性 &gt; 颜色小点 &gt; 环境纹理，打开 &gt; 图形就可以，导入背景</li>\n<li>I插入关键帧，鼠标放在参数上，变色才可以记录，选中关键帧，右键线性输出，再打印机图标哪里输出</li>\n<li>窗口添加和去除，</li>\n<li>Ctrl+空格，最大化；Ctrl+Alt+空格，全屏</li>\n</ol>\n"},{"title":"Docker Chevereto 图床","date":"2023-07-10T03:48:15.000Z","cover":false,"_content":"\n# Docker 安装 Chevereto 图床\n\n有试过用mongoDB存图片，在网页上显示要经过一些列转换。速度还是不如直接交给操作系统管理\n\n下面搭建一个图床），方便引用图片。\n\n## 拉取镜像\n```bash\ndocker pull mariadb && \ndocker pull nmtan/chevereto:1.4.1\n```\n## 创建图片存放目录\n\n```bash\ncd ~\nmkdir -p .chevereto/app/images \n```\n\n授权\n```\nsudo chomod -R 777 ./app/\n```\n\n## 编辑php的配置\n\n```bash\nvim ./app/php.ini\n```\n\n写入\n\n```\nupload_max_filesize = 100M\npost_max_size = 100M\nmemory_limit = 3072M\nmax_execution_tim = 180\n```\n\n\n\n## 编辑docker-compose配置\n\n```bash\nvim ~/.chevereto/docker-compose.yml\n\n```\n\n写入\n\n```docker-compose\n---\nversion: '3'\n \nservices:\n  db:\n    image: mariadb\n    volumes:\n      - ./db:/var/lib/mysql:rw\n    restart: always\n    networks:\n      - default\n    environment:\n      MYSQL_ROOT_PASSWORD: 021009 # 按需更改\n      MYSQL_DATABASE: chevereto # 按需更改\n      MYSQL_USER: chevereto # 按需更改\n      MYSQL_PASSWORD: 021009 # 按需更改\n \n  app:\n    image: nmtan/chevereto:1.4.1 # 固定为1.4.1，个人感觉这个版本最好用\n    restart: always\n    ports:\n      - 7777:80 # 按需更改\n    networks:\n      - default\n    environment:\n      CHEVERETO_DB_HOST: db\n      CHEVERETO_DB_NAME: chevereto # 与db的设置一一对应\n      CHEVERETO_DB_USERNAME: chevereto # 与db的设置一一对应\n      CHEVERETO_DB_PASSWORD: 021009 # 与db的设置一一对应\n    volumes:\n      - ./app/images:/var/www/html/images:rw\n      # - ./app/content:/var/www/html/content:rw\n      - ./app/php.ini:/usr/local/etc/php/php.ini:ro\n      # - ./app/app/routes:/var/www/html/app/routes:rw\n    depends_on:\n      - db\n \nnetworks:\n  default:\n    name: chevereto\n```\n\n## 启动\n\n```bash\ndocker-compose up -d\n```\n\n## 查看日志\n```bash\ndocker-compose logs -f\n```\n","source":"_posts/Docker-Chevereto-图床.md","raw":"---\ntitle: Docker Chevereto 图床\ntags: \n- Docker \n- Chevereto 图床\ndate: 2023-07-10 11:48:15\ncover:\n---\n\n# Docker 安装 Chevereto 图床\n\n有试过用mongoDB存图片，在网页上显示要经过一些列转换。速度还是不如直接交给操作系统管理\n\n下面搭建一个图床），方便引用图片。\n\n## 拉取镜像\n```bash\ndocker pull mariadb && \ndocker pull nmtan/chevereto:1.4.1\n```\n## 创建图片存放目录\n\n```bash\ncd ~\nmkdir -p .chevereto/app/images \n```\n\n授权\n```\nsudo chomod -R 777 ./app/\n```\n\n## 编辑php的配置\n\n```bash\nvim ./app/php.ini\n```\n\n写入\n\n```\nupload_max_filesize = 100M\npost_max_size = 100M\nmemory_limit = 3072M\nmax_execution_tim = 180\n```\n\n\n\n## 编辑docker-compose配置\n\n```bash\nvim ~/.chevereto/docker-compose.yml\n\n```\n\n写入\n\n```docker-compose\n---\nversion: '3'\n \nservices:\n  db:\n    image: mariadb\n    volumes:\n      - ./db:/var/lib/mysql:rw\n    restart: always\n    networks:\n      - default\n    environment:\n      MYSQL_ROOT_PASSWORD: 021009 # 按需更改\n      MYSQL_DATABASE: chevereto # 按需更改\n      MYSQL_USER: chevereto # 按需更改\n      MYSQL_PASSWORD: 021009 # 按需更改\n \n  app:\n    image: nmtan/chevereto:1.4.1 # 固定为1.4.1，个人感觉这个版本最好用\n    restart: always\n    ports:\n      - 7777:80 # 按需更改\n    networks:\n      - default\n    environment:\n      CHEVERETO_DB_HOST: db\n      CHEVERETO_DB_NAME: chevereto # 与db的设置一一对应\n      CHEVERETO_DB_USERNAME: chevereto # 与db的设置一一对应\n      CHEVERETO_DB_PASSWORD: 021009 # 与db的设置一一对应\n    volumes:\n      - ./app/images:/var/www/html/images:rw\n      # - ./app/content:/var/www/html/content:rw\n      - ./app/php.ini:/usr/local/etc/php/php.ini:ro\n      # - ./app/app/routes:/var/www/html/app/routes:rw\n    depends_on:\n      - db\n \nnetworks:\n  default:\n    name: chevereto\n```\n\n## 启动\n\n```bash\ndocker-compose up -d\n```\n\n## 查看日志\n```bash\ndocker-compose logs -f\n```\n","slug":"Docker-Chevereto-图床","published":1,"updated":"2023-08-07T10:02:46.947Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5u5000dlv9eccizczqr","content":"<h1 id=\"Docker-安装-Chevereto-图床\"><a href=\"#Docker-安装-Chevereto-图床\" class=\"headerlink\" title=\"Docker 安装 Chevereto 图床\"></a>Docker 安装 Chevereto 图床</h1><p>有试过用mongoDB存图片，在网页上显示要经过一些列转换。速度还是不如直接交给操作系统管理</p>\n<p>下面搭建一个图床），方便引用图片。</p>\n<h2 id=\"拉取镜像\"><a href=\"#拉取镜像\" class=\"headerlink\" title=\"拉取镜像\"></a>拉取镜像</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mariadb &amp;&amp; </span><br><span class=\"line\">docker pull nmtan/chevereto:1.4.1</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建图片存放目录\"><a href=\"#创建图片存放目录\" class=\"headerlink\" title=\"创建图片存放目录\"></a>创建图片存放目录</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p .chevereto/app/images </span><br></pre></td></tr></table></figure>\n\n<p>授权</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chomod -R 777 ./app/</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"编辑php的配置\"><a href=\"#编辑php的配置\" class=\"headerlink\" title=\"编辑php的配置\"></a>编辑php的配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ./app/php.ini</span><br></pre></td></tr></table></figure>\n\n<p>写入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upload_max_filesize = 100M</span><br><span class=\"line\">post_max_size = 100M</span><br><span class=\"line\">memory_limit = 3072M</span><br><span class=\"line\">max_execution_tim = 180</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"编辑docker-compose配置\"><a href=\"#编辑docker-compose配置\" class=\"headerlink\" title=\"编辑docker-compose配置\"></a>编辑docker-compose配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.chevereto/docker-compose.yml</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>写入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">version: &#x27;3&#x27;</span><br><span class=\"line\"> </span><br><span class=\"line\">services:</span><br><span class=\"line\">  db:</span><br><span class=\"line\">    image: mariadb</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./db:/var/lib/mysql:rw</span><br><span class=\"line\">    restart: always</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - default</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      MYSQL_ROOT_PASSWORD: 021009 # 按需更改</span><br><span class=\"line\">      MYSQL_DATABASE: chevereto # 按需更改</span><br><span class=\"line\">      MYSQL_USER: chevereto # 按需更改</span><br><span class=\"line\">      MYSQL_PASSWORD: 021009 # 按需更改</span><br><span class=\"line\"> </span><br><span class=\"line\">  app:</span><br><span class=\"line\">    image: nmtan/chevereto:1.4.1 # 固定为1.4.1，个人感觉这个版本最好用</span><br><span class=\"line\">    restart: always</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 7777:80 # 按需更改</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - default</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      CHEVERETO_DB_HOST: db</span><br><span class=\"line\">      CHEVERETO_DB_NAME: chevereto # 与db的设置一一对应</span><br><span class=\"line\">      CHEVERETO_DB_USERNAME: chevereto # 与db的设置一一对应</span><br><span class=\"line\">      CHEVERETO_DB_PASSWORD: 021009 # 与db的设置一一对应</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./app/images:/var/www/html/images:rw</span><br><span class=\"line\">      # - ./app/content:/var/www/html/content:rw</span><br><span class=\"line\">      - ./app/php.ini:/usr/local/etc/php/php.ini:ro</span><br><span class=\"line\">      # - ./app/app/routes:/var/www/html/app/routes:rw</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">      - db</span><br><span class=\"line\"> </span><br><span class=\"line\">networks:</span><br><span class=\"line\">  default:</span><br><span class=\"line\">    name: chevereto</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看日志\"><a href=\"#查看日志\" class=\"headerlink\" title=\"查看日志\"></a>查看日志</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose logs -f</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Docker-安装-Chevereto-图床\"><a href=\"#Docker-安装-Chevereto-图床\" class=\"headerlink\" title=\"Docker 安装 Chevereto 图床\"></a>Docker 安装 Chevereto 图床</h1><p>有试过用mongoDB存图片，在网页上显示要经过一些列转换。速度还是不如直接交给操作系统管理</p>\n<p>下面搭建一个图床），方便引用图片。</p>\n<h2 id=\"拉取镜像\"><a href=\"#拉取镜像\" class=\"headerlink\" title=\"拉取镜像\"></a>拉取镜像</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mariadb &amp;&amp; </span><br><span class=\"line\">docker pull nmtan/chevereto:1.4.1</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建图片存放目录\"><a href=\"#创建图片存放目录\" class=\"headerlink\" title=\"创建图片存放目录\"></a>创建图片存放目录</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p .chevereto/app/images </span><br></pre></td></tr></table></figure>\n\n<p>授权</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chomod -R 777 ./app/</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"编辑php的配置\"><a href=\"#编辑php的配置\" class=\"headerlink\" title=\"编辑php的配置\"></a>编辑php的配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ./app/php.ini</span><br></pre></td></tr></table></figure>\n\n<p>写入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upload_max_filesize = 100M</span><br><span class=\"line\">post_max_size = 100M</span><br><span class=\"line\">memory_limit = 3072M</span><br><span class=\"line\">max_execution_tim = 180</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"编辑docker-compose配置\"><a href=\"#编辑docker-compose配置\" class=\"headerlink\" title=\"编辑docker-compose配置\"></a>编辑docker-compose配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.chevereto/docker-compose.yml</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>写入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">version: &#x27;3&#x27;</span><br><span class=\"line\"> </span><br><span class=\"line\">services:</span><br><span class=\"line\">  db:</span><br><span class=\"line\">    image: mariadb</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./db:/var/lib/mysql:rw</span><br><span class=\"line\">    restart: always</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - default</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      MYSQL_ROOT_PASSWORD: 021009 # 按需更改</span><br><span class=\"line\">      MYSQL_DATABASE: chevereto # 按需更改</span><br><span class=\"line\">      MYSQL_USER: chevereto # 按需更改</span><br><span class=\"line\">      MYSQL_PASSWORD: 021009 # 按需更改</span><br><span class=\"line\"> </span><br><span class=\"line\">  app:</span><br><span class=\"line\">    image: nmtan/chevereto:1.4.1 # 固定为1.4.1，个人感觉这个版本最好用</span><br><span class=\"line\">    restart: always</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 7777:80 # 按需更改</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - default</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      CHEVERETO_DB_HOST: db</span><br><span class=\"line\">      CHEVERETO_DB_NAME: chevereto # 与db的设置一一对应</span><br><span class=\"line\">      CHEVERETO_DB_USERNAME: chevereto # 与db的设置一一对应</span><br><span class=\"line\">      CHEVERETO_DB_PASSWORD: 021009 # 与db的设置一一对应</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./app/images:/var/www/html/images:rw</span><br><span class=\"line\">      # - ./app/content:/var/www/html/content:rw</span><br><span class=\"line\">      - ./app/php.ini:/usr/local/etc/php/php.ini:ro</span><br><span class=\"line\">      # - ./app/app/routes:/var/www/html/app/routes:rw</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">      - db</span><br><span class=\"line\"> </span><br><span class=\"line\">networks:</span><br><span class=\"line\">  default:</span><br><span class=\"line\">    name: chevereto</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看日志\"><a href=\"#查看日志\" class=\"headerlink\" title=\"查看日志\"></a>查看日志</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose logs -f</span><br></pre></td></tr></table></figure>\n"},{"title":"Docker Draw.io","date":"2023-07-07T14:23:45.000Z","cover":false,"_content":"## Docker 安装\n```bash\ndocker run -it -m1g \\\n  -v \"/home/quanwei/.drawio/letsencrypt-log:/var/log/letsencrypt/\" \\\n  -v \"/home/quanwei/.drawio/letsencrypt-etc:/etc/letsencrypt/\" \\\n  -v \"/home/quanwei/.drawio/letsencrypt-lib:/var/lib/letsencrypt\" \\\n  -e LETS_ENCRYPT_ENABLED=true \\\n  -e PUBLIC_DNS=drawio.example.com \\\n  --name=\"drawio\" \\\n  -p 8088:8080 \\\n  jgraph/drawio\n```\n\n## 启动\n\nStart a web browser session to http://localhost:8080/?offline=1&https=0 \n\nIf you're running Docker Toolbox then start a web browser session to\n http://192.168.99.100:8080/?offline=1&https=0","source":"_posts/Docker-Draw-io.md","raw":"---\ntitle: Docker Draw.io\ntags: \n- Docker \n- Draw.io\ndate: 2023-07-07 22:23:45\ncover:\n---\n## Docker 安装\n```bash\ndocker run -it -m1g \\\n  -v \"/home/quanwei/.drawio/letsencrypt-log:/var/log/letsencrypt/\" \\\n  -v \"/home/quanwei/.drawio/letsencrypt-etc:/etc/letsencrypt/\" \\\n  -v \"/home/quanwei/.drawio/letsencrypt-lib:/var/lib/letsencrypt\" \\\n  -e LETS_ENCRYPT_ENABLED=true \\\n  -e PUBLIC_DNS=drawio.example.com \\\n  --name=\"drawio\" \\\n  -p 8088:8080 \\\n  jgraph/drawio\n```\n\n## 启动\n\nStart a web browser session to http://localhost:8080/?offline=1&https=0 \n\nIf you're running Docker Toolbox then start a web browser session to\n http://192.168.99.100:8080/?offline=1&https=0","slug":"Docker-Draw-io","published":1,"updated":"2023-07-07T14:47:05.825Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5u6000glv9eei8z7m63","content":"<h2 id=\"Docker-安装\"><a href=\"#Docker-安装\" class=\"headerlink\" title=\"Docker 安装\"></a>Docker 安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it -m1g \\</span><br><span class=\"line\">  -v <span class=\"string\">&quot;/home/quanwei/.drawio/letsencrypt-log:/var/log/letsencrypt/&quot;</span> \\</span><br><span class=\"line\">  -v <span class=\"string\">&quot;/home/quanwei/.drawio/letsencrypt-etc:/etc/letsencrypt/&quot;</span> \\</span><br><span class=\"line\">  -v <span class=\"string\">&quot;/home/quanwei/.drawio/letsencrypt-lib:/var/lib/letsencrypt&quot;</span> \\</span><br><span class=\"line\">  -e LETS_ENCRYPT_ENABLED=<span class=\"literal\">true</span> \\</span><br><span class=\"line\">  -e PUBLIC_DNS=drawio.example.com \\</span><br><span class=\"line\">  --name=<span class=\"string\">&quot;drawio&quot;</span> \\</span><br><span class=\"line\">  -p 8088:8080 \\</span><br><span class=\"line\">  jgraph/drawio</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><p>Start a web browser session to <a href=\"http://localhost:8080/?offline=1&https=0\">http://localhost:8080/?offline=1&amp;https=0</a> </p>\n<p>If you’re running Docker Toolbox then start a web browser session to<br> <a href=\"http://192.168.99.100:8080/?offline=1&https=0\">http://192.168.99.100:8080/?offline=1&amp;https=0</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Docker-安装\"><a href=\"#Docker-安装\" class=\"headerlink\" title=\"Docker 安装\"></a>Docker 安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it -m1g \\</span><br><span class=\"line\">  -v <span class=\"string\">&quot;/home/quanwei/.drawio/letsencrypt-log:/var/log/letsencrypt/&quot;</span> \\</span><br><span class=\"line\">  -v <span class=\"string\">&quot;/home/quanwei/.drawio/letsencrypt-etc:/etc/letsencrypt/&quot;</span> \\</span><br><span class=\"line\">  -v <span class=\"string\">&quot;/home/quanwei/.drawio/letsencrypt-lib:/var/lib/letsencrypt&quot;</span> \\</span><br><span class=\"line\">  -e LETS_ENCRYPT_ENABLED=<span class=\"literal\">true</span> \\</span><br><span class=\"line\">  -e PUBLIC_DNS=drawio.example.com \\</span><br><span class=\"line\">  --name=<span class=\"string\">&quot;drawio&quot;</span> \\</span><br><span class=\"line\">  -p 8088:8080 \\</span><br><span class=\"line\">  jgraph/drawio</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><p>Start a web browser session to <a href=\"http://localhost:8080/?offline=1&https=0\">http://localhost:8080/?offline=1&amp;https=0</a> </p>\n<p>If you’re running Docker Toolbox then start a web browser session to<br> <a href=\"http://192.168.99.100:8080/?offline=1&https=0\">http://192.168.99.100:8080/?offline=1&amp;https=0</a></p>\n"},{"title":"Docker Elasticsearch","date":"2023-07-05T01:31:06.000Z","cover":false,"_content":"\n```\ndocker run -d --name es01 \\\n -p 9200:9200 \\\n -e ES_JAVA_OPTS=\"-Xms1g -Xmx1g\" \\\n -e \"discovery.type=single-node\" \\\n --ulimit nofile=1024:1024 \\\n elasticsearch:8.7.0\n\n\ndocker exec -it es01 /usr/share/elasticsearch/bin/elasticsearch-reset-password\n\n\n\ndocker cp es01:/usr/share/elasticsearch/config/certs/http_ca.crt .\n\n\n\n\ncurl --cacert http_ca.crt -u elastic https://localhost:9200\n\n\n\n\n```\n```\nversion: \"3.9\"\nservices:\n  elasticsearch:\n    image: elasticsearch:8.6.0\n    environment:\n      - discovery.type=single-node\n      - ES_JAVA_OPTS=-Xms1g -Xmx1g\n      - xpack.security.enabled=false\n    volumes:\n      - es_data:/usr/share/elasticsearch/data\n    ports:\n      - target: 9200\n        published: 9200\n    networks:\n      - elastic\n  kibana:\n    image: kibana:8.6.0\n    ports:\n      - target: 5601\n        published: 5601\n    depends_on:\n      - elasticsearch\n    networks:\n      - elastic      \nvolumes:\n  es_data:\n    driver: local\nnetworks:\n  elastic:\n    name: elastic\n    driver: bridge\n\n```\n## 8.10.3\ndocker network create elastic\n\ndocker container rm es-1\n\ndocker run --name es-1 --net elastic -p 9200:9200 -it -e ES_JAVA_OPTS=\"-Xms1g -Xmx4g\" docker.elastic.co/elasticsearch/elasticsearch:8.7\n\ndocker exec -it es-1 bin/elasticsearch-setup-passwords auto\n\ndocker exec -it es-1 /usr/share/elasticsearch/bin/elasticsearch-reset-password -u elastic\nGBPoTYCI3HxlkFP2o51F\n\ncurl -u elastic:021009 https://localhost:9200","source":"_posts/Docker-Elasticsearch.md","raw":"---\ntitle: Docker Elasticsearch\ntags: \n- Docker \n- Elasticsearch\ndate: 2023-07-05 09:31:06\ncover:\n---\n\n```\ndocker run -d --name es01 \\\n -p 9200:9200 \\\n -e ES_JAVA_OPTS=\"-Xms1g -Xmx1g\" \\\n -e \"discovery.type=single-node\" \\\n --ulimit nofile=1024:1024 \\\n elasticsearch:8.7.0\n\n\ndocker exec -it es01 /usr/share/elasticsearch/bin/elasticsearch-reset-password\n\n\n\ndocker cp es01:/usr/share/elasticsearch/config/certs/http_ca.crt .\n\n\n\n\ncurl --cacert http_ca.crt -u elastic https://localhost:9200\n\n\n\n\n```\n```\nversion: \"3.9\"\nservices:\n  elasticsearch:\n    image: elasticsearch:8.6.0\n    environment:\n      - discovery.type=single-node\n      - ES_JAVA_OPTS=-Xms1g -Xmx1g\n      - xpack.security.enabled=false\n    volumes:\n      - es_data:/usr/share/elasticsearch/data\n    ports:\n      - target: 9200\n        published: 9200\n    networks:\n      - elastic\n  kibana:\n    image: kibana:8.6.0\n    ports:\n      - target: 5601\n        published: 5601\n    depends_on:\n      - elasticsearch\n    networks:\n      - elastic      \nvolumes:\n  es_data:\n    driver: local\nnetworks:\n  elastic:\n    name: elastic\n    driver: bridge\n\n```\n## 8.10.3\ndocker network create elastic\n\ndocker container rm es-1\n\ndocker run --name es-1 --net elastic -p 9200:9200 -it -e ES_JAVA_OPTS=\"-Xms1g -Xmx4g\" docker.elastic.co/elasticsearch/elasticsearch:8.7\n\ndocker exec -it es-1 bin/elasticsearch-setup-passwords auto\n\ndocker exec -it es-1 /usr/share/elasticsearch/bin/elasticsearch-reset-password -u elastic\nGBPoTYCI3HxlkFP2o51F\n\ncurl -u elastic:021009 https://localhost:9200","slug":"Docker-Elasticsearch","published":1,"updated":"2023-10-12T07:18:54.629Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5u6000ilv9efsh4ajft","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name es01 \\</span><br><span class=\"line\"> -p 9200:9200 \\</span><br><span class=\"line\"> -e ES_JAVA_OPTS=&quot;-Xms1g -Xmx1g&quot; \\</span><br><span class=\"line\"> -e &quot;discovery.type=single-node&quot; \\</span><br><span class=\"line\"> --ulimit nofile=1024:1024 \\</span><br><span class=\"line\"> elasticsearch:8.7.0</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">docker exec -it es01 /usr/share/elasticsearch/bin/elasticsearch-reset-password</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">docker cp es01:/usr/share/elasticsearch/config/certs/http_ca.crt .</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">curl --cacert http_ca.crt -u elastic https://localhost:9200</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &quot;3.9&quot;</span><br><span class=\"line\">services:</span><br><span class=\"line\">  elasticsearch:</span><br><span class=\"line\">    image: elasticsearch:8.6.0</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      - discovery.type=single-node</span><br><span class=\"line\">      - ES_JAVA_OPTS=-Xms1g -Xmx1g</span><br><span class=\"line\">      - xpack.security.enabled=false</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - es_data:/usr/share/elasticsearch/data</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - target: 9200</span><br><span class=\"line\">        published: 9200</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - elastic</span><br><span class=\"line\">  kibana:</span><br><span class=\"line\">    image: kibana:8.6.0</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - target: 5601</span><br><span class=\"line\">        published: 5601</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">      - elasticsearch</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - elastic      </span><br><span class=\"line\">volumes:</span><br><span class=\"line\">  es_data:</span><br><span class=\"line\">    driver: local</span><br><span class=\"line\">networks:</span><br><span class=\"line\">  elastic:</span><br><span class=\"line\">    name: elastic</span><br><span class=\"line\">    driver: bridge</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"8-10-3\"><a href=\"#8-10-3\" class=\"headerlink\" title=\"8.10.3\"></a>8.10.3</h2><p>docker network create elastic</p>\n<p>docker container rm es-1</p>\n<p>docker run –name es-1 –net elastic -p 9200:9200 -it -e ES_JAVA_OPTS&#x3D;”-Xms1g -Xmx4g” docker.elastic.co&#x2F;elasticsearch&#x2F;elasticsearch:8.7</p>\n<p>docker exec -it es-1 bin&#x2F;elasticsearch-setup-passwords auto</p>\n<p>docker exec -it es-1 &#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;bin&#x2F;elasticsearch-reset-password -u elastic<br>GBPoTYCI3HxlkFP2o51F</p>\n<p>curl -u elastic:021009 <a href=\"https://localhost:9200/\">https://localhost:9200</a></p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name es01 \\</span><br><span class=\"line\"> -p 9200:9200 \\</span><br><span class=\"line\"> -e ES_JAVA_OPTS=&quot;-Xms1g -Xmx1g&quot; \\</span><br><span class=\"line\"> -e &quot;discovery.type=single-node&quot; \\</span><br><span class=\"line\"> --ulimit nofile=1024:1024 \\</span><br><span class=\"line\"> elasticsearch:8.7.0</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">docker exec -it es01 /usr/share/elasticsearch/bin/elasticsearch-reset-password</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">docker cp es01:/usr/share/elasticsearch/config/certs/http_ca.crt .</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">curl --cacert http_ca.crt -u elastic https://localhost:9200</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &quot;3.9&quot;</span><br><span class=\"line\">services:</span><br><span class=\"line\">  elasticsearch:</span><br><span class=\"line\">    image: elasticsearch:8.6.0</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      - discovery.type=single-node</span><br><span class=\"line\">      - ES_JAVA_OPTS=-Xms1g -Xmx1g</span><br><span class=\"line\">      - xpack.security.enabled=false</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - es_data:/usr/share/elasticsearch/data</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - target: 9200</span><br><span class=\"line\">        published: 9200</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - elastic</span><br><span class=\"line\">  kibana:</span><br><span class=\"line\">    image: kibana:8.6.0</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - target: 5601</span><br><span class=\"line\">        published: 5601</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">      - elasticsearch</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - elastic      </span><br><span class=\"line\">volumes:</span><br><span class=\"line\">  es_data:</span><br><span class=\"line\">    driver: local</span><br><span class=\"line\">networks:</span><br><span class=\"line\">  elastic:</span><br><span class=\"line\">    name: elastic</span><br><span class=\"line\">    driver: bridge</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"8-10-3\"><a href=\"#8-10-3\" class=\"headerlink\" title=\"8.10.3\"></a>8.10.3</h2><p>docker network create elastic</p>\n<p>docker container rm es-1</p>\n<p>docker run –name es-1 –net elastic -p 9200:9200 -it -e ES_JAVA_OPTS&#x3D;”-Xms1g -Xmx4g” docker.elastic.co&#x2F;elasticsearch&#x2F;elasticsearch:8.7</p>\n<p>docker exec -it es-1 bin&#x2F;elasticsearch-setup-passwords auto</p>\n<p>docker exec -it es-1 &#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;bin&#x2F;elasticsearch-reset-password -u elastic<br>GBPoTYCI3HxlkFP2o51F</p>\n<p>curl -u elastic:021009 <a href=\"https://localhost:9200/\">https://localhost:9200</a></p>\n"},{"title":"Docker Oracle 11g","date":"2023-03-24T11:54:19.000Z","_content":"\n<!-- more -->\n```\ndocker run -d -p 1521:1521\\\n --name oracle-11g\\\n -e ORACLE_ALLOW_REMOTE=true\\\n -e ORACLE_DISABLE_ASYNCH_IO=true\\\n oracleinanutshell/oracle-xe-11g\n```\n\n关闭实例\n\nshutdown immediate\n\n启动实例到nomount状态\nstartup nomount\n\n建立控制文件\nalter database backup controlfile to trace;\n\nshow parameter user_dump_dest;\n\n \n\n\n\n\n\n```sql\n--\n--     Set #1. NORESETLOGS case\n--\n-- The following commands will create a new control file and use it\n-- to open the database.\n-- Data used by Recovery Manager will be lost.\n-- Additional logs may be required for media recovery of offline\n-- Use this only if the current versions of all online logs are\n-- available.\n-- After mounting the created controlfile, the following SQL\n-- statement will place the database in the appropriate\n-- protection mode:\n--  ALTER DATABASE SET STANDBY DATABASE TO MAXIMIZE PERFORMANCE\nSTARTUP NOMOUNT\nCREATE CONTROLFILE REUSE DATABASE \"QUANWEI\" NORESETLOGS  NOARCHIVELOG\n    MAXLOGFILES 16\n    MAXLOGMEMBERS 3\n    MAXDATAFILES 100\n    MAXINSTANCES 8\n    MAXLOGHISTORY 292\nLOGFILE\n  GROUP 1 '/u01/app/oracle/fast_recovery_area/QUANWEI/onlinelog/o1_mf_1_g6c5nhsl_.log'  SIZE 50M BLOCKSIZE 512,\n  GROUP 2 '/u01/app/oracle/fast_recovery_area/QUANWEI/onlinelog/o1_mf_2_g6c5nj25_.log'  SIZE 50M BLOCKSIZE 512\n-- STANDBY LOGFILE\nDATAFILE\n  '/u01/app/oracle/oradata/QUANWEI/system.dbf',\n  '/u01/app/oracle/oradata/QUANWEI/sysaux.dbf',\n  '/u01/app/oracle/oradata/QUANWEI/undotbs1.dbf',\n  '/u01/app/oracle/oradata/QUANWEI/users.dbf'\nCHARACTER SET AL32UTF8\n;\nRECOVER DATABASE\n-- Database can now be opened normally.\nALTER DATABASE OPEN;\n-- Commands to add tempfiles to temporary tablespaces.\n-- Online tempfiles have complete space information.\n-- Other tempfiles may require adjustment.\nALTER TABLESPACE TEMP ADD TEMPFILE '/u01/app/oracle/oradata/QUANWEI/temp.dbf'\n     SIZE 20971520  REUSE AUTOEXTEND ON NEXT 655360  MAXSIZE 32767M;\n```\n\n```sql\n-- End of tempfile additions.\n--\n--     Set #2. RESETLOGS case\n--\n-- The following commands will create a new control file and use it\n-- to open the database.\n-- Data used by Recovery Manager will be lost.\n-- The contents of online logs will be lost and all backups will\n-- be invalidated. Use this only if online logs are damaged.\n-- After mounting the created controlfile, the following SQL\n-- statement will place the database in the appropriate\n-- protection mode:\n--  ALTER DATABASE SET STANDBY DATABASE TO MAXIMIZE PERFORMANCE\nSTARTUP NOMOUNT\nCREATE CONTROLFILE REUSE SET DATABASE QUANWEI RESETLOGS  NOARCHIVELOG\n    MAXLOGFILES 16\n    MAXLOGMEMBERS 3\n    MAXDATAFILES 100\n    MAXINSTANCES 8\n    MAXLOGHISTORY 292\nLOGFILE\n  GROUP 1 '/u01/app/oracle/fast_recovery_area/XE/onlinelog/o1_mf_1_g6c5nhsl_.log'  SIZE 50M BLOCKSIZE 512,\n  GROUP 2 '/u01/app/oracle/fast_recovery_area/XE/onlinelog/o1_mf_2_g6c5nj25_.log'  SIZE 50M BLOCKSIZE 512\n-- STANDBY LOGFILE\nDATAFILE\n  '/u01/app/oracle/oradata/XE/system.dbf',\n  '/u01/app/oracle/oradata/XE/sysaux.dbf',\n  '/u01/app/oracle/oradata/XE/undotbs1.dbf',\n  '/u01/app/oracle/oradata/XE/users.dbf'\nCHARACTER SET AL32UTF8\n;\n-- Commands to re-create incarnation table\n-- Below log names MUST be changed to existing filenames on\n-- disk. Any one log file from each branch can be used to\n-- re-create incarnation records.\n-- ALTER DATABASE REGISTER LOGFILE '/u01/app/oracle/fast_recovery_area/XE/archivelog/2023_03_29/o1_mf_1_1_%u_.arc';\n-- ALTER DATABASE REGISTER LOGFILE '/u01/app/oracle/fast_recovery_area/XE/archivelog/2023_03_29/o1_mf_1_1_%u_.arc';\n-- Recovery is required if any of the datafiles are restored backups,\n-- or if the last shutdown was not normal or immediate.\nRECOVER DATABASE USING BACKUP CONTROLFILE\n-- Database can now be opened zeroing the online logs.\nALTER DATABASE OPEN RESETLOGS;\n-- Commands to add tempfiles to temporary tablespaces.\n-- Online tempfiles have complete space information.\n-- Other tempfiles may require adjustment.\nALTER TABLESPACE TEMP ADD TEMPFILE '/u01/app/oracle/oradata/XE/temp.dbf'\n     SIZE 20971520  REUSE AUTOEXTEND ON NEXT 655360  MAXSIZE 32767M;\n-- End of tempfile additions.\n--\n```\n\npfile \ninit.ora\n```\nQUAWNEI.__db_cache_size=415236096\nQUAWNEI.__java_pool_size=4194304\nQUAWNEI.__large_pool_size=4194304\nQUAWNEI.__oracle_base='/u01/app/oracle'#ORACLE_BASE set from environment\nQUAWNEI.__pga_aggregate_target=201326592\nQUAWNEI.__sga_target=603979776\nQUAWNEI.__shared_io_pool_size=0\nQUAWNEI.__shared_pool_size=171966464\nQUAWNEI.__streams_pool_size=0\n*.audit_file_dest='/u01/app/oracle/admin/XE/adump'\n*.compatible='11.2.0.0.0'\n*.control_files='/u01/app/oracle/oradata/xe/control01.ctl'\n*.db_name='QUANWEI'\n*.DB_RECOVERY_FILE_DEST='/u01/app/oracle/fast_recovery_area'\n*.DB_RECOVERY_FILE_DEST_SIZE=10G\n*.diagnostic_dest='/u01/app/oracle'\n*.disk_asynch_io=FALSE\n*.dispatchers='(PROTOCOL=TCP) (SERVICE=XEXDB)'\n*.job_queue_processes=4\n*.open_cursors=300\n*.pga_aggregate_target=200540160\n*.remote_login_passwordfile='EXCLUSIVE'\n*.sessions=20\n*.sga_target=601620480\n*.shared_servers=4\n*.undo_management='AUTO'\n*.undo_tablespace='UNDOTBS1'\n```\n\ncreate spfile='/u01/app/oracle/product/11.2.0/xe/dbs/spfileQW.ora'\n from pfile='/u01/app/oracle/product/11.2.0/xe/dbs/init.ora'\n\n select value from v$parameter where name='db_name';\n\n\n\n\n\n\n\n\n\nselect group#,status from v$log;\n\nselect group#,status from v$logfile;\n\nalter database add logfile group 2\n  ('/home/oracle/REDO0401.LOG','/home/oracle/REDO0402.LOG') \n  SIZE 10M;\n\n\nalter database add logfile member\t\n '/home/oracle/REDO0501.LOG' TO GROUP 1, \n '/home/oracle/REDO0502.LOG' TO GROUP 2,\n '/home/oracle/REDO0503.LOG' TO GROUP 3;\n\n\nALTER DATABASE DROP LOGFILE GROUP 3;\n\nALTER DATABASE DROP LOGFILE MEMBER '$HOME/ORADATA/u04/log3c.rdo';\n\n\n\n","source":"_posts/Docker-Oracle-11g.md","raw":"---\ntitle: Docker Oracle 11g\ndate: 2023-03-24 19:54:19\ntags: \n- Database\n- Oracle\n---\n\n<!-- more -->\n```\ndocker run -d -p 1521:1521\\\n --name oracle-11g\\\n -e ORACLE_ALLOW_REMOTE=true\\\n -e ORACLE_DISABLE_ASYNCH_IO=true\\\n oracleinanutshell/oracle-xe-11g\n```\n\n关闭实例\n\nshutdown immediate\n\n启动实例到nomount状态\nstartup nomount\n\n建立控制文件\nalter database backup controlfile to trace;\n\nshow parameter user_dump_dest;\n\n \n\n\n\n\n\n```sql\n--\n--     Set #1. NORESETLOGS case\n--\n-- The following commands will create a new control file and use it\n-- to open the database.\n-- Data used by Recovery Manager will be lost.\n-- Additional logs may be required for media recovery of offline\n-- Use this only if the current versions of all online logs are\n-- available.\n-- After mounting the created controlfile, the following SQL\n-- statement will place the database in the appropriate\n-- protection mode:\n--  ALTER DATABASE SET STANDBY DATABASE TO MAXIMIZE PERFORMANCE\nSTARTUP NOMOUNT\nCREATE CONTROLFILE REUSE DATABASE \"QUANWEI\" NORESETLOGS  NOARCHIVELOG\n    MAXLOGFILES 16\n    MAXLOGMEMBERS 3\n    MAXDATAFILES 100\n    MAXINSTANCES 8\n    MAXLOGHISTORY 292\nLOGFILE\n  GROUP 1 '/u01/app/oracle/fast_recovery_area/QUANWEI/onlinelog/o1_mf_1_g6c5nhsl_.log'  SIZE 50M BLOCKSIZE 512,\n  GROUP 2 '/u01/app/oracle/fast_recovery_area/QUANWEI/onlinelog/o1_mf_2_g6c5nj25_.log'  SIZE 50M BLOCKSIZE 512\n-- STANDBY LOGFILE\nDATAFILE\n  '/u01/app/oracle/oradata/QUANWEI/system.dbf',\n  '/u01/app/oracle/oradata/QUANWEI/sysaux.dbf',\n  '/u01/app/oracle/oradata/QUANWEI/undotbs1.dbf',\n  '/u01/app/oracle/oradata/QUANWEI/users.dbf'\nCHARACTER SET AL32UTF8\n;\nRECOVER DATABASE\n-- Database can now be opened normally.\nALTER DATABASE OPEN;\n-- Commands to add tempfiles to temporary tablespaces.\n-- Online tempfiles have complete space information.\n-- Other tempfiles may require adjustment.\nALTER TABLESPACE TEMP ADD TEMPFILE '/u01/app/oracle/oradata/QUANWEI/temp.dbf'\n     SIZE 20971520  REUSE AUTOEXTEND ON NEXT 655360  MAXSIZE 32767M;\n```\n\n```sql\n-- End of tempfile additions.\n--\n--     Set #2. RESETLOGS case\n--\n-- The following commands will create a new control file and use it\n-- to open the database.\n-- Data used by Recovery Manager will be lost.\n-- The contents of online logs will be lost and all backups will\n-- be invalidated. Use this only if online logs are damaged.\n-- After mounting the created controlfile, the following SQL\n-- statement will place the database in the appropriate\n-- protection mode:\n--  ALTER DATABASE SET STANDBY DATABASE TO MAXIMIZE PERFORMANCE\nSTARTUP NOMOUNT\nCREATE CONTROLFILE REUSE SET DATABASE QUANWEI RESETLOGS  NOARCHIVELOG\n    MAXLOGFILES 16\n    MAXLOGMEMBERS 3\n    MAXDATAFILES 100\n    MAXINSTANCES 8\n    MAXLOGHISTORY 292\nLOGFILE\n  GROUP 1 '/u01/app/oracle/fast_recovery_area/XE/onlinelog/o1_mf_1_g6c5nhsl_.log'  SIZE 50M BLOCKSIZE 512,\n  GROUP 2 '/u01/app/oracle/fast_recovery_area/XE/onlinelog/o1_mf_2_g6c5nj25_.log'  SIZE 50M BLOCKSIZE 512\n-- STANDBY LOGFILE\nDATAFILE\n  '/u01/app/oracle/oradata/XE/system.dbf',\n  '/u01/app/oracle/oradata/XE/sysaux.dbf',\n  '/u01/app/oracle/oradata/XE/undotbs1.dbf',\n  '/u01/app/oracle/oradata/XE/users.dbf'\nCHARACTER SET AL32UTF8\n;\n-- Commands to re-create incarnation table\n-- Below log names MUST be changed to existing filenames on\n-- disk. Any one log file from each branch can be used to\n-- re-create incarnation records.\n-- ALTER DATABASE REGISTER LOGFILE '/u01/app/oracle/fast_recovery_area/XE/archivelog/2023_03_29/o1_mf_1_1_%u_.arc';\n-- ALTER DATABASE REGISTER LOGFILE '/u01/app/oracle/fast_recovery_area/XE/archivelog/2023_03_29/o1_mf_1_1_%u_.arc';\n-- Recovery is required if any of the datafiles are restored backups,\n-- or if the last shutdown was not normal or immediate.\nRECOVER DATABASE USING BACKUP CONTROLFILE\n-- Database can now be opened zeroing the online logs.\nALTER DATABASE OPEN RESETLOGS;\n-- Commands to add tempfiles to temporary tablespaces.\n-- Online tempfiles have complete space information.\n-- Other tempfiles may require adjustment.\nALTER TABLESPACE TEMP ADD TEMPFILE '/u01/app/oracle/oradata/XE/temp.dbf'\n     SIZE 20971520  REUSE AUTOEXTEND ON NEXT 655360  MAXSIZE 32767M;\n-- End of tempfile additions.\n--\n```\n\npfile \ninit.ora\n```\nQUAWNEI.__db_cache_size=415236096\nQUAWNEI.__java_pool_size=4194304\nQUAWNEI.__large_pool_size=4194304\nQUAWNEI.__oracle_base='/u01/app/oracle'#ORACLE_BASE set from environment\nQUAWNEI.__pga_aggregate_target=201326592\nQUAWNEI.__sga_target=603979776\nQUAWNEI.__shared_io_pool_size=0\nQUAWNEI.__shared_pool_size=171966464\nQUAWNEI.__streams_pool_size=0\n*.audit_file_dest='/u01/app/oracle/admin/XE/adump'\n*.compatible='11.2.0.0.0'\n*.control_files='/u01/app/oracle/oradata/xe/control01.ctl'\n*.db_name='QUANWEI'\n*.DB_RECOVERY_FILE_DEST='/u01/app/oracle/fast_recovery_area'\n*.DB_RECOVERY_FILE_DEST_SIZE=10G\n*.diagnostic_dest='/u01/app/oracle'\n*.disk_asynch_io=FALSE\n*.dispatchers='(PROTOCOL=TCP) (SERVICE=XEXDB)'\n*.job_queue_processes=4\n*.open_cursors=300\n*.pga_aggregate_target=200540160\n*.remote_login_passwordfile='EXCLUSIVE'\n*.sessions=20\n*.sga_target=601620480\n*.shared_servers=4\n*.undo_management='AUTO'\n*.undo_tablespace='UNDOTBS1'\n```\n\ncreate spfile='/u01/app/oracle/product/11.2.0/xe/dbs/spfileQW.ora'\n from pfile='/u01/app/oracle/product/11.2.0/xe/dbs/init.ora'\n\n select value from v$parameter where name='db_name';\n\n\n\n\n\n\n\n\n\nselect group#,status from v$log;\n\nselect group#,status from v$logfile;\n\nalter database add logfile group 2\n  ('/home/oracle/REDO0401.LOG','/home/oracle/REDO0402.LOG') \n  SIZE 10M;\n\n\nalter database add logfile member\t\n '/home/oracle/REDO0501.LOG' TO GROUP 1, \n '/home/oracle/REDO0502.LOG' TO GROUP 2,\n '/home/oracle/REDO0503.LOG' TO GROUP 3;\n\n\nALTER DATABASE DROP LOGFILE GROUP 3;\n\nALTER DATABASE DROP LOGFILE MEMBER '$HOME/ORADATA/u04/log3c.rdo';\n\n\n\n","slug":"Docker-Oracle-11g","published":1,"updated":"2023-06-23T00:59:22.572Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5u7000llv9e1ofj0fkw","content":"<span id=\"more\"></span>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 1521:1521\\</span><br><span class=\"line\"> --name oracle-11g\\</span><br><span class=\"line\"> -e ORACLE_ALLOW_REMOTE=true\\</span><br><span class=\"line\"> -e ORACLE_DISABLE_ASYNCH_IO=true\\</span><br><span class=\"line\"> oracleinanutshell/oracle-xe-11g</span><br></pre></td></tr></table></figure>\n\n<p>关闭实例</p>\n<p>shutdown immediate</p>\n<p>启动实例到nomount状态<br>startup nomount</p>\n<p>建立控制文件<br>alter database backup controlfile to trace;</p>\n<p>show parameter user_dump_dest;</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--</span></span><br><span class=\"line\"><span class=\"comment\">--     Set #1. NORESETLOGS case</span></span><br><span class=\"line\"><span class=\"comment\">--</span></span><br><span class=\"line\"><span class=\"comment\">-- The following commands will create a new control file and use it</span></span><br><span class=\"line\"><span class=\"comment\">-- to open the database.</span></span><br><span class=\"line\"><span class=\"comment\">-- Data used by Recovery Manager will be lost.</span></span><br><span class=\"line\"><span class=\"comment\">-- Additional logs may be required for media recovery of offline</span></span><br><span class=\"line\"><span class=\"comment\">-- Use this only if the current versions of all online logs are</span></span><br><span class=\"line\"><span class=\"comment\">-- available.</span></span><br><span class=\"line\"><span class=\"comment\">-- After mounting the created controlfile, the following SQL</span></span><br><span class=\"line\"><span class=\"comment\">-- statement will place the database in the appropriate</span></span><br><span class=\"line\"><span class=\"comment\">-- protection mode:</span></span><br><span class=\"line\"><span class=\"comment\">--  ALTER DATABASE SET STANDBY DATABASE TO MAXIMIZE PERFORMANCE</span></span><br><span class=\"line\">STARTUP NOMOUNT</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> CONTROLFILE REUSE DATABASE &quot;QUANWEI&quot; NORESETLOGS  NOARCHIVELOG</span><br><span class=\"line\">    MAXLOGFILES <span class=\"number\">16</span></span><br><span class=\"line\">    MAXLOGMEMBERS <span class=\"number\">3</span></span><br><span class=\"line\">    MAXDATAFILES <span class=\"number\">100</span></span><br><span class=\"line\">    MAXINSTANCES <span class=\"number\">8</span></span><br><span class=\"line\">    MAXLOGHISTORY <span class=\"number\">292</span></span><br><span class=\"line\">LOGFILE</span><br><span class=\"line\">  <span class=\"keyword\">GROUP</span> <span class=\"number\">1</span> <span class=\"string\">&#x27;/u01/app/oracle/fast_recovery_area/QUANWEI/onlinelog/o1_mf_1_g6c5nhsl_.log&#x27;</span>  SIZE <span class=\"number\">50</span>M BLOCKSIZE <span class=\"number\">512</span>,</span><br><span class=\"line\">  <span class=\"keyword\">GROUP</span> <span class=\"number\">2</span> <span class=\"string\">&#x27;/u01/app/oracle/fast_recovery_area/QUANWEI/onlinelog/o1_mf_2_g6c5nj25_.log&#x27;</span>  SIZE <span class=\"number\">50</span>M BLOCKSIZE <span class=\"number\">512</span></span><br><span class=\"line\"><span class=\"comment\">-- STANDBY LOGFILE</span></span><br><span class=\"line\">DATAFILE</span><br><span class=\"line\">  <span class=\"string\">&#x27;/u01/app/oracle/oradata/QUANWEI/system.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/u01/app/oracle/oradata/QUANWEI/sysaux.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/u01/app/oracle/oradata/QUANWEI/undotbs1.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/u01/app/oracle/oradata/QUANWEI/users.dbf&#x27;</span></span><br><span class=\"line\"><span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> AL32UTF8</span><br><span class=\"line\">;</span><br><span class=\"line\">RECOVER DATABASE</span><br><span class=\"line\"><span class=\"comment\">-- Database can now be opened normally.</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> DATABASE <span class=\"keyword\">OPEN</span>;</span><br><span class=\"line\"><span class=\"comment\">-- Commands to add tempfiles to temporary tablespaces.</span></span><br><span class=\"line\"><span class=\"comment\">-- Online tempfiles have complete space information.</span></span><br><span class=\"line\"><span class=\"comment\">-- Other tempfiles may require adjustment.</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span>SPACE TEMP <span class=\"keyword\">ADD</span> TEMPFILE <span class=\"string\">&#x27;/u01/app/oracle/oradata/QUANWEI/temp.dbf&#x27;</span></span><br><span class=\"line\">     SIZE <span class=\"number\">20971520</span>  REUSE AUTOEXTEND <span class=\"keyword\">ON</span> NEXT <span class=\"number\">655360</span>  MAXSIZE <span class=\"number\">32767</span>M;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- End of tempfile additions.</span></span><br><span class=\"line\"><span class=\"comment\">--</span></span><br><span class=\"line\"><span class=\"comment\">--     Set #2. RESETLOGS case</span></span><br><span class=\"line\"><span class=\"comment\">--</span></span><br><span class=\"line\"><span class=\"comment\">-- The following commands will create a new control file and use it</span></span><br><span class=\"line\"><span class=\"comment\">-- to open the database.</span></span><br><span class=\"line\"><span class=\"comment\">-- Data used by Recovery Manager will be lost.</span></span><br><span class=\"line\"><span class=\"comment\">-- The contents of online logs will be lost and all backups will</span></span><br><span class=\"line\"><span class=\"comment\">-- be invalidated. Use this only if online logs are damaged.</span></span><br><span class=\"line\"><span class=\"comment\">-- After mounting the created controlfile, the following SQL</span></span><br><span class=\"line\"><span class=\"comment\">-- statement will place the database in the appropriate</span></span><br><span class=\"line\"><span class=\"comment\">-- protection mode:</span></span><br><span class=\"line\"><span class=\"comment\">--  ALTER DATABASE SET STANDBY DATABASE TO MAXIMIZE PERFORMANCE</span></span><br><span class=\"line\">STARTUP NOMOUNT</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> CONTROLFILE REUSE <span class=\"keyword\">SET</span> DATABASE QUANWEI RESETLOGS  NOARCHIVELOG</span><br><span class=\"line\">    MAXLOGFILES <span class=\"number\">16</span></span><br><span class=\"line\">    MAXLOGMEMBERS <span class=\"number\">3</span></span><br><span class=\"line\">    MAXDATAFILES <span class=\"number\">100</span></span><br><span class=\"line\">    MAXINSTANCES <span class=\"number\">8</span></span><br><span class=\"line\">    MAXLOGHISTORY <span class=\"number\">292</span></span><br><span class=\"line\">LOGFILE</span><br><span class=\"line\">  <span class=\"keyword\">GROUP</span> <span class=\"number\">1</span> <span class=\"string\">&#x27;/u01/app/oracle/fast_recovery_area/XE/onlinelog/o1_mf_1_g6c5nhsl_.log&#x27;</span>  SIZE <span class=\"number\">50</span>M BLOCKSIZE <span class=\"number\">512</span>,</span><br><span class=\"line\">  <span class=\"keyword\">GROUP</span> <span class=\"number\">2</span> <span class=\"string\">&#x27;/u01/app/oracle/fast_recovery_area/XE/onlinelog/o1_mf_2_g6c5nj25_.log&#x27;</span>  SIZE <span class=\"number\">50</span>M BLOCKSIZE <span class=\"number\">512</span></span><br><span class=\"line\"><span class=\"comment\">-- STANDBY LOGFILE</span></span><br><span class=\"line\">DATAFILE</span><br><span class=\"line\">  <span class=\"string\">&#x27;/u01/app/oracle/oradata/XE/system.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/u01/app/oracle/oradata/XE/sysaux.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/u01/app/oracle/oradata/XE/undotbs1.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/u01/app/oracle/oradata/XE/users.dbf&#x27;</span></span><br><span class=\"line\"><span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> AL32UTF8</span><br><span class=\"line\">;</span><br><span class=\"line\"><span class=\"comment\">-- Commands to re-create incarnation table</span></span><br><span class=\"line\"><span class=\"comment\">-- Below log names MUST be changed to existing filenames on</span></span><br><span class=\"line\"><span class=\"comment\">-- disk. Any one log file from each branch can be used to</span></span><br><span class=\"line\"><span class=\"comment\">-- re-create incarnation records.</span></span><br><span class=\"line\"><span class=\"comment\">-- ALTER DATABASE REGISTER LOGFILE &#x27;/u01/app/oracle/fast_recovery_area/XE/archivelog/2023_03_29/o1_mf_1_1_%u_.arc&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\">-- ALTER DATABASE REGISTER LOGFILE &#x27;/u01/app/oracle/fast_recovery_area/XE/archivelog/2023_03_29/o1_mf_1_1_%u_.arc&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\">-- Recovery is required if any of the datafiles are restored backups,</span></span><br><span class=\"line\"><span class=\"comment\">-- or if the last shutdown was not normal or immediate.</span></span><br><span class=\"line\">RECOVER DATABASE <span class=\"keyword\">USING</span> BACKUP CONTROLFILE</span><br><span class=\"line\"><span class=\"comment\">-- Database can now be opened zeroing the online logs.</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> DATABASE <span class=\"keyword\">OPEN</span> RESETLOGS;</span><br><span class=\"line\"><span class=\"comment\">-- Commands to add tempfiles to temporary tablespaces.</span></span><br><span class=\"line\"><span class=\"comment\">-- Online tempfiles have complete space information.</span></span><br><span class=\"line\"><span class=\"comment\">-- Other tempfiles may require adjustment.</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span>SPACE TEMP <span class=\"keyword\">ADD</span> TEMPFILE <span class=\"string\">&#x27;/u01/app/oracle/oradata/XE/temp.dbf&#x27;</span></span><br><span class=\"line\">     SIZE <span class=\"number\">20971520</span>  REUSE AUTOEXTEND <span class=\"keyword\">ON</span> NEXT <span class=\"number\">655360</span>  MAXSIZE <span class=\"number\">32767</span>M;</span><br><span class=\"line\"><span class=\"comment\">-- End of tempfile additions.</span></span><br><span class=\"line\"><span class=\"comment\">--</span></span><br></pre></td></tr></table></figure>\n\n<p>pfile<br>init.ora</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QUAWNEI.__db_cache_size=415236096</span><br><span class=\"line\">QUAWNEI.__java_pool_size=4194304</span><br><span class=\"line\">QUAWNEI.__large_pool_size=4194304</span><br><span class=\"line\">QUAWNEI.__oracle_base=&#x27;/u01/app/oracle&#x27;#ORACLE_BASE set from environment</span><br><span class=\"line\">QUAWNEI.__pga_aggregate_target=201326592</span><br><span class=\"line\">QUAWNEI.__sga_target=603979776</span><br><span class=\"line\">QUAWNEI.__shared_io_pool_size=0</span><br><span class=\"line\">QUAWNEI.__shared_pool_size=171966464</span><br><span class=\"line\">QUAWNEI.__streams_pool_size=0</span><br><span class=\"line\">*.audit_file_dest=&#x27;/u01/app/oracle/admin/XE/adump&#x27;</span><br><span class=\"line\">*.compatible=&#x27;11.2.0.0.0&#x27;</span><br><span class=\"line\">*.control_files=&#x27;/u01/app/oracle/oradata/xe/control01.ctl&#x27;</span><br><span class=\"line\">*.db_name=&#x27;QUANWEI&#x27;</span><br><span class=\"line\">*.DB_RECOVERY_FILE_DEST=&#x27;/u01/app/oracle/fast_recovery_area&#x27;</span><br><span class=\"line\">*.DB_RECOVERY_FILE_DEST_SIZE=10G</span><br><span class=\"line\">*.diagnostic_dest=&#x27;/u01/app/oracle&#x27;</span><br><span class=\"line\">*.disk_asynch_io=FALSE</span><br><span class=\"line\">*.dispatchers=&#x27;(PROTOCOL=TCP) (SERVICE=XEXDB)&#x27;</span><br><span class=\"line\">*.job_queue_processes=4</span><br><span class=\"line\">*.open_cursors=300</span><br><span class=\"line\">*.pga_aggregate_target=200540160</span><br><span class=\"line\">*.remote_login_passwordfile=&#x27;EXCLUSIVE&#x27;</span><br><span class=\"line\">*.sessions=20</span><br><span class=\"line\">*.sga_target=601620480</span><br><span class=\"line\">*.shared_servers=4</span><br><span class=\"line\">*.undo_management=&#x27;AUTO&#x27;</span><br><span class=\"line\">*.undo_tablespace=&#x27;UNDOTBS1&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>create spfile&#x3D;’&#x2F;u01&#x2F;app&#x2F;oracle&#x2F;product&#x2F;11.2.0&#x2F;xe&#x2F;dbs&#x2F;spfileQW.ora’<br> from pfile&#x3D;’&#x2F;u01&#x2F;app&#x2F;oracle&#x2F;product&#x2F;11.2.0&#x2F;xe&#x2F;dbs&#x2F;init.ora’</p>\n<p> select value from v$parameter where name&#x3D;’db_name’;</p>\n<p>select group#,status from v$log;</p>\n<p>select group#,status from v$logfile;</p>\n<p>alter database add logfile group 2<br>  (‘&#x2F;home&#x2F;oracle&#x2F;REDO0401.LOG’,’&#x2F;home&#x2F;oracle&#x2F;REDO0402.LOG’)<br>  SIZE 10M;</p>\n<p>alter database add logfile member\t<br> ‘&#x2F;home&#x2F;oracle&#x2F;REDO0501.LOG’ TO GROUP 1,<br> ‘&#x2F;home&#x2F;oracle&#x2F;REDO0502.LOG’ TO GROUP 2,<br> ‘&#x2F;home&#x2F;oracle&#x2F;REDO0503.LOG’ TO GROUP 3;</p>\n<p>ALTER DATABASE DROP LOGFILE GROUP 3;</p>\n<p>ALTER DATABASE DROP LOGFILE MEMBER ‘$HOME&#x2F;ORADATA&#x2F;u04&#x2F;log3c.rdo’;</p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 1521:1521\\</span><br><span class=\"line\"> --name oracle-11g\\</span><br><span class=\"line\"> -e ORACLE_ALLOW_REMOTE=true\\</span><br><span class=\"line\"> -e ORACLE_DISABLE_ASYNCH_IO=true\\</span><br><span class=\"line\"> oracleinanutshell/oracle-xe-11g</span><br></pre></td></tr></table></figure>\n\n<p>关闭实例</p>\n<p>shutdown immediate</p>\n<p>启动实例到nomount状态<br>startup nomount</p>\n<p>建立控制文件<br>alter database backup controlfile to trace;</p>\n<p>show parameter user_dump_dest;</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--</span></span><br><span class=\"line\"><span class=\"comment\">--     Set #1. NORESETLOGS case</span></span><br><span class=\"line\"><span class=\"comment\">--</span></span><br><span class=\"line\"><span class=\"comment\">-- The following commands will create a new control file and use it</span></span><br><span class=\"line\"><span class=\"comment\">-- to open the database.</span></span><br><span class=\"line\"><span class=\"comment\">-- Data used by Recovery Manager will be lost.</span></span><br><span class=\"line\"><span class=\"comment\">-- Additional logs may be required for media recovery of offline</span></span><br><span class=\"line\"><span class=\"comment\">-- Use this only if the current versions of all online logs are</span></span><br><span class=\"line\"><span class=\"comment\">-- available.</span></span><br><span class=\"line\"><span class=\"comment\">-- After mounting the created controlfile, the following SQL</span></span><br><span class=\"line\"><span class=\"comment\">-- statement will place the database in the appropriate</span></span><br><span class=\"line\"><span class=\"comment\">-- protection mode:</span></span><br><span class=\"line\"><span class=\"comment\">--  ALTER DATABASE SET STANDBY DATABASE TO MAXIMIZE PERFORMANCE</span></span><br><span class=\"line\">STARTUP NOMOUNT</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> CONTROLFILE REUSE DATABASE &quot;QUANWEI&quot; NORESETLOGS  NOARCHIVELOG</span><br><span class=\"line\">    MAXLOGFILES <span class=\"number\">16</span></span><br><span class=\"line\">    MAXLOGMEMBERS <span class=\"number\">3</span></span><br><span class=\"line\">    MAXDATAFILES <span class=\"number\">100</span></span><br><span class=\"line\">    MAXINSTANCES <span class=\"number\">8</span></span><br><span class=\"line\">    MAXLOGHISTORY <span class=\"number\">292</span></span><br><span class=\"line\">LOGFILE</span><br><span class=\"line\">  <span class=\"keyword\">GROUP</span> <span class=\"number\">1</span> <span class=\"string\">&#x27;/u01/app/oracle/fast_recovery_area/QUANWEI/onlinelog/o1_mf_1_g6c5nhsl_.log&#x27;</span>  SIZE <span class=\"number\">50</span>M BLOCKSIZE <span class=\"number\">512</span>,</span><br><span class=\"line\">  <span class=\"keyword\">GROUP</span> <span class=\"number\">2</span> <span class=\"string\">&#x27;/u01/app/oracle/fast_recovery_area/QUANWEI/onlinelog/o1_mf_2_g6c5nj25_.log&#x27;</span>  SIZE <span class=\"number\">50</span>M BLOCKSIZE <span class=\"number\">512</span></span><br><span class=\"line\"><span class=\"comment\">-- STANDBY LOGFILE</span></span><br><span class=\"line\">DATAFILE</span><br><span class=\"line\">  <span class=\"string\">&#x27;/u01/app/oracle/oradata/QUANWEI/system.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/u01/app/oracle/oradata/QUANWEI/sysaux.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/u01/app/oracle/oradata/QUANWEI/undotbs1.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/u01/app/oracle/oradata/QUANWEI/users.dbf&#x27;</span></span><br><span class=\"line\"><span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> AL32UTF8</span><br><span class=\"line\">;</span><br><span class=\"line\">RECOVER DATABASE</span><br><span class=\"line\"><span class=\"comment\">-- Database can now be opened normally.</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> DATABASE <span class=\"keyword\">OPEN</span>;</span><br><span class=\"line\"><span class=\"comment\">-- Commands to add tempfiles to temporary tablespaces.</span></span><br><span class=\"line\"><span class=\"comment\">-- Online tempfiles have complete space information.</span></span><br><span class=\"line\"><span class=\"comment\">-- Other tempfiles may require adjustment.</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span>SPACE TEMP <span class=\"keyword\">ADD</span> TEMPFILE <span class=\"string\">&#x27;/u01/app/oracle/oradata/QUANWEI/temp.dbf&#x27;</span></span><br><span class=\"line\">     SIZE <span class=\"number\">20971520</span>  REUSE AUTOEXTEND <span class=\"keyword\">ON</span> NEXT <span class=\"number\">655360</span>  MAXSIZE <span class=\"number\">32767</span>M;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- End of tempfile additions.</span></span><br><span class=\"line\"><span class=\"comment\">--</span></span><br><span class=\"line\"><span class=\"comment\">--     Set #2. RESETLOGS case</span></span><br><span class=\"line\"><span class=\"comment\">--</span></span><br><span class=\"line\"><span class=\"comment\">-- The following commands will create a new control file and use it</span></span><br><span class=\"line\"><span class=\"comment\">-- to open the database.</span></span><br><span class=\"line\"><span class=\"comment\">-- Data used by Recovery Manager will be lost.</span></span><br><span class=\"line\"><span class=\"comment\">-- The contents of online logs will be lost and all backups will</span></span><br><span class=\"line\"><span class=\"comment\">-- be invalidated. Use this only if online logs are damaged.</span></span><br><span class=\"line\"><span class=\"comment\">-- After mounting the created controlfile, the following SQL</span></span><br><span class=\"line\"><span class=\"comment\">-- statement will place the database in the appropriate</span></span><br><span class=\"line\"><span class=\"comment\">-- protection mode:</span></span><br><span class=\"line\"><span class=\"comment\">--  ALTER DATABASE SET STANDBY DATABASE TO MAXIMIZE PERFORMANCE</span></span><br><span class=\"line\">STARTUP NOMOUNT</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> CONTROLFILE REUSE <span class=\"keyword\">SET</span> DATABASE QUANWEI RESETLOGS  NOARCHIVELOG</span><br><span class=\"line\">    MAXLOGFILES <span class=\"number\">16</span></span><br><span class=\"line\">    MAXLOGMEMBERS <span class=\"number\">3</span></span><br><span class=\"line\">    MAXDATAFILES <span class=\"number\">100</span></span><br><span class=\"line\">    MAXINSTANCES <span class=\"number\">8</span></span><br><span class=\"line\">    MAXLOGHISTORY <span class=\"number\">292</span></span><br><span class=\"line\">LOGFILE</span><br><span class=\"line\">  <span class=\"keyword\">GROUP</span> <span class=\"number\">1</span> <span class=\"string\">&#x27;/u01/app/oracle/fast_recovery_area/XE/onlinelog/o1_mf_1_g6c5nhsl_.log&#x27;</span>  SIZE <span class=\"number\">50</span>M BLOCKSIZE <span class=\"number\">512</span>,</span><br><span class=\"line\">  <span class=\"keyword\">GROUP</span> <span class=\"number\">2</span> <span class=\"string\">&#x27;/u01/app/oracle/fast_recovery_area/XE/onlinelog/o1_mf_2_g6c5nj25_.log&#x27;</span>  SIZE <span class=\"number\">50</span>M BLOCKSIZE <span class=\"number\">512</span></span><br><span class=\"line\"><span class=\"comment\">-- STANDBY LOGFILE</span></span><br><span class=\"line\">DATAFILE</span><br><span class=\"line\">  <span class=\"string\">&#x27;/u01/app/oracle/oradata/XE/system.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/u01/app/oracle/oradata/XE/sysaux.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/u01/app/oracle/oradata/XE/undotbs1.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/u01/app/oracle/oradata/XE/users.dbf&#x27;</span></span><br><span class=\"line\"><span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> AL32UTF8</span><br><span class=\"line\">;</span><br><span class=\"line\"><span class=\"comment\">-- Commands to re-create incarnation table</span></span><br><span class=\"line\"><span class=\"comment\">-- Below log names MUST be changed to existing filenames on</span></span><br><span class=\"line\"><span class=\"comment\">-- disk. Any one log file from each branch can be used to</span></span><br><span class=\"line\"><span class=\"comment\">-- re-create incarnation records.</span></span><br><span class=\"line\"><span class=\"comment\">-- ALTER DATABASE REGISTER LOGFILE &#x27;/u01/app/oracle/fast_recovery_area/XE/archivelog/2023_03_29/o1_mf_1_1_%u_.arc&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\">-- ALTER DATABASE REGISTER LOGFILE &#x27;/u01/app/oracle/fast_recovery_area/XE/archivelog/2023_03_29/o1_mf_1_1_%u_.arc&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\">-- Recovery is required if any of the datafiles are restored backups,</span></span><br><span class=\"line\"><span class=\"comment\">-- or if the last shutdown was not normal or immediate.</span></span><br><span class=\"line\">RECOVER DATABASE <span class=\"keyword\">USING</span> BACKUP CONTROLFILE</span><br><span class=\"line\"><span class=\"comment\">-- Database can now be opened zeroing the online logs.</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> DATABASE <span class=\"keyword\">OPEN</span> RESETLOGS;</span><br><span class=\"line\"><span class=\"comment\">-- Commands to add tempfiles to temporary tablespaces.</span></span><br><span class=\"line\"><span class=\"comment\">-- Online tempfiles have complete space information.</span></span><br><span class=\"line\"><span class=\"comment\">-- Other tempfiles may require adjustment.</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span>SPACE TEMP <span class=\"keyword\">ADD</span> TEMPFILE <span class=\"string\">&#x27;/u01/app/oracle/oradata/XE/temp.dbf&#x27;</span></span><br><span class=\"line\">     SIZE <span class=\"number\">20971520</span>  REUSE AUTOEXTEND <span class=\"keyword\">ON</span> NEXT <span class=\"number\">655360</span>  MAXSIZE <span class=\"number\">32767</span>M;</span><br><span class=\"line\"><span class=\"comment\">-- End of tempfile additions.</span></span><br><span class=\"line\"><span class=\"comment\">--</span></span><br></pre></td></tr></table></figure>\n\n<p>pfile<br>init.ora</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QUAWNEI.__db_cache_size=415236096</span><br><span class=\"line\">QUAWNEI.__java_pool_size=4194304</span><br><span class=\"line\">QUAWNEI.__large_pool_size=4194304</span><br><span class=\"line\">QUAWNEI.__oracle_base=&#x27;/u01/app/oracle&#x27;#ORACLE_BASE set from environment</span><br><span class=\"line\">QUAWNEI.__pga_aggregate_target=201326592</span><br><span class=\"line\">QUAWNEI.__sga_target=603979776</span><br><span class=\"line\">QUAWNEI.__shared_io_pool_size=0</span><br><span class=\"line\">QUAWNEI.__shared_pool_size=171966464</span><br><span class=\"line\">QUAWNEI.__streams_pool_size=0</span><br><span class=\"line\">*.audit_file_dest=&#x27;/u01/app/oracle/admin/XE/adump&#x27;</span><br><span class=\"line\">*.compatible=&#x27;11.2.0.0.0&#x27;</span><br><span class=\"line\">*.control_files=&#x27;/u01/app/oracle/oradata/xe/control01.ctl&#x27;</span><br><span class=\"line\">*.db_name=&#x27;QUANWEI&#x27;</span><br><span class=\"line\">*.DB_RECOVERY_FILE_DEST=&#x27;/u01/app/oracle/fast_recovery_area&#x27;</span><br><span class=\"line\">*.DB_RECOVERY_FILE_DEST_SIZE=10G</span><br><span class=\"line\">*.diagnostic_dest=&#x27;/u01/app/oracle&#x27;</span><br><span class=\"line\">*.disk_asynch_io=FALSE</span><br><span class=\"line\">*.dispatchers=&#x27;(PROTOCOL=TCP) (SERVICE=XEXDB)&#x27;</span><br><span class=\"line\">*.job_queue_processes=4</span><br><span class=\"line\">*.open_cursors=300</span><br><span class=\"line\">*.pga_aggregate_target=200540160</span><br><span class=\"line\">*.remote_login_passwordfile=&#x27;EXCLUSIVE&#x27;</span><br><span class=\"line\">*.sessions=20</span><br><span class=\"line\">*.sga_target=601620480</span><br><span class=\"line\">*.shared_servers=4</span><br><span class=\"line\">*.undo_management=&#x27;AUTO&#x27;</span><br><span class=\"line\">*.undo_tablespace=&#x27;UNDOTBS1&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>create spfile&#x3D;’&#x2F;u01&#x2F;app&#x2F;oracle&#x2F;product&#x2F;11.2.0&#x2F;xe&#x2F;dbs&#x2F;spfileQW.ora’<br> from pfile&#x3D;’&#x2F;u01&#x2F;app&#x2F;oracle&#x2F;product&#x2F;11.2.0&#x2F;xe&#x2F;dbs&#x2F;init.ora’</p>\n<p> select value from v$parameter where name&#x3D;’db_name’;</p>\n<p>select group#,status from v$log;</p>\n<p>select group#,status from v$logfile;</p>\n<p>alter database add logfile group 2<br>  (‘&#x2F;home&#x2F;oracle&#x2F;REDO0401.LOG’,’&#x2F;home&#x2F;oracle&#x2F;REDO0402.LOG’)<br>  SIZE 10M;</p>\n<p>alter database add logfile member\t<br> ‘&#x2F;home&#x2F;oracle&#x2F;REDO0501.LOG’ TO GROUP 1,<br> ‘&#x2F;home&#x2F;oracle&#x2F;REDO0502.LOG’ TO GROUP 2,<br> ‘&#x2F;home&#x2F;oracle&#x2F;REDO0503.LOG’ TO GROUP 3;</p>\n<p>ALTER DATABASE DROP LOGFILE GROUP 3;</p>\n<p>ALTER DATABASE DROP LOGFILE MEMBER ‘$HOME&#x2F;ORADATA&#x2F;u04&#x2F;log3c.rdo’;</p>"},{"title":"Docker MySQL","date":"2023-07-04T07:46:43.000Z","cover":false,"_content":"\n```\ndocker run \\\n  --name mysql-8 \\\n  -d \\\n  -p 3306:3306 \\\n  --restart unless-stopped \\\n  -v ~/.mysql/log:/var/log/mysql \\\n  -v ~/.mysql/data:/var/lib/mysql \\\n  -e MYSQL_ROOT_PASSWORD=021009 \\\n  mysql:8.0.31\n```\n\n```\nint：整型\ndouble：浮点型，例如double(5,2)表示最多5位，其中必须有2位小数，即最大值为999.99；\nchar：固定长度字符串类型；    char(10)     'aaa       '  占10位\nvarchar：可变长度字符串类型； varchar(10)  'aaa'  占3为\ntext：字符串类型；\nblob：字节类型；\ndate：日期类型，格式为：yyyy-MM-dd；\ntime：时间类型，格式为：hh:mm:ss\ntimestamp：时间戳类型 yyyy-MM-dd hh:mm:ss  会自动赋值\ndatetime:日期时间类型 yyyy-MM-dd hh:mm:ss\n```\n","source":"_posts/Docker-MySQL.md","raw":"---\ntitle: Docker MySQL\ntags: Docker MySQL\ndate: 2023-07-04 15:46:43\ncover:\n---\n\n```\ndocker run \\\n  --name mysql-8 \\\n  -d \\\n  -p 3306:3306 \\\n  --restart unless-stopped \\\n  -v ~/.mysql/log:/var/log/mysql \\\n  -v ~/.mysql/data:/var/lib/mysql \\\n  -e MYSQL_ROOT_PASSWORD=021009 \\\n  mysql:8.0.31\n```\n\n```\nint：整型\ndouble：浮点型，例如double(5,2)表示最多5位，其中必须有2位小数，即最大值为999.99；\nchar：固定长度字符串类型；    char(10)     'aaa       '  占10位\nvarchar：可变长度字符串类型； varchar(10)  'aaa'  占3为\ntext：字符串类型；\nblob：字节类型；\ndate：日期类型，格式为：yyyy-MM-dd；\ntime：时间类型，格式为：hh:mm:ss\ntimestamp：时间戳类型 yyyy-MM-dd hh:mm:ss  会自动赋值\ndatetime:日期时间类型 yyyy-MM-dd hh:mm:ss\n```\n","slug":"Docker-MySQL","published":1,"updated":"2023-07-04T08:03:24.283Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5u8000mlv9e5iza4c7l","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run \\</span><br><span class=\"line\">  --name mysql-8 \\</span><br><span class=\"line\">  -d \\</span><br><span class=\"line\">  -p 3306:3306 \\</span><br><span class=\"line\">  --restart unless-stopped \\</span><br><span class=\"line\">  -v ~/.mysql/log:/var/log/mysql \\</span><br><span class=\"line\">  -v ~/.mysql/data:/var/lib/mysql \\</span><br><span class=\"line\">  -e MYSQL_ROOT_PASSWORD=021009 \\</span><br><span class=\"line\">  mysql:8.0.31</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int：整型</span><br><span class=\"line\">double：浮点型，例如double(5,2)表示最多5位，其中必须有2位小数，即最大值为999.99；</span><br><span class=\"line\">char：固定长度字符串类型；    char(10)     &#x27;aaa       &#x27;  占10位</span><br><span class=\"line\">varchar：可变长度字符串类型； varchar(10)  &#x27;aaa&#x27;  占3为</span><br><span class=\"line\">text：字符串类型；</span><br><span class=\"line\">blob：字节类型；</span><br><span class=\"line\">date：日期类型，格式为：yyyy-MM-dd；</span><br><span class=\"line\">time：时间类型，格式为：hh:mm:ss</span><br><span class=\"line\">timestamp：时间戳类型 yyyy-MM-dd hh:mm:ss  会自动赋值</span><br><span class=\"line\">datetime:日期时间类型 yyyy-MM-dd hh:mm:ss</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run \\</span><br><span class=\"line\">  --name mysql-8 \\</span><br><span class=\"line\">  -d \\</span><br><span class=\"line\">  -p 3306:3306 \\</span><br><span class=\"line\">  --restart unless-stopped \\</span><br><span class=\"line\">  -v ~/.mysql/log:/var/log/mysql \\</span><br><span class=\"line\">  -v ~/.mysql/data:/var/lib/mysql \\</span><br><span class=\"line\">  -e MYSQL_ROOT_PASSWORD=021009 \\</span><br><span class=\"line\">  mysql:8.0.31</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int：整型</span><br><span class=\"line\">double：浮点型，例如double(5,2)表示最多5位，其中必须有2位小数，即最大值为999.99；</span><br><span class=\"line\">char：固定长度字符串类型；    char(10)     &#x27;aaa       &#x27;  占10位</span><br><span class=\"line\">varchar：可变长度字符串类型； varchar(10)  &#x27;aaa&#x27;  占3为</span><br><span class=\"line\">text：字符串类型；</span><br><span class=\"line\">blob：字节类型；</span><br><span class=\"line\">date：日期类型，格式为：yyyy-MM-dd；</span><br><span class=\"line\">time：时间类型，格式为：hh:mm:ss</span><br><span class=\"line\">timestamp：时间戳类型 yyyy-MM-dd hh:mm:ss  会自动赋值</span><br><span class=\"line\">datetime:日期时间类型 yyyy-MM-dd hh:mm:ss</span><br></pre></td></tr></table></figure>\n"},{"title":"Docker Oracle-12c","date":"2022-09-24T08:09:12.000Z","_content":"## 安装\n\n### 1. 获取镜像\n\n```bash\n# 查找\ndocker search oracle\n\n# 拉取\ndocker pull truevoly/oracle-12c\n\n# 查看\ndocker images\n```\n\n<!-- more -->\n\n\n### 2. 启动Oracle数据库\n\n更新更新！！！\n```\ndocker run -d --name oracle-12c \\\n  --privileged  --mount source=oracle-data,target=/u01/app/oracle \\\n  -p 1521:1521 truevoly/oracle-12c  \n```\n现在只需要执行上面一句就可以了！！！（意思和下面是一样的）\n\n启动前有个比较坑的地方，需要先执行\n```bash\nsudo mkdir -p  /u01/app/oracle  && sudo chmod -R a+w /u01/app/oracle\nsudo mkdir -p  $(pwd)/.oradata  && sudo chmod -R a+w $(pwd)/.oradata\n```\n\n不然会报错：\n```\nCannot create directory \"/u01/app/oracle/cfgtoollogs/dbca\".\n```\n\n下面\n\n将主机上上的8079端口映射到docker的8080（登录网页端管理）\n\n将主机上上的1521端口映射到docker的1521（数据库连接端口）\n\n挂载主机目录 $(pwd)/.oradata 到oracle服务器/u01/app/oracle目录，这样oracle数据就保存在本地宿主机上\n\n--privileged 使用root权限，不然创建不了文件\n\n```bash\ndocker run -d --name oracle-12c \\\n  --privileged -v $(pwd)/.oradata:/u01/app/oracle \\\n  -p 8079:8080 -p 1521:1521 truevoly/oracle-12c  \n```\n\n### 3. 查看日志\n\n```bash\ndocker logs -f <id>\n```\n\n![logs](logs.png)\n\n到100%之后按ctrl+c退出\n\n\n### 4. 进入oracle容器\n\n```bash\ndocker exec -it <id> /bin/bash\n```\n\n### 5. 连接Oracle数据库\n\n```\nhostname: localhost\nport: 1521\nsid: xe\nservice name: xe \nusername: system \npassword: oracle \n```\n\n### 6. sqlplus\n\n```\nsu oracle\nsqlplus / as sysdba\n```\n\n","source":"_posts/Docker-Oracle-12c.md","raw":"---\ntitle: Docker Oracle-12c\ndate: 2022-09-24 16:09:12\ntags: \n- Database\n- Oracle\n---\n## 安装\n\n### 1. 获取镜像\n\n```bash\n# 查找\ndocker search oracle\n\n# 拉取\ndocker pull truevoly/oracle-12c\n\n# 查看\ndocker images\n```\n\n<!-- more -->\n\n\n### 2. 启动Oracle数据库\n\n更新更新！！！\n```\ndocker run -d --name oracle-12c \\\n  --privileged  --mount source=oracle-data,target=/u01/app/oracle \\\n  -p 1521:1521 truevoly/oracle-12c  \n```\n现在只需要执行上面一句就可以了！！！（意思和下面是一样的）\n\n启动前有个比较坑的地方，需要先执行\n```bash\nsudo mkdir -p  /u01/app/oracle  && sudo chmod -R a+w /u01/app/oracle\nsudo mkdir -p  $(pwd)/.oradata  && sudo chmod -R a+w $(pwd)/.oradata\n```\n\n不然会报错：\n```\nCannot create directory \"/u01/app/oracle/cfgtoollogs/dbca\".\n```\n\n下面\n\n将主机上上的8079端口映射到docker的8080（登录网页端管理）\n\n将主机上上的1521端口映射到docker的1521（数据库连接端口）\n\n挂载主机目录 $(pwd)/.oradata 到oracle服务器/u01/app/oracle目录，这样oracle数据就保存在本地宿主机上\n\n--privileged 使用root权限，不然创建不了文件\n\n```bash\ndocker run -d --name oracle-12c \\\n  --privileged -v $(pwd)/.oradata:/u01/app/oracle \\\n  -p 8079:8080 -p 1521:1521 truevoly/oracle-12c  \n```\n\n### 3. 查看日志\n\n```bash\ndocker logs -f <id>\n```\n\n![logs](logs.png)\n\n到100%之后按ctrl+c退出\n\n\n### 4. 进入oracle容器\n\n```bash\ndocker exec -it <id> /bin/bash\n```\n\n### 5. 连接Oracle数据库\n\n```\nhostname: localhost\nport: 1521\nsid: xe\nservice name: xe \nusername: system \npassword: oracle \n```\n\n### 6. sqlplus\n\n```\nsu oracle\nsqlplus / as sysdba\n```\n\n","slug":"Docker-Oracle-12c","published":1,"updated":"2023-06-23T00:59:55.785Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5u9000olv9eh11p3fu4","content":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"1-获取镜像\"><a href=\"#1-获取镜像\" class=\"headerlink\" title=\"1. 获取镜像\"></a>1. 获取镜像</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查找</span></span><br><span class=\"line\">docker search oracle</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 拉取</span></span><br><span class=\"line\">docker pull truevoly/oracle-12c</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看</span></span><br><span class=\"line\">docker images</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n\n<h3 id=\"2-启动Oracle数据库\"><a href=\"#2-启动Oracle数据库\" class=\"headerlink\" title=\"2. 启动Oracle数据库\"></a>2. 启动Oracle数据库</h3><p>更新更新！！！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name oracle-12c \\</span><br><span class=\"line\">  --privileged  --mount source=oracle-data,target=/u01/app/oracle \\</span><br><span class=\"line\">  -p 1521:1521 truevoly/oracle-12c  </span><br></pre></td></tr></table></figure>\n<p>现在只需要执行上面一句就可以了！！！（意思和下面是一样的）</p>\n<p>启动前有个比较坑的地方，需要先执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> -p  /u01/app/oracle  &amp;&amp; sudo <span class=\"built_in\">chmod</span> -R a+w /u01/app/oracle</span><br><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> -p  $(<span class=\"built_in\">pwd</span>)/.oradata  &amp;&amp; sudo <span class=\"built_in\">chmod</span> -R a+w $(<span class=\"built_in\">pwd</span>)/.oradata</span><br></pre></td></tr></table></figure>\n\n<p>不然会报错：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cannot create directory &quot;/u01/app/oracle/cfgtoollogs/dbca&quot;.</span><br></pre></td></tr></table></figure>\n\n<p>下面</p>\n<p>将主机上上的8079端口映射到docker的8080（登录网页端管理）</p>\n<p>将主机上上的1521端口映射到docker的1521（数据库连接端口）</p>\n<p>挂载主机目录 $(pwd)&#x2F;.oradata 到oracle服务器&#x2F;u01&#x2F;app&#x2F;oracle目录，这样oracle数据就保存在本地宿主机上</p>\n<p>–privileged 使用root权限，不然创建不了文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name oracle-12c \\</span><br><span class=\"line\">  --privileged -v $(<span class=\"built_in\">pwd</span>)/.oradata:/u01/app/oracle \\</span><br><span class=\"line\">  -p 8079:8080 -p 1521:1521 truevoly/oracle-12c  </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-查看日志\"><a href=\"#3-查看日志\" class=\"headerlink\" title=\"3. 查看日志\"></a>3. 查看日志</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker logs -f &lt;<span class=\"built_in\">id</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2022/09/24/Docker-Oracle-12c/logs.png\" alt=\"logs\"></p>\n<p>到100%之后按ctrl+c退出</p>\n<h3 id=\"4-进入oracle容器\"><a href=\"#4-进入oracle容器\" class=\"headerlink\" title=\"4. 进入oracle容器\"></a>4. 进入oracle容器</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it &lt;<span class=\"built_in\">id</span>&gt; /bin/bash</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-连接Oracle数据库\"><a href=\"#5-连接Oracle数据库\" class=\"headerlink\" title=\"5. 连接Oracle数据库\"></a>5. 连接Oracle数据库</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostname: localhost</span><br><span class=\"line\">port: 1521</span><br><span class=\"line\">sid: xe</span><br><span class=\"line\">service name: xe </span><br><span class=\"line\">username: system </span><br><span class=\"line\">password: oracle </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-sqlplus\"><a href=\"#6-sqlplus\" class=\"headerlink\" title=\"6. sqlplus\"></a>6. sqlplus</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su oracle</span><br><span class=\"line\">sqlplus / as sysdba</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"cover":false,"excerpt":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"1-获取镜像\"><a href=\"#1-获取镜像\" class=\"headerlink\" title=\"1. 获取镜像\"></a>1. 获取镜像</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查找</span></span><br><span class=\"line\">docker search oracle</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 拉取</span></span><br><span class=\"line\">docker pull truevoly/oracle-12c</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看</span></span><br><span class=\"line\">docker images</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"2-启动Oracle数据库\"><a href=\"#2-启动Oracle数据库\" class=\"headerlink\" title=\"2. 启动Oracle数据库\"></a>2. 启动Oracle数据库</h3><p>更新更新！！！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name oracle-12c \\</span><br><span class=\"line\">  --privileged  --mount source=oracle-data,target=/u01/app/oracle \\</span><br><span class=\"line\">  -p 1521:1521 truevoly/oracle-12c  </span><br></pre></td></tr></table></figure>\n<p>现在只需要执行上面一句就可以了！！！（意思和下面是一样的）</p>\n<p>启动前有个比较坑的地方，需要先执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> -p  /u01/app/oracle  &amp;&amp; sudo <span class=\"built_in\">chmod</span> -R a+w /u01/app/oracle</span><br><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> -p  $(<span class=\"built_in\">pwd</span>)/.oradata  &amp;&amp; sudo <span class=\"built_in\">chmod</span> -R a+w $(<span class=\"built_in\">pwd</span>)/.oradata</span><br></pre></td></tr></table></figure>\n\n<p>不然会报错：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cannot create directory &quot;/u01/app/oracle/cfgtoollogs/dbca&quot;.</span><br></pre></td></tr></table></figure>\n\n<p>下面</p>\n<p>将主机上上的8079端口映射到docker的8080（登录网页端管理）</p>\n<p>将主机上上的1521端口映射到docker的1521（数据库连接端口）</p>\n<p>挂载主机目录 $(pwd)&#x2F;.oradata 到oracle服务器&#x2F;u01&#x2F;app&#x2F;oracle目录，这样oracle数据就保存在本地宿主机上</p>\n<p>–privileged 使用root权限，不然创建不了文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name oracle-12c \\</span><br><span class=\"line\">  --privileged -v $(<span class=\"built_in\">pwd</span>)/.oradata:/u01/app/oracle \\</span><br><span class=\"line\">  -p 8079:8080 -p 1521:1521 truevoly/oracle-12c  </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-查看日志\"><a href=\"#3-查看日志\" class=\"headerlink\" title=\"3. 查看日志\"></a>3. 查看日志</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker logs -f &lt;<span class=\"built_in\">id</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2022/09/24/Docker-Oracle-12c/logs.png\" alt=\"logs\"></p>\n<p>到100%之后按ctrl+c退出</p>\n<h3 id=\"4-进入oracle容器\"><a href=\"#4-进入oracle容器\" class=\"headerlink\" title=\"4. 进入oracle容器\"></a>4. 进入oracle容器</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it &lt;<span class=\"built_in\">id</span>&gt; /bin/bash</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-连接Oracle数据库\"><a href=\"#5-连接Oracle数据库\" class=\"headerlink\" title=\"5. 连接Oracle数据库\"></a>5. 连接Oracle数据库</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostname: localhost</span><br><span class=\"line\">port: 1521</span><br><span class=\"line\">sid: xe</span><br><span class=\"line\">service name: xe </span><br><span class=\"line\">username: system </span><br><span class=\"line\">password: oracle </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-sqlplus\"><a href=\"#6-sqlplus\" class=\"headerlink\" title=\"6. sqlplus\"></a>6. sqlplus</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su oracle</span><br><span class=\"line\">sqlplus / as sysdba</span><br></pre></td></tr></table></figure>"},{"title":"PostgreSQL","date":"2023-08-02T11:27:25.000Z","cover":"2023/08/02/Docker-PostgreSQL/2023-08-02-19-46-38.png","_content":"\nPostgreSQL: The World's Most Advanced Open Source Relational Database\n\n## Docker 安装 [PostgreSQL](https://www.postgresql.org/)\n\n```bash\ndocker run -d --name postgres \\\n  -p 5432:5432 \\\n  -e POSTGRES_PASSWORD=021009 \\\n  -v /home/quanwei/docker/pgdata:/var/lib/postgresql/data \\\n  postgres\n```\n![](2023-08-02-19-37-22.png)\n\n![](2023-08-02-19-36-43.png)\n\n![](2023-08-02-20-01-25.png)\n\n## Docker 安装 pgAdmin\n\npgAdmin is the most popular and feature rich Open Source administration and development platform for PostgreSQL, the most advanced Open Source database in the world. \n\n```bash\ndocker run -d --name pgadmin \\\n  -e PGADMIN_DEFAULT_EMAIL=postgres@tang.qw \\\n  -e PGADMIN_DEFAULT_PASSWORD=021009 \\\n  -p 5050:80 \\\n  --add-host=host.docker.internal:host-gateway \\\n  dpage/pgadmin4\n```\n![](2023-08-02-19-44-15.png)\n![](2023-08-02-19-44-54.png)\n\n## 数据类型\n\n\n| 名字                                    | 别名               | 描述                     |\n| --------------------------------------- | ------------------ | ------------------------ |\n| bigint                                  | int8               | 有符号八字节整数         |\n| bigserial                               | serial8            | 自动递增八字节整数       |\n| bit [ (n) ]                             |                    | 固定长度的位字符串       |\n| bit varying [ (n) ]                     | varbit [ (n) ]     | 可变长度位字符串         |\n| boolean                                 | bool               | 逻辑布尔值（真/假）      |\n| box                                     |                    | 平面上的矩形框           |\n| bytea                                   |                    | 二进制数据（“字节数组”)  |\n| character [ (n) ]                       | char [ (n) ]       | 固定长度的字符串         |\n| character varying [ (n) ]               | varchar [ (n) ]    | 可变长度字符串           |\n| cidr                                    |                    | IPv4 或 IPv6 网络地址    |\n| circle                                  |                    | 平面上的圆               |\n| date                                    |                    | 日历日期（年、月、日）   |\n| double precision                        | float8             | 双精度浮点数（8 字节）   |\n| inet                                    |                    | IPv4 或 IPv6 主机地址    |\n| integer                                 | int,int4           | 有符号四字节整数         |\n| interval [ fields ] [ (p) ]             |                    | 时间跨度                 |\n| json                                    |                    | 文本 JSON 数据           |\n| jsonb                                   |                    | 二进制 JSON 数据，已分解 |\n| line                                    |                    | 平面上的无限线           |\n| lseg                                    |                    | 平面上的线段             |\n| macaddr                                 |                    | MAC（媒体访问控制）地址  |\n| macaddr8                                |                    | MAC地址（EUI-64 格式）   |\n| money                                   |                    | 货币金额                 |\n| numeric [ (p, s) ]                      | decimal [ (p, s) ] | 可选精度的精确数字       |\n| path                                    |                    | 平面上的几何路径         |\n| pg_lsn                                  |                    | PostgreSQL日志序列号     |\n| pg_snapshot                             |                    | 用户级交易 ID 快照       |\n| point                                   |                    | 平面上的几何点           |\n| polygon                                 |                    | 平面上的闭合几何路径     |\n| real                                    | float4             | 单精度浮点数（4 字节）   |\n| smallint                                | int2               | 有符号双字节整数         |\n| smallserial                             | serial2            | 自动递增双字节整数       |\n| serial                                  | serial4            | 自动递增四字节整数       |\n| text                                    |                    | 可变长度字符串           |\n| time [ (p) ] [ without time zone ]      |                    | 一天中的时间（无时区）   |\n| time [ (p) ] with time zone\ttimetz      |                    | 一天中的时间，包括时区   |\n| timestamp [ (p) ] [ without time zone ] |                    | 日期和时间（无时区）     |\n| timestamp [ (p) ] with time zone        | timestamptz        | 日期和时间，包括时区     |\n| tsquery                                 |                    | 文本搜索查询             |\n| tsvector                                |                    | 文本搜索文档             |\n| uuid                                    |                    | 通用唯一标识符           |\n| xml                                     |                    | XML 数据                 |\n","source":"_posts/Docker-PostgreSQL.md","raw":"---\ntitle: PostgreSQL\ntags: \n- Docker\n- PostgreSQL\ndate: 2023-08-02 19:27:25\ncover: 2023-08-02-19-46-38.png\n---\n\nPostgreSQL: The World's Most Advanced Open Source Relational Database\n\n## Docker 安装 [PostgreSQL](https://www.postgresql.org/)\n\n```bash\ndocker run -d --name postgres \\\n  -p 5432:5432 \\\n  -e POSTGRES_PASSWORD=021009 \\\n  -v /home/quanwei/docker/pgdata:/var/lib/postgresql/data \\\n  postgres\n```\n![](2023-08-02-19-37-22.png)\n\n![](2023-08-02-19-36-43.png)\n\n![](2023-08-02-20-01-25.png)\n\n## Docker 安装 pgAdmin\n\npgAdmin is the most popular and feature rich Open Source administration and development platform for PostgreSQL, the most advanced Open Source database in the world. \n\n```bash\ndocker run -d --name pgadmin \\\n  -e PGADMIN_DEFAULT_EMAIL=postgres@tang.qw \\\n  -e PGADMIN_DEFAULT_PASSWORD=021009 \\\n  -p 5050:80 \\\n  --add-host=host.docker.internal:host-gateway \\\n  dpage/pgadmin4\n```\n![](2023-08-02-19-44-15.png)\n![](2023-08-02-19-44-54.png)\n\n## 数据类型\n\n\n| 名字                                    | 别名               | 描述                     |\n| --------------------------------------- | ------------------ | ------------------------ |\n| bigint                                  | int8               | 有符号八字节整数         |\n| bigserial                               | serial8            | 自动递增八字节整数       |\n| bit [ (n) ]                             |                    | 固定长度的位字符串       |\n| bit varying [ (n) ]                     | varbit [ (n) ]     | 可变长度位字符串         |\n| boolean                                 | bool               | 逻辑布尔值（真/假）      |\n| box                                     |                    | 平面上的矩形框           |\n| bytea                                   |                    | 二进制数据（“字节数组”)  |\n| character [ (n) ]                       | char [ (n) ]       | 固定长度的字符串         |\n| character varying [ (n) ]               | varchar [ (n) ]    | 可变长度字符串           |\n| cidr                                    |                    | IPv4 或 IPv6 网络地址    |\n| circle                                  |                    | 平面上的圆               |\n| date                                    |                    | 日历日期（年、月、日）   |\n| double precision                        | float8             | 双精度浮点数（8 字节）   |\n| inet                                    |                    | IPv4 或 IPv6 主机地址    |\n| integer                                 | int,int4           | 有符号四字节整数         |\n| interval [ fields ] [ (p) ]             |                    | 时间跨度                 |\n| json                                    |                    | 文本 JSON 数据           |\n| jsonb                                   |                    | 二进制 JSON 数据，已分解 |\n| line                                    |                    | 平面上的无限线           |\n| lseg                                    |                    | 平面上的线段             |\n| macaddr                                 |                    | MAC（媒体访问控制）地址  |\n| macaddr8                                |                    | MAC地址（EUI-64 格式）   |\n| money                                   |                    | 货币金额                 |\n| numeric [ (p, s) ]                      | decimal [ (p, s) ] | 可选精度的精确数字       |\n| path                                    |                    | 平面上的几何路径         |\n| pg_lsn                                  |                    | PostgreSQL日志序列号     |\n| pg_snapshot                             |                    | 用户级交易 ID 快照       |\n| point                                   |                    | 平面上的几何点           |\n| polygon                                 |                    | 平面上的闭合几何路径     |\n| real                                    | float4             | 单精度浮点数（4 字节）   |\n| smallint                                | int2               | 有符号双字节整数         |\n| smallserial                             | serial2            | 自动递增双字节整数       |\n| serial                                  | serial4            | 自动递增四字节整数       |\n| text                                    |                    | 可变长度字符串           |\n| time [ (p) ] [ without time zone ]      |                    | 一天中的时间（无时区）   |\n| time [ (p) ] with time zone\ttimetz      |                    | 一天中的时间，包括时区   |\n| timestamp [ (p) ] [ without time zone ] |                    | 日期和时间（无时区）     |\n| timestamp [ (p) ] with time zone        | timestamptz        | 日期和时间，包括时区     |\n| tsquery                                 |                    | 文本搜索查询             |\n| tsvector                                |                    | 文本搜索文档             |\n| uuid                                    |                    | 通用唯一标识符           |\n| xml                                     |                    | XML 数据                 |\n","slug":"Docker-PostgreSQL","published":1,"updated":"2023-08-02T12:31:06.423Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5u9000plv9e0nksevs2","content":"<p>PostgreSQL: The World’s Most Advanced Open Source Relational Database</p>\n<h2 id=\"Docker-安装-PostgreSQL\"><a href=\"#Docker-安装-PostgreSQL\" class=\"headerlink\" title=\"Docker 安装 PostgreSQL\"></a>Docker 安装 <a href=\"https://www.postgresql.org/\">PostgreSQL</a></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name postgres \\</span><br><span class=\"line\">  -p 5432:5432 \\</span><br><span class=\"line\">  -e POSTGRES_PASSWORD=021009 \\</span><br><span class=\"line\">  -v /home/quanwei/docker/pgdata:/var/lib/postgresql/data \\</span><br><span class=\"line\">  postgres</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2023/08/02/Docker-PostgreSQL/2023-08-02-19-37-22.png\"></p>\n<p><img src=\"/2023/08/02/Docker-PostgreSQL/2023-08-02-19-36-43.png\"></p>\n<p><img src=\"/2023/08/02/Docker-PostgreSQL/2023-08-02-20-01-25.png\"></p>\n<h2 id=\"Docker-安装-pgAdmin\"><a href=\"#Docker-安装-pgAdmin\" class=\"headerlink\" title=\"Docker 安装 pgAdmin\"></a>Docker 安装 pgAdmin</h2><p>pgAdmin is the most popular and feature rich Open Source administration and development platform for PostgreSQL, the most advanced Open Source database in the world. </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name pgadmin \\</span><br><span class=\"line\">  -e PGADMIN_DEFAULT_EMAIL=postgres@tang.qw \\</span><br><span class=\"line\">  -e PGADMIN_DEFAULT_PASSWORD=021009 \\</span><br><span class=\"line\">  -p 5050:80 \\</span><br><span class=\"line\">  --add-host=host.docker.internal:host-gateway \\</span><br><span class=\"line\">  dpage/pgadmin4</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2023/08/02/Docker-PostgreSQL/2023-08-02-19-44-15.png\"><br><img src=\"/2023/08/02/Docker-PostgreSQL/2023-08-02-19-44-54.png\"></p>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><table>\n<thead>\n<tr>\n<th>名字</th>\n<th>别名</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>bigint</td>\n<td>int8</td>\n<td>有符号八字节整数</td>\n</tr>\n<tr>\n<td>bigserial</td>\n<td>serial8</td>\n<td>自动递增八字节整数</td>\n</tr>\n<tr>\n<td>bit [ (n) ]</td>\n<td></td>\n<td>固定长度的位字符串</td>\n</tr>\n<tr>\n<td>bit varying [ (n) ]</td>\n<td>varbit [ (n) ]</td>\n<td>可变长度位字符串</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>bool</td>\n<td>逻辑布尔值（真&#x2F;假）</td>\n</tr>\n<tr>\n<td>box</td>\n<td></td>\n<td>平面上的矩形框</td>\n</tr>\n<tr>\n<td>bytea</td>\n<td></td>\n<td>二进制数据（“字节数组”)</td>\n</tr>\n<tr>\n<td>character [ (n) ]</td>\n<td>char [ (n) ]</td>\n<td>固定长度的字符串</td>\n</tr>\n<tr>\n<td>character varying [ (n) ]</td>\n<td>varchar [ (n) ]</td>\n<td>可变长度字符串</td>\n</tr>\n<tr>\n<td>cidr</td>\n<td></td>\n<td>IPv4 或 IPv6 网络地址</td>\n</tr>\n<tr>\n<td>circle</td>\n<td></td>\n<td>平面上的圆</td>\n</tr>\n<tr>\n<td>date</td>\n<td></td>\n<td>日历日期（年、月、日）</td>\n</tr>\n<tr>\n<td>double precision</td>\n<td>float8</td>\n<td>双精度浮点数（8 字节）</td>\n</tr>\n<tr>\n<td>inet</td>\n<td></td>\n<td>IPv4 或 IPv6 主机地址</td>\n</tr>\n<tr>\n<td>integer</td>\n<td>int,int4</td>\n<td>有符号四字节整数</td>\n</tr>\n<tr>\n<td>interval [ fields ] [ (p) ]</td>\n<td></td>\n<td>时间跨度</td>\n</tr>\n<tr>\n<td>json</td>\n<td></td>\n<td>文本 JSON 数据</td>\n</tr>\n<tr>\n<td>jsonb</td>\n<td></td>\n<td>二进制 JSON 数据，已分解</td>\n</tr>\n<tr>\n<td>line</td>\n<td></td>\n<td>平面上的无限线</td>\n</tr>\n<tr>\n<td>lseg</td>\n<td></td>\n<td>平面上的线段</td>\n</tr>\n<tr>\n<td>macaddr</td>\n<td></td>\n<td>MAC（媒体访问控制）地址</td>\n</tr>\n<tr>\n<td>macaddr8</td>\n<td></td>\n<td>MAC地址（EUI-64 格式）</td>\n</tr>\n<tr>\n<td>money</td>\n<td></td>\n<td>货币金额</td>\n</tr>\n<tr>\n<td>numeric [ (p, s) ]</td>\n<td>decimal [ (p, s) ]</td>\n<td>可选精度的精确数字</td>\n</tr>\n<tr>\n<td>path</td>\n<td></td>\n<td>平面上的几何路径</td>\n</tr>\n<tr>\n<td>pg_lsn</td>\n<td></td>\n<td>PostgreSQL日志序列号</td>\n</tr>\n<tr>\n<td>pg_snapshot</td>\n<td></td>\n<td>用户级交易 ID 快照</td>\n</tr>\n<tr>\n<td>point</td>\n<td></td>\n<td>平面上的几何点</td>\n</tr>\n<tr>\n<td>polygon</td>\n<td></td>\n<td>平面上的闭合几何路径</td>\n</tr>\n<tr>\n<td>real</td>\n<td>float4</td>\n<td>单精度浮点数（4 字节）</td>\n</tr>\n<tr>\n<td>smallint</td>\n<td>int2</td>\n<td>有符号双字节整数</td>\n</tr>\n<tr>\n<td>smallserial</td>\n<td>serial2</td>\n<td>自动递增双字节整数</td>\n</tr>\n<tr>\n<td>serial</td>\n<td>serial4</td>\n<td>自动递增四字节整数</td>\n</tr>\n<tr>\n<td>text</td>\n<td></td>\n<td>可变长度字符串</td>\n</tr>\n<tr>\n<td>time [ (p) ] [ without time zone ]</td>\n<td></td>\n<td>一天中的时间（无时区）</td>\n</tr>\n<tr>\n<td>time [ (p) ] with time zone\ttimetz</td>\n<td></td>\n<td>一天中的时间，包括时区</td>\n</tr>\n<tr>\n<td>timestamp [ (p) ] [ without time zone ]</td>\n<td></td>\n<td>日期和时间（无时区）</td>\n</tr>\n<tr>\n<td>timestamp [ (p) ] with time zone</td>\n<td>timestamptz</td>\n<td>日期和时间，包括时区</td>\n</tr>\n<tr>\n<td>tsquery</td>\n<td></td>\n<td>文本搜索查询</td>\n</tr>\n<tr>\n<td>tsvector</td>\n<td></td>\n<td>文本搜索文档</td>\n</tr>\n<tr>\n<td>uuid</td>\n<td></td>\n<td>通用唯一标识符</td>\n</tr>\n<tr>\n<td>xml</td>\n<td></td>\n<td>XML 数据</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"cover_type":"img","excerpt":"","more":"<p>PostgreSQL: The World’s Most Advanced Open Source Relational Database</p>\n<h2 id=\"Docker-安装-PostgreSQL\"><a href=\"#Docker-安装-PostgreSQL\" class=\"headerlink\" title=\"Docker 安装 PostgreSQL\"></a>Docker 安装 <a href=\"https://www.postgresql.org/\">PostgreSQL</a></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name postgres \\</span><br><span class=\"line\">  -p 5432:5432 \\</span><br><span class=\"line\">  -e POSTGRES_PASSWORD=021009 \\</span><br><span class=\"line\">  -v /home/quanwei/docker/pgdata:/var/lib/postgresql/data \\</span><br><span class=\"line\">  postgres</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2023/08/02/Docker-PostgreSQL/2023-08-02-19-37-22.png\"></p>\n<p><img src=\"/2023/08/02/Docker-PostgreSQL/2023-08-02-19-36-43.png\"></p>\n<p><img src=\"/2023/08/02/Docker-PostgreSQL/2023-08-02-20-01-25.png\"></p>\n<h2 id=\"Docker-安装-pgAdmin\"><a href=\"#Docker-安装-pgAdmin\" class=\"headerlink\" title=\"Docker 安装 pgAdmin\"></a>Docker 安装 pgAdmin</h2><p>pgAdmin is the most popular and feature rich Open Source administration and development platform for PostgreSQL, the most advanced Open Source database in the world. </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name pgadmin \\</span><br><span class=\"line\">  -e PGADMIN_DEFAULT_EMAIL=postgres@tang.qw \\</span><br><span class=\"line\">  -e PGADMIN_DEFAULT_PASSWORD=021009 \\</span><br><span class=\"line\">  -p 5050:80 \\</span><br><span class=\"line\">  --add-host=host.docker.internal:host-gateway \\</span><br><span class=\"line\">  dpage/pgadmin4</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2023/08/02/Docker-PostgreSQL/2023-08-02-19-44-15.png\"><br><img src=\"/2023/08/02/Docker-PostgreSQL/2023-08-02-19-44-54.png\"></p>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><table>\n<thead>\n<tr>\n<th>名字</th>\n<th>别名</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>bigint</td>\n<td>int8</td>\n<td>有符号八字节整数</td>\n</tr>\n<tr>\n<td>bigserial</td>\n<td>serial8</td>\n<td>自动递增八字节整数</td>\n</tr>\n<tr>\n<td>bit [ (n) ]</td>\n<td></td>\n<td>固定长度的位字符串</td>\n</tr>\n<tr>\n<td>bit varying [ (n) ]</td>\n<td>varbit [ (n) ]</td>\n<td>可变长度位字符串</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>bool</td>\n<td>逻辑布尔值（真&#x2F;假）</td>\n</tr>\n<tr>\n<td>box</td>\n<td></td>\n<td>平面上的矩形框</td>\n</tr>\n<tr>\n<td>bytea</td>\n<td></td>\n<td>二进制数据（“字节数组”)</td>\n</tr>\n<tr>\n<td>character [ (n) ]</td>\n<td>char [ (n) ]</td>\n<td>固定长度的字符串</td>\n</tr>\n<tr>\n<td>character varying [ (n) ]</td>\n<td>varchar [ (n) ]</td>\n<td>可变长度字符串</td>\n</tr>\n<tr>\n<td>cidr</td>\n<td></td>\n<td>IPv4 或 IPv6 网络地址</td>\n</tr>\n<tr>\n<td>circle</td>\n<td></td>\n<td>平面上的圆</td>\n</tr>\n<tr>\n<td>date</td>\n<td></td>\n<td>日历日期（年、月、日）</td>\n</tr>\n<tr>\n<td>double precision</td>\n<td>float8</td>\n<td>双精度浮点数（8 字节）</td>\n</tr>\n<tr>\n<td>inet</td>\n<td></td>\n<td>IPv4 或 IPv6 主机地址</td>\n</tr>\n<tr>\n<td>integer</td>\n<td>int,int4</td>\n<td>有符号四字节整数</td>\n</tr>\n<tr>\n<td>interval [ fields ] [ (p) ]</td>\n<td></td>\n<td>时间跨度</td>\n</tr>\n<tr>\n<td>json</td>\n<td></td>\n<td>文本 JSON 数据</td>\n</tr>\n<tr>\n<td>jsonb</td>\n<td></td>\n<td>二进制 JSON 数据，已分解</td>\n</tr>\n<tr>\n<td>line</td>\n<td></td>\n<td>平面上的无限线</td>\n</tr>\n<tr>\n<td>lseg</td>\n<td></td>\n<td>平面上的线段</td>\n</tr>\n<tr>\n<td>macaddr</td>\n<td></td>\n<td>MAC（媒体访问控制）地址</td>\n</tr>\n<tr>\n<td>macaddr8</td>\n<td></td>\n<td>MAC地址（EUI-64 格式）</td>\n</tr>\n<tr>\n<td>money</td>\n<td></td>\n<td>货币金额</td>\n</tr>\n<tr>\n<td>numeric [ (p, s) ]</td>\n<td>decimal [ (p, s) ]</td>\n<td>可选精度的精确数字</td>\n</tr>\n<tr>\n<td>path</td>\n<td></td>\n<td>平面上的几何路径</td>\n</tr>\n<tr>\n<td>pg_lsn</td>\n<td></td>\n<td>PostgreSQL日志序列号</td>\n</tr>\n<tr>\n<td>pg_snapshot</td>\n<td></td>\n<td>用户级交易 ID 快照</td>\n</tr>\n<tr>\n<td>point</td>\n<td></td>\n<td>平面上的几何点</td>\n</tr>\n<tr>\n<td>polygon</td>\n<td></td>\n<td>平面上的闭合几何路径</td>\n</tr>\n<tr>\n<td>real</td>\n<td>float4</td>\n<td>单精度浮点数（4 字节）</td>\n</tr>\n<tr>\n<td>smallint</td>\n<td>int2</td>\n<td>有符号双字节整数</td>\n</tr>\n<tr>\n<td>smallserial</td>\n<td>serial2</td>\n<td>自动递增双字节整数</td>\n</tr>\n<tr>\n<td>serial</td>\n<td>serial4</td>\n<td>自动递增四字节整数</td>\n</tr>\n<tr>\n<td>text</td>\n<td></td>\n<td>可变长度字符串</td>\n</tr>\n<tr>\n<td>time [ (p) ] [ without time zone ]</td>\n<td></td>\n<td>一天中的时间（无时区）</td>\n</tr>\n<tr>\n<td>time [ (p) ] with time zone\ttimetz</td>\n<td></td>\n<td>一天中的时间，包括时区</td>\n</tr>\n<tr>\n<td>timestamp [ (p) ] [ without time zone ]</td>\n<td></td>\n<td>日期和时间（无时区）</td>\n</tr>\n<tr>\n<td>timestamp [ (p) ] with time zone</td>\n<td>timestamptz</td>\n<td>日期和时间，包括时区</td>\n</tr>\n<tr>\n<td>tsquery</td>\n<td></td>\n<td>文本搜索查询</td>\n</tr>\n<tr>\n<td>tsvector</td>\n<td></td>\n<td>文本搜索文档</td>\n</tr>\n<tr>\n<td>uuid</td>\n<td></td>\n<td>通用唯一标识符</td>\n</tr>\n<tr>\n<td>xml</td>\n<td></td>\n<td>XML 数据</td>\n</tr>\n</tbody></table>\n"},{"title":"docker 最佳实践","date":"2022-09-24T07:43:36.000Z","_content":" \n# Docker\n\n## Docker镜像\n\n<!-- more -->\n* 搜索\n\n  cocker search ubuntu\n\n* 拉取\n\n  docker pull ubuntu\n\n* 运行\n\n  docker run -it --name ubuntu-test ubuntu /bin/bash\n\n* 后台运行\n\n  docker run -itd  ubuntu /bin/bash\n\n参数：\n\n  -i: 交互式操作。\n  -t: 终端。\n  -d: 参数默认不会进入容器，想要进入容器需要使用指令 docker exec\n  ubuntu: ubuntu 镜像。\n  /bin/bash：放在镜像名后的是命令，这里是交互式 Shell /bin/bash。\n\n在使用 -d 参数时，容器启动后会进入后台。此时想要进入容器，可以通过以下指令进入：\n\n  docker attach <容器 ID>\n\nor\n\n  docker exec -it <容器 ID> /bin/bash # 此命令会退出容器终端，但不会导致容器的停止\n\n## Docker容器\n\n* 退出容器\n\n  Ctrl + P + Q # 不停止运行\n\n  exit # 会停止运行\n\n* 查看所有的容器\n\n  docker ps -a\n\n* 删除容器\n\n  docker rm -f <容器 ID>\n\n* 停止容器\n\n  docker stop <容器 ID>\n\n* 启动一个已停止的容器\n\n  docker start <容器 ID>\n\n## Docker网络\n\nDocker的网络主要用于连接几个有关联的容器同时隔离不相关的。\n\nDocker的网络可以分为下面4种:\n\n  bridge 桥接（默认）\n    通过 IP 或 用户自定义网络访问\n\n  host 容器与宿主机共享网络\n\n  none 禁用网络\n\n  用户自定义网络\n\nDocker 网络相关的命令\n\n```\ndocker network ls \n列出运行在本地Docker主机上的全部网络\n\ndocker network create <网络名>\n创建新的Docker自定义网络,可以使用-d 参数指定驱动（网络类型）\n\n创建了网络就可以在创建容器时使用：--network <网络名> 将容器添加到网络\n\ndocker network create -d overlay overnet \n创建一个新的名为overnet的覆盖网络，其采用的驱动为Docker Overlay \n\ndocker network inspect <网络名或id>\n提供Docker网络的详细配置信息\n\ndocker network prune \n删除Docker主机上全部未使用的网络\n\ndocker network rm <网络名或id>\n删除Docker主机上指定网络\n```\n\n  \n## Docker卷\n\nDocker数据主要分为两类，持久化的与非持久化的。\n\n持久化数据是需要保存到属主机磁盘上的数据。例如数据库数据。非持久化数据是不需要保存的那些数据。\n\n每个Docker容器都有自己的非持久化存储。非持久化存储自动创建，从属于容器，生命周期与容器相同。这意味着删除容器也会删除全部非持久化数据。\n\n如果希望自己的容器数据保留下来（持久化），则需要将数据存储在卷上。\n\n每个容器都被自动分配了本地存储：\n在Linux系统中，该存储的目录在/var/lib/docker/<storage-driver>/ 之下，是容器的一部分。\n在Windows系统中位于C\\ProgramData\\Docker\\windowsfilter\\ 目录之下。\n\nDocker 卷相关的命令\n\n```\ndocker volume create <卷名>\n命令用于创建新卷。默认情况下，新卷创建使用local 驱动，但是可以通过-d 参数来指定不同的驱动\n\ndocker volume ls \n会列出本地Docker主机上的全部卷\n\ndocker volume inspect <卷名或id>\n用于查看卷的详细信息\n\ndocker volume prune \n会删除未被容器或者服务副本使用的全部卷\n\ndocker volume rm <卷名或id>\n删除未被使用的指定卷\n```\n\n## 普通用户使用 Docker \n\n普通用户使用docker命令需要加上sudo,原因是：\n\nDocker的守护线程绑定的是unix socket，而不是TCP端口，这个套接字默认属于root，其他用户可以通过sudo去访问这个套接字文件。\n所以docker服务进程都是以root账户运行。\n\n解决的方式是：\n\n创建docker用户组，把应用用户加入到docker用户组里面。只要docker组里的用户都可以直接执行docker命令。\n可以先通过指令查看是否有用户组：\n```bash\ncat /etc/group | grep docker\n```\n\n如果有就跳过第一步！\n\n第一步：创建docker用户组\n```bash\nsudo groupadd docker \n```\n\n第二步：将用户加入到用户组\n```bash\nsudo usermod -aG docker $USER\n```\n\n第三步：检查是否有效\n```bash\ncat /etc/group\n```\n\n第四步：重启docker-daemon\n```bash\nsudo systemctl restart docker\n```\n\n第五步：给docker.sock添加权限\n```bash\nsudo chmod a+rw /var/run/docker.sock\n```","source":"_posts/Docker-最佳实践.md","raw":"---\ntitle: docker 最佳实践\ndate: 2022-09-24 15:43:36\ntags: \n- Linux\n- Docker\n--- \n# Docker\n\n## Docker镜像\n\n<!-- more -->\n* 搜索\n\n  cocker search ubuntu\n\n* 拉取\n\n  docker pull ubuntu\n\n* 运行\n\n  docker run -it --name ubuntu-test ubuntu /bin/bash\n\n* 后台运行\n\n  docker run -itd  ubuntu /bin/bash\n\n参数：\n\n  -i: 交互式操作。\n  -t: 终端。\n  -d: 参数默认不会进入容器，想要进入容器需要使用指令 docker exec\n  ubuntu: ubuntu 镜像。\n  /bin/bash：放在镜像名后的是命令，这里是交互式 Shell /bin/bash。\n\n在使用 -d 参数时，容器启动后会进入后台。此时想要进入容器，可以通过以下指令进入：\n\n  docker attach <容器 ID>\n\nor\n\n  docker exec -it <容器 ID> /bin/bash # 此命令会退出容器终端，但不会导致容器的停止\n\n## Docker容器\n\n* 退出容器\n\n  Ctrl + P + Q # 不停止运行\n\n  exit # 会停止运行\n\n* 查看所有的容器\n\n  docker ps -a\n\n* 删除容器\n\n  docker rm -f <容器 ID>\n\n* 停止容器\n\n  docker stop <容器 ID>\n\n* 启动一个已停止的容器\n\n  docker start <容器 ID>\n\n## Docker网络\n\nDocker的网络主要用于连接几个有关联的容器同时隔离不相关的。\n\nDocker的网络可以分为下面4种:\n\n  bridge 桥接（默认）\n    通过 IP 或 用户自定义网络访问\n\n  host 容器与宿主机共享网络\n\n  none 禁用网络\n\n  用户自定义网络\n\nDocker 网络相关的命令\n\n```\ndocker network ls \n列出运行在本地Docker主机上的全部网络\n\ndocker network create <网络名>\n创建新的Docker自定义网络,可以使用-d 参数指定驱动（网络类型）\n\n创建了网络就可以在创建容器时使用：--network <网络名> 将容器添加到网络\n\ndocker network create -d overlay overnet \n创建一个新的名为overnet的覆盖网络，其采用的驱动为Docker Overlay \n\ndocker network inspect <网络名或id>\n提供Docker网络的详细配置信息\n\ndocker network prune \n删除Docker主机上全部未使用的网络\n\ndocker network rm <网络名或id>\n删除Docker主机上指定网络\n```\n\n  \n## Docker卷\n\nDocker数据主要分为两类，持久化的与非持久化的。\n\n持久化数据是需要保存到属主机磁盘上的数据。例如数据库数据。非持久化数据是不需要保存的那些数据。\n\n每个Docker容器都有自己的非持久化存储。非持久化存储自动创建，从属于容器，生命周期与容器相同。这意味着删除容器也会删除全部非持久化数据。\n\n如果希望自己的容器数据保留下来（持久化），则需要将数据存储在卷上。\n\n每个容器都被自动分配了本地存储：\n在Linux系统中，该存储的目录在/var/lib/docker/<storage-driver>/ 之下，是容器的一部分。\n在Windows系统中位于C\\ProgramData\\Docker\\windowsfilter\\ 目录之下。\n\nDocker 卷相关的命令\n\n```\ndocker volume create <卷名>\n命令用于创建新卷。默认情况下，新卷创建使用local 驱动，但是可以通过-d 参数来指定不同的驱动\n\ndocker volume ls \n会列出本地Docker主机上的全部卷\n\ndocker volume inspect <卷名或id>\n用于查看卷的详细信息\n\ndocker volume prune \n会删除未被容器或者服务副本使用的全部卷\n\ndocker volume rm <卷名或id>\n删除未被使用的指定卷\n```\n\n## 普通用户使用 Docker \n\n普通用户使用docker命令需要加上sudo,原因是：\n\nDocker的守护线程绑定的是unix socket，而不是TCP端口，这个套接字默认属于root，其他用户可以通过sudo去访问这个套接字文件。\n所以docker服务进程都是以root账户运行。\n\n解决的方式是：\n\n创建docker用户组，把应用用户加入到docker用户组里面。只要docker组里的用户都可以直接执行docker命令。\n可以先通过指令查看是否有用户组：\n```bash\ncat /etc/group | grep docker\n```\n\n如果有就跳过第一步！\n\n第一步：创建docker用户组\n```bash\nsudo groupadd docker \n```\n\n第二步：将用户加入到用户组\n```bash\nsudo usermod -aG docker $USER\n```\n\n第三步：检查是否有效\n```bash\ncat /etc/group\n```\n\n第四步：重启docker-daemon\n```bash\nsudo systemctl restart docker\n```\n\n第五步：给docker.sock添加权限\n```bash\nsudo chmod a+rw /var/run/docker.sock\n```","slug":"Docker-最佳实践","published":1,"updated":"2023-06-23T01:00:08.547Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5ua000rlv9ehy9m367d","content":"<h1 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h1><h2 id=\"Docker镜像\"><a href=\"#Docker镜像\" class=\"headerlink\" title=\"Docker镜像\"></a>Docker镜像</h2><span id=\"more\"></span>\n<ul>\n<li><p>搜索</p>\n<p>cocker search ubuntu</p>\n</li>\n<li><p>拉取</p>\n<p>docker pull ubuntu</p>\n</li>\n<li><p>运行</p>\n<p>docker run -it –name ubuntu-test ubuntu &#x2F;bin&#x2F;bash</p>\n</li>\n<li><p>后台运行</p>\n<p>docker run -itd  ubuntu &#x2F;bin&#x2F;bash</p>\n</li>\n</ul>\n<p>参数：</p>\n<p>  -i: 交互式操作。<br>  -t: 终端。<br>  -d: 参数默认不会进入容器，想要进入容器需要使用指令 docker exec<br>  ubuntu: ubuntu 镜像。<br>  &#x2F;bin&#x2F;bash：放在镜像名后的是命令，这里是交互式 Shell &#x2F;bin&#x2F;bash。</p>\n<p>在使用 -d 参数时，容器启动后会进入后台。此时想要进入容器，可以通过以下指令进入：</p>\n<p>  docker attach &lt;容器 ID&gt;</p>\n<p>or</p>\n<p>  docker exec -it &lt;容器 ID&gt; &#x2F;bin&#x2F;bash # 此命令会退出容器终端，但不会导致容器的停止</p>\n<h2 id=\"Docker容器\"><a href=\"#Docker容器\" class=\"headerlink\" title=\"Docker容器\"></a>Docker容器</h2><ul>\n<li><p>退出容器</p>\n<p>Ctrl + P + Q # 不停止运行</p>\n<p>exit # 会停止运行</p>\n</li>\n<li><p>查看所有的容器</p>\n<p>docker ps -a</p>\n</li>\n<li><p>删除容器</p>\n<p>docker rm -f &lt;容器 ID&gt;</p>\n</li>\n<li><p>停止容器</p>\n<p>docker stop &lt;容器 ID&gt;</p>\n</li>\n<li><p>启动一个已停止的容器</p>\n<p>docker start &lt;容器 ID&gt;</p>\n</li>\n</ul>\n<h2 id=\"Docker网络\"><a href=\"#Docker网络\" class=\"headerlink\" title=\"Docker网络\"></a>Docker网络</h2><p>Docker的网络主要用于连接几个有关联的容器同时隔离不相关的。</p>\n<p>Docker的网络可以分为下面4种:</p>\n<p>  bridge 桥接（默认）<br>    通过 IP 或 用户自定义网络访问</p>\n<p>  host 容器与宿主机共享网络</p>\n<p>  none 禁用网络</p>\n<p>  用户自定义网络</p>\n<p>Docker 网络相关的命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker network ls </span><br><span class=\"line\">列出运行在本地Docker主机上的全部网络</span><br><span class=\"line\"></span><br><span class=\"line\">docker network create &lt;网络名&gt;</span><br><span class=\"line\">创建新的Docker自定义网络,可以使用-d 参数指定驱动（网络类型）</span><br><span class=\"line\"></span><br><span class=\"line\">创建了网络就可以在创建容器时使用：--network &lt;网络名&gt; 将容器添加到网络</span><br><span class=\"line\"></span><br><span class=\"line\">docker network create -d overlay overnet </span><br><span class=\"line\">创建一个新的名为overnet的覆盖网络，其采用的驱动为Docker Overlay </span><br><span class=\"line\"></span><br><span class=\"line\">docker network inspect &lt;网络名或id&gt;</span><br><span class=\"line\">提供Docker网络的详细配置信息</span><br><span class=\"line\"></span><br><span class=\"line\">docker network prune </span><br><span class=\"line\">删除Docker主机上全部未使用的网络</span><br><span class=\"line\"></span><br><span class=\"line\">docker network rm &lt;网络名或id&gt;</span><br><span class=\"line\">删除Docker主机上指定网络</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Docker卷\"><a href=\"#Docker卷\" class=\"headerlink\" title=\"Docker卷\"></a>Docker卷</h2><p>Docker数据主要分为两类，持久化的与非持久化的。</p>\n<p>持久化数据是需要保存到属主机磁盘上的数据。例如数据库数据。非持久化数据是不需要保存的那些数据。</p>\n<p>每个Docker容器都有自己的非持久化存储。非持久化存储自动创建，从属于容器，生命周期与容器相同。这意味着删除容器也会删除全部非持久化数据。</p>\n<p>如果希望自己的容器数据保留下来（持久化），则需要将数据存储在卷上。</p>\n<p>每个容器都被自动分配了本地存储：<br>在Linux系统中，该存储的目录在&#x2F;var&#x2F;lib&#x2F;docker&#x2F;<storage-driver>&#x2F; 之下，是容器的一部分。<br>在Windows系统中位于C\\ProgramData\\Docker\\windowsfilter\\ 目录之下。</p>\n<p>Docker 卷相关的命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume create &lt;卷名&gt;</span><br><span class=\"line\">命令用于创建新卷。默认情况下，新卷创建使用local 驱动，但是可以通过-d 参数来指定不同的驱动</span><br><span class=\"line\"></span><br><span class=\"line\">docker volume ls </span><br><span class=\"line\">会列出本地Docker主机上的全部卷</span><br><span class=\"line\"></span><br><span class=\"line\">docker volume inspect &lt;卷名或id&gt;</span><br><span class=\"line\">用于查看卷的详细信息</span><br><span class=\"line\"></span><br><span class=\"line\">docker volume prune </span><br><span class=\"line\">会删除未被容器或者服务副本使用的全部卷</span><br><span class=\"line\"></span><br><span class=\"line\">docker volume rm &lt;卷名或id&gt;</span><br><span class=\"line\">删除未被使用的指定卷</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"普通用户使用-Docker\"><a href=\"#普通用户使用-Docker\" class=\"headerlink\" title=\"普通用户使用 Docker\"></a>普通用户使用 Docker</h2><p>普通用户使用docker命令需要加上sudo,原因是：</p>\n<p>Docker的守护线程绑定的是unix socket，而不是TCP端口，这个套接字默认属于root，其他用户可以通过sudo去访问这个套接字文件。<br>所以docker服务进程都是以root账户运行。</p>\n<p>解决的方式是：</p>\n<p>创建docker用户组，把应用用户加入到docker用户组里面。只要docker组里的用户都可以直接执行docker命令。<br>可以先通过指令查看是否有用户组：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> /etc/group | grep docker</span><br></pre></td></tr></table></figure>\n\n<p>如果有就跳过第一步！</p>\n<p>第一步：创建docker用户组</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo groupadd docker </span><br></pre></td></tr></table></figure>\n\n<p>第二步：将用户加入到用户组</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo usermod -aG docker <span class=\"variable\">$USER</span></span><br></pre></td></tr></table></figure>\n\n<p>第三步：检查是否有效</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> /etc/group</span><br></pre></td></tr></table></figure>\n\n<p>第四步：重启docker-daemon</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n\n<p>第五步：给docker.sock添加权限</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">chmod</span> a+rw /var/run/docker.sock</span><br></pre></td></tr></table></figure>","site":{"data":{}},"cover":false,"excerpt":"<h1 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h1><h2 id=\"Docker镜像\"><a href=\"#Docker镜像\" class=\"headerlink\" title=\"Docker镜像\"></a>Docker镜像</h2>","more":"<ul>\n<li><p>搜索</p>\n<p>cocker search ubuntu</p>\n</li>\n<li><p>拉取</p>\n<p>docker pull ubuntu</p>\n</li>\n<li><p>运行</p>\n<p>docker run -it –name ubuntu-test ubuntu &#x2F;bin&#x2F;bash</p>\n</li>\n<li><p>后台运行</p>\n<p>docker run -itd  ubuntu &#x2F;bin&#x2F;bash</p>\n</li>\n</ul>\n<p>参数：</p>\n<p>  -i: 交互式操作。<br>  -t: 终端。<br>  -d: 参数默认不会进入容器，想要进入容器需要使用指令 docker exec<br>  ubuntu: ubuntu 镜像。<br>  &#x2F;bin&#x2F;bash：放在镜像名后的是命令，这里是交互式 Shell &#x2F;bin&#x2F;bash。</p>\n<p>在使用 -d 参数时，容器启动后会进入后台。此时想要进入容器，可以通过以下指令进入：</p>\n<p>  docker attach &lt;容器 ID&gt;</p>\n<p>or</p>\n<p>  docker exec -it &lt;容器 ID&gt; &#x2F;bin&#x2F;bash # 此命令会退出容器终端，但不会导致容器的停止</p>\n<h2 id=\"Docker容器\"><a href=\"#Docker容器\" class=\"headerlink\" title=\"Docker容器\"></a>Docker容器</h2><ul>\n<li><p>退出容器</p>\n<p>Ctrl + P + Q # 不停止运行</p>\n<p>exit # 会停止运行</p>\n</li>\n<li><p>查看所有的容器</p>\n<p>docker ps -a</p>\n</li>\n<li><p>删除容器</p>\n<p>docker rm -f &lt;容器 ID&gt;</p>\n</li>\n<li><p>停止容器</p>\n<p>docker stop &lt;容器 ID&gt;</p>\n</li>\n<li><p>启动一个已停止的容器</p>\n<p>docker start &lt;容器 ID&gt;</p>\n</li>\n</ul>\n<h2 id=\"Docker网络\"><a href=\"#Docker网络\" class=\"headerlink\" title=\"Docker网络\"></a>Docker网络</h2><p>Docker的网络主要用于连接几个有关联的容器同时隔离不相关的。</p>\n<p>Docker的网络可以分为下面4种:</p>\n<p>  bridge 桥接（默认）<br>    通过 IP 或 用户自定义网络访问</p>\n<p>  host 容器与宿主机共享网络</p>\n<p>  none 禁用网络</p>\n<p>  用户自定义网络</p>\n<p>Docker 网络相关的命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker network ls </span><br><span class=\"line\">列出运行在本地Docker主机上的全部网络</span><br><span class=\"line\"></span><br><span class=\"line\">docker network create &lt;网络名&gt;</span><br><span class=\"line\">创建新的Docker自定义网络,可以使用-d 参数指定驱动（网络类型）</span><br><span class=\"line\"></span><br><span class=\"line\">创建了网络就可以在创建容器时使用：--network &lt;网络名&gt; 将容器添加到网络</span><br><span class=\"line\"></span><br><span class=\"line\">docker network create -d overlay overnet </span><br><span class=\"line\">创建一个新的名为overnet的覆盖网络，其采用的驱动为Docker Overlay </span><br><span class=\"line\"></span><br><span class=\"line\">docker network inspect &lt;网络名或id&gt;</span><br><span class=\"line\">提供Docker网络的详细配置信息</span><br><span class=\"line\"></span><br><span class=\"line\">docker network prune </span><br><span class=\"line\">删除Docker主机上全部未使用的网络</span><br><span class=\"line\"></span><br><span class=\"line\">docker network rm &lt;网络名或id&gt;</span><br><span class=\"line\">删除Docker主机上指定网络</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Docker卷\"><a href=\"#Docker卷\" class=\"headerlink\" title=\"Docker卷\"></a>Docker卷</h2><p>Docker数据主要分为两类，持久化的与非持久化的。</p>\n<p>持久化数据是需要保存到属主机磁盘上的数据。例如数据库数据。非持久化数据是不需要保存的那些数据。</p>\n<p>每个Docker容器都有自己的非持久化存储。非持久化存储自动创建，从属于容器，生命周期与容器相同。这意味着删除容器也会删除全部非持久化数据。</p>\n<p>如果希望自己的容器数据保留下来（持久化），则需要将数据存储在卷上。</p>\n<p>每个容器都被自动分配了本地存储：<br>在Linux系统中，该存储的目录在&#x2F;var&#x2F;lib&#x2F;docker&#x2F;<storage-driver>&#x2F; 之下，是容器的一部分。<br>在Windows系统中位于C\\ProgramData\\Docker\\windowsfilter\\ 目录之下。</p>\n<p>Docker 卷相关的命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume create &lt;卷名&gt;</span><br><span class=\"line\">命令用于创建新卷。默认情况下，新卷创建使用local 驱动，但是可以通过-d 参数来指定不同的驱动</span><br><span class=\"line\"></span><br><span class=\"line\">docker volume ls </span><br><span class=\"line\">会列出本地Docker主机上的全部卷</span><br><span class=\"line\"></span><br><span class=\"line\">docker volume inspect &lt;卷名或id&gt;</span><br><span class=\"line\">用于查看卷的详细信息</span><br><span class=\"line\"></span><br><span class=\"line\">docker volume prune </span><br><span class=\"line\">会删除未被容器或者服务副本使用的全部卷</span><br><span class=\"line\"></span><br><span class=\"line\">docker volume rm &lt;卷名或id&gt;</span><br><span class=\"line\">删除未被使用的指定卷</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"普通用户使用-Docker\"><a href=\"#普通用户使用-Docker\" class=\"headerlink\" title=\"普通用户使用 Docker\"></a>普通用户使用 Docker</h2><p>普通用户使用docker命令需要加上sudo,原因是：</p>\n<p>Docker的守护线程绑定的是unix socket，而不是TCP端口，这个套接字默认属于root，其他用户可以通过sudo去访问这个套接字文件。<br>所以docker服务进程都是以root账户运行。</p>\n<p>解决的方式是：</p>\n<p>创建docker用户组，把应用用户加入到docker用户组里面。只要docker组里的用户都可以直接执行docker命令。<br>可以先通过指令查看是否有用户组：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> /etc/group | grep docker</span><br></pre></td></tr></table></figure>\n\n<p>如果有就跳过第一步！</p>\n<p>第一步：创建docker用户组</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo groupadd docker </span><br></pre></td></tr></table></figure>\n\n<p>第二步：将用户加入到用户组</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo usermod -aG docker <span class=\"variable\">$USER</span></span><br></pre></td></tr></table></figure>\n\n<p>第三步：检查是否有效</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> /etc/group</span><br></pre></td></tr></table></figure>\n\n<p>第四步：重启docker-daemon</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n\n<p>第五步：给docker.sock添加权限</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">chmod</span> a+rw /var/run/docker.sock</span><br></pre></td></tr></table></figure>"},{"title":"Fast API","date":"2023-12-26T02:07:14.000Z","cover":false,"_content":"\nFastAPI是一个现代、快速（高性能）的Web框架，用于构建APIs和基于Python 3.6及以上版本的异步服务器网关接口（ASGI）应用程序。\n它是由Python的异步框架`asyncio`和类型提示（Type Hint）设计的，旨在提供高性能的Web应用程序，\n并支持最新的安全性和OpenAPI / Swagger规范。\n\nFastAPI的主要特点包括：\n\n1. **性能**：FastAPI使用异步编程和事件循环，可以实现高并发处理，从而提高性能。\n2. **安全性**：FastAPI内置了许多安全功能，如OAuth2、JWT、API密钥、CORS、JSON Web Signatures (JWS) 等。\n3. **易用性**：FastAPI有一个简单的API，易于使用和扩展。它支持Python的类型提示，使得代码更加清晰和易于维护。\n4. **OpenAPI / Swagger**：FastAPI支持OpenAPI规范，可以自动生成Swagger UI，方便开发者测试和文档化API。\n5. **中间件支持**：FastAPI允许使用中间件来处理请求和响应，提供了很大的灵活性。\n6. **依赖注入**：FastAPI支持依赖注入，可以很容易地组织和管理应用程序中的依赖关系。\n7. **跨平台**：FastAPI可以运行在所有的主流WSGI服务器上，如Uvicorn、Django、Flask等。\n\n### 快速入门\n\n要开始使用FastAPI，可以遵循以下步骤：\n\n1. **安装**：首先，安装FastAPI和Uvicorn（一个支持ASGI的WSGI服务器）。\n   ```bash\n   pip install fastapi uvicorn\n   ```\n2. **创建项目**：创建一个新的Python项目，并初始化它。\n   ```bash\n   mkdir my_project\n   cd my_project\n   python -m venv venv\n   source venv/bin/activate  # 在Unix或MacOS上\n   venv\\Scripts\\activate  # 在Windows上\n   ```\n3. **编写代码**：在项目中创建一个`main.py`文件，并编写一个简单的FastAPI应用程序。\n   ```python\n   from fastapi import FastAPI\n   app = FastAPI()\n   @app.get(\"/items/{item_id}\")\n   async def read_item(item_id: int):\n       return {\"item_id\": item_id}\n   ```\n4. **运行服务器**：使用Uvicorn运行FastAPI应用程序。\n   ```bash\n   uvicorn main:app --reload\n   ```\n5. **访问API**：在浏览器中访问`http://127.0.0.1:8000`，查看自动生成的Swagger UI，并尝试调用API。\n\n### 示例\n\n以下是一个简单的FastAPI应用程序示例，它定义了一个路由来获取项目信息：\n```python\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"item_id\": 1}, {\"item_id\": 2}]\n    \n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int):\n    return {\"item_id\": item_id}\n```\n\n在这个示例中，我们定义了两个路由：`/items/`用于获取项目列表，`/items/{item_id}`用于获取特定项目的详细信息。`item_id`是一个路径参数，它将自动从URL中提取并作为参数传递给`read_item`函数。\n\nFastAPI的官方文档（https://fastapi.tiangolo.com/）","source":"_posts/Fast-API.md","raw":"---\ntitle: Fast API\ntags: \n- FastAPI\n- Python\ndate: 2023-12-26 10:07:14\ncover:\n---\n\nFastAPI是一个现代、快速（高性能）的Web框架，用于构建APIs和基于Python 3.6及以上版本的异步服务器网关接口（ASGI）应用程序。\n它是由Python的异步框架`asyncio`和类型提示（Type Hint）设计的，旨在提供高性能的Web应用程序，\n并支持最新的安全性和OpenAPI / Swagger规范。\n\nFastAPI的主要特点包括：\n\n1. **性能**：FastAPI使用异步编程和事件循环，可以实现高并发处理，从而提高性能。\n2. **安全性**：FastAPI内置了许多安全功能，如OAuth2、JWT、API密钥、CORS、JSON Web Signatures (JWS) 等。\n3. **易用性**：FastAPI有一个简单的API，易于使用和扩展。它支持Python的类型提示，使得代码更加清晰和易于维护。\n4. **OpenAPI / Swagger**：FastAPI支持OpenAPI规范，可以自动生成Swagger UI，方便开发者测试和文档化API。\n5. **中间件支持**：FastAPI允许使用中间件来处理请求和响应，提供了很大的灵活性。\n6. **依赖注入**：FastAPI支持依赖注入，可以很容易地组织和管理应用程序中的依赖关系。\n7. **跨平台**：FastAPI可以运行在所有的主流WSGI服务器上，如Uvicorn、Django、Flask等。\n\n### 快速入门\n\n要开始使用FastAPI，可以遵循以下步骤：\n\n1. **安装**：首先，安装FastAPI和Uvicorn（一个支持ASGI的WSGI服务器）。\n   ```bash\n   pip install fastapi uvicorn\n   ```\n2. **创建项目**：创建一个新的Python项目，并初始化它。\n   ```bash\n   mkdir my_project\n   cd my_project\n   python -m venv venv\n   source venv/bin/activate  # 在Unix或MacOS上\n   venv\\Scripts\\activate  # 在Windows上\n   ```\n3. **编写代码**：在项目中创建一个`main.py`文件，并编写一个简单的FastAPI应用程序。\n   ```python\n   from fastapi import FastAPI\n   app = FastAPI()\n   @app.get(\"/items/{item_id}\")\n   async def read_item(item_id: int):\n       return {\"item_id\": item_id}\n   ```\n4. **运行服务器**：使用Uvicorn运行FastAPI应用程序。\n   ```bash\n   uvicorn main:app --reload\n   ```\n5. **访问API**：在浏览器中访问`http://127.0.0.1:8000`，查看自动生成的Swagger UI，并尝试调用API。\n\n### 示例\n\n以下是一个简单的FastAPI应用程序示例，它定义了一个路由来获取项目信息：\n```python\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"item_id\": 1}, {\"item_id\": 2}]\n    \n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int):\n    return {\"item_id\": item_id}\n```\n\n在这个示例中，我们定义了两个路由：`/items/`用于获取项目列表，`/items/{item_id}`用于获取特定项目的详细信息。`item_id`是一个路径参数，它将自动从URL中提取并作为参数传递给`read_item`函数。\n\nFastAPI的官方文档（https://fastapi.tiangolo.com/）","slug":"Fast-API","published":1,"updated":"2023-12-28T13:47:59.440Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5ua000tlv9e8xdres99","content":"<p>FastAPI是一个现代、快速（高性能）的Web框架，用于构建APIs和基于Python 3.6及以上版本的异步服务器网关接口（ASGI）应用程序。<br>它是由Python的异步框架<code>asyncio</code>和类型提示（Type Hint）设计的，旨在提供高性能的Web应用程序，<br>并支持最新的安全性和OpenAPI &#x2F; Swagger规范。</p>\n<p>FastAPI的主要特点包括：</p>\n<ol>\n<li><strong>性能</strong>：FastAPI使用异步编程和事件循环，可以实现高并发处理，从而提高性能。</li>\n<li><strong>安全性</strong>：FastAPI内置了许多安全功能，如OAuth2、JWT、API密钥、CORS、JSON Web Signatures (JWS) 等。</li>\n<li><strong>易用性</strong>：FastAPI有一个简单的API，易于使用和扩展。它支持Python的类型提示，使得代码更加清晰和易于维护。</li>\n<li><strong>OpenAPI &#x2F; Swagger</strong>：FastAPI支持OpenAPI规范，可以自动生成Swagger UI，方便开发者测试和文档化API。</li>\n<li><strong>中间件支持</strong>：FastAPI允许使用中间件来处理请求和响应，提供了很大的灵活性。</li>\n<li><strong>依赖注入</strong>：FastAPI支持依赖注入，可以很容易地组织和管理应用程序中的依赖关系。</li>\n<li><strong>跨平台</strong>：FastAPI可以运行在所有的主流WSGI服务器上，如Uvicorn、Django、Flask等。</li>\n</ol>\n<h3 id=\"快速入门\"><a href=\"#快速入门\" class=\"headerlink\" title=\"快速入门\"></a>快速入门</h3><p>要开始使用FastAPI，可以遵循以下步骤：</p>\n<ol>\n<li><strong>安装</strong>：首先，安装FastAPI和Uvicorn（一个支持ASGI的WSGI服务器）。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install fastapi uvicorn</span><br></pre></td></tr></table></figure></li>\n<li><strong>创建项目</strong>：创建一个新的Python项目，并初始化它。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> my_project</span><br><span class=\"line\"><span class=\"built_in\">cd</span> my_project</span><br><span class=\"line\">python -m venv venv</span><br><span class=\"line\"><span class=\"built_in\">source</span> venv/bin/activate  <span class=\"comment\"># 在Unix或MacOS上</span></span><br><span class=\"line\">venv\\Scripts\\activate  <span class=\"comment\"># 在Windows上</span></span><br></pre></td></tr></table></figure></li>\n<li><strong>编写代码</strong>：在项目中创建一个<code>main.py</code>文件，并编写一个简单的FastAPI应用程序。<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> fastapi <span class=\"keyword\">import</span> FastAPI</span><br><span class=\"line\">app = FastAPI()</span><br><span class=\"line\"><span class=\"meta\">@app.get(<span class=\"params\"><span class=\"string\">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">read_item</span>(<span class=\"params\">item_id: <span class=\"built_in\">int</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"string\">&quot;item_id&quot;</span>: item_id&#125;</span><br></pre></td></tr></table></figure></li>\n<li><strong>运行服务器</strong>：使用Uvicorn运行FastAPI应用程序。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uvicorn main:app --reload</span><br></pre></td></tr></table></figure></li>\n<li><strong>访问API</strong>：在浏览器中访问<code>http://127.0.0.1:8000</code>，查看自动生成的Swagger UI，并尝试调用API。</li>\n</ol>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>以下是一个简单的FastAPI应用程序示例，它定义了一个路由来获取项目信息：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> fastapi <span class=\"keyword\">import</span> FastAPI</span><br><span class=\"line\"></span><br><span class=\"line\">app = FastAPI()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.get(<span class=\"params\"><span class=\"string\">&quot;/items/&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">read_items</span>():</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [&#123;<span class=\"string\">&quot;item_id&quot;</span>: <span class=\"number\">1</span>&#125;, &#123;<span class=\"string\">&quot;item_id&quot;</span>: <span class=\"number\">2</span>&#125;]</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">@app.get(<span class=\"params\"><span class=\"string\">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">read_item</span>(<span class=\"params\">item_id: <span class=\"built_in\">int</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"string\">&quot;item_id&quot;</span>: item_id&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个示例中，我们定义了两个路由：<code>/items/</code>用于获取项目列表，<code>/items/&#123;item_id&#125;</code>用于获取特定项目的详细信息。<code>item_id</code>是一个路径参数，它将自动从URL中提取并作为参数传递给<code>read_item</code>函数。</p>\n<p>FastAPI的官方文档（<a href=\"https://fastapi.tiangolo.com/%EF%BC%89\">https://fastapi.tiangolo.com/）</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>FastAPI是一个现代、快速（高性能）的Web框架，用于构建APIs和基于Python 3.6及以上版本的异步服务器网关接口（ASGI）应用程序。<br>它是由Python的异步框架<code>asyncio</code>和类型提示（Type Hint）设计的，旨在提供高性能的Web应用程序，<br>并支持最新的安全性和OpenAPI &#x2F; Swagger规范。</p>\n<p>FastAPI的主要特点包括：</p>\n<ol>\n<li><strong>性能</strong>：FastAPI使用异步编程和事件循环，可以实现高并发处理，从而提高性能。</li>\n<li><strong>安全性</strong>：FastAPI内置了许多安全功能，如OAuth2、JWT、API密钥、CORS、JSON Web Signatures (JWS) 等。</li>\n<li><strong>易用性</strong>：FastAPI有一个简单的API，易于使用和扩展。它支持Python的类型提示，使得代码更加清晰和易于维护。</li>\n<li><strong>OpenAPI &#x2F; Swagger</strong>：FastAPI支持OpenAPI规范，可以自动生成Swagger UI，方便开发者测试和文档化API。</li>\n<li><strong>中间件支持</strong>：FastAPI允许使用中间件来处理请求和响应，提供了很大的灵活性。</li>\n<li><strong>依赖注入</strong>：FastAPI支持依赖注入，可以很容易地组织和管理应用程序中的依赖关系。</li>\n<li><strong>跨平台</strong>：FastAPI可以运行在所有的主流WSGI服务器上，如Uvicorn、Django、Flask等。</li>\n</ol>\n<h3 id=\"快速入门\"><a href=\"#快速入门\" class=\"headerlink\" title=\"快速入门\"></a>快速入门</h3><p>要开始使用FastAPI，可以遵循以下步骤：</p>\n<ol>\n<li><strong>安装</strong>：首先，安装FastAPI和Uvicorn（一个支持ASGI的WSGI服务器）。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install fastapi uvicorn</span><br></pre></td></tr></table></figure></li>\n<li><strong>创建项目</strong>：创建一个新的Python项目，并初始化它。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> my_project</span><br><span class=\"line\"><span class=\"built_in\">cd</span> my_project</span><br><span class=\"line\">python -m venv venv</span><br><span class=\"line\"><span class=\"built_in\">source</span> venv/bin/activate  <span class=\"comment\"># 在Unix或MacOS上</span></span><br><span class=\"line\">venv\\Scripts\\activate  <span class=\"comment\"># 在Windows上</span></span><br></pre></td></tr></table></figure></li>\n<li><strong>编写代码</strong>：在项目中创建一个<code>main.py</code>文件，并编写一个简单的FastAPI应用程序。<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> fastapi <span class=\"keyword\">import</span> FastAPI</span><br><span class=\"line\">app = FastAPI()</span><br><span class=\"line\"><span class=\"meta\">@app.get(<span class=\"params\"><span class=\"string\">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">read_item</span>(<span class=\"params\">item_id: <span class=\"built_in\">int</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"string\">&quot;item_id&quot;</span>: item_id&#125;</span><br></pre></td></tr></table></figure></li>\n<li><strong>运行服务器</strong>：使用Uvicorn运行FastAPI应用程序。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uvicorn main:app --reload</span><br></pre></td></tr></table></figure></li>\n<li><strong>访问API</strong>：在浏览器中访问<code>http://127.0.0.1:8000</code>，查看自动生成的Swagger UI，并尝试调用API。</li>\n</ol>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>以下是一个简单的FastAPI应用程序示例，它定义了一个路由来获取项目信息：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> fastapi <span class=\"keyword\">import</span> FastAPI</span><br><span class=\"line\"></span><br><span class=\"line\">app = FastAPI()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.get(<span class=\"params\"><span class=\"string\">&quot;/items/&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">read_items</span>():</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [&#123;<span class=\"string\">&quot;item_id&quot;</span>: <span class=\"number\">1</span>&#125;, &#123;<span class=\"string\">&quot;item_id&quot;</span>: <span class=\"number\">2</span>&#125;]</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">@app.get(<span class=\"params\"><span class=\"string\">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">read_item</span>(<span class=\"params\">item_id: <span class=\"built_in\">int</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"string\">&quot;item_id&quot;</span>: item_id&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个示例中，我们定义了两个路由：<code>/items/</code>用于获取项目列表，<code>/items/&#123;item_id&#125;</code>用于获取特定项目的详细信息。<code>item_id</code>是一个路径参数，它将自动从URL中提取并作为参数传递给<code>read_item</code>函数。</p>\n<p>FastAPI的官方文档（<a href=\"https://fastapi.tiangolo.com/%EF%BC%89\">https://fastapi.tiangolo.com/）</a></p>\n"},{"title":"Git FQA","date":"2023-12-28T13:35:43.000Z","cover":false,"_content":"\n##  .gitignore不生效\n\n如果某些文件已经被纳入了版本管理中，就算是在.gitignore中已经声明了忽略路径也是不起作用的，\n这时候我们就应该先把本地缓存删除，然后再进行git的提交，这样就不会出现忽略的文件了\n\n\n解决方法: git清除本地缓存（改变成未track状态），然后再提交:\n\n```bash \ngit rm -r --cached .\ngit add .\ngit commit -m 'update .gitignore'\ngit push -u origin master\n```\n\n","source":"_posts/Git-FQA.md","raw":"---\ntitle: Git FQA\ntags: Git \ndate: 2023-12-28 21:35:43\ncover:\n---\n\n##  .gitignore不生效\n\n如果某些文件已经被纳入了版本管理中，就算是在.gitignore中已经声明了忽略路径也是不起作用的，\n这时候我们就应该先把本地缓存删除，然后再进行git的提交，这样就不会出现忽略的文件了\n\n\n解决方法: git清除本地缓存（改变成未track状态），然后再提交:\n\n```bash \ngit rm -r --cached .\ngit add .\ngit commit -m 'update .gitignore'\ngit push -u origin master\n```\n\n","slug":"Git-FQA","published":1,"updated":"2023-12-28T13:39:14.760Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5ub000wlv9e0eru5gyp","content":"<h2 id=\"gitignore不生效\"><a href=\"#gitignore不生效\" class=\"headerlink\" title=\".gitignore不生效\"></a>.gitignore不生效</h2><p>如果某些文件已经被纳入了版本管理中，就算是在.gitignore中已经声明了忽略路径也是不起作用的，<br>这时候我们就应该先把本地缓存删除，然后再进行git的提交，这样就不会出现忽略的文件了</p>\n<p>解决方法: git清除本地缓存（改变成未track状态），然后再提交:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">rm</span> -r --cached .</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">&#x27;update .gitignore&#x27;</span></span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"gitignore不生效\"><a href=\"#gitignore不生效\" class=\"headerlink\" title=\".gitignore不生效\"></a>.gitignore不生效</h2><p>如果某些文件已经被纳入了版本管理中，就算是在.gitignore中已经声明了忽略路径也是不起作用的，<br>这时候我们就应该先把本地缓存删除，然后再进行git的提交，这样就不会出现忽略的文件了</p>\n<p>解决方法: git清除本地缓存（改变成未track状态），然后再提交:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">rm</span> -r --cached .</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">&#x27;update .gitignore&#x27;</span></span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Git 自动部署网站","date":"2022-08-08T07:36:48.000Z","cover":false,"_content":"# Git 自动化部署网站\n\n## 安装配置Git服务端\n\n```\nsudo apt install git\ncd\nmkdir .ssh && chmod 700 .ssh\ntouch .ssh/authorized_keys && chmod 600 .ssh/authorized_keys\n```\n\n## 写入SSH公匙\n\n接着，我们需要为 authorized_keys 文件添加一些开发者 SSH 公钥。\n```bash\nvim .ssh/authorized_keys\n```\n写入SSH公匙\n\n\n## 创建仓库\n\n现在我们来为开发者新建一个空仓库。可以借助带 --bare 选项的 git init 命令来做到这一点，该命令在初始化仓库时不会创建工作目录：\n\n```bash\ncd /src/git\nmkdir project.git\ncd project.git\ngit init --bare\n```\n\n## 禁用git用户shell登录\n\n需要注意的是，目前所有（获得授权的）开发者用户都能以系统用户 git 的身份登录服务器从而获得一个普通 shell。 如果你想对此加以限制，则需要修改 /etc/passwd 文件中（git 用户所对应）的 shell 值。\n\n借助一个名为 git-shell 的受限 shell 工具，你可以方便地将用户 git 的活动限制在与 Git 相关的范围内。 该工具随 Git 软件包一同提供。如果将 git-shell 设置为用户 git 的登录 shell（login shell）， 那么该用户便不能获得此服务器的普通 shell 访问权限。 若要使用 git-shell，需要用它替换掉 bash 或 csh，使其成为该用户的登录 shell。 为进行上述操作，首先你必须确保 git-shell 的完整路径名已存在于 /etc/shells 文件中：\n\n```bash\ncat /etc/shells # see if git-shell is already in there. If not...\nwhich git-shell # make sure git-shell is installed on your system.\nsudo -e /etc/shells # and add the path to git-shell from last command\n```\n\n\n现在你可以使用 chsh <username> -s <shell> 命令修改任一系统用户的 shell：\n```bash\n\nsudo chsh git -s $(which git-shell)\n#如果提示没有chsh这个命令，可以去/etc/passwd将目标用户的bash shell更改为所需的内容，或者安装util-linux-user这个包\n```\n\n这样，用户 git 就只能利用 SSH 连接对 Git 仓库进行推送和拉取操作，而不能登录机器并取得普通 shell。 如果试图登录，你会发现尝试被拒绝，像这样：\n```bash\nssh git@gitserver\nfatal: Interactive git shell is not enabled.\nhint: ~/git-shell-commands should exist and have read and execute access.\nConnection to gitserver closed.\n```\n\n\n此时，用户仍可通过 SSH 端口转发来访问任何可达的 git 服务器。 如果你想要避免它，可编辑 authorized_keys 文件并在所有想要限制的公钥之前添加以下选项：\n\nno-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty\n\n其结果如下：\n\n```\ncat ~/.ssh/authorized_keys\nno-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty ssh-rsa\nAAAAB3NzaC1yc2EAAAADAQABAAABAQCB007n/ww+ouN4gSLKssMxXnBOvf9LGt4LojG6rs6h\nPB09j9R/T17/x4lhJA0F3FR1rP6kYBRsWj2aThGw6HXLm9/5zytK6Ztg3RPKK+4kYjh6541N\nYsnEAZuXz0jTTyAUfrtU3Z5E003C4oxOj6H0rfIF1kKI9MAQLMdpGW1GYEIgS9EzSdfd8AcC\n```\n\n现在，网络相关的 Git 命令依然能够正常工作，但是开发者用户已经无法得到一个普通 shell 了。 正如输出信息所提示的，你也可以在 git 用户的主目录下建立一个目录，来对 git-shell 命令进行一定程度的自定义。 比如，你可以限制掉某些本应被服务器接受的 Git 命令，或者对刚才的 SSH 拒绝登录信息进行自定义，这样，当有开发者用户以类似方式尝试登录时，便会看到你的信息。 要了解更多有关自定义 shell 的信息，请运行 git help shell。\n\n## 利用git push向服务器一键部署代码\n\n进入我们创建的项目仓库\n```Bash\ncd /src/git/project.git\ncd hooks\nvim post-receive\n```\n\n\n写入如下代码：\n```Bash\n#!/bin/sh\ngit --work-tree=/srv/web/xxx.com checkout -f master #这个目录是代码存放目录不是仓库目录\necho \"The project has been successfully deployed to this server!\"\n```\n```Bash\nchmod +x post-receive\n```\n\n\n这个挂钩本质是一个脚本，当这个文件在repo/hooks/文件夹内，名字为 post-receive 并且linux的x属性（可执行）为真的时候，git会在收到push后执行它\n\nOK！现在上传的代码会在 /src/web/xxx.com 这个目录里面看见，我们只需要把网站根目录设置在这里就可以了","source":"_posts/Git-自动部署网站.md","raw":"---\ntitle: Git 自动部署网站\ndate: 2022-08-08 15:36:48\ntags:\n- Git\ncover:\n---\n# Git 自动化部署网站\n\n## 安装配置Git服务端\n\n```\nsudo apt install git\ncd\nmkdir .ssh && chmod 700 .ssh\ntouch .ssh/authorized_keys && chmod 600 .ssh/authorized_keys\n```\n\n## 写入SSH公匙\n\n接着，我们需要为 authorized_keys 文件添加一些开发者 SSH 公钥。\n```bash\nvim .ssh/authorized_keys\n```\n写入SSH公匙\n\n\n## 创建仓库\n\n现在我们来为开发者新建一个空仓库。可以借助带 --bare 选项的 git init 命令来做到这一点，该命令在初始化仓库时不会创建工作目录：\n\n```bash\ncd /src/git\nmkdir project.git\ncd project.git\ngit init --bare\n```\n\n## 禁用git用户shell登录\n\n需要注意的是，目前所有（获得授权的）开发者用户都能以系统用户 git 的身份登录服务器从而获得一个普通 shell。 如果你想对此加以限制，则需要修改 /etc/passwd 文件中（git 用户所对应）的 shell 值。\n\n借助一个名为 git-shell 的受限 shell 工具，你可以方便地将用户 git 的活动限制在与 Git 相关的范围内。 该工具随 Git 软件包一同提供。如果将 git-shell 设置为用户 git 的登录 shell（login shell）， 那么该用户便不能获得此服务器的普通 shell 访问权限。 若要使用 git-shell，需要用它替换掉 bash 或 csh，使其成为该用户的登录 shell。 为进行上述操作，首先你必须确保 git-shell 的完整路径名已存在于 /etc/shells 文件中：\n\n```bash\ncat /etc/shells # see if git-shell is already in there. If not...\nwhich git-shell # make sure git-shell is installed on your system.\nsudo -e /etc/shells # and add the path to git-shell from last command\n```\n\n\n现在你可以使用 chsh <username> -s <shell> 命令修改任一系统用户的 shell：\n```bash\n\nsudo chsh git -s $(which git-shell)\n#如果提示没有chsh这个命令，可以去/etc/passwd将目标用户的bash shell更改为所需的内容，或者安装util-linux-user这个包\n```\n\n这样，用户 git 就只能利用 SSH 连接对 Git 仓库进行推送和拉取操作，而不能登录机器并取得普通 shell。 如果试图登录，你会发现尝试被拒绝，像这样：\n```bash\nssh git@gitserver\nfatal: Interactive git shell is not enabled.\nhint: ~/git-shell-commands should exist and have read and execute access.\nConnection to gitserver closed.\n```\n\n\n此时，用户仍可通过 SSH 端口转发来访问任何可达的 git 服务器。 如果你想要避免它，可编辑 authorized_keys 文件并在所有想要限制的公钥之前添加以下选项：\n\nno-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty\n\n其结果如下：\n\n```\ncat ~/.ssh/authorized_keys\nno-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty ssh-rsa\nAAAAB3NzaC1yc2EAAAADAQABAAABAQCB007n/ww+ouN4gSLKssMxXnBOvf9LGt4LojG6rs6h\nPB09j9R/T17/x4lhJA0F3FR1rP6kYBRsWj2aThGw6HXLm9/5zytK6Ztg3RPKK+4kYjh6541N\nYsnEAZuXz0jTTyAUfrtU3Z5E003C4oxOj6H0rfIF1kKI9MAQLMdpGW1GYEIgS9EzSdfd8AcC\n```\n\n现在，网络相关的 Git 命令依然能够正常工作，但是开发者用户已经无法得到一个普通 shell 了。 正如输出信息所提示的，你也可以在 git 用户的主目录下建立一个目录，来对 git-shell 命令进行一定程度的自定义。 比如，你可以限制掉某些本应被服务器接受的 Git 命令，或者对刚才的 SSH 拒绝登录信息进行自定义，这样，当有开发者用户以类似方式尝试登录时，便会看到你的信息。 要了解更多有关自定义 shell 的信息，请运行 git help shell。\n\n## 利用git push向服务器一键部署代码\n\n进入我们创建的项目仓库\n```Bash\ncd /src/git/project.git\ncd hooks\nvim post-receive\n```\n\n\n写入如下代码：\n```Bash\n#!/bin/sh\ngit --work-tree=/srv/web/xxx.com checkout -f master #这个目录是代码存放目录不是仓库目录\necho \"The project has been successfully deployed to this server!\"\n```\n```Bash\nchmod +x post-receive\n```\n\n\n这个挂钩本质是一个脚本，当这个文件在repo/hooks/文件夹内，名字为 post-receive 并且linux的x属性（可执行）为真的时候，git会在收到push后执行它\n\nOK！现在上传的代码会在 /src/web/xxx.com 这个目录里面看见，我们只需要把网站根目录设置在这里就可以了","slug":"Git-自动部署网站","published":1,"updated":"2023-06-23T01:00:31.086Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5uc000ylv9ee8zqg16q","content":"<h1 id=\"Git-自动化部署网站\"><a href=\"#Git-自动化部署网站\" class=\"headerlink\" title=\"Git 自动化部署网站\"></a>Git 自动化部署网站</h1><h2 id=\"安装配置Git服务端\"><a href=\"#安装配置Git服务端\" class=\"headerlink\" title=\"安装配置Git服务端\"></a>安装配置Git服务端</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install git</span><br><span class=\"line\">cd</span><br><span class=\"line\">mkdir .ssh &amp;&amp; chmod 700 .ssh</span><br><span class=\"line\">touch .ssh/authorized_keys &amp;&amp; chmod 600 .ssh/authorized_keys</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"写入SSH公匙\"><a href=\"#写入SSH公匙\" class=\"headerlink\" title=\"写入SSH公匙\"></a>写入SSH公匙</h2><p>接着，我们需要为 authorized_keys 文件添加一些开发者 SSH 公钥。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim .ssh/authorized_keys</span><br></pre></td></tr></table></figure>\n<p>写入SSH公匙</p>\n<h2 id=\"创建仓库\"><a href=\"#创建仓库\" class=\"headerlink\" title=\"创建仓库\"></a>创建仓库</h2><p>现在我们来为开发者新建一个空仓库。可以借助带 –bare 选项的 git init 命令来做到这一点，该命令在初始化仓库时不会创建工作目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /src/git</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> project.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> project.git</span><br><span class=\"line\">git init --bare</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"禁用git用户shell登录\"><a href=\"#禁用git用户shell登录\" class=\"headerlink\" title=\"禁用git用户shell登录\"></a>禁用git用户shell登录</h2><p>需要注意的是，目前所有（获得授权的）开发者用户都能以系统用户 git 的身份登录服务器从而获得一个普通 shell。 如果你想对此加以限制，则需要修改 &#x2F;etc&#x2F;passwd 文件中（git 用户所对应）的 shell 值。</p>\n<p>借助一个名为 git-shell 的受限 shell 工具，你可以方便地将用户 git 的活动限制在与 Git 相关的范围内。 该工具随 Git 软件包一同提供。如果将 git-shell 设置为用户 git 的登录 shell（login shell）， 那么该用户便不能获得此服务器的普通 shell 访问权限。 若要使用 git-shell，需要用它替换掉 bash 或 csh，使其成为该用户的登录 shell。 为进行上述操作，首先你必须确保 git-shell 的完整路径名已存在于 &#x2F;etc&#x2F;shells 文件中：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> /etc/shells <span class=\"comment\"># see if git-shell is already in there. If not...</span></span><br><span class=\"line\"><span class=\"built_in\">which</span> git-shell <span class=\"comment\"># make sure git-shell is installed on your system.</span></span><br><span class=\"line\">sudo -e /etc/shells <span class=\"comment\"># and add the path to git-shell from last command</span></span><br></pre></td></tr></table></figure>\n\n\n<p>现在你可以使用 chsh <username> -s <shell> 命令修改任一系统用户的 shell：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">sudo chsh git -s $(<span class=\"built_in\">which</span> git-shell)</span><br><span class=\"line\"><span class=\"comment\">#如果提示没有chsh这个命令，可以去/etc/passwd将目标用户的bash shell更改为所需的内容，或者安装util-linux-user这个包</span></span><br></pre></td></tr></table></figure>\n\n<p>这样，用户 git 就只能利用 SSH 连接对 Git 仓库进行推送和拉取操作，而不能登录机器并取得普通 shell。 如果试图登录，你会发现尝试被拒绝，像这样：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh git@gitserver</span><br><span class=\"line\">fatal: Interactive git shell is not enabled.</span><br><span class=\"line\">hint: ~/git-shell-commands should exist and have <span class=\"built_in\">read</span> and execute access.</span><br><span class=\"line\">Connection to gitserver closed.</span><br></pre></td></tr></table></figure>\n\n\n<p>此时，用户仍可通过 SSH 端口转发来访问任何可达的 git 服务器。 如果你想要避免它，可编辑 authorized_keys 文件并在所有想要限制的公钥之前添加以下选项：</p>\n<p>no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty</p>\n<p>其结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat ~/.ssh/authorized_keys</span><br><span class=\"line\">no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty ssh-rsa</span><br><span class=\"line\">AAAAB3NzaC1yc2EAAAADAQABAAABAQCB007n/ww+ouN4gSLKssMxXnBOvf9LGt4LojG6rs6h</span><br><span class=\"line\">PB09j9R/T17/x4lhJA0F3FR1rP6kYBRsWj2aThGw6HXLm9/5zytK6Ztg3RPKK+4kYjh6541N</span><br><span class=\"line\">YsnEAZuXz0jTTyAUfrtU3Z5E003C4oxOj6H0rfIF1kKI9MAQLMdpGW1GYEIgS9EzSdfd8AcC</span><br></pre></td></tr></table></figure>\n\n<p>现在，网络相关的 Git 命令依然能够正常工作，但是开发者用户已经无法得到一个普通 shell 了。 正如输出信息所提示的，你也可以在 git 用户的主目录下建立一个目录，来对 git-shell 命令进行一定程度的自定义。 比如，你可以限制掉某些本应被服务器接受的 Git 命令，或者对刚才的 SSH 拒绝登录信息进行自定义，这样，当有开发者用户以类似方式尝试登录时，便会看到你的信息。 要了解更多有关自定义 shell 的信息，请运行 git help shell。</p>\n<h2 id=\"利用git-push向服务器一键部署代码\"><a href=\"#利用git-push向服务器一键部署代码\" class=\"headerlink\" title=\"利用git push向服务器一键部署代码\"></a>利用git push向服务器一键部署代码</h2><p>进入我们创建的项目仓库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /src/git/project.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> hooks</span><br><span class=\"line\">vim post-receive</span><br></pre></td></tr></table></figure>\n\n\n<p>写入如下代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\">git --work-tree=/srv/web/xxx.com checkout -f master <span class=\"comment\">#这个目录是代码存放目录不是仓库目录</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;The project has been successfully deployed to this server!&quot;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> +x post-receive</span><br></pre></td></tr></table></figure>\n\n\n<p>这个挂钩本质是一个脚本，当这个文件在repo&#x2F;hooks&#x2F;文件夹内，名字为 post-receive 并且linux的x属性（可执行）为真的时候，git会在收到push后执行它</p>\n<p>OK！现在上传的代码会在 &#x2F;src&#x2F;web&#x2F;xxx.com 这个目录里面看见，我们只需要把网站根目录设置在这里就可以了</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Git-自动化部署网站\"><a href=\"#Git-自动化部署网站\" class=\"headerlink\" title=\"Git 自动化部署网站\"></a>Git 自动化部署网站</h1><h2 id=\"安装配置Git服务端\"><a href=\"#安装配置Git服务端\" class=\"headerlink\" title=\"安装配置Git服务端\"></a>安装配置Git服务端</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install git</span><br><span class=\"line\">cd</span><br><span class=\"line\">mkdir .ssh &amp;&amp; chmod 700 .ssh</span><br><span class=\"line\">touch .ssh/authorized_keys &amp;&amp; chmod 600 .ssh/authorized_keys</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"写入SSH公匙\"><a href=\"#写入SSH公匙\" class=\"headerlink\" title=\"写入SSH公匙\"></a>写入SSH公匙</h2><p>接着，我们需要为 authorized_keys 文件添加一些开发者 SSH 公钥。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim .ssh/authorized_keys</span><br></pre></td></tr></table></figure>\n<p>写入SSH公匙</p>\n<h2 id=\"创建仓库\"><a href=\"#创建仓库\" class=\"headerlink\" title=\"创建仓库\"></a>创建仓库</h2><p>现在我们来为开发者新建一个空仓库。可以借助带 –bare 选项的 git init 命令来做到这一点，该命令在初始化仓库时不会创建工作目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /src/git</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> project.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> project.git</span><br><span class=\"line\">git init --bare</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"禁用git用户shell登录\"><a href=\"#禁用git用户shell登录\" class=\"headerlink\" title=\"禁用git用户shell登录\"></a>禁用git用户shell登录</h2><p>需要注意的是，目前所有（获得授权的）开发者用户都能以系统用户 git 的身份登录服务器从而获得一个普通 shell。 如果你想对此加以限制，则需要修改 &#x2F;etc&#x2F;passwd 文件中（git 用户所对应）的 shell 值。</p>\n<p>借助一个名为 git-shell 的受限 shell 工具，你可以方便地将用户 git 的活动限制在与 Git 相关的范围内。 该工具随 Git 软件包一同提供。如果将 git-shell 设置为用户 git 的登录 shell（login shell）， 那么该用户便不能获得此服务器的普通 shell 访问权限。 若要使用 git-shell，需要用它替换掉 bash 或 csh，使其成为该用户的登录 shell。 为进行上述操作，首先你必须确保 git-shell 的完整路径名已存在于 &#x2F;etc&#x2F;shells 文件中：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> /etc/shells <span class=\"comment\"># see if git-shell is already in there. If not...</span></span><br><span class=\"line\"><span class=\"built_in\">which</span> git-shell <span class=\"comment\"># make sure git-shell is installed on your system.</span></span><br><span class=\"line\">sudo -e /etc/shells <span class=\"comment\"># and add the path to git-shell from last command</span></span><br></pre></td></tr></table></figure>\n\n\n<p>现在你可以使用 chsh <username> -s <shell> 命令修改任一系统用户的 shell：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">sudo chsh git -s $(<span class=\"built_in\">which</span> git-shell)</span><br><span class=\"line\"><span class=\"comment\">#如果提示没有chsh这个命令，可以去/etc/passwd将目标用户的bash shell更改为所需的内容，或者安装util-linux-user这个包</span></span><br></pre></td></tr></table></figure>\n\n<p>这样，用户 git 就只能利用 SSH 连接对 Git 仓库进行推送和拉取操作，而不能登录机器并取得普通 shell。 如果试图登录，你会发现尝试被拒绝，像这样：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh git@gitserver</span><br><span class=\"line\">fatal: Interactive git shell is not enabled.</span><br><span class=\"line\">hint: ~/git-shell-commands should exist and have <span class=\"built_in\">read</span> and execute access.</span><br><span class=\"line\">Connection to gitserver closed.</span><br></pre></td></tr></table></figure>\n\n\n<p>此时，用户仍可通过 SSH 端口转发来访问任何可达的 git 服务器。 如果你想要避免它，可编辑 authorized_keys 文件并在所有想要限制的公钥之前添加以下选项：</p>\n<p>no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty</p>\n<p>其结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat ~/.ssh/authorized_keys</span><br><span class=\"line\">no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty ssh-rsa</span><br><span class=\"line\">AAAAB3NzaC1yc2EAAAADAQABAAABAQCB007n/ww+ouN4gSLKssMxXnBOvf9LGt4LojG6rs6h</span><br><span class=\"line\">PB09j9R/T17/x4lhJA0F3FR1rP6kYBRsWj2aThGw6HXLm9/5zytK6Ztg3RPKK+4kYjh6541N</span><br><span class=\"line\">YsnEAZuXz0jTTyAUfrtU3Z5E003C4oxOj6H0rfIF1kKI9MAQLMdpGW1GYEIgS9EzSdfd8AcC</span><br></pre></td></tr></table></figure>\n\n<p>现在，网络相关的 Git 命令依然能够正常工作，但是开发者用户已经无法得到一个普通 shell 了。 正如输出信息所提示的，你也可以在 git 用户的主目录下建立一个目录，来对 git-shell 命令进行一定程度的自定义。 比如，你可以限制掉某些本应被服务器接受的 Git 命令，或者对刚才的 SSH 拒绝登录信息进行自定义，这样，当有开发者用户以类似方式尝试登录时，便会看到你的信息。 要了解更多有关自定义 shell 的信息，请运行 git help shell。</p>\n<h2 id=\"利用git-push向服务器一键部署代码\"><a href=\"#利用git-push向服务器一键部署代码\" class=\"headerlink\" title=\"利用git push向服务器一键部署代码\"></a>利用git push向服务器一键部署代码</h2><p>进入我们创建的项目仓库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /src/git/project.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> hooks</span><br><span class=\"line\">vim post-receive</span><br></pre></td></tr></table></figure>\n\n\n<p>写入如下代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\">git --work-tree=/srv/web/xxx.com checkout -f master <span class=\"comment\">#这个目录是代码存放目录不是仓库目录</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;The project has been successfully deployed to this server!&quot;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> +x post-receive</span><br></pre></td></tr></table></figure>\n\n\n<p>这个挂钩本质是一个脚本，当这个文件在repo&#x2F;hooks&#x2F;文件夹内，名字为 post-receive 并且linux的x属性（可执行）为真的时候，git会在收到push后执行它</p>\n<p>OK！现在上传的代码会在 &#x2F;src&#x2F;web&#x2F;xxx.com 这个目录里面看见，我们只需要把网站根目录设置在这里就可以了</p>\n"},{"title":"GraphQL Apollo","date":"2023-06-23T00:52:19.000Z","cover":"2023/06/23/GraphQL-Apollo/2023-06-23-09-26-28.png","_content":"\n## Step 1: 创建项目\n```bash\nmkdir graphql-example\ncd graphql-example\n\nnpm init --yes && npm pkg set type=\"module\"\n```\n\n## Step 2: 安装依赖\n```bash\nnpm install @apollo/index graphql\n\n```\n\n使用JS\n\n```bash\ntouch index.js\n```\n\n修改 package.json 添加启动\n\n```js\n{\n  // ...etc.\n  \"type\": \"module\",\n  \"scripts\": {\n    \"start\": \"node index.js\"\n  }\n  // other dependencies\n}\n```\n\n## Step 3: 定义 GraphQL schema\n\nindex.js\n\n```js\nimport { ApolloServer } from '@apollo/index';\nimport { startStandaloneServer } from '@apollo/index/standalone';\n\n// A schema is a collection of type definitions (hence \"typeDefs\")\n// that together define the \"shape\" of queries that are executed against\n// your data.\nconst typeDefs = `#graphql\n  # Comments in GraphQL strings (such as this one) start with the hash (#) symbol.\n\n  # This \"Book\" type defines the queryable fields for every book in our data source.\n  type Book {\n    title: String\n    author: String\n  }\n\n  # The \"Query\" type is special: it lists all of the available queries that\n  # clients can execute, along with the return type for each. In this\n  # case, the \"books\" query returns an array of zero or more Books (defined above).\n  type Query {\n    books: [Book]\n  }\n`;\n```\n\n## Step 4: 定义数据集\n\n```js\nconst books = [\n  {\n    title: 'The Awakening',\n    author: 'Kate Chopin',\n  },\n  {\n    title: 'City of Glass',\n    author: 'Paul Auster',\n  },\n];\n```\n\n\n## Step 5: 定义 resolver\n\n```js\n// Resolvers 定义如何从schema中获取数据\nconst resolvers = {\n  Query: {\n    books: () => books,\n  },\n};\n```\n\n## Step 6: 创建服务器实例\n\n### 单独使用\n\n```js\n// 用 schema 和 resolvers 创建 server\nconst index = new ApolloServer({\n  typeDefs,\n  resolvers,\n});\n\n//  启动单独的服务\nconst { url } = await startStandaloneServer(index, {\n  listen: { port: 4000 },\n});\n\nconsole.log(`🚀  Server ready at: ${url}`);\n```\n\n### 和Express一起使用\n\n```js\nconst index = new ApolloServer({typeDefs, resolvers});\n\nawait index.start();\n\nconst app = express();\n\nindex.applyMiddleware({app, path: '/api'})\n\nconst PORT = process.env.PORT || 4000;\nconst DB_HOST = process.env.DB_HOST || 'localhost';\n\ndb.connect(DB_HOST);\napp.listen({PORT}, () => {\n  console.log(`App at http://localhost:${PORT}`);\n  console.log(`GQL at http://localhost:${PORT}${index.graphqlPath}`);\n});\n```\n\n\n## Step 7: 运行\n\n```bash\nnpm start\n```\n\n```\n🚀  Server ready at: http://localhost:4000/\n```\n\n## Step 8: 打开网页查询\n![](2023-06-23-09-26-28.png)","source":"_posts/GraphQL-Apollo.md","raw":"---\ntitle: GraphQL Apollo\ndate: 2023-06-23 08:52:19\ntags:\n- GraphQL\n- JavaScript\ncover: 2023-06-23-09-26-28.png\n---\n\n## Step 1: 创建项目\n```bash\nmkdir graphql-example\ncd graphql-example\n\nnpm init --yes && npm pkg set type=\"module\"\n```\n\n## Step 2: 安装依赖\n```bash\nnpm install @apollo/index graphql\n\n```\n\n使用JS\n\n```bash\ntouch index.js\n```\n\n修改 package.json 添加启动\n\n```js\n{\n  // ...etc.\n  \"type\": \"module\",\n  \"scripts\": {\n    \"start\": \"node index.js\"\n  }\n  // other dependencies\n}\n```\n\n## Step 3: 定义 GraphQL schema\n\nindex.js\n\n```js\nimport { ApolloServer } from '@apollo/index';\nimport { startStandaloneServer } from '@apollo/index/standalone';\n\n// A schema is a collection of type definitions (hence \"typeDefs\")\n// that together define the \"shape\" of queries that are executed against\n// your data.\nconst typeDefs = `#graphql\n  # Comments in GraphQL strings (such as this one) start with the hash (#) symbol.\n\n  # This \"Book\" type defines the queryable fields for every book in our data source.\n  type Book {\n    title: String\n    author: String\n  }\n\n  # The \"Query\" type is special: it lists all of the available queries that\n  # clients can execute, along with the return type for each. In this\n  # case, the \"books\" query returns an array of zero or more Books (defined above).\n  type Query {\n    books: [Book]\n  }\n`;\n```\n\n## Step 4: 定义数据集\n\n```js\nconst books = [\n  {\n    title: 'The Awakening',\n    author: 'Kate Chopin',\n  },\n  {\n    title: 'City of Glass',\n    author: 'Paul Auster',\n  },\n];\n```\n\n\n## Step 5: 定义 resolver\n\n```js\n// Resolvers 定义如何从schema中获取数据\nconst resolvers = {\n  Query: {\n    books: () => books,\n  },\n};\n```\n\n## Step 6: 创建服务器实例\n\n### 单独使用\n\n```js\n// 用 schema 和 resolvers 创建 server\nconst index = new ApolloServer({\n  typeDefs,\n  resolvers,\n});\n\n//  启动单独的服务\nconst { url } = await startStandaloneServer(index, {\n  listen: { port: 4000 },\n});\n\nconsole.log(`🚀  Server ready at: ${url}`);\n```\n\n### 和Express一起使用\n\n```js\nconst index = new ApolloServer({typeDefs, resolvers});\n\nawait index.start();\n\nconst app = express();\n\nindex.applyMiddleware({app, path: '/api'})\n\nconst PORT = process.env.PORT || 4000;\nconst DB_HOST = process.env.DB_HOST || 'localhost';\n\ndb.connect(DB_HOST);\napp.listen({PORT}, () => {\n  console.log(`App at http://localhost:${PORT}`);\n  console.log(`GQL at http://localhost:${PORT}${index.graphqlPath}`);\n});\n```\n\n\n## Step 7: 运行\n\n```bash\nnpm start\n```\n\n```\n🚀  Server ready at: http://localhost:4000/\n```\n\n## Step 8: 打开网页查询\n![](2023-06-23-09-26-28.png)","slug":"GraphQL-Apollo","published":1,"updated":"2023-06-23T01:28:07.177Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5uc0010lv9efwhfe73e","content":"<h2 id=\"Step-1-创建项目\"><a href=\"#Step-1-创建项目\" class=\"headerlink\" title=\"Step 1: 创建项目\"></a>Step 1: 创建项目</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> graphql-example</span><br><span class=\"line\"><span class=\"built_in\">cd</span> graphql-example</span><br><span class=\"line\"></span><br><span class=\"line\">npm init --<span class=\"built_in\">yes</span> &amp;&amp; npm pkg <span class=\"built_in\">set</span> <span class=\"built_in\">type</span>=<span class=\"string\">&quot;module&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Step-2-安装依赖\"><a href=\"#Step-2-安装依赖\" class=\"headerlink\" title=\"Step 2: 安装依赖\"></a>Step 2: 安装依赖</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install @apollo/index graphql</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>使用JS</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">touch</span> index.js</span><br></pre></td></tr></table></figure>\n\n<p>修改 package.json 添加启动</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...etc.</span></span><br><span class=\"line\">  <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;module&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;start&quot;</span>: <span class=\"string\">&quot;node index.js&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// other dependencies</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Step-3-定义-GraphQL-schema\"><a href=\"#Step-3-定义-GraphQL-schema\" class=\"headerlink\" title=\"Step 3: 定义 GraphQL schema\"></a>Step 3: 定义 GraphQL schema</h2><p>index.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ApolloServer</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@apollo/index&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; startStandaloneServer &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@apollo/index/standalone&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// A schema is a collection of type definitions (hence &quot;typeDefs&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">// that together define the &quot;shape&quot; of queries that are executed against</span></span><br><span class=\"line\"><span class=\"comment\">// your data.</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> typeDefs = <span class=\"string\">`#graphql</span></span><br><span class=\"line\"><span class=\"string\">  # Comments in GraphQL strings (such as this one) start with the hash (#) symbol.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  # This &quot;Book&quot; type defines the queryable fields for every book in our data source.</span></span><br><span class=\"line\"><span class=\"string\">  type Book &#123;</span></span><br><span class=\"line\"><span class=\"string\">    title: String</span></span><br><span class=\"line\"><span class=\"string\">    author: String</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  # The &quot;Query&quot; type is special: it lists all of the available queries that</span></span><br><span class=\"line\"><span class=\"string\">  # clients can execute, along with the return type for each. In this</span></span><br><span class=\"line\"><span class=\"string\">  # case, the &quot;books&quot; query returns an array of zero or more Books (defined above).</span></span><br><span class=\"line\"><span class=\"string\">  type Query &#123;</span></span><br><span class=\"line\"><span class=\"string\">    books: [Book]</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Step-4-定义数据集\"><a href=\"#Step-4-定义数据集\" class=\"headerlink\" title=\"Step 4: 定义数据集\"></a>Step 4: 定义数据集</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> books = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">title</span>: <span class=\"string\">&#x27;The Awakening&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">author</span>: <span class=\"string\">&#x27;Kate Chopin&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">title</span>: <span class=\"string\">&#x27;City of Glass&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">author</span>: <span class=\"string\">&#x27;Paul Auster&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"Step-5-定义-resolver\"><a href=\"#Step-5-定义-resolver\" class=\"headerlink\" title=\"Step 5: 定义 resolver\"></a>Step 5: 定义 resolver</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Resolvers 定义如何从schema中获取数据</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> resolvers = &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Query</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">books</span>: <span class=\"function\">() =&gt;</span> books,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Step-6-创建服务器实例\"><a href=\"#Step-6-创建服务器实例\" class=\"headerlink\" title=\"Step 6: 创建服务器实例\"></a>Step 6: 创建服务器实例</h2><h3 id=\"单独使用\"><a href=\"#单独使用\" class=\"headerlink\" title=\"单独使用\"></a>单独使用</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 用 schema 和 resolvers 创建 server</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> index = <span class=\"keyword\">new</span> <span class=\"title class_\">ApolloServer</span>(&#123;</span><br><span class=\"line\">  typeDefs,</span><br><span class=\"line\">  resolvers,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  启动单独的服务</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; url &#125; = <span class=\"keyword\">await</span> <span class=\"title function_\">startStandaloneServer</span>(index, &#123;</span><br><span class=\"line\">  <span class=\"attr\">listen</span>: &#123; <span class=\"attr\">port</span>: <span class=\"number\">4000</span> &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`🚀  Server ready at: <span class=\"subst\">$&#123;url&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"和Express一起使用\"><a href=\"#和Express一起使用\" class=\"headerlink\" title=\"和Express一起使用\"></a>和Express一起使用</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> index = <span class=\"keyword\">new</span> <span class=\"title class_\">ApolloServer</span>(&#123;typeDefs, resolvers&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">await</span> index.<span class=\"title function_\">start</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">express</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">index.<span class=\"title function_\">applyMiddleware</span>(&#123;app, <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/api&#x27;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PORT</span> = process.<span class=\"property\">env</span>.<span class=\"property\">PORT</span> || <span class=\"number\">4000</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">DB_HOST</span> = process.<span class=\"property\">env</span>.<span class=\"property\">DB_HOST</span> || <span class=\"string\">&#x27;localhost&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">db.<span class=\"title function_\">connect</span>(<span class=\"variable constant_\">DB_HOST</span>);</span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(&#123;<span class=\"variable constant_\">PORT</span>&#125;, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`App at http://localhost:<span class=\"subst\">$&#123;PORT&#125;</span>`</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`GQL at http://localhost:<span class=\"subst\">$&#123;PORT&#125;</span><span class=\"subst\">$&#123;index.graphqlPath&#125;</span>`</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"Step-7-运行\"><a href=\"#Step-7-运行\" class=\"headerlink\" title=\"Step 7: 运行\"></a>Step 7: 运行</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm start</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">🚀  Server ready at: http://localhost:4000/</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Step-8-打开网页查询\"><a href=\"#Step-8-打开网页查询\" class=\"headerlink\" title=\"Step 8: 打开网页查询\"></a>Step 8: 打开网页查询</h2><p><img src=\"/2023/06/23/GraphQL-Apollo/2023-06-23-09-26-28.png\"></p>\n","site":{"data":{}},"cover_type":"img","excerpt":"","more":"<h2 id=\"Step-1-创建项目\"><a href=\"#Step-1-创建项目\" class=\"headerlink\" title=\"Step 1: 创建项目\"></a>Step 1: 创建项目</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> graphql-example</span><br><span class=\"line\"><span class=\"built_in\">cd</span> graphql-example</span><br><span class=\"line\"></span><br><span class=\"line\">npm init --<span class=\"built_in\">yes</span> &amp;&amp; npm pkg <span class=\"built_in\">set</span> <span class=\"built_in\">type</span>=<span class=\"string\">&quot;module&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Step-2-安装依赖\"><a href=\"#Step-2-安装依赖\" class=\"headerlink\" title=\"Step 2: 安装依赖\"></a>Step 2: 安装依赖</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install @apollo/index graphql</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>使用JS</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">touch</span> index.js</span><br></pre></td></tr></table></figure>\n\n<p>修改 package.json 添加启动</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...etc.</span></span><br><span class=\"line\">  <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;module&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;start&quot;</span>: <span class=\"string\">&quot;node index.js&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// other dependencies</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Step-3-定义-GraphQL-schema\"><a href=\"#Step-3-定义-GraphQL-schema\" class=\"headerlink\" title=\"Step 3: 定义 GraphQL schema\"></a>Step 3: 定义 GraphQL schema</h2><p>index.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ApolloServer</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@apollo/index&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; startStandaloneServer &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@apollo/index/standalone&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// A schema is a collection of type definitions (hence &quot;typeDefs&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">// that together define the &quot;shape&quot; of queries that are executed against</span></span><br><span class=\"line\"><span class=\"comment\">// your data.</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> typeDefs = <span class=\"string\">`#graphql</span></span><br><span class=\"line\"><span class=\"string\">  # Comments in GraphQL strings (such as this one) start with the hash (#) symbol.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  # This &quot;Book&quot; type defines the queryable fields for every book in our data source.</span></span><br><span class=\"line\"><span class=\"string\">  type Book &#123;</span></span><br><span class=\"line\"><span class=\"string\">    title: String</span></span><br><span class=\"line\"><span class=\"string\">    author: String</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  # The &quot;Query&quot; type is special: it lists all of the available queries that</span></span><br><span class=\"line\"><span class=\"string\">  # clients can execute, along with the return type for each. In this</span></span><br><span class=\"line\"><span class=\"string\">  # case, the &quot;books&quot; query returns an array of zero or more Books (defined above).</span></span><br><span class=\"line\"><span class=\"string\">  type Query &#123;</span></span><br><span class=\"line\"><span class=\"string\">    books: [Book]</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Step-4-定义数据集\"><a href=\"#Step-4-定义数据集\" class=\"headerlink\" title=\"Step 4: 定义数据集\"></a>Step 4: 定义数据集</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> books = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">title</span>: <span class=\"string\">&#x27;The Awakening&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">author</span>: <span class=\"string\">&#x27;Kate Chopin&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">title</span>: <span class=\"string\">&#x27;City of Glass&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">author</span>: <span class=\"string\">&#x27;Paul Auster&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"Step-5-定义-resolver\"><a href=\"#Step-5-定义-resolver\" class=\"headerlink\" title=\"Step 5: 定义 resolver\"></a>Step 5: 定义 resolver</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Resolvers 定义如何从schema中获取数据</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> resolvers = &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Query</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">books</span>: <span class=\"function\">() =&gt;</span> books,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Step-6-创建服务器实例\"><a href=\"#Step-6-创建服务器实例\" class=\"headerlink\" title=\"Step 6: 创建服务器实例\"></a>Step 6: 创建服务器实例</h2><h3 id=\"单独使用\"><a href=\"#单独使用\" class=\"headerlink\" title=\"单独使用\"></a>单独使用</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 用 schema 和 resolvers 创建 server</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> index = <span class=\"keyword\">new</span> <span class=\"title class_\">ApolloServer</span>(&#123;</span><br><span class=\"line\">  typeDefs,</span><br><span class=\"line\">  resolvers,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  启动单独的服务</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; url &#125; = <span class=\"keyword\">await</span> <span class=\"title function_\">startStandaloneServer</span>(index, &#123;</span><br><span class=\"line\">  <span class=\"attr\">listen</span>: &#123; <span class=\"attr\">port</span>: <span class=\"number\">4000</span> &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`🚀  Server ready at: <span class=\"subst\">$&#123;url&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"和Express一起使用\"><a href=\"#和Express一起使用\" class=\"headerlink\" title=\"和Express一起使用\"></a>和Express一起使用</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> index = <span class=\"keyword\">new</span> <span class=\"title class_\">ApolloServer</span>(&#123;typeDefs, resolvers&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">await</span> index.<span class=\"title function_\">start</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">express</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">index.<span class=\"title function_\">applyMiddleware</span>(&#123;app, <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/api&#x27;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PORT</span> = process.<span class=\"property\">env</span>.<span class=\"property\">PORT</span> || <span class=\"number\">4000</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">DB_HOST</span> = process.<span class=\"property\">env</span>.<span class=\"property\">DB_HOST</span> || <span class=\"string\">&#x27;localhost&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">db.<span class=\"title function_\">connect</span>(<span class=\"variable constant_\">DB_HOST</span>);</span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(&#123;<span class=\"variable constant_\">PORT</span>&#125;, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`App at http://localhost:<span class=\"subst\">$&#123;PORT&#125;</span>`</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`GQL at http://localhost:<span class=\"subst\">$&#123;PORT&#125;</span><span class=\"subst\">$&#123;index.graphqlPath&#125;</span>`</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"Step-7-运行\"><a href=\"#Step-7-运行\" class=\"headerlink\" title=\"Step 7: 运行\"></a>Step 7: 运行</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm start</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">🚀  Server ready at: http://localhost:4000/</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Step-8-打开网页查询\"><a href=\"#Step-8-打开网页查询\" class=\"headerlink\" title=\"Step 8: 打开网页查询\"></a>Step 8: 打开网页查询</h2><p><img src=\"/2023/06/23/GraphQL-Apollo/2023-06-23-09-26-28.png\"></p>\n"},{"title":"GraphQL","date":"2023-06-21T12:13:22.000Z","cover":"2023/06/21/GraphQL/2023-06-21-20-17-07.png","_content":"\n# GraphQL\n\n## 一种用于 API 的查询语言\n\nGraphQL 既是一种用于 API 的查询语言也是一个满足你数据查询的运行时。 GraphQL 对你的 API 中的数据提供了一套易于理解的完整描述，使得客户端能够准确地获得它需要的数据，而且没有任何冗余，也让 API 更容易地随着时间推移而演进，还能用于构建强大的开发者工具。\n\n描述你的数据\n\n```\ntype Project {\n  name: String\n  tagline: String\n  contributors: [User] \n}\n```\n\n请求你所要的数据\n\n```\n{\n  project(name: \"GraphQL\") {\n    tagline\n  }\n}\n```\n\n得到可预测的结果\n\n```\n{\n  \"project\": {\n    \"tagline\": \"A query language for APIs\"\n  }\n}\n```\n\n## 特点\n\n请求你所要的数据不多不少\n\n    向你的 API 发出一个 GraphQL 请求就能准确获得你想要的数据，不多不少。 GraphQL 查询总是返回可预测的结果。使用 GraphQL 的应用可以工作得又快又稳，因为控制数据的是应用，而不是服务器。\n\n获取多个资源只用一个请求\n\n    GraphQL 查询不仅能够获得资源的属性，还能沿着资源间引用进一步查询。典型的 REST API 请求多个资源时得载入多个 URL，而 GraphQL 可以通过一次请求就获取你应用所需的所有数据。这样一来，即使是比较慢的移动网络连接下，使用 GraphQL 的应用也能表现得足够迅速。\n\n描述所有的可能类型系统\n\n    GraphQL API 基于类型和字段的方式进行组织，而非入口端点。你可以通过一个单一入口端点得到你所有的数据能力。GraphQL 使用类型来保证应用只请求可能的数据，还提供了清晰的辅助性错误信息。应用可以使用类型，而避免编写手动解析代码。\n\n强大的开发者工具\n\n    不用离开编辑器就能准确知道你可以从 API 中请求的数据，发送查询之前就能高亮潜在问题，高级代码智能提示。利用 API 的类型系统，GraphQL 让你可以更简单地构建如同GraphiQL的强大工具。\n\nAPI 演进无需划分版本\n\n    给你的 GraphQL API 添加字段和类型而无需影响现有查询。老旧的字段可以废弃，从工具中隐藏。通过使用单一演进版本，GraphQL API 使得应用始终能够使用新的特性，并鼓励使用更加简洁、更好维护的服务端代码。\n\n使用你现有的数据和代码\n\n    GraphQL 让你的整个应用共享一套 API，而不用被限制于特定存储引擎。GraphQL 引擎已经有多种语言实现，通过 GraphQL API 能够更好利用你的现有数据和代码。你只需要为类型系统的字段编写函数，GraphQL 就能通过优化并发的方式来调用它们。\\\n\n## 参考\n\n[https://graphql.cn](https://graphql.cn)\n\n[https://www.apollographql.com/docs/apollo-server/getting-started/](https://www.apollographql.com/docs/apollo-server/getting-started/)\n\n[https://www.apollographql.com](https://www.apollographql.com)","source":"_posts/GraphQL.md","raw":"---\ntitle: GraphQL\ndate: 2023-06-21 20:13:22\ntags: \n- JavaScript\n- GraphQL\ncover: 2023-06-21-20-17-07.png\n---\n\n# GraphQL\n\n## 一种用于 API 的查询语言\n\nGraphQL 既是一种用于 API 的查询语言也是一个满足你数据查询的运行时。 GraphQL 对你的 API 中的数据提供了一套易于理解的完整描述，使得客户端能够准确地获得它需要的数据，而且没有任何冗余，也让 API 更容易地随着时间推移而演进，还能用于构建强大的开发者工具。\n\n描述你的数据\n\n```\ntype Project {\n  name: String\n  tagline: String\n  contributors: [User] \n}\n```\n\n请求你所要的数据\n\n```\n{\n  project(name: \"GraphQL\") {\n    tagline\n  }\n}\n```\n\n得到可预测的结果\n\n```\n{\n  \"project\": {\n    \"tagline\": \"A query language for APIs\"\n  }\n}\n```\n\n## 特点\n\n请求你所要的数据不多不少\n\n    向你的 API 发出一个 GraphQL 请求就能准确获得你想要的数据，不多不少。 GraphQL 查询总是返回可预测的结果。使用 GraphQL 的应用可以工作得又快又稳，因为控制数据的是应用，而不是服务器。\n\n获取多个资源只用一个请求\n\n    GraphQL 查询不仅能够获得资源的属性，还能沿着资源间引用进一步查询。典型的 REST API 请求多个资源时得载入多个 URL，而 GraphQL 可以通过一次请求就获取你应用所需的所有数据。这样一来，即使是比较慢的移动网络连接下，使用 GraphQL 的应用也能表现得足够迅速。\n\n描述所有的可能类型系统\n\n    GraphQL API 基于类型和字段的方式进行组织，而非入口端点。你可以通过一个单一入口端点得到你所有的数据能力。GraphQL 使用类型来保证应用只请求可能的数据，还提供了清晰的辅助性错误信息。应用可以使用类型，而避免编写手动解析代码。\n\n强大的开发者工具\n\n    不用离开编辑器就能准确知道你可以从 API 中请求的数据，发送查询之前就能高亮潜在问题，高级代码智能提示。利用 API 的类型系统，GraphQL 让你可以更简单地构建如同GraphiQL的强大工具。\n\nAPI 演进无需划分版本\n\n    给你的 GraphQL API 添加字段和类型而无需影响现有查询。老旧的字段可以废弃，从工具中隐藏。通过使用单一演进版本，GraphQL API 使得应用始终能够使用新的特性，并鼓励使用更加简洁、更好维护的服务端代码。\n\n使用你现有的数据和代码\n\n    GraphQL 让你的整个应用共享一套 API，而不用被限制于特定存储引擎。GraphQL 引擎已经有多种语言实现，通过 GraphQL API 能够更好利用你的现有数据和代码。你只需要为类型系统的字段编写函数，GraphQL 就能通过优化并发的方式来调用它们。\\\n\n## 参考\n\n[https://graphql.cn](https://graphql.cn)\n\n[https://www.apollographql.com/docs/apollo-server/getting-started/](https://www.apollographql.com/docs/apollo-server/getting-started/)\n\n[https://www.apollographql.com](https://www.apollographql.com)","slug":"GraphQL","published":1,"updated":"2023-06-23T01:02:05.688Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5ud0013lv9e2i5s9y5q","content":"<h1 id=\"GraphQL\"><a href=\"#GraphQL\" class=\"headerlink\" title=\"GraphQL\"></a>GraphQL</h1><h2 id=\"一种用于-API-的查询语言\"><a href=\"#一种用于-API-的查询语言\" class=\"headerlink\" title=\"一种用于 API 的查询语言\"></a>一种用于 API 的查询语言</h2><p>GraphQL 既是一种用于 API 的查询语言也是一个满足你数据查询的运行时。 GraphQL 对你的 API 中的数据提供了一套易于理解的完整描述，使得客户端能够准确地获得它需要的数据，而且没有任何冗余，也让 API 更容易地随着时间推移而演进，还能用于构建强大的开发者工具。</p>\n<p>描述你的数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type Project &#123;</span><br><span class=\"line\">  name: String</span><br><span class=\"line\">  tagline: String</span><br><span class=\"line\">  contributors: [User] </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>请求你所要的数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  project(name: &quot;GraphQL&quot;) &#123;</span><br><span class=\"line\">    tagline</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>得到可预测的结果</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;project&quot;: &#123;</span><br><span class=\"line\">    &quot;tagline&quot;: &quot;A query language for APIs&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h2><p>请求你所要的数据不多不少</p>\n<pre><code>向你的 API 发出一个 GraphQL 请求就能准确获得你想要的数据，不多不少。 GraphQL 查询总是返回可预测的结果。使用 GraphQL 的应用可以工作得又快又稳，因为控制数据的是应用，而不是服务器。\n</code></pre>\n<p>获取多个资源只用一个请求</p>\n<pre><code>GraphQL 查询不仅能够获得资源的属性，还能沿着资源间引用进一步查询。典型的 REST API 请求多个资源时得载入多个 URL，而 GraphQL 可以通过一次请求就获取你应用所需的所有数据。这样一来，即使是比较慢的移动网络连接下，使用 GraphQL 的应用也能表现得足够迅速。\n</code></pre>\n<p>描述所有的可能类型系统</p>\n<pre><code>GraphQL API 基于类型和字段的方式进行组织，而非入口端点。你可以通过一个单一入口端点得到你所有的数据能力。GraphQL 使用类型来保证应用只请求可能的数据，还提供了清晰的辅助性错误信息。应用可以使用类型，而避免编写手动解析代码。\n</code></pre>\n<p>强大的开发者工具</p>\n<pre><code>不用离开编辑器就能准确知道你可以从 API 中请求的数据，发送查询之前就能高亮潜在问题，高级代码智能提示。利用 API 的类型系统，GraphQL 让你可以更简单地构建如同GraphiQL的强大工具。\n</code></pre>\n<p>API 演进无需划分版本</p>\n<pre><code>给你的 GraphQL API 添加字段和类型而无需影响现有查询。老旧的字段可以废弃，从工具中隐藏。通过使用单一演进版本，GraphQL API 使得应用始终能够使用新的特性，并鼓励使用更加简洁、更好维护的服务端代码。\n</code></pre>\n<p>使用你现有的数据和代码</p>\n<pre><code>GraphQL 让你的整个应用共享一套 API，而不用被限制于特定存储引擎。GraphQL 引擎已经有多种语言实现，通过 GraphQL API 能够更好利用你的现有数据和代码。你只需要为类型系统的字段编写函数，GraphQL 就能通过优化并发的方式来调用它们。\\\n</code></pre>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://graphql.cn/\">https://graphql.cn</a></p>\n<p><a href=\"https://www.apollographql.com/docs/apollo-server/getting-started/\">https://www.apollographql.com/docs/apollo-server/getting-started/</a></p>\n<p><a href=\"https://www.apollographql.com/\">https://www.apollographql.com</a></p>\n","site":{"data":{}},"cover_type":"img","excerpt":"","more":"<h1 id=\"GraphQL\"><a href=\"#GraphQL\" class=\"headerlink\" title=\"GraphQL\"></a>GraphQL</h1><h2 id=\"一种用于-API-的查询语言\"><a href=\"#一种用于-API-的查询语言\" class=\"headerlink\" title=\"一种用于 API 的查询语言\"></a>一种用于 API 的查询语言</h2><p>GraphQL 既是一种用于 API 的查询语言也是一个满足你数据查询的运行时。 GraphQL 对你的 API 中的数据提供了一套易于理解的完整描述，使得客户端能够准确地获得它需要的数据，而且没有任何冗余，也让 API 更容易地随着时间推移而演进，还能用于构建强大的开发者工具。</p>\n<p>描述你的数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type Project &#123;</span><br><span class=\"line\">  name: String</span><br><span class=\"line\">  tagline: String</span><br><span class=\"line\">  contributors: [User] </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>请求你所要的数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  project(name: &quot;GraphQL&quot;) &#123;</span><br><span class=\"line\">    tagline</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>得到可预测的结果</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;project&quot;: &#123;</span><br><span class=\"line\">    &quot;tagline&quot;: &quot;A query language for APIs&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h2><p>请求你所要的数据不多不少</p>\n<pre><code>向你的 API 发出一个 GraphQL 请求就能准确获得你想要的数据，不多不少。 GraphQL 查询总是返回可预测的结果。使用 GraphQL 的应用可以工作得又快又稳，因为控制数据的是应用，而不是服务器。\n</code></pre>\n<p>获取多个资源只用一个请求</p>\n<pre><code>GraphQL 查询不仅能够获得资源的属性，还能沿着资源间引用进一步查询。典型的 REST API 请求多个资源时得载入多个 URL，而 GraphQL 可以通过一次请求就获取你应用所需的所有数据。这样一来，即使是比较慢的移动网络连接下，使用 GraphQL 的应用也能表现得足够迅速。\n</code></pre>\n<p>描述所有的可能类型系统</p>\n<pre><code>GraphQL API 基于类型和字段的方式进行组织，而非入口端点。你可以通过一个单一入口端点得到你所有的数据能力。GraphQL 使用类型来保证应用只请求可能的数据，还提供了清晰的辅助性错误信息。应用可以使用类型，而避免编写手动解析代码。\n</code></pre>\n<p>强大的开发者工具</p>\n<pre><code>不用离开编辑器就能准确知道你可以从 API 中请求的数据，发送查询之前就能高亮潜在问题，高级代码智能提示。利用 API 的类型系统，GraphQL 让你可以更简单地构建如同GraphiQL的强大工具。\n</code></pre>\n<p>API 演进无需划分版本</p>\n<pre><code>给你的 GraphQL API 添加字段和类型而无需影响现有查询。老旧的字段可以废弃，从工具中隐藏。通过使用单一演进版本，GraphQL API 使得应用始终能够使用新的特性，并鼓励使用更加简洁、更好维护的服务端代码。\n</code></pre>\n<p>使用你现有的数据和代码</p>\n<pre><code>GraphQL 让你的整个应用共享一套 API，而不用被限制于特定存储引擎。GraphQL 引擎已经有多种语言实现，通过 GraphQL API 能够更好利用你的现有数据和代码。你只需要为类型系统的字段编写函数，GraphQL 就能通过优化并发的方式来调用它们。\\\n</code></pre>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://graphql.cn/\">https://graphql.cn</a></p>\n<p><a href=\"https://www.apollographql.com/docs/apollo-server/getting-started/\">https://www.apollographql.com/docs/apollo-server/getting-started/</a></p>\n<p><a href=\"https://www.apollographql.com/\">https://www.apollographql.com</a></p>\n"},{"title":"Java 基础","date":"2022-01-28T12:27:32.000Z","_content":"\n\n# Java一学期复习 & 基础入门\n\n<font color=#999AAA >\n学了一学期Java了现在开始复习吧\n</font>\n\n<hr style=\" border:solid; width:100px; height:1px;\" color=#000000 size=1\">\n\n<!-- more -->\n\n# 一、Java开发入门\n## 1.1 Java概述\nJava 是由 Sun Microsystems 公司于 1995 年 5 月推出的 Java 面向对象程序设计语言和 Java 平台的总称。\n由 James Gosling和同事们共同研发，并在 1995 年正式推出。\n\n后来 Sun 公司被 Oracle （甲骨文）公司收购，Java 也随之成为 Oracle 公司的产品。\n\nJava分为三个体系：\n\t\n\tJavaSE (J2SE) (Java 2 Platform Standard Edition，java平台标准版）\n\tJavaEE (J2EE) (Java 2 Platform,Enterprise Edition，java平台企业版)\n\tJavaME (J2ME) (Java 2 Platform Micro Edition，java平台微型版)\n\n## 1.2 JDK, JRE, JVM\n**JDK(Java Development Kit)又称J2SDK(Java2 Software Development Kit)**\n\n是Java开发工具包，它提供了Java的开发环境(提供了编译器javac等工具，用于将java文件编译为class文件)和运行环境(提 供了JVM和Runtime辅助包，用于解析class文件使其得到运行)。如果你下载并安装了JDK，那么你不仅可以开发Java程序，也同时拥有了运行Java程序的平台。JDK是整个Java的核心，包括了Java运行环境(JRE)，一堆Java工具tools.jar和Java标准类库 (rt.jar)。\n\n**JRE(Java Runtime Enviroment)是Java的运行环境**\n\n面向Java程序的使用者，而不是开发者。如果你仅下载并安装了JRE，那么你的系统只能运行Java程序。JRE是运行Java程序所必须环境的集合，包含JVM标准实现及 Java核心类库。它包括Java虚拟机、Java平台核心类和支持文件。它不包含开发工具(编译器、调试器等)。\n\n**JVM（Java Virtual Machine）Java 虚拟机**\n\n是整个 Java 实现跨平台的最核心的部分，能够运行以 Java 语言写作的软件程序。\n\n# 二、Java编程基础\n## 2.1 基本语法\n```java\n/**\n * 文档注释\n * \n * (类注释)\n * \n * 文件First.java\n * \n * 主类名必修和文件名一致\n */\npublic class First {\n    static int sCnt = 0; // 类变量\n    int cnt = 0;// 实例变量\n    final int SIZE = 10; // const\n    static String name = \"Quanwei\";\n\n    public void printArray(int[] array) {\n        System.out.print(array);\n    }\n\n    public void addCnt() {\n        ++sCnt;\n        ++cnt;\n    }\n\n    public void showCnt() {\n        System.out.println(cnt);\n    }\n\n    public static void showName(boolean isOn) {\n        if (isOn)\n            System.out.println(name);\n    }\n\n    public static void convert() {\n        /* 英制到公制 */\n        int foot;\n        int inch;// 两个整数的运算结果一定是整数\n        Scanner in = new Scanner(System.in);// 惯用\n        foot = in.nextInt();\n        inch = in.nextInt();\n        System.out.println((foot + inch / 12f) * 0.3048);\n        in.close();\n    }\n\n    public static void main(String[] args) {\n        // showName(true);\n        // int age1 = 10;// 局部变量\n        convert();\n    }\n}\n```\n\n## 2.2 数据类型\n八种基本数据类型\n```java\npublic class Type {\n    /* 基本类型 默认值 */\n    byte y; // byte: 0\n    short s; // short: 0\n    int i; // int: 0\n    long l; // long: 0\n    double d; // double: 0.0\n    float f; // float: 0.0\n    boolean b; // boolean: false\n    char c; // char:\n\n    void show() {\n        System.out.println(\"byte: \" + y);\n        System.out.println(\"short: \" + s);\n        System.out.println(\"int: \" + i);\n        System.out.println(\"long: \" + l);\n        System.out.println(\"double: \" + d);\n        System.out.println(\"float: \" + f);\n        System.out.println(\"boolean: \" + b);\n        System.out.println(\"char: \" + c);\n    }\n\n    void assign() {\n        y = -1;\n        s = 1;\n        i = 2;\n        l = 3L;\n        d = 12.5;\n        f = 6.25F;\n        b = true;\n        c = 'c';\n    }\n\n    public static void main(String[] args) {\n    \t// type是引用类型\n        Type type = new Type();\n        type.assign();\n        type.show();\n    }\n}\n```\n\n## 2.3 运算符\n| 类型  | 运算符  |\n|--|--|\n| 成员访问运算符 | **.** |\n| 下标运算符 | [ ] |\n| 函数调用运算符 | ( ) |\n| 算数运算符 | * 乘&#8195; / 除 &#8195;% 取余&#8195; + &#8195;- |\n| 按位运算 | & 与&#8195;\\| 或 &#8195;~ 取反 &#8195;^ 异或&#8195; << 左移&#8195; >> 右移 &#8195;>>> 无符号右移 |\n| 逻辑运算 | &&#8195; \\|&#8195; !非&#8195; && 短路与&#8195; \\|\\| 短路非 |\n| 条件运算 | <&#8195;>&#8195; <= &#8195;>=&#8195; ==&#8195; != |\n| 条件运算符 | ? **:** |\n| 赋值运算符 | =&#8195; +=&#8195; -=&#8195; *= &#8195;/= &#8195;<<= &#8195;>>=&#8195; >>>=&#8195;&= &#8195;\\|=&#8195; ^=|\n## 2.4 选择结构\n```java\n        boolean condition=true;\n        // if-else\n        if (condition) {\n            //todo\n        }else{\n\t\t\t//todo\n        }\n        // if-else if-else\n        if (condition){\n            // todo\n        }else if(!condition){\n\t\t\t//todo\n        }else{\n\t\t\t//todo\n        }\n        //switch\n        switch (key) {\n            case value:\n                //todo\n                break;\n        \n            default:\n                break;\n        }\n```\n## 2.5 循环结构\n```java\n        boolean condition = true;\n        while (condition) {\n            // todo\n            break;//跳出循环\n        }\n\n        do {\n            // todo\n            continue;//进入下次循环\n        } while (condition);\n\n        for (int i = 0; i < 100; i++) {\n            // todo\n        }\n```\n# 三、面向对象\n<font color=#999AAA >\n面向对象的优点:<br>\n可重用性：代码重复使用，减少代码量，提高开发效率。<br>\n可扩展性：指新的功能可以很容易地加入到系统中来，便于软件的修改。<br>\n可管理性：能够将功能与数据结合，方便管理。\n</font>\n\n## 3.1 概念\nJava 是面向对象的编程语言，对象就是面向对象程序设计的核心。\n所谓对象就是真实世界中的实体，对象与实体是一一对应的，也就是说现实世界中每一个实体都是一个对象，它是一种具体的概念。对象有以下特点：\n\n\t 1. 对象具有属性和行为。\n\t 2. 对象具有变化的状态。 \n\t 3. 对象具有唯一性。 \n\t 4. 对象都是某个类别的实例。 \n\t 5. 一切皆为对象，真实世界中的所有事物都可以视为对象。\n\n## 3.2 特性(封装, 继承, 多态)\n### 3.2.1 封装\n为什么要封装?\n\n\t 1. 保护类中的信息，它可以阻止在外部定义的代码随意访问内部代码和数据。 \n\t 2. 隐藏细节信息，一些不需要程序员修改和使用的信息，用户不需要知道。\n\t 3. 有助于建立各个系统之间的松耦合关系，提高系统的独立性。当一个系统的实现方式发生变化时，只要它的接口不变，就不会影响其他系统的使用。\n\t 4. 提高软件的复用率，降低成本。每个系统都是一个相对独立的整体，可以在不同的环境中得到使用\n\n怎样封装? (将类中属性设为私有, 公开获取属性值的接口)\n```java\npublic class User {\n    /* 私有属性 */\n    private int id;\n    private String username;\n    private String passpord;\n\n    /**\n     * 构造函数\n     */\n    public User() {\n    }\n\n    /**\n     * @return the passpord\n     */\n    public String getPasspord() {\n        return passpord;\n    }\n\n    /**\n     * @param passpord the passpord to set\n     */\n    public void setPasspord(String passpord) {\n        this.passpord = passpord;\n    }\n\n    /**\n     * @return the id\n     */\n    public int getId() {\n        return id;\n    }\n\n    /**\n     * @param id the id to set\n     */\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    /**\n     * @return the username\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**\n     * @param username the username to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n        \n   @Override\n   public String toString() {\n       return \"id: \"+getId()+\"\\tusername: \"+getUsername()+\"\\tpassword: \"+getPasspord();\n   }\n}\n```\n### 访问修饰符: \n\n **default (即默认，什么也不写）:** \n\n\t在同一包内可见，不使用任何修饰符。\n使用对象：类、接口、变量、方法。\n\n**public :** \n\n\t对所有类可见。\n使用对象：类、接口、变量、方法 protected : 对同一包内的类和所有子类可见。使用对象：变量、方法。\n\n**private :** \n\n\t在同一类内可见。\n使用对象：变量、方法。 注意：不能修饰类（外部类）\n\n**protected :** \n\n\t对同一包内的类和所有子类可见。\n使用对象：变量、方法。 注意：不能修饰类（外部类）\n\n注意：\n\n父类中声明为 public 的方法在子类中也必须为 public。 父类中声明为 protected的方法在子类中要么声明为 protected，要么声明为 public，不能声明为 private 父类中声明为 private的方法，不能够被继承\n\n### 3.2.2 继承\n什么是继承?\n\n\t程序中的继承性是指子类拥有父类的全部特征和行为，这是类之间的一种关系。Java 只支持单继承。\n\n如何继承? (使用关键字 **extends**)\n```java\npublic class VipUser extends User {\n    public static void main(String[] args) {\n        VipUser vip = new VipUser();\n        vip.setUsername(\"Quanwei\");\n        System.out.println(vip.getUsername());// Quanwei\n    }\n}\n```\n### 3.2.3 多态\n什么是多态?\n\n\t面向对象的多态性，即“一个接口，多个方法”。\n\n为什么要使用多态?\n\n\t多态性体现在父类中定义的属性和方法被子类继承后，可以具有不同的属性或表现方式。\n\t多态性允许一个接口被多个同类使用，弥补了单继承的不足。\n\n如何使用多态? ( 重写父类方法)\n```java\npackage lang.aboutclass;\n\npublic class VipUser extends User {\n    private int vipNum;\n\n    @Override\n    public String toString() {\n        return super.toString() + \"\\tvipNum: \" + getVipNum();\n    }\n\n    /**\n     * @return the vipNum\n     */\n    public int getVipNum() {\n        return vipNum;\n    }\n\n    /**\n     * @param vipNum the vipNum to set\n     */\n    public void setVipNum(int vipNum) {\n        this.vipNum = vipNum;\n    }\n\n    public static void main(String[] args) {\n        User user = new VipUser();\n        user.setUsername(\"Quanwei\");\n        if (user instanceof VipUser vip) {\n            vip.setVipNum(5432);\n            System.out.println(vip.getUsername());// Quanwei\n            System.out.println(vip);\n        }\n    }\n}\n\n```\n### 非访问修饰符\n**static 修饰符**\n静态变量：\nstatic 关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量只有一份拷贝。 静态变量也被称为类变量。局部变量不能被声明为 static 变量。\n\n静态方法：\nstatic 关键字用来声明独立于对象的静态方法。静态方法不能使用类的非静态变量。静态方法从参数列表得到数据，然后计算这些数据。\n\n**final 修饰符**\nfinal 变量:\nfinal 表示\"最后的、最终的\"含义，变量一旦赋值后，不能被重新赋值。被 final 修饰的实例变量必须显式指定初始值。\nfinal 修饰符通常和 static 修饰符一起使用来创建类常量。\n\nfinal 方法:\n父类中的 final 方法可以被子类继承，但是不能被子类重写。\n\nfinal 类:\nfinal 类不能被继承，没有类能够继承 final 类的任何特性。\n\n**abstract 修饰符**\n抽象类：\n抽象类不能用来实例化对象，声明抽象类的唯一目的是为了将来对该类进行扩充。\n一个类不能同时被 abstract 和 final 修饰。如果一个类包含抽象方法，那么该类一定要声明为抽象类，否则将出现编译错误。\n抽象类可以包含抽象方法和非抽象方法。\n\n抽象方法\n抽象方法是一种没有任何实现的方法，该方法的的具体实现由子类提供。\n抽象方法不能被声明成 final 和 static。\n任何继承抽象类的子类必须实现父类的所有抽象方法，除非该子类也是抽象类。\n如果一个类包含若干个抽象方法，那么该类必须声明为抽象类。抽象类可以不包含抽象方法。\n抽象方法的声明以分号结尾，例如：public abstract sample();。\n\n## 3.3 特殊类\n### 3.3.1 抽象类 ( Abstract Class)\n\n在面向对象的概念中，所有的对象都是通过类来描绘的，但是反过来，并不是所有的类都是用来描绘对象的，如果一个类中没有包含足够的信息来描绘一个具体的对象，这样的类就是抽象类。\n抽象类不能用于实例化对象\n\n如何定义? (使用**abstract**关键字)\n```java\n// 抽象类\npublic abstract class Human {\n    String name;\n    int age;\n    String language;\n\n    // 抽象方法\n    public abstract void say();\n}\n```\n\n如何使用? (**继承**)\n```java\nclass Chinese extends Human {\n    Chinese(String name, String language) {\n        this.name = name;\n        this.language = language;\n    }\n\n    @Override\n    public void say() {\n        System.out.println(name + \" says \" + language);\n    }\n}\n```\n### 3.3.2 接口 (Interface)\n是一个抽象类型，是抽象方法的集合。一个类通过继承接口的方式，从而来继承接口的抽象方法。\n接口并不是类，类描述对象的属性和方法。接口则包含类要实现的方法。\n除非实现接口的类是抽象类，否则该类要定义接口中的所有方法。\n接口无法被实例化，但是可以被实现。一个实现接口的类，必须实现接口内所描述的所有方法。\n\n如何定义? (使用interface关键字)\n```java\n/**\n 1. 可以跑的接口 :)\n */\npublic interface Runnable {\n    // 跑的方法\n    void run();\n}\n```\n如何使用? (使用implements关键字实现接口)\n```java\nclass Chinese extends Human implements Runnable{\n    Chinese(String name, String language) {\n        this.name = name;\n        this.language = language;\n    }\n\n    @Override\n    public void say() {\n        System.out.println(name + \" says \" + language);\n\n    }\n    /**\n     * 实现接口须重写run方法\n     */\n    @Override\n    public void run() {\n       System.out.println(\"I am Running...\");        \n    }\n}\n```\n### 3.3.3 内部类 ( Inner Class )\nJava 一个类中可以嵌套另外一个类, 即内部类\n如何定义?\n```java\nclass OuterClass {\n    String infomation = \"Outer class\";\n\n    class InnerClass {\n        String information = \"Inner class\";\n\n        class InsiderClass {\n            String information = \"Insider class\";\n\n        }\n    }\n}\n```\n如何使用? ( 外部类.new 内部类名() )\n```java\npackage lang.aboutclass;\n\nimport lang.aboutclass.OuterClass.InnerClass;\nimport lang.aboutclass.OuterClass.InnerClass.InsiderClass;\n\nclass Main {\n    public static void main(String[] args) {\n        OuterClass outer = new OuterClass();\n        InnerClass inner = outer.new InnerClass();\n        InsiderClass insider = inner.new InsiderClass();\n        System.out.println(outer.infomation);// Outer class\n        System.out.println(inner.information);// Inner class\n        System.out.println(insider.information);// Insider class\n    }\n}\n```\n### 3.3.4 枚举类 ( Enum )\nJava 枚举是一个特殊的类，一般表示一组常量\n如何定义? (使用 enum 关键字来定义，各个常量使用逗号 **,** 来分割)\n```java\npublic enum Weekday {\n    SUN, MON, TUE, WED, THU, FRI, SAT;\n}\n```\n如何使用? (枚举类名.常量)\n```java\nSystem.out.println(Weekday.FRI);//FRI\n```\n\n### 3.3.6 记录类\n```java\n// 定义一个Point类，有x、y两个变量，同时它是一个不变类\npublic record Point(int x, int y) {\n}\n```\n相当于:\n```java\npublic final class Point extends Record {\n\nprivate final int x;\n\nprivate final int y;\n\npublic Point(int x, int y) { this.x = x; this.y = y; }\n\npublic int x() { return this.x; }\n\npublic int y() { return this.y; }\n\npublic String toString() { return String.format(\"Point[x=%s, y=%s]\", x, y); }\n\npublic boolean equals(Object o) { //... } public int hashCode() { //... } }\n```\n也可以在里面写构造函数\n```java\npublic record Point(int x, int y) {\n    // Compact Constructor，它的目的是让我们编写检查逻辑 \n    public Point {\n        if (x < 0 || y < 0) {\n            throw new IllegalArgumentException();\n        }\n    }\n}\n```\n\n### 3.3.6 注解类（Annotation）\nJava 语言中的类、方法、变量、参数和包等都可以被标注。\n和 Javadoc 不同，Java 标注可以通过反射获取标注内容。在编译器生成类文件时，标注可以被嵌入到字节码中。Java 虚拟机可以保留标注内容，在运行时可以获取到标注内容 。 当然它也支持自定义 Java 标注。\n\n如何定义? ( 使用@interface关键字 )\n```java\npackage lang.annotation;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n// 3.用元注解配置注解 \n// 必须设置@Target和@Retention，@Retention一般设置为RUNTIME，因为我们自定义的注解通常要求在运行期读取\n@Target(ElementType.LOCAL_VARIABLE)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface Report {// 1.用@interface定义注解\n    // 2.添加默认参数\n    int type() default 0;\n\n    String level() default \"info\";\n\n    String value() default \"\";\n    // 把最常用的参数定义为value()，推荐所有参数都尽量设置默认值\n}\n// 注解定义后也是一种class，所有的注解都继承自java.lang.annotation.Annotation，因此，读取注解，需要使用反射API\n```\n**元注解（meta annotation）** 有一些注解可以修饰其他注解，这些注解就称为元注解\n\n最常用的元注解是@Target。\n使用@Target可以定义Annotation能够被应用于源码的哪些位置：\n类或接口：ElementType.TYPE；\n字段：ElementType.FIELD；\n方法：ElementType.METHOD；\n构造方法：ElementType.CONSTRUCTOR；\n方法参数：ElementType.PARAMETER\n\n另一个重要的元注解@Retention定义了Annotation的生命周期：\n仅编译期：RetentionPolicy.SOURCE；\n仅class文件：RetentionPolicy.CLASS； (默认)\n运行期：RetentionPolicy.RUNTIME\n\n如何使用? ( 通过反射获取注解信息 )\n```java\n@MyAnnotation(value = 20, name = \"Quanwei\")\npublic class MyAnnoTest {\n\n    public static void main(String[] args) {\n        MyAnnotation anno = MyAnnoTest.class.getDeclaredAnnotation(MyAnnotation.class);\n        System.out.println(anno.name());// Quanwei\n        System.out.println(anno.value());// 20\n    }\n}\n```\n在注解的定义中使用注解:\n```java\n@Target({ ElementType.TYPE, ElementType.FIELD, ElementType.METHOD })//注解使用位置\n@Retention(RetentionPolicy.RUNTIME)// 保留时间\npublic @interface MyAnnotation {\n    int value() default 12;\n\n    String name() default \"quanwei\";\n\n    Report report()default @Report ;\n}\n```\n\n## 3.4 反射 Reflection\n是什么?\n\n\t反射就是一种能在程序 运行 时获取类、接口、方法和变量等信息的能力。\n有什么用?\n\t\n\t解决在运行期，对某个实例一无所知的情况下，调用其方法\n如何使用? (类名.class)\n```java\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Class<Student> stdClass = Student.class;\n        // 获取public方法getScore，参数为String:\n        System.out.println(stdClass.getMethod(\"getScore\", String.class));\n        // 获取继承的public方法getName，无参数:\n        System.out.println(stdClass.getMethod(\"getName\"));\n        // 获取private方法getGrade，参数为int:\n        System.out.println(stdClass.getDeclaredMethod(\"getGrade\", int.class));\n    }\n}\n\nclass Student extends Person {\n    public int getScore(String type) {\n        return 99;\n    }\n\t@SuppressWarnings(\"unused\")\n    private int getGrade(int year) {\n        return 1;\n    }\n}\n\nclass Person {\n    public String getName() {\n        return \"Person\";\n    }\n}\n\n```\n还有多种情况,[参考](https://www.oracle.com/technical-resources/articles/java/javareflection.html)\n## 3.5 lambda表达式\nlambda表达式也即**匿名函数**, 允许把函数作为一个方法的参数（函数作为参数传递进方法中）\n在java中lambda表达式本质上是一个对象\n\n基本的语法像这样:\n\t\n\t(parameters) ->{ statements; }\n\n基本使用\n```java\nnew Thread(() -> {\n            try {\n                Thread.sleep(1000);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }).start();\n```\n## 3.6 异常\n异常主要指程序运行的时候，会发生各种错误, 不包括编译时发生的\n\n异常可以捕获:\n```java\n\t\ttry{\n            int i=10/0;\n        }catch(Exception e){\n            e.printStackTrace();\n        }finally{\n           // todo\n        }\n```\n也可以抛出\n```java\t\n\t// 自动抛出\n\t public static void test() throws IOException {\n        testException(10,0);\n    }\n\n\t// 手动抛出\n    public static void testException(int a, int b) throws RuntimeException {\n        if (b > 0) {\n            System.out.println(a / b);\n        } else {\n            throw new RuntimeException(\"除数不能为零\");\n        }\n    }\n    \n```\n还可以自定义异常 (继承Exception类)\n```java\npublic class MyException extends Exception {\n    public MyException(String msg) {\n        super(msg+\" from MyException\");\n    }\n}\n```\n# 四、常用类\n## 4.1 数组 & Arrays\n数组的定义和使用\n```java\n        // 1.创建array对象\n        int[] array=new int[10];\n        // 赋值\n        for (int i = 0; i < array.length; i++) {\n            array[i]=i+1;\n        }\n        // 使用\n        for (int i : array) {\n            System.out.print(i+\" \");\n        }\n        // 其他\n        int[] a2={1,2,2,3,4};\n        String[] strings={\"asd\",\"sdas\"};\n```\nArrays 类是一个工具类，其中包含了数组操作的很多方法。 Arrays 类里均为 static 修饰的方法可以直接通过类名调用。\n例如使用Arrays对数组排序\n```java\n        // 1.创建array对象, 并赋值\n        String[] strings = { \"hello\", \"thank\", \"you\", \"are\", \"ok\" };\n        // 顺序\n        Arrays.sort(strings);\n        System.out.println(Arrays.toString(strings)); // [are, hello, ok, thank, you]\n        // 逆序\n        Arrays.sort(strings, Comparator.reverseOrder());\n        System.out.println(Arrays.toString(strings)); // [you, thank, ok, hello, are]\n```\n## 4.2 String, StringBuffer和StringBuilder\n### 4.2.1 String\n String 是 final 修饰的，无法被继承。且 String 不是 Java 的基本数据类型\n通过new创建的String对象,和直接赋值的String对象稍有不同:\n```java\n/**\n * TestString\n * \n * 可以和八种基本数据类型做运算\n */\npublic class TestString {\n\n    public static void main(String[] args) {\n\n    }\n    public void testStringJoint() {\n        // 字面量定义,s1指向方法区中的静态常量池\n        String s1 = \"Quanwei\";\n        String s2 = \"Quanwei\";\n        // s2->堆空间地址值\n        String s3 = new String(\"Quanwei\");\n        System.out.println(\"s1 == s2: \" + (s1 == s2)); // true\n        System.out.println(\"s1 == s3: \" + (s1 == s3)); // false\n        System.out.println(\"s1.equals(s2): \" + (s1.equals(s2)));// true\n        System.out.println(\"s1.equals(s3): \" + (s1.equals(s3)));// true\n\n        String s4 = \"TangQuanwei\";\n        String s5 = \"Tang\" + \"Quanwei\"; // 常量与常量拼接在静态常量池\n        System.out.println(\"s4 == s5: \" + (s4 == s5)); // true\n        String s6 = \"Tang\" + s1; // 常量与引用拼接->堆空间地址值\n        System.out.println(\"s4 == s6: \" + (s4 == s6)); // false\n    }\n\n \n    public void testToCharArray() {\n        String s1 = \"Quanwei\";\n        char[] charArray = s1.toCharArray();\n        System.out.println(Arrays.toString(charArray));\n\n        String s2 = \"权威\";\n        char[] charArray2 = s2.toCharArray();\n        System.out.println(Arrays.toString(charArray2));\n\n    }\n\n  \n    public void testGetBytes() {\n        String s1 = \"Quanwei\";\n        byte[] bytes = s1.getBytes();\n        System.out.println(Arrays.toString(bytes));\n\n        String s2 = \"权威\";\n        byte[] bytes2 = s2.getBytes();// 默认utf-8\n        System.out.println(Arrays.toString(bytes2));\n\n        try {\n            byte[] bytes3 = s2.getBytes(\"gbk\");\n            System.out.println(Arrays.toString(bytes3));\n\n            byte[] bytes4 = s2.getBytes(\"utf-8\");\n            System.out.println(Arrays.toString(bytes4));\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n String 是不可变的，而 StringBuffer 和 StringBuilder 是可变类\n \n ### 4.2.2 StringBuffer和StringBuilder\n 二者区别就是:\n | StringBuffer | StringBuilder |\n |--|--|\n|线程安全  |\t非线程安全 |\n|同步\t|非同步|\n|慢|\t快|\n所以在非多线程环境中的字符串操作，我们一般用 StringBuilder , 因为二者的方法都是差不多的\n它们为字符串操作提供了 append、insert、delete 和 substring 方法\n```java\n    public void testStringBuilder() {\n        var sb1 = new StringBuilder(\"Tang\");\n        var sb2 = new StringBuilder(\"t\");\n        System.out.println(sb1.capacity());// 20\n        System.out.println(sb1.length());// 4\n        sb1.ensureCapacity(40);\n        System.out.println(sb1.capacity());// 42\n        System.out.println(sb2.capacity());// 17\n        sb1.append(\"Quawnei\");\n        System.out.println(sb1);//TangQuawnei\n        sb1.insert(4, \"->\");\n        System.out.println(sb1);//Tang->Quawnei\n        sb1.delete(0, 4);\n        System.out.println(sb1);//->Quawnei\n    }\n```\n\n## 4.3 System类和Runtime类\n### 4.3.1 静态字段\nSystem 类有 3 个静态成员变量，分别是 PrintStream **out**、InputStream **in** 和 PrintStream **err**\nout跟err的区别大概是:\nSystem.out.println可能会被缓冲,而System.err.println不会，由于err不需要缓冲即可输出\n\t\n\tPrintStream out\n```java\nSystem.out.println(\"quanwei);\n```\n\tInputStream in \n```java\n    try {\n        int read = System.in.read();// 读一个字符的ascii码\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n```\n### 4.3.2 静态方法\n```java\npublic static void main(String[] args) {\n        // 获取系统属性\n        String jversion = System.getProperty(\"java.version\");\n        String oName = System.getProperty(\"os.name\");\n        String user = System.getProperty(\"user.name\");\n        System.out.println(\"Java 运行时环境版本：\" + jversion);// Java 运行时环境版本：17.0.1\n        System.out.println(\"当前操作系统是：\" + oName);// 当前操作系统是：Windows 10\n        System.out.println(\"当前用户是：\" + user);// 当前用户是：QUANWEI\n\n        // 时间的格式为当前计算机时间与 GMT 时间（格林尼治时间）\n        // 1970 年 1 月 1 日 0 时 0 分 0 秒所差的毫秒数\n        Date date = new Date(System.currentTimeMillis());//\n        System.out.println(date); // Mon Jan 10 20:20:43 CST 2022\n\n        int[] a = { 1, 2, 3, 4, 5 };\n        int[] b = { 2, 3, 4, 5, 6 };\n        // 合并数组\n        int[] marge = marge(a, b);\n        System.out.println(Arrays.toString(marge));// [1, 2, 3, 4, 5, 2, 3, 4, 5, 6]\n\n        // 请求系统进行垃圾回收\n        System.gc();\n\n        // 终止当前正在运行的 Java 虚拟机\n        System.exit(0);\n    }\n\n    public static int[] marge(int[] a, int[] b) {\n        int[] ret = new int[a.length + b.length];\n        System.arraycopy(a, 0, ret, 0, a.length);\n        System.arraycopy(b, 0, ret, a.length, b.length);\n        return ret;\n    }\n```\n## 4.4 包装类\n| 基本类 | 包装类 |\n|-|-|-|\n|byte| Byte|\n|short | Short|\n|int | Integer|\n|long | Long|\n|char | Character|\n|float| Float|\n|double | Double|\n|boolean | Boolean|\n常用方法 :\n\t\t**包装类名.parseXxx(String );**\n\t\t**包装类名.valueOf(String );**\n\t\t**包装类名.toString();**\n## 4.5 Math和Random\nMath类就是用来进行数学计算的，它提供了大量的静态方法来便于我们实现数学计算\n比如:\n```java\n// 数学常量：\ndouble pi = Math.PI; // 3.14159...\ndouble e = Math.E; // 2.7182818...\n\n// 求绝对值：\nMath.abs(-100); // 100\nMath.abs(-7.8); // 7.8\n\n// 取最大或最小值：\n\nMath.max(100, 99); // 100\nMath.min(1.2, 2.3); // 1.2\n\n// 计算xy次方：\nMath.pow(2, 10); // 2的10次方=1024\n\n// 计算√x：\nMath.sqrt(2); // 1.414...\n\n// 计算ex次方：\nMath.exp(2); // 7.389...\n\n// 计算以e为底的对数：\nMath.log(4); // 1.386...\n\n// 计算以10为底的对数：\nMath.log10(100); // 2\n\n// 三角函数：\nMath.sin(3.14); // 0.00159...\nMath.cos(3.14); // -0.9999...\nMath.tan(3.14); // -0.0015...\nMath.asin(1.0); // 1.57079...\nMath.acos(1.0); // 0.0\n```\n\n## 4.6 BigInteger类和BigDecimal类\n<font color=#999AAA >\n在Java中，由CPU原生提供的整型最大范围是64位long型整数。使用long型整数可以直接通过CPU指令进行计算, 如果我们使用的整数范围超过了long型就只能用软件来模拟一个大整数。java.math.BigInteger就是用来表示任意大小的整数。BigInteger内部用一个int[]数组来模拟一个非常大的整数\n</font>\n<br />\n<br />\n由于Java不支持运算符重载, 在对BigInteger做运算的时候，只能使用对象的方法，例如，\n\n```java\nBigInteger i1 = new BigInteger(\"1234567890\");\nBigInteger i2 = new BigInteger(\"12345678901234567890\");\nBigInteger sum = i1.add(i2); // 12345678902469135780\n```\nBigDecimal和BigInteger类似，可以用来表示一个任意大小且精度完全准确的浮点数\n```java\nBigDecimal d1 = new BigDecimal(\"9876543210.0123456789\");\nBigDecimal d2 = new BigDecimal(\"123.45000000000000000\");\nSystem.out.println(d1.scale()); // 10,两位小数\nSystem.out.println(d1.add(d2));\nSystem.out.println(d1.subtract(d2));\nSystem.out.println(d1.multiply(d2));\n// 无法除尽时，就必须指定精度以及如何进行截断\nSystem.out.println(d1.divide(d2, 10, RoundingMode.HALF_UP));// 四舍五入\n```\n## 4.7 时间和日期类\nJDK8以前\n```java\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\n/**\n * JDK 8 以前 时间日期API\n * \n * 1.System.currentTimeMillis()\n * \n * 2.java.util.Calendar;  java.util.Date;\n * \n * 3.SimpleDateFormat\n * \n * 4.Calender\n */\npublic class TestBefer8 {\n    public void testTime() {\n        // 获取当前时间的毫秒数时间戳\n        System.out.println(\"TestDateTime.testTime()\");\n        long currentTimeMillis = System.currentTimeMillis();\n        System.out.println(currentTimeMillis);\n    }\n    public void testDate() {\n        // java.util.Date\n        Date d1 = new Date();\n        System.out.println(d1);\n        System.out.println(d1.getTime());// 毫秒数时间戳\n\n        var d2 = new Date(1631504736660L);\n        System.out.println(d2);\n\n        // java.sql.Date 是 java.util.Date 的子类\n        var d3 = new java.sql.Date(0L);\n        System.out.println(d3);\n\n        // java.sql.Date -> java.util.Date\n        Date d4 = (Date) d3;\n        System.out.println(d4);\n\n        // java.util.Date -> java.sql.Date\n        java.sql.Date d5 = new java.sql.Date(d4.getTime());\n        System.out.println(d5);\n    }\n\n    /**\n     * SimpleDateFormat对Date类的格式化和解析\n     * \n     * 1.格式化: 日期 --> 字符串\n     * \n     * 2.解析:格式化的逆过程: 字符串 --> 日期\n     */\n    public void testFormat() {\n        System.out.println(\"TestDateTime.testFormat()\");\n\n        // 格式化\n        SimpleDateFormat sdf = new SimpleDateFormat();\n        Date date = new Date();\n        String format = sdf.format(date);\n        System.out.println(format);\n\n        // 指定格式\n        final String parttern = \"yyyy-MM-dd hh:mm:ss:SSS z\";\n        SimpleDateFormat sdf2 = new SimpleDateFormat(parttern);\n        System.out.println(sdf2.format(date));\n\n        try {\n            // 解析\n            String str = \"2021/9/13 下午2:58\";\n            String s2 = \"2002-10-09 08:31:12:234 CST\";\n            Date d1 = sdf.parse(str);\n            System.out.println(d1);\n        } catch (ParseException e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * Calender 抽象基类\n     * \n     * 主要用于完成日期字段之间相互操作的功能\n     * \n     */\n    public void testCalender() {\n        // 1.调用静态方法获取实例\n        Calendar cal = Calendar.getInstance();\n        Calendar instance2 = Calendar.getInstance();\n        System.out.println(cal.getClass());// class java.util.GregorianCalendar\n        System.out.println(cal.equals(instance2));//false\n        \n        //get\n        System.out.println(cal.get(Calendar.DAY_OF_MONTH));\n        System.out.println(cal.get(Calendar.DAY_OF_YEAR));\n    }\n}\n```\nJDK8以后\n```java\nimport java.time.Instant;\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.time.LocalTime;\nimport java.time.OffsetDateTime;\nimport java.time.ZoneOffset;\nimport java.time.format.DateTimeFormatter;\nimport java.time.format.FormatStyle;\nimport java.time.temporal.TemporalAccessor;\n/**\n * JDK 8 中的时间日期API\n * \n * 1.LocalDate\n * \n * 2.LocalTime\n * \n * 3.LocalDateTime\n * \n * 4.Instant 机器时间\n * \n * 5.DateTimeFormater\n */\npublic class TestIn8 {\n    public void testDate() {\n        LocalDate now = LocalDate.now();\n        System.out.println(now);\n    }\n\n    public void testTime() {\n        LocalTime now = LocalTime.now();\n        System.out.println(now);\n    }\n\n    public void testLocalDateTime() {\n        // now 获取当前的日期和时间\n        LocalDateTime now = LocalDateTime.now();\n        System.out.println(now);\n\n        // of 获取指定的日期时间 没有偏移量\n        LocalDateTime of = LocalDateTime.of(2002, 10, 9, 16, 34, 35);\n        System.out.println(of);\n\n        // getXxx\n        System.out.println(now.getDayOfMonth());\n        System.out.println(now.getDayOfYear());\n        System.out.println(now.getChronology());\n    }\n\n    public void testInstant() {\n        // now() 获取本初子午线对应的标准时间\n        Instant now = Instant.now();\n        System.out.println(now);// 慢八个小时\n\n        // 添加时间偏移量\n        OffsetDateTime offSet = now.atOffset(ZoneOffset.ofHours(8));\n        System.out.println(offSet);\n\n        // 1970(UTC)->现在 经过的毫秒数\n        long epochMilli = now.toEpochMilli();\n        System.out.println(epochMilli);// 1631521135573\n\n        // 毫秒数->instant\n        Instant ofEpochMilli = Instant.ofEpochMilli(1631521135573L);\n        System.out.println(ofEpochMilli);\n    }\n\n    public void testDateTimeFormater() {\n        LocalDateTime now = LocalDateTime.now();\n\n        // 格式化1\n        DateTimeFormatter formatter = DateTimeFormatter.ISO_LOCAL_DATE_TIME;\n        String format = formatter.format(now);\n        System.out.println(format); // 2021-09-13T16:56:14.4738222\n\n        // 解析\n        TemporalAccessor parse = formatter.parse(\"2021-09-13T16:56:14.4738222\");\n        System.out.println(parse);\n\n        // 格式化2: 本地格式化\n        DateTimeFormatter formatter2 = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM);\n        String format2 = formatter2.format(now);\n        System.out.println(format2);\n\n        // 格式化3: 自定义格式化\n        final String pattern=\"GG yyyy年MM月dd日 EE a hh时mm分ss秒\";\n        DateTimeFormatter formatter3 = DateTimeFormatter.ofPattern(pattern);\n        String format3 = formatter3.format(LocalDateTime.now());\n        System.out.println(format3);\n    }\n}\n\n```\n# 五、集合\n<font color=#999AAA >\nJava Collection Framework  (JCF) Java集合框架是一组提供现成架构的类和接口。为了实现一个新特性或一个类，不需要定义一个框架。然而，一个最佳的面向对象设计总是包含一个具有类集合的框架，这样所有的类都执行相同类型的任务。\n</font>\n\n## 5.1 Collection和Collections\nCollections\n```java\n    public static void main(String[] args) {\n        List<String> ls = new ArrayList<>();\n        ls.add(\"reverse\");\n        ls.add(\"shuffle\");\n        ls.add(\"sort\");\n        ls.add(\"swap\");\n        ls.add(\"rotate\");\n        System.out.println(ls);// [reverse, shuffle, sort, swap, rotate]\n\n        // 反转\n        Collections.reverse(ls);\n        System.out.println(ls);// [rotate, swap, sort, shuffle, reverse]\n\n        // 按升序进行排序\n        Collections.sort(ls);\n        System.out.println(ls);// [reverse, rotate, shuffle, sort, swap]\n\n        // 根据指定 Comparator排序\n        Collections.sort(ls, new Comparator<String>() {\n\n            @Override\n            public int compare(String o1, String o2) {\n                return -o1.compareTo(o2);\n            }\n\n        });\n        System.out.println(ls);// [swap, sort, shuffle, rotate, reverse]\n\n        // 按下标交换\n        Collections.swap(ls, 0, ls.size() - 1);\n        System.out.println(ls);// [reverse, sort, shuffle, rotate, swap]\n\n        // 将 list 集合的后 distance 个元素整体移到前面\n        Collections.rotate(ls, 2);\n        System.out.println(ls);// [rotate, swap, reverse, sort, shuffle]\n\n        // 将 list 集合的前 distance 个元素整体移到后面\n        Collections.rotate(ls, -3);\n        System.out.println(ls);// [sort, shuffle, rotate, swap, reverse]\n\n        // 返回指定集合中指定元素的出现次数\n        ls.add(\"sort\");\n        int frequency = Collections.frequency(ls, \"sort\");\n        System.out.println(frequency);// 2\n\n        // 将指定集合中的所有元素复制到另一个集合中,目标集合的长度至少和源集合的长度相同\n        List<String> l2 = new LinkedList<>();// ArrayList -> LinkedList\n        l2.add(\"reverse1\");\n        l2.add(\"shuffle1\");\n        l2.add(\"sort1\");\n        l2.add(\"swap1\");\n        l2.add(\"rotate1\");\n        Collections.copy(ls, l2);\n        System.out.println(ls);// [reverse1, shuffle1, sort1, swap1, rotate1, sort]\n\n        // LinkedList -> ArrayList\n        // ! IndexOutOfBoundsException Source does not fit in dest\n        Collections.copy(l2, ls);\n        System.out.println(ls);\n\t}\n\n```\n## 5.2 常用类, 接口\n```java\n    /**\n     * 列表\n     */\n    public void testList() {\n        // <> 中的类型只能是引用类型\n        List<Integer> al = new ArrayList<>();\n        List<Integer> ll = new LinkedList<>();\n    }\n\n    /**\n     * 队列\n     */\n\n    public void testQueue() {\n        Queue<Integer> ad = new ArrayDeque<>();\n        Queue<Integer> ll = new LinkedList<>();\n        Queue<Integer> pq = new PriorityQueue<>();\n\n    }\n\n    /**\n     * 集合\n     */\n    public void testSet() {\n        Set<Object> hs = new HashSet<>();\n        Set<Object> ts = new TreeSet<>();\n\n    }\n\n    /**\n     * 映射\n     */\n    public void testMap() {\n        Map<Integer, String> hm = new HashMap<>();\n        Map<Integer, String> tm = new TreeMap<>();\n    }\n ```\n## 5.5 Stream API\n在 Java 8 中引入的 Stream API 用于处理对象的集合。流是支持各种方法的对象序列，这些方法可以流水线化以产生所需的结果。\nJava 流的特点是:\n\n流不是数据结构，而是从集合、数组或 I/O 通道获取输入。\n流不会更改原始数据结构，它们仅根据流水线方法提供结果。\n每个中间操作都被延迟执行并返回一个流作为结果，因此可以对各种中间操作进行流水线化。终端操作标记流的结束并返回结果。\n```java\n    public void testStream() {\n        // 创建\n        List<Integer> number = Arrays.asList(2, 3, 4, 5);\n\n        // 使用map将number的元素平方\n        List<Integer> square = number.stream().map(x -> x * x).collect(Collectors.toList());\n        System.out.println(square);// [4, 9, 16, 25]\n\n        // 创建\n        List<String> names = Arrays.asList(\"Reflection\", \"Collection\", \"Stream\");\n\n        // 过滤\n        List<String> result = names.stream().filter(s -> s.startsWith(\"S\")).collect(Collectors.toList());\n        System.out.println(result);// [Stream]\n\n        // 排序\n        List<String> show = names.stream().sorted().collect(Collectors.toList());\n        System.out.println(show);// [Collection, Reflection, Stream]\n\n        // 创建\n        List<Integer> numbers = Arrays.asList(2, 3, 4, 5, 2);\n\n        // 收集\n        Set<Integer> squareSet = numbers.stream().map(x -> x * x).collect(Collectors.toSet());\n        System.out.println(squareSet);// [16, 4, 9, 25]\n\n        // forEach\n        number.stream().map(x -> x * x).forEach(y -> System.out.print(y + \" \"));// 4 9 16 25\n\n        // reduce\n        int even = number.stream().filter(x -> x % 2 == 0).reduce(0, (ans, i) -> ans + i);// 0+2+4\n\n        System.out.println(even);// 6\n    }\n```\n## 5.6 泛型\n<font color=#999AAA >\n泛型意味着参数化类型。这个想法是允许类型（整数、字符串等，以及用户定义的类型）作为方法、类和接口的参数。使用泛型，可以创建使用不同数据类型的类。\n对参数化类型进行操作的实体（例如类、接口或方法）称为泛型实体。\n</font>\n\n与 C++ 一样，我们使用 <> 来指定泛型类创建中的参数类型。要创建泛型类的对象\n```java\nclass Pair<T, U> {\n    private T first;\n    private U second;\n\n    public Pair(T first, U second) {\n        this.setFirst(first);\n        this.setSecond(second);\n    }\n\n    /**\n     * @return the second\n     */\n    public U getSecond() {\n        return second;\n    }\n\n    /**\n     * @param second the second to set\n     */\n    public void setSecond(U second) {\n        this.second = second;\n    }\n\n    /**\n     * @return the first\n     */\n    public T getFirst() {\n        return first;\n    }\n\n    /**\n     * @param first the first to set\n     */\n    public void setFirst(T first) {\n        this.first = first;\n    }\n\n    @Override\n    public String toString() {\n        return \"( \" + first + \", \" + second + \")\";\n    }\n}\n```\n# 六、I/O流\n<font color=#999AAA >\nIO是指Input/Output，即以内存为中心的输入和输出。\n</font>\n\n## 6.1 BIO\n<font color=#999AAA >\nBIO即 Blocking Input/Output, 即阻塞的I/O\n</font>\n\n### 6.1.1 Flie\n用于文件和目录的创建、文件的查找和文件的删除等\n```java\npackage lang.io;\n\nimport java.io.File;\nimport java.io.IOException;\n\nimport org.junit.jupiter.api.Test;\n\n\n/**\n * File表示一个文件或一个文件夹 在java.io包下\n */\npublic class TestFile {\n    // 构造一个File对象，并不会导致任何磁盘操作\n    // 文件夹\n    File floder = new File(\"D:\\\\workspaceFolder\\\\CODE_JAVA\");\n    // 文件\n    File file = new File(\"D:\\\\workspaceFolder\\\\CODE_JAVA\\\\a.txt\");\n\n    @Test\n    public void testGet() {\n        // 返回绝对路径，\n        System.out.println(file);\n        // 返回构造方法传入的路径，\n        System.out.println(file.getPath());\n        // 返回绝对路径，\n        System.out.println(file.getAbsolutePath());\n        try { // 返回绝对路径，\n            System.out.println(file.getCanonicalPath());\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        // 输出文件夹下文件\n        for (var i : floder.listFiles()) {\n            System.out.println(i);\n        }\n    }\n\n    @Test\n    public void testCreate() {\n        File f = new File(\"test.file\");\n        if (!f.exists()) {\n            try {\n                // 创建\n                f.createNewFile();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    @Test\n    public void testDelete() {\n        File f = new File(\"test.file\");\n        if (f.exists()) {\n            // 删除\n            boolean delete = f.delete();\n            System.out.println(delete?\"delete\":\"not exist\");\n        }\n    }\n\n}\n\n```\n### 6.1.2 ByteStream\n即字节流, InputStream和OutputStream都是抽象类在里面分别定义了read()和write()方法\n我们使用它们的子类, FileInputStream和FileOutputStream\n```java\npackage lang.io;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\n\nimport org.junit.Test;\n\npublic class TestByteStream {\n\n    public void copyPng() {\n        File file = new File(\"D:\\\\workspaceFolder\\\\CODE_JAVA\\\\猫咪.png\");\n        File fileB = new File(\"D:\\\\workspaceFolder\\\\CODE_JAVA\\\\猫咪2.png\");\n        FileInputStream fileInputStream = null;\n        FileOutputStream fileOutputStream = null;\n        try {\n            fileInputStream = new FileInputStream(file);\n            fileOutputStream = new FileOutputStream(fileB);\n\n            int len;\n            byte[] bbuf = new byte[10];\n            while ((len = fileInputStream.read(bbuf)) != -1) {\n                fileOutputStream.write(bbuf, 0, len);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (fileInputStream != null)\n                    fileInputStream.close();\n                if (fileOutputStream != null)\n                    fileOutputStream.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    @Test\n    public void read() {\n        File file = new File(\"D:\\\\workspaceFolder\\\\CODE_JAVA\\\\lang\\\\io\\\\TestByteStream.java\");\n        FileInputStream fis = null;\n        try {\n            fis = new FileInputStream(file);\n            int data;\n            while ((data = fis.read()) != -1) {\n                System.out.print((char) data);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            if (fis != null) {\n                try {\n                    fis.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n\n    }\n\n    public static void main(String[] args) {\n        new TestByteStream().copyPng();\n    }\n}\n\n```\n### 6.1.3 CharStream\nCharStream即字符流\n\nReader是Java的IO库提供的另一个输入流接口。和InputStream的区别是，InputStream是一个字节流，即以byte为单位读取，而Reader是一个字符流，即以char为单位读取\n\n我们使用Reader的子类FileReader来演示向文件写入数据和从文件读出数据\n```java\npackage lang.io;\n\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\nimport org.junit.Test;\n\n/**\n * 内存的角度\n * \n * 输入:外部数据->内存\n * \n * 输出:内存->外部数据\n * \n * 字节流(8bit): InputStream, OutPutStream\n * \n * 字符流(16bit): Reader, Writer\n */\npublic class TestCharStream {\n    // 1.File对象指明文件\n    private final File file = new File(\"data.txt\");\n\n    /**\n     * Read from file and print to console\n     */\n    public void Read() {\n        // 2.Reader对象\n        FileReader fileReader = null;\n        try {\n            // 3.读\n            fileReader = new FileReader(file);// 读入的文件一定要存在\n            int read;\n            while ((read = fileReader.read()) != -1)\n                System.out.print((char) read);\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            // 4.关闭资源\n            if (fileReader != null)\n                try {\n                    fileReader.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n        }\n    }\n\n    /**\n     * Write String to file\n     * \n     * @param toBeWrite\n     */\n    public void Write(String toBeWrite) {\n        FileWriter fileWriter = null;\n        try {\n            fileWriter = new FileWriter(file);\n            fileWriter.write(\"By_Quanwei\\n\");\n            fileWriter.append(toBeWrite);\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            if (fileWriter != null)\n                try {\n                    fileWriter.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n\n        }\n    }\n\n    /**\n     * Copy fileA to fileB\n     */\n    public void copyFile(String fileA, String fileB) {\n        FileReader fileReader = null;\n        FileWriter fileWriter = null;\n        try {\n            fileReader = new FileReader(fileA);\n            fileWriter = new FileWriter(fileB);\n            int len;\n            char[] cbuf = new char[10];\n            while ((len = fileReader.read(cbuf)) != -1) {\n                fileWriter.write(cbuf, 0, len);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (fileReader != null)\n                    fileReader.close();\n                if (fileWriter != null)\n                    fileWriter.close();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        new TestCharStream().copyFile(\"data.txt\", \"file.txt\");\n    }\n\n    @Test\n    public void testFileReadWite() {\n        TestCharStream testIO = new TestCharStream();\n        testIO.Write(\"\"\"\n                public void Read() {\n                    try {\n                        FileReader fileReader = new FileReader(file);\n                        int read;\n                        while ((read = fileReader.read()) != -1)\n                            System.out.print((char)read);\n                        fileReader.close();\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n\n                public void Write(String toBeWrite) {\n                    try {\n                        FileWriter fileWriter = new FileWriter(file);\n                        fileWriter.append(toBeWrite);\n                        fileWriter.close();\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n                \"\"\");\n        testIO.Read();\n    }\n}\n```\n### Socket与网络编程\n1.网络编程的两个主要问题 1)如何定位网络上的一台或多态主机,定位主机上的特定应用(IPhe端口) 2)找到主机后如何高效可靠的传输数据(TCP/IP)\n\n本地回环地址: (hostAddress):127.0.0.1\n\n主机名: (hostName):localhost\n\n局域网地址: 192.168.~\n\n端口号: 运行的程序(0-65535)\n\nSockst = ip + 端口号\n\nTCP 可靠, 大量(三次握手, 四次挥手)\n\nUDP 快速\n\n**Url类**\n```java\npackage lang.net;\n\nimport java.net.URL;\n\n/**\n * url https://www.bilibili.com/video/BV1Kb411W75N?p=629\n * \n * <协议>//:<主机名>:<端口号>/<文件名/>#<片段名?><参数列表>\n */\n\npublic class MyUrl {\n    public static void main(String[] args) {\n        try {\n            URL url = new URL(\"https://www.bilibili.com/video/BV1Kb411W75N?p=629\");\n            System.out.println(url.getAuthority());// www.bilibili.com\n            System.out.println(url.getDefaultPort());// 443\n            System.out.println(url.getFile());// /video/BV1Kb411W75N?p=629\n            System.out.println(url.getPath());// /video/BV1Kb411W75N\n            System.out.println(url.getProtocol());// https\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n**InetAddress类**\n```java\n        try {\n            InetAddress Aliyun = InetAddress.getByName(\"39.99.54.127\");\n            InetAddress localHost = InetAddress.getLocalHost();\n            InetAddress loopbackAddress = InetAddress.getLoopbackAddress();\n            boolean reachable = localHost.isReachable(10);\n            System.out.println(reachable);//true\n            System.out.println(localHost);//DESKTOP-V9EL4A5/192.168.0.193\n            System.out.println(Aliyun);///39.99.54.127\n            String canonicalHostName = Aliyun.getCanonicalHostName();\n            String hostName = Aliyun.getHostName();//39.99.54.127\n            System.out.println(hostName);//39.99.54.127\n            System.out.println(canonicalHostName);\n            System.out.println(loopbackAddress);//localhost/127.0.0.1\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n```\n**UDP网络编程**\n```java\n\t/**\n     * 接收端\n     */\n    @Test\n    public void UDPReciver() {\n        DatagramSocket server = null;\n        try {\n            server = new DatagramSocket(8900);\n            byte[] buf = new byte[1024];// <=8K\n            DatagramPacket datagramPacket = new DatagramPacket(buf, buf.length);\n            System.out.println(\"waiting...\");\n            while (true) {\n                server.receive(datagramPacket);\n                String string = new String(datagramPacket.getData(), 0, datagramPacket.getLength());\n                System.out.println(datagramPacket.getAddress() + \":\" + datagramPacket.getPort() + \"send: \" + string);\n            }\n        } catch (SocketException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            if (server != null)\n                server.close();\n        }\n\n    }\n\t/**\n     * 发送端\n     */\n    @Test\n    public void UDPSender() {\n        DatagramSocket client = null;\n        try {\n            client = new DatagramSocket();\n            String str = \"hello Quanwei\";\n            DatagramPacket datagramPacket = new DatagramPacket(str.getBytes(), str.getBytes().length,\n                    InetAddress.getLocalHost(), 8900);\n            System.out.println(\"start send...\");\n            client.send(datagramPacket);\n        } catch (SocketException | UnknownHostException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            if (client != null)\n                client.close();\n        }\n    }\n```\n**TCP网络编程**\n```java\npackage lang.net;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.InetAddress;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.net.UnknownHostException;\nimport java.time.LocalDateTime;\n\npublic class TCP {\n\n    public void clientResive() {\n        Socket socket = null;\n        InputStream inputStream = null;\n        ByteArrayOutputStream byteArrayOutputStream = null;\n        try {\n            // get from server\n            InetAddress ip = InetAddress.getByName(\"127.0.0.1\");\n            socket = new Socket(ip, 8899);\n            inputStream = socket.getInputStream();\n            byte[] buf = new byte[1024];\n            int len;\n            byteArrayOutputStream = new ByteArrayOutputStream();\n            while ((len = inputStream.read(buf)) != -1) {\n                byteArrayOutputStream.write(buf, 0, len);\n            }\n\n            System.out.println(LocalDateTime.now() + \" get from server: \" + byteArrayOutputStream);\n\n        } catch (UnknownHostException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            if (byteArrayOutputStream != null)\n                try {\n                    byteArrayOutputStream.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            if (inputStream != null)\n                try {\n                    inputStream.close();\n                } catch (IOException e1) {\n                    e1.printStackTrace();\n                }\n            if (socket != null)\n                try {\n                    socket.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n        }\n    }\n\n    public void clientSend() {\n        Socket socket = null;\n        InetAddress ip;\n        OutputStream outputStream = null;\n\n        try {\n            ip = InetAddress.getByName(\"127.0.0.1\");\n            socket = new Socket(ip, 8899);\n            // send to server\n            outputStream = socket.getOutputStream();\n            outputStream.write(\"权威 Quanwei\".getBytes());\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            if (outputStream != null)\n                try {\n                    outputStream.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            if (socket != null)\n                try {\n                    socket.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n        }\n    }\n\n    public void serverRevive() {\n        ServerSocket server = null;\n        Socket accept = null;\n        InputStream inputStream = null;\n        ByteArrayOutputStream byteArrayOutputStream = null;\n        FileOutputStream fileOutputStream = null;\n        try {\n            server = new ServerSocket(8899);\n            accept = server.accept();\n            // client input\n            inputStream = accept.getInputStream();\n            byteArrayOutputStream = new ByteArrayOutputStream();\n            byte[] buf = new byte[1024];\n            int len;\n            while ((len = inputStream.read(buf)) != -1) {\n                byteArrayOutputStream.write(buf, 0, len);\n            }\n            // 控制台输出\n            System.out.println(LocalDateTime.now() + \" get from client: \" + byteArrayOutputStream);\n\n            // 保存到本地\n            fileOutputStream = new FileOutputStream(new File(\"D:\\\\workspaceFolder\\\\CODE_JAVA\\\\lang\\\\net\\\\file\"));\n            fileOutputStream.write(byteArrayOutputStream.toByteArray());\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            if (byteArrayOutputStream != null)\n                try {\n                    byteArrayOutputStream.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            if (inputStream != null)\n                try {\n                    inputStream.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            if (accept != null)\n                try {\n                    accept.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            if (server != null)\n                try {\n                    server.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n        }\n    }\n\n    public void serverSend() {\n        ServerSocket server = null;\n        Socket accept = null;\n        OutputStream outputStream = null;\n        try {\n            server = new ServerSocket(8899);\n            accept = server.accept();\n            // server output\n            outputStream = accept.getOutputStream();\n            outputStream.write(\"接收成功\".getBytes());\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            if (outputStream != null)\n                try {\n                    outputStream.close();\n                } catch (IOException e1) {\n                    e1.printStackTrace();\n                }\n            if (accept != null)\n                try {\n                    accept.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            if (server != null)\n                try {\n                    server.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n        }\n    }\n\n    public static void main(String[] args) {\n        TCP tcp = new TCP();\n        new Thread(() -> {\n            tcp.serverSend(); // 先启动服务器\n        }).start();\n        // new Thread(() -> {\n        //     tcp.clientResive();\n        // }).start();\n        new Thread(() -> {\n            tcp.clientResive();\n        }).start();\n        // new Thread(() -> {\n        //     tcp.clientSend();\n        // }).start();\n    }\n}\n```\n## 6.2 NIO\n\n## 6.3 AIO\n\n# 七、多线程\n\t\n\t多线程是Java最基本的一种并发模型\n\n一个线程不能独立的存在，它必须是进程的一部分。\n进程：一个进程包括由操作系统分配的内存空间，包含一个或多个线程。\n\n创建多线程\n```java\npackage lang.thread;\n\nimport org.junit.jupiter.api.Test;\n\npublic class CreateThreadDemo {\n\n    @Test\n    public void testLambda() {\n        new Thread(() -> {\n            String name = Thread.currentThread().getName();\n            System.out.println(name);// Quanwei's thread\n        }, \"Quanwei's thread\").start();\n    }\n\n    @Test\n    public void testExtends() {\n        new Thread() {\n            public void run() {\n                String name = Thread.currentThread().getName();\n                System.out.println(\"Extends\" + name);// ExtendsThread-0 也可能不是0\n            }\n        }.start();\n        ;\n    }\n\n    @Test\n    public void testImplements() {\n        Runnable runnable = new Runnable() {\n            @Override\n            public void run() {\n                String name = Thread.currentThread().getName();\n                System.out.println(name);// Implements\n            }\n        };\n        new Thread(runnable,\"Implements\").start();\n    }\n\n    public static void main(String[] args) {\n        new CreateThreadDemo().testLambda();// main\n        System.out.println(Thread.currentThread().getName());\n    }\n\n}\n```\n多线程通信\n同步代码块\n\nsynchronized(同步监视器){//同步监视器可用: 类.class(保证唯一)\n//要同步的代码\n}\n\n不需要synchronized的操作 JVM规范定义了几种原子操作：\n1. 基本类型（long和double除外）赋值，例如：int n = m； 引用类型赋值，例如：List<String> list = anotherList。\n2. long和double是64位数据，JVM没有明确规定64位赋值操作是不是一个原子操作，不过在x64平台的JVM是把long和double的赋值作为原子操作实现的\n3. 单条原子操作不需要线程同步,多条需要\n\n```java\npublic class Ticket {\n    public static void main(String[] args) {\n        var w = new Windows1();\n        var w1 = new Thread(w, \"w1\");\n        var w2 = new Thread(w, \"w2\");\n        var w3 = new Thread(w, \"w3\");\n        w2.setPriority(Thread.MAX_PRIORITY);\n        w1.start();\n        w2.start();\n        w3.start();\n    }\n}\n\nclass Windows1 implements Runnable {\n    private int tickets = 50;\n    Object obj = new Object();\n\n    @Override\n    public void run() {\n        while (true) {\n            synchronized (Windows1.class) {\n                if (tickets > 0) {\n                    try {\n                        Thread.sleep(100);\n                    } catch (Exception e) {\n                    }\n                    System.out.println(Thread.currentThread().getName() + \" : \" + tickets);\n                    --tickets;\n                } else\n                    break;\n            }\n        }\n    }\n\n}\n\n```\n# 八、JDBC\n什么是JDBC?\n\n\tDBC是Java DataBase Connectivity的缩写，它是Java程序访问数据库的标准接口。\n\n使用Java程序访问数据库时，Java代码并不是直接通过TCP连接去访问数据库，而是通过JDBC接口来访问，而JDBC接口则通过JDBC驱动来实现真正对数据库的访问。\n\n我们在Java代码中如果要访问MySQL，那么必须编写代码操作JDBC接口。注意到JDBC接口是Java标准库自带的，所以可以直接编译。而具体的JDBC驱动是由数据库厂商提供的，。因此，访问某个具体的数据库，我们只需要引入该厂商提供的JDBC驱动，就可以通过JDBC接口来访问，这样保证了Java程序编写的是一套数据库访问代码，却可以访问各种不同的数据库，因为他们都提供了标准的JDBC驱动\n\n如何使用? (以连接PostgreSQL为例)\n```java\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.Properties;\nimport org.postgresql.Driver;\n\npublic class Postgresql {\n    private static String url = \"jdbc:postgresql://localhost:5432/quanwei\";\n    private static String user = \"postgres\";\n    private static String password = \"password\";\n    private static String driver = \"org.postgresql.Driver\";\n\n    public static void main(String[] args) throws SQLException {\n        // 1. 创建驱动程序类对象\n        Driver driver = new org.postgresql.Driver();\n\n        // 2. 设置用户名和密码\n        Properties prop = new Properties();\n        prop.setProperty(\"user\", user);\n        prop.setProperty(\"password\", password);\n\n        // 3. 连接数据库，返回连接对象\n        Connection conn = null;\n        try {\n            conn = driver.connect(url, prop);\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n        Statement s = conn.createStatement();\n        // 测试\n        ResultSet rs = s.executeQuery(\"select * from login\");\n        while(rs.next()){\n            String string = rs.getString(2);\n            System.out.println(string);\n        }\n    }\n}\n\n```\n# 九、GUI\n## 9.1 AWT\n即抽象窗口工具包\n```java\npackage lang.gui;\n\nimport java.awt.*;\nimport java.awt.event.*;\n\npublic class HelloAWT {\n    public static void main(String[] args) {\n        // 1.创建窗体\n        Frame frame = new Frame(\"AWT\");\n        // 2.创建标签组件\n        Label label = new Label(\"Hello Quanwei\");\n        // 3.设置相关属性\n        label.setBackground(Color.GREEN);\n        label.setSize(20, 10);\n        // 4.将组件添加到窗体上\n        frame.add(label);\n        // 5.设置窗体关闭事件\n        frame.addWindowListener(new WindowAdapter() {\n            @Override\n            public void windowClosing(WindowEvent e) {\n                System.exit(0);\n            }\n        });\n        // 6.设置窗体大小\n        frame.setSize(500, 200);\n        // 7.显示窗体\n        frame.setVisible(true);\n    }\n}\n```\n## 9.2 Swing\n```java\npackage lang.gui;\n\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.util.HashMap;\n\nimport javax.swing.*;\nimport javax.swing.event.*;\n\npublic class Main {\n\n    public void window1() {\n        // 1.创建窗体\n        JFrame frame = new JFrame(\"Swing\");\n        // 2.设置关闭事件\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        // 3.设置大小位置\n        frame.setSize(500, 500);\n        frame.setLocation(500, 200);\n\n        // 4.设置事件监听处理\n        frame.addMouseListener(new MouseInputAdapter() {\n            @Override\n            public void mouseClicked(MouseEvent e) {\n                int x = e.getX();\n                int y = e.getY();\n                frame.setTitle(\"点击坐标为(\" + x + \", \" + y + \")\");\n            }\n        });\n        // 5.显示窗体\n        frame.setVisible(true);\n    }\n}\n```\n# 总结\n比我想象的要多得多😂😂😂🤣🤣🤣\n","source":"_posts/Java-基础.md","raw":"---\ntitle:  Java 基础 \ndate:  2022-01-28 20:27:32\ntags: Java\n---\n\n\n# Java一学期复习 & 基础入门\n\n<font color=#999AAA >\n学了一学期Java了现在开始复习吧\n</font>\n\n<hr style=\" border:solid; width:100px; height:1px;\" color=#000000 size=1\">\n\n<!-- more -->\n\n# 一、Java开发入门\n## 1.1 Java概述\nJava 是由 Sun Microsystems 公司于 1995 年 5 月推出的 Java 面向对象程序设计语言和 Java 平台的总称。\n由 James Gosling和同事们共同研发，并在 1995 年正式推出。\n\n后来 Sun 公司被 Oracle （甲骨文）公司收购，Java 也随之成为 Oracle 公司的产品。\n\nJava分为三个体系：\n\t\n\tJavaSE (J2SE) (Java 2 Platform Standard Edition，java平台标准版）\n\tJavaEE (J2EE) (Java 2 Platform,Enterprise Edition，java平台企业版)\n\tJavaME (J2ME) (Java 2 Platform Micro Edition，java平台微型版)\n\n## 1.2 JDK, JRE, JVM\n**JDK(Java Development Kit)又称J2SDK(Java2 Software Development Kit)**\n\n是Java开发工具包，它提供了Java的开发环境(提供了编译器javac等工具，用于将java文件编译为class文件)和运行环境(提 供了JVM和Runtime辅助包，用于解析class文件使其得到运行)。如果你下载并安装了JDK，那么你不仅可以开发Java程序，也同时拥有了运行Java程序的平台。JDK是整个Java的核心，包括了Java运行环境(JRE)，一堆Java工具tools.jar和Java标准类库 (rt.jar)。\n\n**JRE(Java Runtime Enviroment)是Java的运行环境**\n\n面向Java程序的使用者，而不是开发者。如果你仅下载并安装了JRE，那么你的系统只能运行Java程序。JRE是运行Java程序所必须环境的集合，包含JVM标准实现及 Java核心类库。它包括Java虚拟机、Java平台核心类和支持文件。它不包含开发工具(编译器、调试器等)。\n\n**JVM（Java Virtual Machine）Java 虚拟机**\n\n是整个 Java 实现跨平台的最核心的部分，能够运行以 Java 语言写作的软件程序。\n\n# 二、Java编程基础\n## 2.1 基本语法\n```java\n/**\n * 文档注释\n * \n * (类注释)\n * \n * 文件First.java\n * \n * 主类名必修和文件名一致\n */\npublic class First {\n    static int sCnt = 0; // 类变量\n    int cnt = 0;// 实例变量\n    final int SIZE = 10; // const\n    static String name = \"Quanwei\";\n\n    public void printArray(int[] array) {\n        System.out.print(array);\n    }\n\n    public void addCnt() {\n        ++sCnt;\n        ++cnt;\n    }\n\n    public void showCnt() {\n        System.out.println(cnt);\n    }\n\n    public static void showName(boolean isOn) {\n        if (isOn)\n            System.out.println(name);\n    }\n\n    public static void convert() {\n        /* 英制到公制 */\n        int foot;\n        int inch;// 两个整数的运算结果一定是整数\n        Scanner in = new Scanner(System.in);// 惯用\n        foot = in.nextInt();\n        inch = in.nextInt();\n        System.out.println((foot + inch / 12f) * 0.3048);\n        in.close();\n    }\n\n    public static void main(String[] args) {\n        // showName(true);\n        // int age1 = 10;// 局部变量\n        convert();\n    }\n}\n```\n\n## 2.2 数据类型\n八种基本数据类型\n```java\npublic class Type {\n    /* 基本类型 默认值 */\n    byte y; // byte: 0\n    short s; // short: 0\n    int i; // int: 0\n    long l; // long: 0\n    double d; // double: 0.0\n    float f; // float: 0.0\n    boolean b; // boolean: false\n    char c; // char:\n\n    void show() {\n        System.out.println(\"byte: \" + y);\n        System.out.println(\"short: \" + s);\n        System.out.println(\"int: \" + i);\n        System.out.println(\"long: \" + l);\n        System.out.println(\"double: \" + d);\n        System.out.println(\"float: \" + f);\n        System.out.println(\"boolean: \" + b);\n        System.out.println(\"char: \" + c);\n    }\n\n    void assign() {\n        y = -1;\n        s = 1;\n        i = 2;\n        l = 3L;\n        d = 12.5;\n        f = 6.25F;\n        b = true;\n        c = 'c';\n    }\n\n    public static void main(String[] args) {\n    \t// type是引用类型\n        Type type = new Type();\n        type.assign();\n        type.show();\n    }\n}\n```\n\n## 2.3 运算符\n| 类型  | 运算符  |\n|--|--|\n| 成员访问运算符 | **.** |\n| 下标运算符 | [ ] |\n| 函数调用运算符 | ( ) |\n| 算数运算符 | * 乘&#8195; / 除 &#8195;% 取余&#8195; + &#8195;- |\n| 按位运算 | & 与&#8195;\\| 或 &#8195;~ 取反 &#8195;^ 异或&#8195; << 左移&#8195; >> 右移 &#8195;>>> 无符号右移 |\n| 逻辑运算 | &&#8195; \\|&#8195; !非&#8195; && 短路与&#8195; \\|\\| 短路非 |\n| 条件运算 | <&#8195;>&#8195; <= &#8195;>=&#8195; ==&#8195; != |\n| 条件运算符 | ? **:** |\n| 赋值运算符 | =&#8195; +=&#8195; -=&#8195; *= &#8195;/= &#8195;<<= &#8195;>>=&#8195; >>>=&#8195;&= &#8195;\\|=&#8195; ^=|\n## 2.4 选择结构\n```java\n        boolean condition=true;\n        // if-else\n        if (condition) {\n            //todo\n        }else{\n\t\t\t//todo\n        }\n        // if-else if-else\n        if (condition){\n            // todo\n        }else if(!condition){\n\t\t\t//todo\n        }else{\n\t\t\t//todo\n        }\n        //switch\n        switch (key) {\n            case value:\n                //todo\n                break;\n        \n            default:\n                break;\n        }\n```\n## 2.5 循环结构\n```java\n        boolean condition = true;\n        while (condition) {\n            // todo\n            break;//跳出循环\n        }\n\n        do {\n            // todo\n            continue;//进入下次循环\n        } while (condition);\n\n        for (int i = 0; i < 100; i++) {\n            // todo\n        }\n```\n# 三、面向对象\n<font color=#999AAA >\n面向对象的优点:<br>\n可重用性：代码重复使用，减少代码量，提高开发效率。<br>\n可扩展性：指新的功能可以很容易地加入到系统中来，便于软件的修改。<br>\n可管理性：能够将功能与数据结合，方便管理。\n</font>\n\n## 3.1 概念\nJava 是面向对象的编程语言，对象就是面向对象程序设计的核心。\n所谓对象就是真实世界中的实体，对象与实体是一一对应的，也就是说现实世界中每一个实体都是一个对象，它是一种具体的概念。对象有以下特点：\n\n\t 1. 对象具有属性和行为。\n\t 2. 对象具有变化的状态。 \n\t 3. 对象具有唯一性。 \n\t 4. 对象都是某个类别的实例。 \n\t 5. 一切皆为对象，真实世界中的所有事物都可以视为对象。\n\n## 3.2 特性(封装, 继承, 多态)\n### 3.2.1 封装\n为什么要封装?\n\n\t 1. 保护类中的信息，它可以阻止在外部定义的代码随意访问内部代码和数据。 \n\t 2. 隐藏细节信息，一些不需要程序员修改和使用的信息，用户不需要知道。\n\t 3. 有助于建立各个系统之间的松耦合关系，提高系统的独立性。当一个系统的实现方式发生变化时，只要它的接口不变，就不会影响其他系统的使用。\n\t 4. 提高软件的复用率，降低成本。每个系统都是一个相对独立的整体，可以在不同的环境中得到使用\n\n怎样封装? (将类中属性设为私有, 公开获取属性值的接口)\n```java\npublic class User {\n    /* 私有属性 */\n    private int id;\n    private String username;\n    private String passpord;\n\n    /**\n     * 构造函数\n     */\n    public User() {\n    }\n\n    /**\n     * @return the passpord\n     */\n    public String getPasspord() {\n        return passpord;\n    }\n\n    /**\n     * @param passpord the passpord to set\n     */\n    public void setPasspord(String passpord) {\n        this.passpord = passpord;\n    }\n\n    /**\n     * @return the id\n     */\n    public int getId() {\n        return id;\n    }\n\n    /**\n     * @param id the id to set\n     */\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    /**\n     * @return the username\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    /**\n     * @param username the username to set\n     */\n    public void setUsername(String username) {\n        this.username = username;\n    }\n        \n   @Override\n   public String toString() {\n       return \"id: \"+getId()+\"\\tusername: \"+getUsername()+\"\\tpassword: \"+getPasspord();\n   }\n}\n```\n### 访问修饰符: \n\n **default (即默认，什么也不写）:** \n\n\t在同一包内可见，不使用任何修饰符。\n使用对象：类、接口、变量、方法。\n\n**public :** \n\n\t对所有类可见。\n使用对象：类、接口、变量、方法 protected : 对同一包内的类和所有子类可见。使用对象：变量、方法。\n\n**private :** \n\n\t在同一类内可见。\n使用对象：变量、方法。 注意：不能修饰类（外部类）\n\n**protected :** \n\n\t对同一包内的类和所有子类可见。\n使用对象：变量、方法。 注意：不能修饰类（外部类）\n\n注意：\n\n父类中声明为 public 的方法在子类中也必须为 public。 父类中声明为 protected的方法在子类中要么声明为 protected，要么声明为 public，不能声明为 private 父类中声明为 private的方法，不能够被继承\n\n### 3.2.2 继承\n什么是继承?\n\n\t程序中的继承性是指子类拥有父类的全部特征和行为，这是类之间的一种关系。Java 只支持单继承。\n\n如何继承? (使用关键字 **extends**)\n```java\npublic class VipUser extends User {\n    public static void main(String[] args) {\n        VipUser vip = new VipUser();\n        vip.setUsername(\"Quanwei\");\n        System.out.println(vip.getUsername());// Quanwei\n    }\n}\n```\n### 3.2.3 多态\n什么是多态?\n\n\t面向对象的多态性，即“一个接口，多个方法”。\n\n为什么要使用多态?\n\n\t多态性体现在父类中定义的属性和方法被子类继承后，可以具有不同的属性或表现方式。\n\t多态性允许一个接口被多个同类使用，弥补了单继承的不足。\n\n如何使用多态? ( 重写父类方法)\n```java\npackage lang.aboutclass;\n\npublic class VipUser extends User {\n    private int vipNum;\n\n    @Override\n    public String toString() {\n        return super.toString() + \"\\tvipNum: \" + getVipNum();\n    }\n\n    /**\n     * @return the vipNum\n     */\n    public int getVipNum() {\n        return vipNum;\n    }\n\n    /**\n     * @param vipNum the vipNum to set\n     */\n    public void setVipNum(int vipNum) {\n        this.vipNum = vipNum;\n    }\n\n    public static void main(String[] args) {\n        User user = new VipUser();\n        user.setUsername(\"Quanwei\");\n        if (user instanceof VipUser vip) {\n            vip.setVipNum(5432);\n            System.out.println(vip.getUsername());// Quanwei\n            System.out.println(vip);\n        }\n    }\n}\n\n```\n### 非访问修饰符\n**static 修饰符**\n静态变量：\nstatic 关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量只有一份拷贝。 静态变量也被称为类变量。局部变量不能被声明为 static 变量。\n\n静态方法：\nstatic 关键字用来声明独立于对象的静态方法。静态方法不能使用类的非静态变量。静态方法从参数列表得到数据，然后计算这些数据。\n\n**final 修饰符**\nfinal 变量:\nfinal 表示\"最后的、最终的\"含义，变量一旦赋值后，不能被重新赋值。被 final 修饰的实例变量必须显式指定初始值。\nfinal 修饰符通常和 static 修饰符一起使用来创建类常量。\n\nfinal 方法:\n父类中的 final 方法可以被子类继承，但是不能被子类重写。\n\nfinal 类:\nfinal 类不能被继承，没有类能够继承 final 类的任何特性。\n\n**abstract 修饰符**\n抽象类：\n抽象类不能用来实例化对象，声明抽象类的唯一目的是为了将来对该类进行扩充。\n一个类不能同时被 abstract 和 final 修饰。如果一个类包含抽象方法，那么该类一定要声明为抽象类，否则将出现编译错误。\n抽象类可以包含抽象方法和非抽象方法。\n\n抽象方法\n抽象方法是一种没有任何实现的方法，该方法的的具体实现由子类提供。\n抽象方法不能被声明成 final 和 static。\n任何继承抽象类的子类必须实现父类的所有抽象方法，除非该子类也是抽象类。\n如果一个类包含若干个抽象方法，那么该类必须声明为抽象类。抽象类可以不包含抽象方法。\n抽象方法的声明以分号结尾，例如：public abstract sample();。\n\n## 3.3 特殊类\n### 3.3.1 抽象类 ( Abstract Class)\n\n在面向对象的概念中，所有的对象都是通过类来描绘的，但是反过来，并不是所有的类都是用来描绘对象的，如果一个类中没有包含足够的信息来描绘一个具体的对象，这样的类就是抽象类。\n抽象类不能用于实例化对象\n\n如何定义? (使用**abstract**关键字)\n```java\n// 抽象类\npublic abstract class Human {\n    String name;\n    int age;\n    String language;\n\n    // 抽象方法\n    public abstract void say();\n}\n```\n\n如何使用? (**继承**)\n```java\nclass Chinese extends Human {\n    Chinese(String name, String language) {\n        this.name = name;\n        this.language = language;\n    }\n\n    @Override\n    public void say() {\n        System.out.println(name + \" says \" + language);\n    }\n}\n```\n### 3.3.2 接口 (Interface)\n是一个抽象类型，是抽象方法的集合。一个类通过继承接口的方式，从而来继承接口的抽象方法。\n接口并不是类，类描述对象的属性和方法。接口则包含类要实现的方法。\n除非实现接口的类是抽象类，否则该类要定义接口中的所有方法。\n接口无法被实例化，但是可以被实现。一个实现接口的类，必须实现接口内所描述的所有方法。\n\n如何定义? (使用interface关键字)\n```java\n/**\n 1. 可以跑的接口 :)\n */\npublic interface Runnable {\n    // 跑的方法\n    void run();\n}\n```\n如何使用? (使用implements关键字实现接口)\n```java\nclass Chinese extends Human implements Runnable{\n    Chinese(String name, String language) {\n        this.name = name;\n        this.language = language;\n    }\n\n    @Override\n    public void say() {\n        System.out.println(name + \" says \" + language);\n\n    }\n    /**\n     * 实现接口须重写run方法\n     */\n    @Override\n    public void run() {\n       System.out.println(\"I am Running...\");        \n    }\n}\n```\n### 3.3.3 内部类 ( Inner Class )\nJava 一个类中可以嵌套另外一个类, 即内部类\n如何定义?\n```java\nclass OuterClass {\n    String infomation = \"Outer class\";\n\n    class InnerClass {\n        String information = \"Inner class\";\n\n        class InsiderClass {\n            String information = \"Insider class\";\n\n        }\n    }\n}\n```\n如何使用? ( 外部类.new 内部类名() )\n```java\npackage lang.aboutclass;\n\nimport lang.aboutclass.OuterClass.InnerClass;\nimport lang.aboutclass.OuterClass.InnerClass.InsiderClass;\n\nclass Main {\n    public static void main(String[] args) {\n        OuterClass outer = new OuterClass();\n        InnerClass inner = outer.new InnerClass();\n        InsiderClass insider = inner.new InsiderClass();\n        System.out.println(outer.infomation);// Outer class\n        System.out.println(inner.information);// Inner class\n        System.out.println(insider.information);// Insider class\n    }\n}\n```\n### 3.3.4 枚举类 ( Enum )\nJava 枚举是一个特殊的类，一般表示一组常量\n如何定义? (使用 enum 关键字来定义，各个常量使用逗号 **,** 来分割)\n```java\npublic enum Weekday {\n    SUN, MON, TUE, WED, THU, FRI, SAT;\n}\n```\n如何使用? (枚举类名.常量)\n```java\nSystem.out.println(Weekday.FRI);//FRI\n```\n\n### 3.3.6 记录类\n```java\n// 定义一个Point类，有x、y两个变量，同时它是一个不变类\npublic record Point(int x, int y) {\n}\n```\n相当于:\n```java\npublic final class Point extends Record {\n\nprivate final int x;\n\nprivate final int y;\n\npublic Point(int x, int y) { this.x = x; this.y = y; }\n\npublic int x() { return this.x; }\n\npublic int y() { return this.y; }\n\npublic String toString() { return String.format(\"Point[x=%s, y=%s]\", x, y); }\n\npublic boolean equals(Object o) { //... } public int hashCode() { //... } }\n```\n也可以在里面写构造函数\n```java\npublic record Point(int x, int y) {\n    // Compact Constructor，它的目的是让我们编写检查逻辑 \n    public Point {\n        if (x < 0 || y < 0) {\n            throw new IllegalArgumentException();\n        }\n    }\n}\n```\n\n### 3.3.6 注解类（Annotation）\nJava 语言中的类、方法、变量、参数和包等都可以被标注。\n和 Javadoc 不同，Java 标注可以通过反射获取标注内容。在编译器生成类文件时，标注可以被嵌入到字节码中。Java 虚拟机可以保留标注内容，在运行时可以获取到标注内容 。 当然它也支持自定义 Java 标注。\n\n如何定义? ( 使用@interface关键字 )\n```java\npackage lang.annotation;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n// 3.用元注解配置注解 \n// 必须设置@Target和@Retention，@Retention一般设置为RUNTIME，因为我们自定义的注解通常要求在运行期读取\n@Target(ElementType.LOCAL_VARIABLE)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface Report {// 1.用@interface定义注解\n    // 2.添加默认参数\n    int type() default 0;\n\n    String level() default \"info\";\n\n    String value() default \"\";\n    // 把最常用的参数定义为value()，推荐所有参数都尽量设置默认值\n}\n// 注解定义后也是一种class，所有的注解都继承自java.lang.annotation.Annotation，因此，读取注解，需要使用反射API\n```\n**元注解（meta annotation）** 有一些注解可以修饰其他注解，这些注解就称为元注解\n\n最常用的元注解是@Target。\n使用@Target可以定义Annotation能够被应用于源码的哪些位置：\n类或接口：ElementType.TYPE；\n字段：ElementType.FIELD；\n方法：ElementType.METHOD；\n构造方法：ElementType.CONSTRUCTOR；\n方法参数：ElementType.PARAMETER\n\n另一个重要的元注解@Retention定义了Annotation的生命周期：\n仅编译期：RetentionPolicy.SOURCE；\n仅class文件：RetentionPolicy.CLASS； (默认)\n运行期：RetentionPolicy.RUNTIME\n\n如何使用? ( 通过反射获取注解信息 )\n```java\n@MyAnnotation(value = 20, name = \"Quanwei\")\npublic class MyAnnoTest {\n\n    public static void main(String[] args) {\n        MyAnnotation anno = MyAnnoTest.class.getDeclaredAnnotation(MyAnnotation.class);\n        System.out.println(anno.name());// Quanwei\n        System.out.println(anno.value());// 20\n    }\n}\n```\n在注解的定义中使用注解:\n```java\n@Target({ ElementType.TYPE, ElementType.FIELD, ElementType.METHOD })//注解使用位置\n@Retention(RetentionPolicy.RUNTIME)// 保留时间\npublic @interface MyAnnotation {\n    int value() default 12;\n\n    String name() default \"quanwei\";\n\n    Report report()default @Report ;\n}\n```\n\n## 3.4 反射 Reflection\n是什么?\n\n\t反射就是一种能在程序 运行 时获取类、接口、方法和变量等信息的能力。\n有什么用?\n\t\n\t解决在运行期，对某个实例一无所知的情况下，调用其方法\n如何使用? (类名.class)\n```java\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Class<Student> stdClass = Student.class;\n        // 获取public方法getScore，参数为String:\n        System.out.println(stdClass.getMethod(\"getScore\", String.class));\n        // 获取继承的public方法getName，无参数:\n        System.out.println(stdClass.getMethod(\"getName\"));\n        // 获取private方法getGrade，参数为int:\n        System.out.println(stdClass.getDeclaredMethod(\"getGrade\", int.class));\n    }\n}\n\nclass Student extends Person {\n    public int getScore(String type) {\n        return 99;\n    }\n\t@SuppressWarnings(\"unused\")\n    private int getGrade(int year) {\n        return 1;\n    }\n}\n\nclass Person {\n    public String getName() {\n        return \"Person\";\n    }\n}\n\n```\n还有多种情况,[参考](https://www.oracle.com/technical-resources/articles/java/javareflection.html)\n## 3.5 lambda表达式\nlambda表达式也即**匿名函数**, 允许把函数作为一个方法的参数（函数作为参数传递进方法中）\n在java中lambda表达式本质上是一个对象\n\n基本的语法像这样:\n\t\n\t(parameters) ->{ statements; }\n\n基本使用\n```java\nnew Thread(() -> {\n            try {\n                Thread.sleep(1000);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }).start();\n```\n## 3.6 异常\n异常主要指程序运行的时候，会发生各种错误, 不包括编译时发生的\n\n异常可以捕获:\n```java\n\t\ttry{\n            int i=10/0;\n        }catch(Exception e){\n            e.printStackTrace();\n        }finally{\n           // todo\n        }\n```\n也可以抛出\n```java\t\n\t// 自动抛出\n\t public static void test() throws IOException {\n        testException(10,0);\n    }\n\n\t// 手动抛出\n    public static void testException(int a, int b) throws RuntimeException {\n        if (b > 0) {\n            System.out.println(a / b);\n        } else {\n            throw new RuntimeException(\"除数不能为零\");\n        }\n    }\n    \n```\n还可以自定义异常 (继承Exception类)\n```java\npublic class MyException extends Exception {\n    public MyException(String msg) {\n        super(msg+\" from MyException\");\n    }\n}\n```\n# 四、常用类\n## 4.1 数组 & Arrays\n数组的定义和使用\n```java\n        // 1.创建array对象\n        int[] array=new int[10];\n        // 赋值\n        for (int i = 0; i < array.length; i++) {\n            array[i]=i+1;\n        }\n        // 使用\n        for (int i : array) {\n            System.out.print(i+\" \");\n        }\n        // 其他\n        int[] a2={1,2,2,3,4};\n        String[] strings={\"asd\",\"sdas\"};\n```\nArrays 类是一个工具类，其中包含了数组操作的很多方法。 Arrays 类里均为 static 修饰的方法可以直接通过类名调用。\n例如使用Arrays对数组排序\n```java\n        // 1.创建array对象, 并赋值\n        String[] strings = { \"hello\", \"thank\", \"you\", \"are\", \"ok\" };\n        // 顺序\n        Arrays.sort(strings);\n        System.out.println(Arrays.toString(strings)); // [are, hello, ok, thank, you]\n        // 逆序\n        Arrays.sort(strings, Comparator.reverseOrder());\n        System.out.println(Arrays.toString(strings)); // [you, thank, ok, hello, are]\n```\n## 4.2 String, StringBuffer和StringBuilder\n### 4.2.1 String\n String 是 final 修饰的，无法被继承。且 String 不是 Java 的基本数据类型\n通过new创建的String对象,和直接赋值的String对象稍有不同:\n```java\n/**\n * TestString\n * \n * 可以和八种基本数据类型做运算\n */\npublic class TestString {\n\n    public static void main(String[] args) {\n\n    }\n    public void testStringJoint() {\n        // 字面量定义,s1指向方法区中的静态常量池\n        String s1 = \"Quanwei\";\n        String s2 = \"Quanwei\";\n        // s2->堆空间地址值\n        String s3 = new String(\"Quanwei\");\n        System.out.println(\"s1 == s2: \" + (s1 == s2)); // true\n        System.out.println(\"s1 == s3: \" + (s1 == s3)); // false\n        System.out.println(\"s1.equals(s2): \" + (s1.equals(s2)));// true\n        System.out.println(\"s1.equals(s3): \" + (s1.equals(s3)));// true\n\n        String s4 = \"TangQuanwei\";\n        String s5 = \"Tang\" + \"Quanwei\"; // 常量与常量拼接在静态常量池\n        System.out.println(\"s4 == s5: \" + (s4 == s5)); // true\n        String s6 = \"Tang\" + s1; // 常量与引用拼接->堆空间地址值\n        System.out.println(\"s4 == s6: \" + (s4 == s6)); // false\n    }\n\n \n    public void testToCharArray() {\n        String s1 = \"Quanwei\";\n        char[] charArray = s1.toCharArray();\n        System.out.println(Arrays.toString(charArray));\n\n        String s2 = \"权威\";\n        char[] charArray2 = s2.toCharArray();\n        System.out.println(Arrays.toString(charArray2));\n\n    }\n\n  \n    public void testGetBytes() {\n        String s1 = \"Quanwei\";\n        byte[] bytes = s1.getBytes();\n        System.out.println(Arrays.toString(bytes));\n\n        String s2 = \"权威\";\n        byte[] bytes2 = s2.getBytes();// 默认utf-8\n        System.out.println(Arrays.toString(bytes2));\n\n        try {\n            byte[] bytes3 = s2.getBytes(\"gbk\");\n            System.out.println(Arrays.toString(bytes3));\n\n            byte[] bytes4 = s2.getBytes(\"utf-8\");\n            System.out.println(Arrays.toString(bytes4));\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n String 是不可变的，而 StringBuffer 和 StringBuilder 是可变类\n \n ### 4.2.2 StringBuffer和StringBuilder\n 二者区别就是:\n | StringBuffer | StringBuilder |\n |--|--|\n|线程安全  |\t非线程安全 |\n|同步\t|非同步|\n|慢|\t快|\n所以在非多线程环境中的字符串操作，我们一般用 StringBuilder , 因为二者的方法都是差不多的\n它们为字符串操作提供了 append、insert、delete 和 substring 方法\n```java\n    public void testStringBuilder() {\n        var sb1 = new StringBuilder(\"Tang\");\n        var sb2 = new StringBuilder(\"t\");\n        System.out.println(sb1.capacity());// 20\n        System.out.println(sb1.length());// 4\n        sb1.ensureCapacity(40);\n        System.out.println(sb1.capacity());// 42\n        System.out.println(sb2.capacity());// 17\n        sb1.append(\"Quawnei\");\n        System.out.println(sb1);//TangQuawnei\n        sb1.insert(4, \"->\");\n        System.out.println(sb1);//Tang->Quawnei\n        sb1.delete(0, 4);\n        System.out.println(sb1);//->Quawnei\n    }\n```\n\n## 4.3 System类和Runtime类\n### 4.3.1 静态字段\nSystem 类有 3 个静态成员变量，分别是 PrintStream **out**、InputStream **in** 和 PrintStream **err**\nout跟err的区别大概是:\nSystem.out.println可能会被缓冲,而System.err.println不会，由于err不需要缓冲即可输出\n\t\n\tPrintStream out\n```java\nSystem.out.println(\"quanwei);\n```\n\tInputStream in \n```java\n    try {\n        int read = System.in.read();// 读一个字符的ascii码\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n```\n### 4.3.2 静态方法\n```java\npublic static void main(String[] args) {\n        // 获取系统属性\n        String jversion = System.getProperty(\"java.version\");\n        String oName = System.getProperty(\"os.name\");\n        String user = System.getProperty(\"user.name\");\n        System.out.println(\"Java 运行时环境版本：\" + jversion);// Java 运行时环境版本：17.0.1\n        System.out.println(\"当前操作系统是：\" + oName);// 当前操作系统是：Windows 10\n        System.out.println(\"当前用户是：\" + user);// 当前用户是：QUANWEI\n\n        // 时间的格式为当前计算机时间与 GMT 时间（格林尼治时间）\n        // 1970 年 1 月 1 日 0 时 0 分 0 秒所差的毫秒数\n        Date date = new Date(System.currentTimeMillis());//\n        System.out.println(date); // Mon Jan 10 20:20:43 CST 2022\n\n        int[] a = { 1, 2, 3, 4, 5 };\n        int[] b = { 2, 3, 4, 5, 6 };\n        // 合并数组\n        int[] marge = marge(a, b);\n        System.out.println(Arrays.toString(marge));// [1, 2, 3, 4, 5, 2, 3, 4, 5, 6]\n\n        // 请求系统进行垃圾回收\n        System.gc();\n\n        // 终止当前正在运行的 Java 虚拟机\n        System.exit(0);\n    }\n\n    public static int[] marge(int[] a, int[] b) {\n        int[] ret = new int[a.length + b.length];\n        System.arraycopy(a, 0, ret, 0, a.length);\n        System.arraycopy(b, 0, ret, a.length, b.length);\n        return ret;\n    }\n```\n## 4.4 包装类\n| 基本类 | 包装类 |\n|-|-|-|\n|byte| Byte|\n|short | Short|\n|int | Integer|\n|long | Long|\n|char | Character|\n|float| Float|\n|double | Double|\n|boolean | Boolean|\n常用方法 :\n\t\t**包装类名.parseXxx(String );**\n\t\t**包装类名.valueOf(String );**\n\t\t**包装类名.toString();**\n## 4.5 Math和Random\nMath类就是用来进行数学计算的，它提供了大量的静态方法来便于我们实现数学计算\n比如:\n```java\n// 数学常量：\ndouble pi = Math.PI; // 3.14159...\ndouble e = Math.E; // 2.7182818...\n\n// 求绝对值：\nMath.abs(-100); // 100\nMath.abs(-7.8); // 7.8\n\n// 取最大或最小值：\n\nMath.max(100, 99); // 100\nMath.min(1.2, 2.3); // 1.2\n\n// 计算xy次方：\nMath.pow(2, 10); // 2的10次方=1024\n\n// 计算√x：\nMath.sqrt(2); // 1.414...\n\n// 计算ex次方：\nMath.exp(2); // 7.389...\n\n// 计算以e为底的对数：\nMath.log(4); // 1.386...\n\n// 计算以10为底的对数：\nMath.log10(100); // 2\n\n// 三角函数：\nMath.sin(3.14); // 0.00159...\nMath.cos(3.14); // -0.9999...\nMath.tan(3.14); // -0.0015...\nMath.asin(1.0); // 1.57079...\nMath.acos(1.0); // 0.0\n```\n\n## 4.6 BigInteger类和BigDecimal类\n<font color=#999AAA >\n在Java中，由CPU原生提供的整型最大范围是64位long型整数。使用long型整数可以直接通过CPU指令进行计算, 如果我们使用的整数范围超过了long型就只能用软件来模拟一个大整数。java.math.BigInteger就是用来表示任意大小的整数。BigInteger内部用一个int[]数组来模拟一个非常大的整数\n</font>\n<br />\n<br />\n由于Java不支持运算符重载, 在对BigInteger做运算的时候，只能使用对象的方法，例如，\n\n```java\nBigInteger i1 = new BigInteger(\"1234567890\");\nBigInteger i2 = new BigInteger(\"12345678901234567890\");\nBigInteger sum = i1.add(i2); // 12345678902469135780\n```\nBigDecimal和BigInteger类似，可以用来表示一个任意大小且精度完全准确的浮点数\n```java\nBigDecimal d1 = new BigDecimal(\"9876543210.0123456789\");\nBigDecimal d2 = new BigDecimal(\"123.45000000000000000\");\nSystem.out.println(d1.scale()); // 10,两位小数\nSystem.out.println(d1.add(d2));\nSystem.out.println(d1.subtract(d2));\nSystem.out.println(d1.multiply(d2));\n// 无法除尽时，就必须指定精度以及如何进行截断\nSystem.out.println(d1.divide(d2, 10, RoundingMode.HALF_UP));// 四舍五入\n```\n## 4.7 时间和日期类\nJDK8以前\n```java\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\n/**\n * JDK 8 以前 时间日期API\n * \n * 1.System.currentTimeMillis()\n * \n * 2.java.util.Calendar;  java.util.Date;\n * \n * 3.SimpleDateFormat\n * \n * 4.Calender\n */\npublic class TestBefer8 {\n    public void testTime() {\n        // 获取当前时间的毫秒数时间戳\n        System.out.println(\"TestDateTime.testTime()\");\n        long currentTimeMillis = System.currentTimeMillis();\n        System.out.println(currentTimeMillis);\n    }\n    public void testDate() {\n        // java.util.Date\n        Date d1 = new Date();\n        System.out.println(d1);\n        System.out.println(d1.getTime());// 毫秒数时间戳\n\n        var d2 = new Date(1631504736660L);\n        System.out.println(d2);\n\n        // java.sql.Date 是 java.util.Date 的子类\n        var d3 = new java.sql.Date(0L);\n        System.out.println(d3);\n\n        // java.sql.Date -> java.util.Date\n        Date d4 = (Date) d3;\n        System.out.println(d4);\n\n        // java.util.Date -> java.sql.Date\n        java.sql.Date d5 = new java.sql.Date(d4.getTime());\n        System.out.println(d5);\n    }\n\n    /**\n     * SimpleDateFormat对Date类的格式化和解析\n     * \n     * 1.格式化: 日期 --> 字符串\n     * \n     * 2.解析:格式化的逆过程: 字符串 --> 日期\n     */\n    public void testFormat() {\n        System.out.println(\"TestDateTime.testFormat()\");\n\n        // 格式化\n        SimpleDateFormat sdf = new SimpleDateFormat();\n        Date date = new Date();\n        String format = sdf.format(date);\n        System.out.println(format);\n\n        // 指定格式\n        final String parttern = \"yyyy-MM-dd hh:mm:ss:SSS z\";\n        SimpleDateFormat sdf2 = new SimpleDateFormat(parttern);\n        System.out.println(sdf2.format(date));\n\n        try {\n            // 解析\n            String str = \"2021/9/13 下午2:58\";\n            String s2 = \"2002-10-09 08:31:12:234 CST\";\n            Date d1 = sdf.parse(str);\n            System.out.println(d1);\n        } catch (ParseException e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * Calender 抽象基类\n     * \n     * 主要用于完成日期字段之间相互操作的功能\n     * \n     */\n    public void testCalender() {\n        // 1.调用静态方法获取实例\n        Calendar cal = Calendar.getInstance();\n        Calendar instance2 = Calendar.getInstance();\n        System.out.println(cal.getClass());// class java.util.GregorianCalendar\n        System.out.println(cal.equals(instance2));//false\n        \n        //get\n        System.out.println(cal.get(Calendar.DAY_OF_MONTH));\n        System.out.println(cal.get(Calendar.DAY_OF_YEAR));\n    }\n}\n```\nJDK8以后\n```java\nimport java.time.Instant;\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.time.LocalTime;\nimport java.time.OffsetDateTime;\nimport java.time.ZoneOffset;\nimport java.time.format.DateTimeFormatter;\nimport java.time.format.FormatStyle;\nimport java.time.temporal.TemporalAccessor;\n/**\n * JDK 8 中的时间日期API\n * \n * 1.LocalDate\n * \n * 2.LocalTime\n * \n * 3.LocalDateTime\n * \n * 4.Instant 机器时间\n * \n * 5.DateTimeFormater\n */\npublic class TestIn8 {\n    public void testDate() {\n        LocalDate now = LocalDate.now();\n        System.out.println(now);\n    }\n\n    public void testTime() {\n        LocalTime now = LocalTime.now();\n        System.out.println(now);\n    }\n\n    public void testLocalDateTime() {\n        // now 获取当前的日期和时间\n        LocalDateTime now = LocalDateTime.now();\n        System.out.println(now);\n\n        // of 获取指定的日期时间 没有偏移量\n        LocalDateTime of = LocalDateTime.of(2002, 10, 9, 16, 34, 35);\n        System.out.println(of);\n\n        // getXxx\n        System.out.println(now.getDayOfMonth());\n        System.out.println(now.getDayOfYear());\n        System.out.println(now.getChronology());\n    }\n\n    public void testInstant() {\n        // now() 获取本初子午线对应的标准时间\n        Instant now = Instant.now();\n        System.out.println(now);// 慢八个小时\n\n        // 添加时间偏移量\n        OffsetDateTime offSet = now.atOffset(ZoneOffset.ofHours(8));\n        System.out.println(offSet);\n\n        // 1970(UTC)->现在 经过的毫秒数\n        long epochMilli = now.toEpochMilli();\n        System.out.println(epochMilli);// 1631521135573\n\n        // 毫秒数->instant\n        Instant ofEpochMilli = Instant.ofEpochMilli(1631521135573L);\n        System.out.println(ofEpochMilli);\n    }\n\n    public void testDateTimeFormater() {\n        LocalDateTime now = LocalDateTime.now();\n\n        // 格式化1\n        DateTimeFormatter formatter = DateTimeFormatter.ISO_LOCAL_DATE_TIME;\n        String format = formatter.format(now);\n        System.out.println(format); // 2021-09-13T16:56:14.4738222\n\n        // 解析\n        TemporalAccessor parse = formatter.parse(\"2021-09-13T16:56:14.4738222\");\n        System.out.println(parse);\n\n        // 格式化2: 本地格式化\n        DateTimeFormatter formatter2 = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM);\n        String format2 = formatter2.format(now);\n        System.out.println(format2);\n\n        // 格式化3: 自定义格式化\n        final String pattern=\"GG yyyy年MM月dd日 EE a hh时mm分ss秒\";\n        DateTimeFormatter formatter3 = DateTimeFormatter.ofPattern(pattern);\n        String format3 = formatter3.format(LocalDateTime.now());\n        System.out.println(format3);\n    }\n}\n\n```\n# 五、集合\n<font color=#999AAA >\nJava Collection Framework  (JCF) Java集合框架是一组提供现成架构的类和接口。为了实现一个新特性或一个类，不需要定义一个框架。然而，一个最佳的面向对象设计总是包含一个具有类集合的框架，这样所有的类都执行相同类型的任务。\n</font>\n\n## 5.1 Collection和Collections\nCollections\n```java\n    public static void main(String[] args) {\n        List<String> ls = new ArrayList<>();\n        ls.add(\"reverse\");\n        ls.add(\"shuffle\");\n        ls.add(\"sort\");\n        ls.add(\"swap\");\n        ls.add(\"rotate\");\n        System.out.println(ls);// [reverse, shuffle, sort, swap, rotate]\n\n        // 反转\n        Collections.reverse(ls);\n        System.out.println(ls);// [rotate, swap, sort, shuffle, reverse]\n\n        // 按升序进行排序\n        Collections.sort(ls);\n        System.out.println(ls);// [reverse, rotate, shuffle, sort, swap]\n\n        // 根据指定 Comparator排序\n        Collections.sort(ls, new Comparator<String>() {\n\n            @Override\n            public int compare(String o1, String o2) {\n                return -o1.compareTo(o2);\n            }\n\n        });\n        System.out.println(ls);// [swap, sort, shuffle, rotate, reverse]\n\n        // 按下标交换\n        Collections.swap(ls, 0, ls.size() - 1);\n        System.out.println(ls);// [reverse, sort, shuffle, rotate, swap]\n\n        // 将 list 集合的后 distance 个元素整体移到前面\n        Collections.rotate(ls, 2);\n        System.out.println(ls);// [rotate, swap, reverse, sort, shuffle]\n\n        // 将 list 集合的前 distance 个元素整体移到后面\n        Collections.rotate(ls, -3);\n        System.out.println(ls);// [sort, shuffle, rotate, swap, reverse]\n\n        // 返回指定集合中指定元素的出现次数\n        ls.add(\"sort\");\n        int frequency = Collections.frequency(ls, \"sort\");\n        System.out.println(frequency);// 2\n\n        // 将指定集合中的所有元素复制到另一个集合中,目标集合的长度至少和源集合的长度相同\n        List<String> l2 = new LinkedList<>();// ArrayList -> LinkedList\n        l2.add(\"reverse1\");\n        l2.add(\"shuffle1\");\n        l2.add(\"sort1\");\n        l2.add(\"swap1\");\n        l2.add(\"rotate1\");\n        Collections.copy(ls, l2);\n        System.out.println(ls);// [reverse1, shuffle1, sort1, swap1, rotate1, sort]\n\n        // LinkedList -> ArrayList\n        // ! IndexOutOfBoundsException Source does not fit in dest\n        Collections.copy(l2, ls);\n        System.out.println(ls);\n\t}\n\n```\n## 5.2 常用类, 接口\n```java\n    /**\n     * 列表\n     */\n    public void testList() {\n        // <> 中的类型只能是引用类型\n        List<Integer> al = new ArrayList<>();\n        List<Integer> ll = new LinkedList<>();\n    }\n\n    /**\n     * 队列\n     */\n\n    public void testQueue() {\n        Queue<Integer> ad = new ArrayDeque<>();\n        Queue<Integer> ll = new LinkedList<>();\n        Queue<Integer> pq = new PriorityQueue<>();\n\n    }\n\n    /**\n     * 集合\n     */\n    public void testSet() {\n        Set<Object> hs = new HashSet<>();\n        Set<Object> ts = new TreeSet<>();\n\n    }\n\n    /**\n     * 映射\n     */\n    public void testMap() {\n        Map<Integer, String> hm = new HashMap<>();\n        Map<Integer, String> tm = new TreeMap<>();\n    }\n ```\n## 5.5 Stream API\n在 Java 8 中引入的 Stream API 用于处理对象的集合。流是支持各种方法的对象序列，这些方法可以流水线化以产生所需的结果。\nJava 流的特点是:\n\n流不是数据结构，而是从集合、数组或 I/O 通道获取输入。\n流不会更改原始数据结构，它们仅根据流水线方法提供结果。\n每个中间操作都被延迟执行并返回一个流作为结果，因此可以对各种中间操作进行流水线化。终端操作标记流的结束并返回结果。\n```java\n    public void testStream() {\n        // 创建\n        List<Integer> number = Arrays.asList(2, 3, 4, 5);\n\n        // 使用map将number的元素平方\n        List<Integer> square = number.stream().map(x -> x * x).collect(Collectors.toList());\n        System.out.println(square);// [4, 9, 16, 25]\n\n        // 创建\n        List<String> names = Arrays.asList(\"Reflection\", \"Collection\", \"Stream\");\n\n        // 过滤\n        List<String> result = names.stream().filter(s -> s.startsWith(\"S\")).collect(Collectors.toList());\n        System.out.println(result);// [Stream]\n\n        // 排序\n        List<String> show = names.stream().sorted().collect(Collectors.toList());\n        System.out.println(show);// [Collection, Reflection, Stream]\n\n        // 创建\n        List<Integer> numbers = Arrays.asList(2, 3, 4, 5, 2);\n\n        // 收集\n        Set<Integer> squareSet = numbers.stream().map(x -> x * x).collect(Collectors.toSet());\n        System.out.println(squareSet);// [16, 4, 9, 25]\n\n        // forEach\n        number.stream().map(x -> x * x).forEach(y -> System.out.print(y + \" \"));// 4 9 16 25\n\n        // reduce\n        int even = number.stream().filter(x -> x % 2 == 0).reduce(0, (ans, i) -> ans + i);// 0+2+4\n\n        System.out.println(even);// 6\n    }\n```\n## 5.6 泛型\n<font color=#999AAA >\n泛型意味着参数化类型。这个想法是允许类型（整数、字符串等，以及用户定义的类型）作为方法、类和接口的参数。使用泛型，可以创建使用不同数据类型的类。\n对参数化类型进行操作的实体（例如类、接口或方法）称为泛型实体。\n</font>\n\n与 C++ 一样，我们使用 <> 来指定泛型类创建中的参数类型。要创建泛型类的对象\n```java\nclass Pair<T, U> {\n    private T first;\n    private U second;\n\n    public Pair(T first, U second) {\n        this.setFirst(first);\n        this.setSecond(second);\n    }\n\n    /**\n     * @return the second\n     */\n    public U getSecond() {\n        return second;\n    }\n\n    /**\n     * @param second the second to set\n     */\n    public void setSecond(U second) {\n        this.second = second;\n    }\n\n    /**\n     * @return the first\n     */\n    public T getFirst() {\n        return first;\n    }\n\n    /**\n     * @param first the first to set\n     */\n    public void setFirst(T first) {\n        this.first = first;\n    }\n\n    @Override\n    public String toString() {\n        return \"( \" + first + \", \" + second + \")\";\n    }\n}\n```\n# 六、I/O流\n<font color=#999AAA >\nIO是指Input/Output，即以内存为中心的输入和输出。\n</font>\n\n## 6.1 BIO\n<font color=#999AAA >\nBIO即 Blocking Input/Output, 即阻塞的I/O\n</font>\n\n### 6.1.1 Flie\n用于文件和目录的创建、文件的查找和文件的删除等\n```java\npackage lang.io;\n\nimport java.io.File;\nimport java.io.IOException;\n\nimport org.junit.jupiter.api.Test;\n\n\n/**\n * File表示一个文件或一个文件夹 在java.io包下\n */\npublic class TestFile {\n    // 构造一个File对象，并不会导致任何磁盘操作\n    // 文件夹\n    File floder = new File(\"D:\\\\workspaceFolder\\\\CODE_JAVA\");\n    // 文件\n    File file = new File(\"D:\\\\workspaceFolder\\\\CODE_JAVA\\\\a.txt\");\n\n    @Test\n    public void testGet() {\n        // 返回绝对路径，\n        System.out.println(file);\n        // 返回构造方法传入的路径，\n        System.out.println(file.getPath());\n        // 返回绝对路径，\n        System.out.println(file.getAbsolutePath());\n        try { // 返回绝对路径，\n            System.out.println(file.getCanonicalPath());\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        // 输出文件夹下文件\n        for (var i : floder.listFiles()) {\n            System.out.println(i);\n        }\n    }\n\n    @Test\n    public void testCreate() {\n        File f = new File(\"test.file\");\n        if (!f.exists()) {\n            try {\n                // 创建\n                f.createNewFile();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    @Test\n    public void testDelete() {\n        File f = new File(\"test.file\");\n        if (f.exists()) {\n            // 删除\n            boolean delete = f.delete();\n            System.out.println(delete?\"delete\":\"not exist\");\n        }\n    }\n\n}\n\n```\n### 6.1.2 ByteStream\n即字节流, InputStream和OutputStream都是抽象类在里面分别定义了read()和write()方法\n我们使用它们的子类, FileInputStream和FileOutputStream\n```java\npackage lang.io;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\n\nimport org.junit.Test;\n\npublic class TestByteStream {\n\n    public void copyPng() {\n        File file = new File(\"D:\\\\workspaceFolder\\\\CODE_JAVA\\\\猫咪.png\");\n        File fileB = new File(\"D:\\\\workspaceFolder\\\\CODE_JAVA\\\\猫咪2.png\");\n        FileInputStream fileInputStream = null;\n        FileOutputStream fileOutputStream = null;\n        try {\n            fileInputStream = new FileInputStream(file);\n            fileOutputStream = new FileOutputStream(fileB);\n\n            int len;\n            byte[] bbuf = new byte[10];\n            while ((len = fileInputStream.read(bbuf)) != -1) {\n                fileOutputStream.write(bbuf, 0, len);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (fileInputStream != null)\n                    fileInputStream.close();\n                if (fileOutputStream != null)\n                    fileOutputStream.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    @Test\n    public void read() {\n        File file = new File(\"D:\\\\workspaceFolder\\\\CODE_JAVA\\\\lang\\\\io\\\\TestByteStream.java\");\n        FileInputStream fis = null;\n        try {\n            fis = new FileInputStream(file);\n            int data;\n            while ((data = fis.read()) != -1) {\n                System.out.print((char) data);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            if (fis != null) {\n                try {\n                    fis.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n\n    }\n\n    public static void main(String[] args) {\n        new TestByteStream().copyPng();\n    }\n}\n\n```\n### 6.1.3 CharStream\nCharStream即字符流\n\nReader是Java的IO库提供的另一个输入流接口。和InputStream的区别是，InputStream是一个字节流，即以byte为单位读取，而Reader是一个字符流，即以char为单位读取\n\n我们使用Reader的子类FileReader来演示向文件写入数据和从文件读出数据\n```java\npackage lang.io;\n\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\nimport org.junit.Test;\n\n/**\n * 内存的角度\n * \n * 输入:外部数据->内存\n * \n * 输出:内存->外部数据\n * \n * 字节流(8bit): InputStream, OutPutStream\n * \n * 字符流(16bit): Reader, Writer\n */\npublic class TestCharStream {\n    // 1.File对象指明文件\n    private final File file = new File(\"data.txt\");\n\n    /**\n     * Read from file and print to console\n     */\n    public void Read() {\n        // 2.Reader对象\n        FileReader fileReader = null;\n        try {\n            // 3.读\n            fileReader = new FileReader(file);// 读入的文件一定要存在\n            int read;\n            while ((read = fileReader.read()) != -1)\n                System.out.print((char) read);\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            // 4.关闭资源\n            if (fileReader != null)\n                try {\n                    fileReader.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n        }\n    }\n\n    /**\n     * Write String to file\n     * \n     * @param toBeWrite\n     */\n    public void Write(String toBeWrite) {\n        FileWriter fileWriter = null;\n        try {\n            fileWriter = new FileWriter(file);\n            fileWriter.write(\"By_Quanwei\\n\");\n            fileWriter.append(toBeWrite);\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            if (fileWriter != null)\n                try {\n                    fileWriter.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n\n        }\n    }\n\n    /**\n     * Copy fileA to fileB\n     */\n    public void copyFile(String fileA, String fileB) {\n        FileReader fileReader = null;\n        FileWriter fileWriter = null;\n        try {\n            fileReader = new FileReader(fileA);\n            fileWriter = new FileWriter(fileB);\n            int len;\n            char[] cbuf = new char[10];\n            while ((len = fileReader.read(cbuf)) != -1) {\n                fileWriter.write(cbuf, 0, len);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (fileReader != null)\n                    fileReader.close();\n                if (fileWriter != null)\n                    fileWriter.close();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        new TestCharStream().copyFile(\"data.txt\", \"file.txt\");\n    }\n\n    @Test\n    public void testFileReadWite() {\n        TestCharStream testIO = new TestCharStream();\n        testIO.Write(\"\"\"\n                public void Read() {\n                    try {\n                        FileReader fileReader = new FileReader(file);\n                        int read;\n                        while ((read = fileReader.read()) != -1)\n                            System.out.print((char)read);\n                        fileReader.close();\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n\n                public void Write(String toBeWrite) {\n                    try {\n                        FileWriter fileWriter = new FileWriter(file);\n                        fileWriter.append(toBeWrite);\n                        fileWriter.close();\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n                \"\"\");\n        testIO.Read();\n    }\n}\n```\n### Socket与网络编程\n1.网络编程的两个主要问题 1)如何定位网络上的一台或多态主机,定位主机上的特定应用(IPhe端口) 2)找到主机后如何高效可靠的传输数据(TCP/IP)\n\n本地回环地址: (hostAddress):127.0.0.1\n\n主机名: (hostName):localhost\n\n局域网地址: 192.168.~\n\n端口号: 运行的程序(0-65535)\n\nSockst = ip + 端口号\n\nTCP 可靠, 大量(三次握手, 四次挥手)\n\nUDP 快速\n\n**Url类**\n```java\npackage lang.net;\n\nimport java.net.URL;\n\n/**\n * url https://www.bilibili.com/video/BV1Kb411W75N?p=629\n * \n * <协议>//:<主机名>:<端口号>/<文件名/>#<片段名?><参数列表>\n */\n\npublic class MyUrl {\n    public static void main(String[] args) {\n        try {\n            URL url = new URL(\"https://www.bilibili.com/video/BV1Kb411W75N?p=629\");\n            System.out.println(url.getAuthority());// www.bilibili.com\n            System.out.println(url.getDefaultPort());// 443\n            System.out.println(url.getFile());// /video/BV1Kb411W75N?p=629\n            System.out.println(url.getPath());// /video/BV1Kb411W75N\n            System.out.println(url.getProtocol());// https\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n**InetAddress类**\n```java\n        try {\n            InetAddress Aliyun = InetAddress.getByName(\"39.99.54.127\");\n            InetAddress localHost = InetAddress.getLocalHost();\n            InetAddress loopbackAddress = InetAddress.getLoopbackAddress();\n            boolean reachable = localHost.isReachable(10);\n            System.out.println(reachable);//true\n            System.out.println(localHost);//DESKTOP-V9EL4A5/192.168.0.193\n            System.out.println(Aliyun);///39.99.54.127\n            String canonicalHostName = Aliyun.getCanonicalHostName();\n            String hostName = Aliyun.getHostName();//39.99.54.127\n            System.out.println(hostName);//39.99.54.127\n            System.out.println(canonicalHostName);\n            System.out.println(loopbackAddress);//localhost/127.0.0.1\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n```\n**UDP网络编程**\n```java\n\t/**\n     * 接收端\n     */\n    @Test\n    public void UDPReciver() {\n        DatagramSocket server = null;\n        try {\n            server = new DatagramSocket(8900);\n            byte[] buf = new byte[1024];// <=8K\n            DatagramPacket datagramPacket = new DatagramPacket(buf, buf.length);\n            System.out.println(\"waiting...\");\n            while (true) {\n                server.receive(datagramPacket);\n                String string = new String(datagramPacket.getData(), 0, datagramPacket.getLength());\n                System.out.println(datagramPacket.getAddress() + \":\" + datagramPacket.getPort() + \"send: \" + string);\n            }\n        } catch (SocketException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            if (server != null)\n                server.close();\n        }\n\n    }\n\t/**\n     * 发送端\n     */\n    @Test\n    public void UDPSender() {\n        DatagramSocket client = null;\n        try {\n            client = new DatagramSocket();\n            String str = \"hello Quanwei\";\n            DatagramPacket datagramPacket = new DatagramPacket(str.getBytes(), str.getBytes().length,\n                    InetAddress.getLocalHost(), 8900);\n            System.out.println(\"start send...\");\n            client.send(datagramPacket);\n        } catch (SocketException | UnknownHostException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            if (client != null)\n                client.close();\n        }\n    }\n```\n**TCP网络编程**\n```java\npackage lang.net;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.InetAddress;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.net.UnknownHostException;\nimport java.time.LocalDateTime;\n\npublic class TCP {\n\n    public void clientResive() {\n        Socket socket = null;\n        InputStream inputStream = null;\n        ByteArrayOutputStream byteArrayOutputStream = null;\n        try {\n            // get from server\n            InetAddress ip = InetAddress.getByName(\"127.0.0.1\");\n            socket = new Socket(ip, 8899);\n            inputStream = socket.getInputStream();\n            byte[] buf = new byte[1024];\n            int len;\n            byteArrayOutputStream = new ByteArrayOutputStream();\n            while ((len = inputStream.read(buf)) != -1) {\n                byteArrayOutputStream.write(buf, 0, len);\n            }\n\n            System.out.println(LocalDateTime.now() + \" get from server: \" + byteArrayOutputStream);\n\n        } catch (UnknownHostException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            if (byteArrayOutputStream != null)\n                try {\n                    byteArrayOutputStream.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            if (inputStream != null)\n                try {\n                    inputStream.close();\n                } catch (IOException e1) {\n                    e1.printStackTrace();\n                }\n            if (socket != null)\n                try {\n                    socket.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n        }\n    }\n\n    public void clientSend() {\n        Socket socket = null;\n        InetAddress ip;\n        OutputStream outputStream = null;\n\n        try {\n            ip = InetAddress.getByName(\"127.0.0.1\");\n            socket = new Socket(ip, 8899);\n            // send to server\n            outputStream = socket.getOutputStream();\n            outputStream.write(\"权威 Quanwei\".getBytes());\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            if (outputStream != null)\n                try {\n                    outputStream.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            if (socket != null)\n                try {\n                    socket.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n        }\n    }\n\n    public void serverRevive() {\n        ServerSocket server = null;\n        Socket accept = null;\n        InputStream inputStream = null;\n        ByteArrayOutputStream byteArrayOutputStream = null;\n        FileOutputStream fileOutputStream = null;\n        try {\n            server = new ServerSocket(8899);\n            accept = server.accept();\n            // client input\n            inputStream = accept.getInputStream();\n            byteArrayOutputStream = new ByteArrayOutputStream();\n            byte[] buf = new byte[1024];\n            int len;\n            while ((len = inputStream.read(buf)) != -1) {\n                byteArrayOutputStream.write(buf, 0, len);\n            }\n            // 控制台输出\n            System.out.println(LocalDateTime.now() + \" get from client: \" + byteArrayOutputStream);\n\n            // 保存到本地\n            fileOutputStream = new FileOutputStream(new File(\"D:\\\\workspaceFolder\\\\CODE_JAVA\\\\lang\\\\net\\\\file\"));\n            fileOutputStream.write(byteArrayOutputStream.toByteArray());\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            if (byteArrayOutputStream != null)\n                try {\n                    byteArrayOutputStream.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            if (inputStream != null)\n                try {\n                    inputStream.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            if (accept != null)\n                try {\n                    accept.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            if (server != null)\n                try {\n                    server.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n        }\n    }\n\n    public void serverSend() {\n        ServerSocket server = null;\n        Socket accept = null;\n        OutputStream outputStream = null;\n        try {\n            server = new ServerSocket(8899);\n            accept = server.accept();\n            // server output\n            outputStream = accept.getOutputStream();\n            outputStream.write(\"接收成功\".getBytes());\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            if (outputStream != null)\n                try {\n                    outputStream.close();\n                } catch (IOException e1) {\n                    e1.printStackTrace();\n                }\n            if (accept != null)\n                try {\n                    accept.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            if (server != null)\n                try {\n                    server.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n        }\n    }\n\n    public static void main(String[] args) {\n        TCP tcp = new TCP();\n        new Thread(() -> {\n            tcp.serverSend(); // 先启动服务器\n        }).start();\n        // new Thread(() -> {\n        //     tcp.clientResive();\n        // }).start();\n        new Thread(() -> {\n            tcp.clientResive();\n        }).start();\n        // new Thread(() -> {\n        //     tcp.clientSend();\n        // }).start();\n    }\n}\n```\n## 6.2 NIO\n\n## 6.3 AIO\n\n# 七、多线程\n\t\n\t多线程是Java最基本的一种并发模型\n\n一个线程不能独立的存在，它必须是进程的一部分。\n进程：一个进程包括由操作系统分配的内存空间，包含一个或多个线程。\n\n创建多线程\n```java\npackage lang.thread;\n\nimport org.junit.jupiter.api.Test;\n\npublic class CreateThreadDemo {\n\n    @Test\n    public void testLambda() {\n        new Thread(() -> {\n            String name = Thread.currentThread().getName();\n            System.out.println(name);// Quanwei's thread\n        }, \"Quanwei's thread\").start();\n    }\n\n    @Test\n    public void testExtends() {\n        new Thread() {\n            public void run() {\n                String name = Thread.currentThread().getName();\n                System.out.println(\"Extends\" + name);// ExtendsThread-0 也可能不是0\n            }\n        }.start();\n        ;\n    }\n\n    @Test\n    public void testImplements() {\n        Runnable runnable = new Runnable() {\n            @Override\n            public void run() {\n                String name = Thread.currentThread().getName();\n                System.out.println(name);// Implements\n            }\n        };\n        new Thread(runnable,\"Implements\").start();\n    }\n\n    public static void main(String[] args) {\n        new CreateThreadDemo().testLambda();// main\n        System.out.println(Thread.currentThread().getName());\n    }\n\n}\n```\n多线程通信\n同步代码块\n\nsynchronized(同步监视器){//同步监视器可用: 类.class(保证唯一)\n//要同步的代码\n}\n\n不需要synchronized的操作 JVM规范定义了几种原子操作：\n1. 基本类型（long和double除外）赋值，例如：int n = m； 引用类型赋值，例如：List<String> list = anotherList。\n2. long和double是64位数据，JVM没有明确规定64位赋值操作是不是一个原子操作，不过在x64平台的JVM是把long和double的赋值作为原子操作实现的\n3. 单条原子操作不需要线程同步,多条需要\n\n```java\npublic class Ticket {\n    public static void main(String[] args) {\n        var w = new Windows1();\n        var w1 = new Thread(w, \"w1\");\n        var w2 = new Thread(w, \"w2\");\n        var w3 = new Thread(w, \"w3\");\n        w2.setPriority(Thread.MAX_PRIORITY);\n        w1.start();\n        w2.start();\n        w3.start();\n    }\n}\n\nclass Windows1 implements Runnable {\n    private int tickets = 50;\n    Object obj = new Object();\n\n    @Override\n    public void run() {\n        while (true) {\n            synchronized (Windows1.class) {\n                if (tickets > 0) {\n                    try {\n                        Thread.sleep(100);\n                    } catch (Exception e) {\n                    }\n                    System.out.println(Thread.currentThread().getName() + \" : \" + tickets);\n                    --tickets;\n                } else\n                    break;\n            }\n        }\n    }\n\n}\n\n```\n# 八、JDBC\n什么是JDBC?\n\n\tDBC是Java DataBase Connectivity的缩写，它是Java程序访问数据库的标准接口。\n\n使用Java程序访问数据库时，Java代码并不是直接通过TCP连接去访问数据库，而是通过JDBC接口来访问，而JDBC接口则通过JDBC驱动来实现真正对数据库的访问。\n\n我们在Java代码中如果要访问MySQL，那么必须编写代码操作JDBC接口。注意到JDBC接口是Java标准库自带的，所以可以直接编译。而具体的JDBC驱动是由数据库厂商提供的，。因此，访问某个具体的数据库，我们只需要引入该厂商提供的JDBC驱动，就可以通过JDBC接口来访问，这样保证了Java程序编写的是一套数据库访问代码，却可以访问各种不同的数据库，因为他们都提供了标准的JDBC驱动\n\n如何使用? (以连接PostgreSQL为例)\n```java\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.Properties;\nimport org.postgresql.Driver;\n\npublic class Postgresql {\n    private static String url = \"jdbc:postgresql://localhost:5432/quanwei\";\n    private static String user = \"postgres\";\n    private static String password = \"password\";\n    private static String driver = \"org.postgresql.Driver\";\n\n    public static void main(String[] args) throws SQLException {\n        // 1. 创建驱动程序类对象\n        Driver driver = new org.postgresql.Driver();\n\n        // 2. 设置用户名和密码\n        Properties prop = new Properties();\n        prop.setProperty(\"user\", user);\n        prop.setProperty(\"password\", password);\n\n        // 3. 连接数据库，返回连接对象\n        Connection conn = null;\n        try {\n            conn = driver.connect(url, prop);\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n        Statement s = conn.createStatement();\n        // 测试\n        ResultSet rs = s.executeQuery(\"select * from login\");\n        while(rs.next()){\n            String string = rs.getString(2);\n            System.out.println(string);\n        }\n    }\n}\n\n```\n# 九、GUI\n## 9.1 AWT\n即抽象窗口工具包\n```java\npackage lang.gui;\n\nimport java.awt.*;\nimport java.awt.event.*;\n\npublic class HelloAWT {\n    public static void main(String[] args) {\n        // 1.创建窗体\n        Frame frame = new Frame(\"AWT\");\n        // 2.创建标签组件\n        Label label = new Label(\"Hello Quanwei\");\n        // 3.设置相关属性\n        label.setBackground(Color.GREEN);\n        label.setSize(20, 10);\n        // 4.将组件添加到窗体上\n        frame.add(label);\n        // 5.设置窗体关闭事件\n        frame.addWindowListener(new WindowAdapter() {\n            @Override\n            public void windowClosing(WindowEvent e) {\n                System.exit(0);\n            }\n        });\n        // 6.设置窗体大小\n        frame.setSize(500, 200);\n        // 7.显示窗体\n        frame.setVisible(true);\n    }\n}\n```\n## 9.2 Swing\n```java\npackage lang.gui;\n\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.util.HashMap;\n\nimport javax.swing.*;\nimport javax.swing.event.*;\n\npublic class Main {\n\n    public void window1() {\n        // 1.创建窗体\n        JFrame frame = new JFrame(\"Swing\");\n        // 2.设置关闭事件\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        // 3.设置大小位置\n        frame.setSize(500, 500);\n        frame.setLocation(500, 200);\n\n        // 4.设置事件监听处理\n        frame.addMouseListener(new MouseInputAdapter() {\n            @Override\n            public void mouseClicked(MouseEvent e) {\n                int x = e.getX();\n                int y = e.getY();\n                frame.setTitle(\"点击坐标为(\" + x + \", \" + y + \")\");\n            }\n        });\n        // 5.显示窗体\n        frame.setVisible(true);\n    }\n}\n```\n# 总结\n比我想象的要多得多😂😂😂🤣🤣🤣\n","slug":"Java-基础","published":1,"updated":"2023-04-09T01:01:04.752Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5ud0015lv9e0n7o1qvl","content":"<h1 id=\"Java一学期复习-基础入门\"><a href=\"#Java一学期复习-基础入门\" class=\"headerlink\" title=\"Java一学期复习 &amp; 基础入门\"></a>Java一学期复习 &amp; 基础入门</h1><font color=#999AAA >\n学了一学期Java了现在开始复习吧\n</font>\n\n<hr style=\" border:solid; width:100px; height:1px;\" color=#000000 size=1\">\n\n<span id=\"more\"></span>\n\n<h1 id=\"一、Java开发入门\"><a href=\"#一、Java开发入门\" class=\"headerlink\" title=\"一、Java开发入门\"></a>一、Java开发入门</h1><h2 id=\"1-1-Java概述\"><a href=\"#1-1-Java概述\" class=\"headerlink\" title=\"1.1 Java概述\"></a>1.1 Java概述</h2><p>Java 是由 Sun Microsystems 公司于 1995 年 5 月推出的 Java 面向对象程序设计语言和 Java 平台的总称。<br>由 James Gosling和同事们共同研发，并在 1995 年正式推出。</p>\n<p>后来 Sun 公司被 Oracle （甲骨文）公司收购，Java 也随之成为 Oracle 公司的产品。</p>\n<p>Java分为三个体系：</p>\n<pre><code>JavaSE (J2SE) (Java 2 Platform Standard Edition，java平台标准版）\nJavaEE (J2EE) (Java 2 Platform,Enterprise Edition，java平台企业版)\nJavaME (J2ME) (Java 2 Platform Micro Edition，java平台微型版)\n</code></pre>\n<h2 id=\"1-2-JDK-JRE-JVM\"><a href=\"#1-2-JDK-JRE-JVM\" class=\"headerlink\" title=\"1.2 JDK, JRE, JVM\"></a>1.2 JDK, JRE, JVM</h2><p><strong>JDK(Java Development Kit)又称J2SDK(Java2 Software Development Kit)</strong></p>\n<p>是Java开发工具包，它提供了Java的开发环境(提供了编译器javac等工具，用于将java文件编译为class文件)和运行环境(提 供了JVM和Runtime辅助包，用于解析class文件使其得到运行)。如果你下载并安装了JDK，那么你不仅可以开发Java程序，也同时拥有了运行Java程序的平台。JDK是整个Java的核心，包括了Java运行环境(JRE)，一堆Java工具tools.jar和Java标准类库 (rt.jar)。</p>\n<p><strong>JRE(Java Runtime Enviroment)是Java的运行环境</strong></p>\n<p>面向Java程序的使用者，而不是开发者。如果你仅下载并安装了JRE，那么你的系统只能运行Java程序。JRE是运行Java程序所必须环境的集合，包含JVM标准实现及 Java核心类库。它包括Java虚拟机、Java平台核心类和支持文件。它不包含开发工具(编译器、调试器等)。</p>\n<p><strong>JVM（Java Virtual Machine）Java 虚拟机</strong></p>\n<p>是整个 Java 实现跨平台的最核心的部分，能够运行以 Java 语言写作的软件程序。</p>\n<h1 id=\"二、Java编程基础\"><a href=\"#二、Java编程基础\" class=\"headerlink\" title=\"二、Java编程基础\"></a>二、Java编程基础</h1><h2 id=\"2-1-基本语法\"><a href=\"#2-1-基本语法\" class=\"headerlink\" title=\"2.1 基本语法\"></a>2.1 基本语法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 文档注释</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * (类注释)</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 文件First.java</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 主类名必修和文件名一致</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">First</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">sCnt</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; <span class=\"comment\">// 类变量</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">cnt</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;<span class=\"comment\">// 实例变量</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">SIZE</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>; <span class=\"comment\">// const</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Quanwei&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printArray</span><span class=\"params\">(<span class=\"type\">int</span>[] array)</span> &#123;</span><br><span class=\"line\">        System.out.print(array);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addCnt</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        ++sCnt;</span><br><span class=\"line\">        ++cnt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">showCnt</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(cnt);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">showName</span><span class=\"params\">(<span class=\"type\">boolean</span> isOn)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isOn)</span><br><span class=\"line\">            System.out.println(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">convert</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/* 英制到公制 */</span></span><br><span class=\"line\">        <span class=\"type\">int</span> foot;</span><br><span class=\"line\">        <span class=\"type\">int</span> inch;<span class=\"comment\">// 两个整数的运算结果一定是整数</span></span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">in</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);<span class=\"comment\">// 惯用</span></span><br><span class=\"line\">        foot = in.nextInt();</span><br><span class=\"line\">        inch = in.nextInt();</span><br><span class=\"line\">        System.out.println((foot + inch / <span class=\"number\">12f</span>) * <span class=\"number\">0.3048</span>);</span><br><span class=\"line\">        in.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// showName(true);</span></span><br><span class=\"line\">        <span class=\"comment\">// int age1 = 10;// 局部变量</span></span><br><span class=\"line\">        convert();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-2-数据类型\"><a href=\"#2-2-数据类型\" class=\"headerlink\" title=\"2.2 数据类型\"></a>2.2 数据类型</h2><p>八种基本数据类型</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Type</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 基本类型 默认值 */</span></span><br><span class=\"line\">    <span class=\"type\">byte</span> y; <span class=\"comment\">// byte: 0</span></span><br><span class=\"line\">    <span class=\"type\">short</span> s; <span class=\"comment\">// short: 0</span></span><br><span class=\"line\">    <span class=\"type\">int</span> i; <span class=\"comment\">// int: 0</span></span><br><span class=\"line\">    <span class=\"type\">long</span> l; <span class=\"comment\">// long: 0</span></span><br><span class=\"line\">    <span class=\"type\">double</span> d; <span class=\"comment\">// double: 0.0</span></span><br><span class=\"line\">    <span class=\"type\">float</span> f; <span class=\"comment\">// float: 0.0</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> b; <span class=\"comment\">// boolean: false</span></span><br><span class=\"line\">    <span class=\"type\">char</span> c; <span class=\"comment\">// char:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">show</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;byte: &quot;</span> + y);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;short: &quot;</span> + s);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;int: &quot;</span> + i);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;long: &quot;</span> + l);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;double: &quot;</span> + d);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;float: &quot;</span> + f);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;boolean: &quot;</span> + b);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;char: &quot;</span> + c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">assign</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        y = -<span class=\"number\">1</span>;</span><br><span class=\"line\">        s = <span class=\"number\">1</span>;</span><br><span class=\"line\">        i = <span class=\"number\">2</span>;</span><br><span class=\"line\">        l = <span class=\"number\">3L</span>;</span><br><span class=\"line\">        d = <span class=\"number\">12.5</span>;</span><br><span class=\"line\">        f = <span class=\"number\">6.25F</span>;</span><br><span class=\"line\">        b = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        c = <span class=\"string\">&#x27;c&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    \t<span class=\"comment\">// type是引用类型</span></span><br><span class=\"line\">        <span class=\"type\">Type</span> <span class=\"variable\">type</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Type</span>();</span><br><span class=\"line\">        type.assign();</span><br><span class=\"line\">        type.show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-3-运算符\"><a href=\"#2-3-运算符\" class=\"headerlink\" title=\"2.3 运算符\"></a>2.3 运算符</h2><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>运算符</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>成员访问运算符</td>\n<td><strong>.</strong></td>\n</tr>\n<tr>\n<td>下标运算符</td>\n<td>[ ]</td>\n</tr>\n<tr>\n<td>函数调用运算符</td>\n<td>( )</td>\n</tr>\n<tr>\n<td>算数运算符</td>\n<td>* 乘&#8195; &#x2F; 除 &#8195;% 取余&#8195; + &#8195;-</td>\n</tr>\n<tr>\n<td>按位运算</td>\n<td>&amp; 与&#8195;| 或 &#8195;~ 取反 &#8195;^ 异或&#8195; &lt;&lt; 左移&#8195; &gt;&gt; 右移 &#8195;&gt;&gt;&gt; 无符号右移</td>\n</tr>\n<tr>\n<td>逻辑运算</td>\n<td>&amp;&#8195; |&#8195; !非&#8195; &amp;&amp; 短路与&#8195; || 短路非</td>\n</tr>\n<tr>\n<td>条件运算</td>\n<td>&lt;&#8195;&gt;&#8195; &lt;&#x3D; &#8195;&gt;&#x3D;&#8195; &#x3D;&#x3D;&#8195; !&#x3D;</td>\n</tr>\n<tr>\n<td>条件运算符</td>\n<td>? <strong>:</strong></td>\n</tr>\n<tr>\n<td>赋值运算符</td>\n<td>&#x3D;&#8195; +&#x3D;&#8195; -&#x3D;&#8195; *&#x3D; &#8195;&#x2F;&#x3D; &#8195;&lt;&lt;&#x3D; &#8195;&gt;&gt;&#x3D;&#8195; &gt;&gt;&gt;&#x3D;&#8195;&amp;&#x3D; &#8195;|&#x3D;&#8195; ^&#x3D;</td>\n</tr>\n</tbody></table>\n<h2 id=\"2-4-选择结构\"><a href=\"#2-4-选择结构\" class=\"headerlink\" title=\"2.4 选择结构\"></a>2.4 选择结构</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     <span class=\"type\">boolean</span> condition=<span class=\"literal\">true</span>;</span><br><span class=\"line\">     <span class=\"comment\">// if-else</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (condition) &#123;</span><br><span class=\"line\">         <span class=\"comment\">//todo</span></span><br><span class=\"line\">     &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//todo</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"comment\">// if-else if-else</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (condition)&#123;</span><br><span class=\"line\">         <span class=\"comment\">// todo</span></span><br><span class=\"line\">     &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(!condition)&#123;</span><br><span class=\"line\"><span class=\"comment\">//todo</span></span><br><span class=\"line\">     &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//todo</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"comment\">//switch</span></span><br><span class=\"line\">     <span class=\"keyword\">switch</span> (key) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> value:</span><br><span class=\"line\">             <span class=\"comment\">//todo</span></span><br><span class=\"line\">             <span class=\"keyword\">break</span>;</span><br><span class=\"line\">     </span><br><span class=\"line\">         <span class=\"keyword\">default</span>:</span><br><span class=\"line\">             <span class=\"keyword\">break</span>;</span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-5-循环结构\"><a href=\"#2-5-循环结构\" class=\"headerlink\" title=\"2.5 循环结构\"></a>2.5 循环结构</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"variable\">condition</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (condition) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// todo</span></span><br><span class=\"line\">    <span class=\"keyword\">break</span>;<span class=\"comment\">//跳出循环</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// todo</span></span><br><span class=\"line\">    <span class=\"keyword\">continue</span>;<span class=\"comment\">//进入下次循环</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span> (condition);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// todo</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"三、面向对象\"><a href=\"#三、面向对象\" class=\"headerlink\" title=\"三、面向对象\"></a>三、面向对象</h1><font color=#999AAA >\n面向对象的优点:<br>\n可重用性：代码重复使用，减少代码量，提高开发效率。<br>\n可扩展性：指新的功能可以很容易地加入到系统中来，便于软件的修改。<br>\n可管理性：能够将功能与数据结合，方便管理。\n</font>\n\n<h2 id=\"3-1-概念\"><a href=\"#3-1-概念\" class=\"headerlink\" title=\"3.1 概念\"></a>3.1 概念</h2><p>Java 是面向对象的编程语言，对象就是面向对象程序设计的核心。<br>所谓对象就是真实世界中的实体，对象与实体是一一对应的，也就是说现实世界中每一个实体都是一个对象，它是一种具体的概念。对象有以下特点：</p>\n<pre><code> 1. 对象具有属性和行为。\n 2. 对象具有变化的状态。 \n 3. 对象具有唯一性。 \n 4. 对象都是某个类别的实例。 \n 5. 一切皆为对象，真实世界中的所有事物都可以视为对象。\n</code></pre>\n<h2 id=\"3-2-特性-封装-继承-多态\"><a href=\"#3-2-特性-封装-继承-多态\" class=\"headerlink\" title=\"3.2 特性(封装, 继承, 多态)\"></a>3.2 特性(封装, 继承, 多态)</h2><h3 id=\"3-2-1-封装\"><a href=\"#3-2-1-封装\" class=\"headerlink\" title=\"3.2.1 封装\"></a>3.2.1 封装</h3><p>为什么要封装?</p>\n<pre><code> 1. 保护类中的信息，它可以阻止在外部定义的代码随意访问内部代码和数据。 \n 2. 隐藏细节信息，一些不需要程序员修改和使用的信息，用户不需要知道。\n 3. 有助于建立各个系统之间的松耦合关系，提高系统的独立性。当一个系统的实现方式发生变化时，只要它的接口不变，就不会影响其他系统的使用。\n 4. 提高软件的复用率，降低成本。每个系统都是一个相对独立的整体，可以在不同的环境中得到使用\n</code></pre>\n<p>怎样封装? (将类中属性设为私有, 公开获取属性值的接口)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 私有属性 */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String passpord;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 构造函数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">User</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the passpord</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getPasspord</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> passpord;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> passpord the passpord to set</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setPasspord</span><span class=\"params\">(String passpord)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.passpord = passpord;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the id</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getId</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> id the id to set</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setId</span><span class=\"params\">(<span class=\"type\">int</span> id)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the username</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getUsername</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> username;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> username the username to set</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setUsername</span><span class=\"params\">(String username)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.username = username;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"string\">&quot;id: &quot;</span>+getId()+<span class=\"string\">&quot;\\tusername: &quot;</span>+getUsername()+<span class=\"string\">&quot;\\tpassword: &quot;</span>+getPasspord();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"访问修饰符\"><a href=\"#访问修饰符\" class=\"headerlink\" title=\"访问修饰符:\"></a>访问修饰符:</h3><p> <strong>default (即默认，什么也不写）:</strong> </p>\n<pre><code>在同一包内可见，不使用任何修饰符。\n</code></pre>\n<p>使用对象：类、接口、变量、方法。</p>\n<p><strong>public :</strong> </p>\n<pre><code>对所有类可见。\n</code></pre>\n<p>使用对象：类、接口、变量、方法 protected : 对同一包内的类和所有子类可见。使用对象：变量、方法。</p>\n<p><strong>private :</strong> </p>\n<pre><code>在同一类内可见。\n</code></pre>\n<p>使用对象：变量、方法。 注意：不能修饰类（外部类）</p>\n<p><strong>protected :</strong> </p>\n<pre><code>对同一包内的类和所有子类可见。\n</code></pre>\n<p>使用对象：变量、方法。 注意：不能修饰类（外部类）</p>\n<p>注意：</p>\n<p>父类中声明为 public 的方法在子类中也必须为 public。 父类中声明为 protected的方法在子类中要么声明为 protected，要么声明为 public，不能声明为 private 父类中声明为 private的方法，不能够被继承</p>\n<h3 id=\"3-2-2-继承\"><a href=\"#3-2-2-继承\" class=\"headerlink\" title=\"3.2.2 继承\"></a>3.2.2 继承</h3><p>什么是继承?</p>\n<pre><code>程序中的继承性是指子类拥有父类的全部特征和行为，这是类之间的一种关系。Java 只支持单继承。\n</code></pre>\n<p>如何继承? (使用关键字 <strong>extends</strong>)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">VipUser</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">VipUser</span> <span class=\"variable\">vip</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">VipUser</span>();</span><br><span class=\"line\">        vip.setUsername(<span class=\"string\">&quot;Quanwei&quot;</span>);</span><br><span class=\"line\">        System.out.println(vip.getUsername());<span class=\"comment\">// Quanwei</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-3-多态\"><a href=\"#3-2-3-多态\" class=\"headerlink\" title=\"3.2.3 多态\"></a>3.2.3 多态</h3><p>什么是多态?</p>\n<pre><code>面向对象的多态性，即“一个接口，多个方法”。\n</code></pre>\n<p>为什么要使用多态?</p>\n<pre><code>多态性体现在父类中定义的属性和方法被子类继承后，可以具有不同的属性或表现方式。\n多态性允许一个接口被多个同类使用，弥补了单继承的不足。\n</code></pre>\n<p>如何使用多态? ( 重写父类方法)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> lang.aboutclass;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">VipUser</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> vipNum;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.toString() + <span class=\"string\">&quot;\\tvipNum: &quot;</span> + getVipNum();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the vipNum</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getVipNum</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> vipNum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> vipNum the vipNum to set</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setVipNum</span><span class=\"params\">(<span class=\"type\">int</span> vipNum)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.vipNum = vipNum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">VipUser</span>();</span><br><span class=\"line\">        user.setUsername(<span class=\"string\">&quot;Quanwei&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (user <span class=\"keyword\">instanceof</span> VipUser vip) &#123;</span><br><span class=\"line\">            vip.setVipNum(<span class=\"number\">5432</span>);</span><br><span class=\"line\">            System.out.println(vip.getUsername());<span class=\"comment\">// Quanwei</span></span><br><span class=\"line\">            System.out.println(vip);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"非访问修饰符\"><a href=\"#非访问修饰符\" class=\"headerlink\" title=\"非访问修饰符\"></a>非访问修饰符</h3><p><strong>static 修饰符</strong><br>静态变量：<br>static 关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量只有一份拷贝。 静态变量也被称为类变量。局部变量不能被声明为 static 变量。</p>\n<p>静态方法：<br>static 关键字用来声明独立于对象的静态方法。静态方法不能使用类的非静态变量。静态方法从参数列表得到数据，然后计算这些数据。</p>\n<p><strong>final 修饰符</strong><br>final 变量:<br>final 表示”最后的、最终的”含义，变量一旦赋值后，不能被重新赋值。被 final 修饰的实例变量必须显式指定初始值。<br>final 修饰符通常和 static 修饰符一起使用来创建类常量。</p>\n<p>final 方法:<br>父类中的 final 方法可以被子类继承，但是不能被子类重写。</p>\n<p>final 类:<br>final 类不能被继承，没有类能够继承 final 类的任何特性。</p>\n<p><strong>abstract 修饰符</strong><br>抽象类：<br>抽象类不能用来实例化对象，声明抽象类的唯一目的是为了将来对该类进行扩充。<br>一个类不能同时被 abstract 和 final 修饰。如果一个类包含抽象方法，那么该类一定要声明为抽象类，否则将出现编译错误。<br>抽象类可以包含抽象方法和非抽象方法。</p>\n<p>抽象方法<br>抽象方法是一种没有任何实现的方法，该方法的的具体实现由子类提供。<br>抽象方法不能被声明成 final 和 static。<br>任何继承抽象类的子类必须实现父类的所有抽象方法，除非该子类也是抽象类。<br>如果一个类包含若干个抽象方法，那么该类必须声明为抽象类。抽象类可以不包含抽象方法。<br>抽象方法的声明以分号结尾，例如：public abstract sample();。</p>\n<h2 id=\"3-3-特殊类\"><a href=\"#3-3-特殊类\" class=\"headerlink\" title=\"3.3 特殊类\"></a>3.3 特殊类</h2><h3 id=\"3-3-1-抽象类-Abstract-Class\"><a href=\"#3-3-1-抽象类-Abstract-Class\" class=\"headerlink\" title=\"3.3.1 抽象类 ( Abstract Class)\"></a>3.3.1 抽象类 ( Abstract Class)</h3><p>在面向对象的概念中，所有的对象都是通过类来描绘的，但是反过来，并不是所有的类都是用来描绘对象的，如果一个类中没有包含足够的信息来描绘一个具体的对象，这样的类就是抽象类。<br>抽象类不能用于实例化对象</p>\n<p>如何定义? (使用<strong>abstract</strong>关键字)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 抽象类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Human</span> &#123;</span><br><span class=\"line\">    String name;</span><br><span class=\"line\">    <span class=\"type\">int</span> age;</span><br><span class=\"line\">    String language;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 抽象方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">say</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如何使用? (<strong>继承</strong>)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Chinese</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Human</span> &#123;</span><br><span class=\"line\">    Chinese(String name, String language) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.language = language;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">say</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(name + <span class=\"string\">&quot; says &quot;</span> + language);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-3-2-接口-Interface\"><a href=\"#3-3-2-接口-Interface\" class=\"headerlink\" title=\"3.3.2 接口 (Interface)\"></a>3.3.2 接口 (Interface)</h3><p>是一个抽象类型，是抽象方法的集合。一个类通过继承接口的方式，从而来继承接口的抽象方法。<br>接口并不是类，类描述对象的属性和方法。接口则包含类要实现的方法。<br>除非实现接口的类是抽象类，否则该类要定义接口中的所有方法。<br>接口无法被实例化，但是可以被实现。一个实现接口的类，必须实现接口内所描述的所有方法。</p>\n<p>如何定义? (使用interface关键字)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> 1. 可以跑的接口 :)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 跑的方法</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如何使用? (使用implements关键字实现接口)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Chinese</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Human</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span>&#123;</span><br><span class=\"line\">    Chinese(String name, String language) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.language = language;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">say</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(name + <span class=\"string\">&quot; says &quot;</span> + language);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 实现接口须重写run方法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;I am Running...&quot;</span>);        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-3-3-内部类-Inner-Class\"><a href=\"#3-3-3-内部类-Inner-Class\" class=\"headerlink\" title=\"3.3.3 内部类 ( Inner Class )\"></a>3.3.3 内部类 ( Inner Class )</h3><p>Java 一个类中可以嵌套另外一个类, 即内部类<br>如何定义?</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">OuterClass</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">infomation</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Outer class&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">InnerClass</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">information</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Inner class&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">class</span> <span class=\"title class_\">InsiderClass</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">information</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Insider class&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如何使用? ( 外部类.new 内部类名() )</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> lang.aboutclass;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lang.aboutclass.OuterClass.InnerClass;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lang.aboutclass.OuterClass.InnerClass.InsiderClass;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">OuterClass</span> <span class=\"variable\">outer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OuterClass</span>();</span><br><span class=\"line\">        <span class=\"type\">InnerClass</span> <span class=\"variable\">inner</span> <span class=\"operator\">=</span> outer.<span class=\"keyword\">new</span> <span class=\"title class_\">InnerClass</span>();</span><br><span class=\"line\">        <span class=\"type\">InsiderClass</span> <span class=\"variable\">insider</span> <span class=\"operator\">=</span> inner.<span class=\"keyword\">new</span> <span class=\"title class_\">InsiderClass</span>();</span><br><span class=\"line\">        System.out.println(outer.infomation);<span class=\"comment\">// Outer class</span></span><br><span class=\"line\">        System.out.println(inner.information);<span class=\"comment\">// Inner class</span></span><br><span class=\"line\">        System.out.println(insider.information);<span class=\"comment\">// Insider class</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-3-4-枚举类-Enum\"><a href=\"#3-3-4-枚举类-Enum\" class=\"headerlink\" title=\"3.3.4 枚举类 ( Enum )\"></a>3.3.4 枚举类 ( Enum )</h3><p>Java 枚举是一个特殊的类，一般表示一组常量<br>如何定义? (使用 enum 关键字来定义，各个常量使用逗号 <strong>,</strong> 来分割)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">Weekday</span> &#123;</span><br><span class=\"line\">    SUN, MON, TUE, WED, THU, FRI, SAT;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如何使用? (枚举类名.常量)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(Weekday.FRI);<span class=\"comment\">//FRI</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-3-6-记录类\"><a href=\"#3-3-6-记录类\" class=\"headerlink\" title=\"3.3.6 记录类\"></a>3.3.6 记录类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义一个Point类，有x、y两个变量，同时它是一个不变类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">record</span> <span class=\"title class_\">Point</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相当于:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Point</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Record</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> x;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> y;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">Point</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> &#123; <span class=\"built_in\">this</span>.x = x; <span class=\"built_in\">this</span>.y = y; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">x</span><span class=\"params\">()</span> &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.x; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">y</span><span class=\"params\">()</span> &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.y; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123; <span class=\"keyword\">return</span> String.format(<span class=\"string\">&quot;Point[x=%s, y=%s]&quot;</span>, x, y); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">equals</span><span class=\"params\">(Object o)</span> &#123; <span class=\"comment\">//... &#125; public int hashCode() &#123; //... &#125; &#125;</span></span><br></pre></td></tr></table></figure>\n<p>也可以在里面写构造函数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">record</span> <span class=\"title class_\">Point</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Compact Constructor，它的目的是让我们编写检查逻辑 </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Point &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span> || y &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-3-6-注解类（Annotation）\"><a href=\"#3-3-6-注解类（Annotation）\" class=\"headerlink\" title=\"3.3.6 注解类（Annotation）\"></a>3.3.6 注解类（Annotation）</h3><p>Java 语言中的类、方法、变量、参数和包等都可以被标注。<br>和 Javadoc 不同，Java 标注可以通过反射获取标注内容。在编译器生成类文件时，标注可以被嵌入到字节码中。Java 虚拟机可以保留标注内容，在运行时可以获取到标注内容 。 当然它也支持自定义 Java 标注。</p>\n<p>如何定义? ( 使用@interface关键字 )</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> lang.annotation;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.ElementType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Retention;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Target;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3.用元注解配置注解 </span></span><br><span class=\"line\"><span class=\"comment\">// 必须设置@Target和@Retention，@Retention一般设置为RUNTIME，因为我们自定义的注解通常要求在运行期读取</span></span><br><span class=\"line\"><span class=\"meta\">@Target(ElementType.LOCAL_VARIABLE)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Report &#123;<span class=\"comment\">// 1.用@interface定义注解</span></span><br><span class=\"line\">    <span class=\"comment\">// 2.添加默认参数</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">type</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    String <span class=\"title function_\">level</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"string\">&quot;info&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    String <span class=\"title function_\">value</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 把最常用的参数定义为value()，推荐所有参数都尽量设置默认值</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 注解定义后也是一种class，所有的注解都继承自java.lang.annotation.Annotation，因此，读取注解，需要使用反射API</span></span><br></pre></td></tr></table></figure>\n<p><strong>元注解（meta annotation）</strong> 有一些注解可以修饰其他注解，这些注解就称为元注解</p>\n<p>最常用的元注解是@Target。<br>使用@Target可以定义Annotation能够被应用于源码的哪些位置：<br>类或接口：ElementType.TYPE；<br>字段：ElementType.FIELD；<br>方法：ElementType.METHOD；<br>构造方法：ElementType.CONSTRUCTOR；<br>方法参数：ElementType.PARAMETER</p>\n<p>另一个重要的元注解@Retention定义了Annotation的生命周期：<br>仅编译期：RetentionPolicy.SOURCE；<br>仅class文件：RetentionPolicy.CLASS； (默认)<br>运行期：RetentionPolicy.RUNTIME</p>\n<p>如何使用? ( 通过反射获取注解信息 )</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@MyAnnotation(value = 20, name = &quot;Quanwei&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAnnoTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MyAnnotation</span> <span class=\"variable\">anno</span> <span class=\"operator\">=</span> MyAnnoTest.class.getDeclaredAnnotation(MyAnnotation.class);</span><br><span class=\"line\">        System.out.println(anno.name());<span class=\"comment\">// Quanwei</span></span><br><span class=\"line\">        System.out.println(anno.value());<span class=\"comment\">// 20</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在注解的定义中使用注解:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(&#123; ElementType.TYPE, ElementType.FIELD, ElementType.METHOD &#125;)</span><span class=\"comment\">//注解使用位置</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span><span class=\"comment\">// 保留时间</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> MyAnnotation &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">value</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"number\">12</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    String <span class=\"title function_\">name</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"string\">&quot;quanwei&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Report <span class=\"title function_\">report</span><span class=\"params\">()</span><span class=\"keyword\">default</span> <span class=\"meta\">@Report</span> ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-4-反射-Reflection\"><a href=\"#3-4-反射-Reflection\" class=\"headerlink\" title=\"3.4 反射 Reflection\"></a>3.4 反射 Reflection</h2><p>是什么?</p>\n<pre><code>反射就是一种能在程序 运行 时获取类、接口、方法和变量等信息的能力。\n</code></pre>\n<p>有什么用?</p>\n<pre><code>解决在运行期，对某个实例一无所知的情况下，调用其方法\n</code></pre>\n<p>如何使用? (类名.class)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        Class&lt;Student&gt; stdClass = Student.class;</span><br><span class=\"line\">        <span class=\"comment\">// 获取public方法getScore，参数为String:</span></span><br><span class=\"line\">        System.out.println(stdClass.getMethod(<span class=\"string\">&quot;getScore&quot;</span>, String.class));</span><br><span class=\"line\">        <span class=\"comment\">// 获取继承的public方法getName，无参数:</span></span><br><span class=\"line\">        System.out.println(stdClass.getMethod(<span class=\"string\">&quot;getName&quot;</span>));</span><br><span class=\"line\">        <span class=\"comment\">// 获取private方法getGrade，参数为int:</span></span><br><span class=\"line\">        System.out.println(stdClass.getDeclaredMethod(<span class=\"string\">&quot;getGrade&quot;</span>, <span class=\"type\">int</span>.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getScore</span><span class=\"params\">(String type)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">99</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"meta\">@SuppressWarnings(&quot;unused&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"title function_\">getGrade</span><span class=\"params\">(<span class=\"type\">int</span> year)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Person&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>还有多种情况,<a href=\"https://www.oracle.com/technical-resources/articles/java/javareflection.html\">参考</a></p>\n<h2 id=\"3-5-lambda表达式\"><a href=\"#3-5-lambda表达式\" class=\"headerlink\" title=\"3.5 lambda表达式\"></a>3.5 lambda表达式</h2><p>lambda表达式也即<strong>匿名函数</strong>, 允许把函数作为一个方法的参数（函数作为参数传递进方法中）<br>在java中lambda表达式本质上是一个对象</p>\n<p>基本的语法像这样:</p>\n<pre><code>(parameters) -&gt;&#123; statements; &#125;\n</code></pre>\n<p>基本使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-6-异常\"><a href=\"#3-6-异常\" class=\"headerlink\" title=\"3.6 异常\"></a>3.6 异常</h2><p>异常主要指程序运行的时候，会发生各种错误, 不包括编译时发生的</p>\n<p>异常可以捕获:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">          <span class=\"type\">int</span> i=<span class=\"number\">10</span>/<span class=\"number\">0</span>;</span><br><span class=\"line\">      &#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</span><br><span class=\"line\">          e.printStackTrace();</span><br><span class=\"line\">      &#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">         <span class=\"comment\">// todo</span></span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n<p>也可以抛出</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 自动抛出</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">       testException(<span class=\"number\">10</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 手动抛出</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testException</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> <span class=\"keyword\">throws</span> RuntimeException &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (b &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           System.out.println(a / b);</span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;除数不能为零&quot;</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br></pre></td></tr></table></figure>\n<p>还可以自定义异常 (继承Exception类)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyException</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Exception</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyException</span><span class=\"params\">(String msg)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(msg+<span class=\"string\">&quot; from MyException&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"四、常用类\"><a href=\"#四、常用类\" class=\"headerlink\" title=\"四、常用类\"></a>四、常用类</h1><h2 id=\"4-1-数组-Arrays\"><a href=\"#4-1-数组-Arrays\" class=\"headerlink\" title=\"4.1 数组 &amp; Arrays\"></a>4.1 数组 &amp; Arrays</h2><p>数组的定义和使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.创建array对象</span></span><br><span class=\"line\"><span class=\"type\">int</span>[] array=<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"comment\">// 赋值</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">    array[i]=i+<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 使用</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i : array) &#123;</span><br><span class=\"line\">    System.out.print(i+<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 其他</span></span><br><span class=\"line\"><span class=\"type\">int</span>[] a2=&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>&#125;;</span><br><span class=\"line\">String[] strings=&#123;<span class=\"string\">&quot;asd&quot;</span>,<span class=\"string\">&quot;sdas&quot;</span>&#125;;</span><br></pre></td></tr></table></figure>\n<p>Arrays 类是一个工具类，其中包含了数组操作的很多方法。 Arrays 类里均为 static 修饰的方法可以直接通过类名调用。<br>例如使用Arrays对数组排序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.创建array对象, 并赋值</span></span><br><span class=\"line\">String[] strings = &#123; <span class=\"string\">&quot;hello&quot;</span>, <span class=\"string\">&quot;thank&quot;</span>, <span class=\"string\">&quot;you&quot;</span>, <span class=\"string\">&quot;are&quot;</span>, <span class=\"string\">&quot;ok&quot;</span> &#125;;</span><br><span class=\"line\"><span class=\"comment\">// 顺序</span></span><br><span class=\"line\">Arrays.sort(strings);</span><br><span class=\"line\">System.out.println(Arrays.toString(strings)); <span class=\"comment\">// [are, hello, ok, thank, you]</span></span><br><span class=\"line\"><span class=\"comment\">// 逆序</span></span><br><span class=\"line\">Arrays.sort(strings, Comparator.reverseOrder());</span><br><span class=\"line\">System.out.println(Arrays.toString(strings)); <span class=\"comment\">// [you, thank, ok, hello, are]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-2-String-StringBuffer和StringBuilder\"><a href=\"#4-2-String-StringBuffer和StringBuilder\" class=\"headerlink\" title=\"4.2 String, StringBuffer和StringBuilder\"></a>4.2 String, StringBuffer和StringBuilder</h2><h3 id=\"4-2-1-String\"><a href=\"#4-2-1-String\" class=\"headerlink\" title=\"4.2.1 String\"></a>4.2.1 String</h3><p> String 是 final 修饰的，无法被继承。且 String 不是 Java 的基本数据类型<br>通过new创建的String对象,和直接赋值的String对象稍有不同:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * TestString</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 可以和八种基本数据类型做运算</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestString</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testStringJoint</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 字面量定义,s1指向方法区中的静态常量池</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Quanwei&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s2</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Quanwei&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">// s2-&gt;堆空间地址值</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s3</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;Quanwei&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;s1 == s2: &quot;</span> + (s1 == s2)); <span class=\"comment\">// true</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;s1 == s3: &quot;</span> + (s1 == s3)); <span class=\"comment\">// false</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;s1.equals(s2): &quot;</span> + (s1.equals(s2)));<span class=\"comment\">// true</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;s1.equals(s3): &quot;</span> + (s1.equals(s3)));<span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s4</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;TangQuanwei&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s5</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Tang&quot;</span> + <span class=\"string\">&quot;Quanwei&quot;</span>; <span class=\"comment\">// 常量与常量拼接在静态常量池</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;s4 == s5: &quot;</span> + (s4 == s5)); <span class=\"comment\">// true</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s6</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Tang&quot;</span> + s1; <span class=\"comment\">// 常量与引用拼接-&gt;堆空间地址值</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;s4 == s6: &quot;</span> + (s4 == s6)); <span class=\"comment\">// false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testToCharArray</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Quanwei&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">char</span>[] charArray = s1.toCharArray();</span><br><span class=\"line\">        System.out.println(Arrays.toString(charArray));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s2</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;权威&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">char</span>[] charArray2 = s2.toCharArray();</span><br><span class=\"line\">        System.out.println(Arrays.toString(charArray2));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testGetBytes</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Quanwei&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">byte</span>[] bytes = s1.getBytes();</span><br><span class=\"line\">        System.out.println(Arrays.toString(bytes));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s2</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;权威&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">byte</span>[] bytes2 = s2.getBytes();<span class=\"comment\">// 默认utf-8</span></span><br><span class=\"line\">        System.out.println(Arrays.toString(bytes2));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">byte</span>[] bytes3 = s2.getBytes(<span class=\"string\">&quot;gbk&quot;</span>);</span><br><span class=\"line\">            System.out.println(Arrays.toString(bytes3));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">byte</span>[] bytes4 = s2.getBytes(<span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\">            System.out.println(Arrays.toString(bytes4));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> String 是不可变的，而 StringBuffer 和 StringBuilder 是可变类</p>\n<h3 id=\"4-2-2-StringBuffer和StringBuilder\"><a href=\"#4-2-2-StringBuffer和StringBuilder\" class=\"headerlink\" title=\"4.2.2 StringBuffer和StringBuilder\"></a>4.2.2 StringBuffer和StringBuilder</h3><p> 二者区别就是:</p>\n<table>\n<thead>\n<tr>\n<th>StringBuffer</th>\n<th>StringBuilder</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>线程安全</td>\n<td>非线程安全</td>\n</tr>\n<tr>\n<td>同步</td>\n<td>非同步</td>\n</tr>\n<tr>\n<td>慢</td>\n<td>快</td>\n</tr>\n<tr>\n<td>所以在非多线程环境中的字符串操作，我们一般用 StringBuilder , 因为二者的方法都是差不多的</td>\n<td></td>\n</tr>\n<tr>\n<td>它们为字符串操作提供了 append、insert、delete 和 substring 方法</td>\n<td></td>\n</tr>\n</tbody></table>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testStringBuilder</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">var</span> <span class=\"variable\">sb1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>(<span class=\"string\">&quot;Tang&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">var</span> <span class=\"variable\">sb2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>(<span class=\"string\">&quot;t&quot;</span>);</span><br><span class=\"line\">    System.out.println(sb1.capacity());<span class=\"comment\">// 20</span></span><br><span class=\"line\">    System.out.println(sb1.length());<span class=\"comment\">// 4</span></span><br><span class=\"line\">    sb1.ensureCapacity(<span class=\"number\">40</span>);</span><br><span class=\"line\">    System.out.println(sb1.capacity());<span class=\"comment\">// 42</span></span><br><span class=\"line\">    System.out.println(sb2.capacity());<span class=\"comment\">// 17</span></span><br><span class=\"line\">    sb1.append(<span class=\"string\">&quot;Quawnei&quot;</span>);</span><br><span class=\"line\">    System.out.println(sb1);<span class=\"comment\">//TangQuawnei</span></span><br><span class=\"line\">    sb1.insert(<span class=\"number\">4</span>, <span class=\"string\">&quot;-&gt;&quot;</span>);</span><br><span class=\"line\">    System.out.println(sb1);<span class=\"comment\">//Tang-&gt;Quawnei</span></span><br><span class=\"line\">    sb1.delete(<span class=\"number\">0</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">    System.out.println(sb1);<span class=\"comment\">//-&gt;Quawnei</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-3-System类和Runtime类\"><a href=\"#4-3-System类和Runtime类\" class=\"headerlink\" title=\"4.3 System类和Runtime类\"></a>4.3 System类和Runtime类</h2><h3 id=\"4-3-1-静态字段\"><a href=\"#4-3-1-静态字段\" class=\"headerlink\" title=\"4.3.1 静态字段\"></a>4.3.1 静态字段</h3><p>System 类有 3 个静态成员变量，分别是 PrintStream <strong>out</strong>、InputStream <strong>in</strong> 和 PrintStream <strong>err</strong><br>out跟err的区别大概是:<br>System.out.println可能会被缓冲,而System.err.println不会，由于err不需要缓冲即可输出</p>\n<pre><code>PrintStream out\n</code></pre>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(<span class=\"string\">&quot;quanwei);</span></span><br></pre></td></tr></table></figure>\n<pre><code>InputStream in \n</code></pre>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">read</span> <span class=\"operator\">=</span> System.in.read();<span class=\"comment\">// 读一个字符的ascii码</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-3-2-静态方法\"><a href=\"#4-3-2-静态方法\" class=\"headerlink\" title=\"4.3.2 静态方法\"></a>4.3.2 静态方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取系统属性</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">jversion</span> <span class=\"operator\">=</span> System.getProperty(<span class=\"string\">&quot;java.version&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">oName</span> <span class=\"operator\">=</span> System.getProperty(<span class=\"string\">&quot;os.name&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> System.getProperty(<span class=\"string\">&quot;user.name&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Java 运行时环境版本：&quot;</span> + jversion);<span class=\"comment\">// Java 运行时环境版本：17.0.1</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;当前操作系统是：&quot;</span> + oName);<span class=\"comment\">// 当前操作系统是：Windows 10</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;当前用户是：&quot;</span> + user);<span class=\"comment\">// 当前用户是：QUANWEI</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 时间的格式为当前计算机时间与 GMT 时间（格林尼治时间）</span></span><br><span class=\"line\">        <span class=\"comment\">// 1970 年 1 月 1 日 0 时 0 分 0 秒所差的毫秒数</span></span><br><span class=\"line\">        <span class=\"type\">Date</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(System.currentTimeMillis());<span class=\"comment\">//</span></span><br><span class=\"line\">        System.out.println(date); <span class=\"comment\">// Mon Jan 10 20:20:43 CST 2022</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span>[] a = &#123; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span> &#125;;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] b = &#123; <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span> &#125;;</span><br><span class=\"line\">        <span class=\"comment\">// 合并数组</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[] marge = marge(a, b);</span><br><span class=\"line\">        System.out.println(Arrays.toString(marge));<span class=\"comment\">// [1, 2, 3, 4, 5, 2, 3, 4, 5, 6]</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 请求系统进行垃圾回收</span></span><br><span class=\"line\">        System.gc();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 终止当前正在运行的 Java 虚拟机</span></span><br><span class=\"line\">        System.exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] marge(<span class=\"type\">int</span>[] a, <span class=\"type\">int</span>[] b) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] ret = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[a.length + b.length];</span><br><span class=\"line\">        System.arraycopy(a, <span class=\"number\">0</span>, ret, <span class=\"number\">0</span>, a.length);</span><br><span class=\"line\">        System.arraycopy(b, <span class=\"number\">0</span>, ret, a.length, b.length);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-4-包装类\"><a href=\"#4-4-包装类\" class=\"headerlink\" title=\"4.4 包装类\"></a>4.4 包装类</h2><p>| 基本类 | 包装类 |<br>|-|-|-|<br>|byte| Byte|<br>|short | Short|<br>|int | Integer|<br>|long | Long|<br>|char | Character|<br>|float| Float|<br>|double | Double|<br>|boolean | Boolean|<br>常用方法 :<br>        <strong>包装类名.parseXxx(String );</strong><br>        <strong>包装类名.valueOf(String );</strong><br>        <strong>包装类名.toString();</strong></p>\n<h2 id=\"4-5-Math和Random\"><a href=\"#4-5-Math和Random\" class=\"headerlink\" title=\"4.5 Math和Random\"></a>4.5 Math和Random</h2><p>Math类就是用来进行数学计算的，它提供了大量的静态方法来便于我们实现数学计算<br>比如:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数学常量：</span></span><br><span class=\"line\"><span class=\"type\">double</span> <span class=\"variable\">pi</span> <span class=\"operator\">=</span> Math.PI; <span class=\"comment\">// 3.14159...</span></span><br><span class=\"line\"><span class=\"type\">double</span> <span class=\"variable\">e</span> <span class=\"operator\">=</span> Math.E; <span class=\"comment\">// 2.7182818...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 求绝对值：</span></span><br><span class=\"line\">Math.abs(-<span class=\"number\">100</span>); <span class=\"comment\">// 100</span></span><br><span class=\"line\">Math.abs(-<span class=\"number\">7.8</span>); <span class=\"comment\">// 7.8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 取最大或最小值：</span></span><br><span class=\"line\"></span><br><span class=\"line\">Math.max(<span class=\"number\">100</span>, <span class=\"number\">99</span>); <span class=\"comment\">// 100</span></span><br><span class=\"line\">Math.min(<span class=\"number\">1.2</span>, <span class=\"number\">2.3</span>); <span class=\"comment\">// 1.2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 计算xy次方：</span></span><br><span class=\"line\">Math.pow(<span class=\"number\">2</span>, <span class=\"number\">10</span>); <span class=\"comment\">// 2的10次方=1024</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 计算√x：</span></span><br><span class=\"line\">Math.sqrt(<span class=\"number\">2</span>); <span class=\"comment\">// 1.414...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 计算ex次方：</span></span><br><span class=\"line\">Math.exp(<span class=\"number\">2</span>); <span class=\"comment\">// 7.389...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 计算以e为底的对数：</span></span><br><span class=\"line\">Math.log(<span class=\"number\">4</span>); <span class=\"comment\">// 1.386...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 计算以10为底的对数：</span></span><br><span class=\"line\">Math.log10(<span class=\"number\">100</span>); <span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 三角函数：</span></span><br><span class=\"line\">Math.sin(<span class=\"number\">3.14</span>); <span class=\"comment\">// 0.00159...</span></span><br><span class=\"line\">Math.cos(<span class=\"number\">3.14</span>); <span class=\"comment\">// -0.9999...</span></span><br><span class=\"line\">Math.tan(<span class=\"number\">3.14</span>); <span class=\"comment\">// -0.0015...</span></span><br><span class=\"line\">Math.asin(<span class=\"number\">1.0</span>); <span class=\"comment\">// 1.57079...</span></span><br><span class=\"line\">Math.acos(<span class=\"number\">1.0</span>); <span class=\"comment\">// 0.0</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-6-BigInteger类和BigDecimal类\"><a href=\"#4-6-BigInteger类和BigDecimal类\" class=\"headerlink\" title=\"4.6 BigInteger类和BigDecimal类\"></a>4.6 BigInteger类和BigDecimal类</h2><font color=#999AAA >\n在Java中，由CPU原生提供的整型最大范围是64位long型整数。使用long型整数可以直接通过CPU指令进行计算, 如果我们使用的整数范围超过了long型就只能用软件来模拟一个大整数。java.math.BigInteger就是用来表示任意大小的整数。BigInteger内部用一个int[]数组来模拟一个非常大的整数\n</font>\n<br />\n<br />\n由于Java不支持运算符重载, 在对BigInteger做运算的时候，只能使用对象的方法，例如，\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">BigInteger</span> <span class=\"variable\">i1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigInteger</span>(<span class=\"string\">&quot;1234567890&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">BigInteger</span> <span class=\"variable\">i2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigInteger</span>(<span class=\"string\">&quot;12345678901234567890&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">BigInteger</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> i1.add(i2); <span class=\"comment\">// 12345678902469135780</span></span><br></pre></td></tr></table></figure>\n<p>BigDecimal和BigInteger类似，可以用来表示一个任意大小且精度完全准确的浮点数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">BigDecimal</span> <span class=\"variable\">d1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(<span class=\"string\">&quot;9876543210.0123456789&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">BigDecimal</span> <span class=\"variable\">d2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(<span class=\"string\">&quot;123.45000000000000000&quot;</span>);</span><br><span class=\"line\">System.out.println(d1.scale()); <span class=\"comment\">// 10,两位小数</span></span><br><span class=\"line\">System.out.println(d1.add(d2));</span><br><span class=\"line\">System.out.println(d1.subtract(d2));</span><br><span class=\"line\">System.out.println(d1.multiply(d2));</span><br><span class=\"line\"><span class=\"comment\">// 无法除尽时，就必须指定精度以及如何进行截断</span></span><br><span class=\"line\">System.out.println(d1.divide(d2, <span class=\"number\">10</span>, RoundingMode.HALF_UP));<span class=\"comment\">// 四舍五入</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-7-时间和日期类\"><a href=\"#4-7-时间和日期类\" class=\"headerlink\" title=\"4.7 时间和日期类\"></a>4.7 时间和日期类</h2><p>JDK8以前</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.text.ParseException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.SimpleDateFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Calendar;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * JDK 8 以前 时间日期API</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 1.System.currentTimeMillis()</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 2.java.util.Calendar;  java.util.Date;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 3.SimpleDateFormat</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 4.Calender</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestBefer8</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testTime</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取当前时间的毫秒数时间戳</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;TestDateTime.testTime()&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">currentTimeMillis</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">        System.out.println(currentTimeMillis);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testDate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// java.util.Date</span></span><br><span class=\"line\">        <span class=\"type\">Date</span> <span class=\"variable\">d1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\">        System.out.println(d1);</span><br><span class=\"line\">        System.out.println(d1.getTime());<span class=\"comment\">// 毫秒数时间戳</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">var</span> <span class=\"variable\">d2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"number\">1631504736660L</span>);</span><br><span class=\"line\">        System.out.println(d2);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// java.sql.Date 是 java.util.Date 的子类</span></span><br><span class=\"line\">        <span class=\"type\">var</span> <span class=\"variable\">d3</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">java</span>.sql.Date(<span class=\"number\">0L</span>);</span><br><span class=\"line\">        System.out.println(d3);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// java.sql.Date -&gt; java.util.Date</span></span><br><span class=\"line\">        <span class=\"type\">Date</span> <span class=\"variable\">d4</span> <span class=\"operator\">=</span> (Date) d3;</span><br><span class=\"line\">        System.out.println(d4);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// java.util.Date -&gt; java.sql.Date</span></span><br><span class=\"line\">        java.sql.<span class=\"type\">Date</span> <span class=\"variable\">d5</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">java</span>.sql.Date(d4.getTime());</span><br><span class=\"line\">        System.out.println(d5);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * SimpleDateFormat对Date类的格式化和解析</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * 1.格式化: 日期 --&gt; 字符串</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * 2.解析:格式化的逆过程: 字符串 --&gt; 日期</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testFormat</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;TestDateTime.testFormat()&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 格式化</span></span><br><span class=\"line\">        <span class=\"type\">SimpleDateFormat</span> <span class=\"variable\">sdf</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>();</span><br><span class=\"line\">        <span class=\"type\">Date</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">format</span> <span class=\"operator\">=</span> sdf.format(date);</span><br><span class=\"line\">        System.out.println(format);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 指定格式</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">parttern</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;yyyy-MM-dd hh:mm:ss:SSS z&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">SimpleDateFormat</span> <span class=\"variable\">sdf2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(parttern);</span><br><span class=\"line\">        System.out.println(sdf2.format(date));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 解析</span></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;2021/9/13 下午2:58&quot;</span>;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">s2</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;2002-10-09 08:31:12:234 CST&quot;</span>;</span><br><span class=\"line\">            <span class=\"type\">Date</span> <span class=\"variable\">d1</span> <span class=\"operator\">=</span> sdf.parse(str);</span><br><span class=\"line\">            System.out.println(d1);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ParseException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Calender 抽象基类</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * 主要用于完成日期字段之间相互操作的功能</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testCalender</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1.调用静态方法获取实例</span></span><br><span class=\"line\">        <span class=\"type\">Calendar</span> <span class=\"variable\">cal</span> <span class=\"operator\">=</span> Calendar.getInstance();</span><br><span class=\"line\">        <span class=\"type\">Calendar</span> <span class=\"variable\">instance2</span> <span class=\"operator\">=</span> Calendar.getInstance();</span><br><span class=\"line\">        System.out.println(cal.getClass());<span class=\"comment\">// class java.util.GregorianCalendar</span></span><br><span class=\"line\">        System.out.println(cal.equals(instance2));<span class=\"comment\">//false</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//get</span></span><br><span class=\"line\">        System.out.println(cal.get(Calendar.DAY_OF_MONTH));</span><br><span class=\"line\">        System.out.println(cal.get(Calendar.DAY_OF_YEAR));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>JDK8以后</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.time.Instant;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.time.LocalDate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.time.LocalDateTime;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.time.LocalTime;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.time.OffsetDateTime;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.time.ZoneOffset;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.time.format.DateTimeFormatter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.time.format.FormatStyle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.time.temporal.TemporalAccessor;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * JDK 8 中的时间日期API</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 1.LocalDate</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 2.LocalTime</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 3.LocalDateTime</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 4.Instant 机器时间</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 5.DateTimeFormater</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestIn8</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testDate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">LocalDate</span> <span class=\"variable\">now</span> <span class=\"operator\">=</span> LocalDate.now();</span><br><span class=\"line\">        System.out.println(now);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testTime</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">LocalTime</span> <span class=\"variable\">now</span> <span class=\"operator\">=</span> LocalTime.now();</span><br><span class=\"line\">        System.out.println(now);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testLocalDateTime</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// now 获取当前的日期和时间</span></span><br><span class=\"line\">        <span class=\"type\">LocalDateTime</span> <span class=\"variable\">now</span> <span class=\"operator\">=</span> LocalDateTime.now();</span><br><span class=\"line\">        System.out.println(now);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// of 获取指定的日期时间 没有偏移量</span></span><br><span class=\"line\">        <span class=\"type\">LocalDateTime</span> <span class=\"variable\">of</span> <span class=\"operator\">=</span> LocalDateTime.of(<span class=\"number\">2002</span>, <span class=\"number\">10</span>, <span class=\"number\">9</span>, <span class=\"number\">16</span>, <span class=\"number\">34</span>, <span class=\"number\">35</span>);</span><br><span class=\"line\">        System.out.println(of);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// getXxx</span></span><br><span class=\"line\">        System.out.println(now.getDayOfMonth());</span><br><span class=\"line\">        System.out.println(now.getDayOfYear());</span><br><span class=\"line\">        System.out.println(now.getChronology());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testInstant</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// now() 获取本初子午线对应的标准时间</span></span><br><span class=\"line\">        <span class=\"type\">Instant</span> <span class=\"variable\">now</span> <span class=\"operator\">=</span> Instant.now();</span><br><span class=\"line\">        System.out.println(now);<span class=\"comment\">// 慢八个小时</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 添加时间偏移量</span></span><br><span class=\"line\">        <span class=\"type\">OffsetDateTime</span> <span class=\"variable\">offSet</span> <span class=\"operator\">=</span> now.atOffset(ZoneOffset.ofHours(<span class=\"number\">8</span>));</span><br><span class=\"line\">        System.out.println(offSet);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 1970(UTC)-&gt;现在 经过的毫秒数</span></span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">epochMilli</span> <span class=\"operator\">=</span> now.toEpochMilli();</span><br><span class=\"line\">        System.out.println(epochMilli);<span class=\"comment\">// 1631521135573</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 毫秒数-&gt;instant</span></span><br><span class=\"line\">        <span class=\"type\">Instant</span> <span class=\"variable\">ofEpochMilli</span> <span class=\"operator\">=</span> Instant.ofEpochMilli(<span class=\"number\">1631521135573L</span>);</span><br><span class=\"line\">        System.out.println(ofEpochMilli);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testDateTimeFormater</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">LocalDateTime</span> <span class=\"variable\">now</span> <span class=\"operator\">=</span> LocalDateTime.now();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 格式化1</span></span><br><span class=\"line\">        <span class=\"type\">DateTimeFormatter</span> <span class=\"variable\">formatter</span> <span class=\"operator\">=</span> DateTimeFormatter.ISO_LOCAL_DATE_TIME;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">format</span> <span class=\"operator\">=</span> formatter.format(now);</span><br><span class=\"line\">        System.out.println(format); <span class=\"comment\">// 2021-09-13T16:56:14.4738222</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 解析</span></span><br><span class=\"line\">        <span class=\"type\">TemporalAccessor</span> <span class=\"variable\">parse</span> <span class=\"operator\">=</span> formatter.parse(<span class=\"string\">&quot;2021-09-13T16:56:14.4738222&quot;</span>);</span><br><span class=\"line\">        System.out.println(parse);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 格式化2: 本地格式化</span></span><br><span class=\"line\">        <span class=\"type\">DateTimeFormatter</span> <span class=\"variable\">formatter2</span> <span class=\"operator\">=</span> DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">format2</span> <span class=\"operator\">=</span> formatter2.format(now);</span><br><span class=\"line\">        System.out.println(format2);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 格式化3: 自定义格式化</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> String pattern=<span class=\"string\">&quot;GG yyyy年MM月dd日 EE a hh时mm分ss秒&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">DateTimeFormatter</span> <span class=\"variable\">formatter3</span> <span class=\"operator\">=</span> DateTimeFormatter.ofPattern(pattern);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">format3</span> <span class=\"operator\">=</span> formatter3.format(LocalDateTime.now());</span><br><span class=\"line\">        System.out.println(format3);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"五、集合\"><a href=\"#五、集合\" class=\"headerlink\" title=\"五、集合\"></a>五、集合</h1><font color=#999AAA >\nJava Collection Framework  (JCF) Java集合框架是一组提供现成架构的类和接口。为了实现一个新特性或一个类，不需要定义一个框架。然而，一个最佳的面向对象设计总是包含一个具有类集合的框架，这样所有的类都执行相同类型的任务。\n</font>\n\n<h2 id=\"5-1-Collection和Collections\"><a href=\"#5-1-Collection和Collections\" class=\"headerlink\" title=\"5.1 Collection和Collections\"></a>5.1 Collection和Collections</h2><p>Collections</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">       List&lt;String&gt; ls = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">       ls.add(<span class=\"string\">&quot;reverse&quot;</span>);</span><br><span class=\"line\">       ls.add(<span class=\"string\">&quot;shuffle&quot;</span>);</span><br><span class=\"line\">       ls.add(<span class=\"string\">&quot;sort&quot;</span>);</span><br><span class=\"line\">       ls.add(<span class=\"string\">&quot;swap&quot;</span>);</span><br><span class=\"line\">       ls.add(<span class=\"string\">&quot;rotate&quot;</span>);</span><br><span class=\"line\">       System.out.println(ls);<span class=\"comment\">// [reverse, shuffle, sort, swap, rotate]</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// 反转</span></span><br><span class=\"line\">       Collections.reverse(ls);</span><br><span class=\"line\">       System.out.println(ls);<span class=\"comment\">// [rotate, swap, sort, shuffle, reverse]</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// 按升序进行排序</span></span><br><span class=\"line\">       Collections.sort(ls);</span><br><span class=\"line\">       System.out.println(ls);<span class=\"comment\">// [reverse, rotate, shuffle, sort, swap]</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// 根据指定 Comparator排序</span></span><br><span class=\"line\">       Collections.sort(ls, <span class=\"keyword\">new</span> <span class=\"title class_\">Comparator</span>&lt;String&gt;() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"meta\">@Override</span></span><br><span class=\"line\">           <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compare</span><span class=\"params\">(String o1, String o2)</span> &#123;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> -o1.compareTo(o2);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\">       System.out.println(ls);<span class=\"comment\">// [swap, sort, shuffle, rotate, reverse]</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// 按下标交换</span></span><br><span class=\"line\">       Collections.swap(ls, <span class=\"number\">0</span>, ls.size() - <span class=\"number\">1</span>);</span><br><span class=\"line\">       System.out.println(ls);<span class=\"comment\">// [reverse, sort, shuffle, rotate, swap]</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// 将 list 集合的后 distance 个元素整体移到前面</span></span><br><span class=\"line\">       Collections.rotate(ls, <span class=\"number\">2</span>);</span><br><span class=\"line\">       System.out.println(ls);<span class=\"comment\">// [rotate, swap, reverse, sort, shuffle]</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// 将 list 集合的前 distance 个元素整体移到后面</span></span><br><span class=\"line\">       Collections.rotate(ls, -<span class=\"number\">3</span>);</span><br><span class=\"line\">       System.out.println(ls);<span class=\"comment\">// [sort, shuffle, rotate, swap, reverse]</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// 返回指定集合中指定元素的出现次数</span></span><br><span class=\"line\">       ls.add(<span class=\"string\">&quot;sort&quot;</span>);</span><br><span class=\"line\">       <span class=\"type\">int</span> <span class=\"variable\">frequency</span> <span class=\"operator\">=</span> Collections.frequency(ls, <span class=\"string\">&quot;sort&quot;</span>);</span><br><span class=\"line\">       System.out.println(frequency);<span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// 将指定集合中的所有元素复制到另一个集合中,目标集合的长度至少和源集合的长度相同</span></span><br><span class=\"line\">       List&lt;String&gt; l2 = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();<span class=\"comment\">// ArrayList -&gt; LinkedList</span></span><br><span class=\"line\">       l2.add(<span class=\"string\">&quot;reverse1&quot;</span>);</span><br><span class=\"line\">       l2.add(<span class=\"string\">&quot;shuffle1&quot;</span>);</span><br><span class=\"line\">       l2.add(<span class=\"string\">&quot;sort1&quot;</span>);</span><br><span class=\"line\">       l2.add(<span class=\"string\">&quot;swap1&quot;</span>);</span><br><span class=\"line\">       l2.add(<span class=\"string\">&quot;rotate1&quot;</span>);</span><br><span class=\"line\">       Collections.copy(ls, l2);</span><br><span class=\"line\">       System.out.println(ls);<span class=\"comment\">// [reverse1, shuffle1, sort1, swap1, rotate1, sort]</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// LinkedList -&gt; ArrayList</span></span><br><span class=\"line\">       <span class=\"comment\">// ! IndexOutOfBoundsException Source does not fit in dest</span></span><br><span class=\"line\">       Collections.copy(l2, ls);</span><br><span class=\"line\">       System.out.println(ls);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"5-2-常用类-接口\"><a href=\"#5-2-常用类-接口\" class=\"headerlink\" title=\"5.2 常用类, 接口\"></a>5.2 常用类, 接口</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 列表</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testList</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// &lt;&gt; 中的类型只能是引用类型</span></span><br><span class=\"line\">    List&lt;Integer&gt; al = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    List&lt;Integer&gt; ll = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 队列</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testQueue</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    Queue&lt;Integer&gt; ad = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayDeque</span>&lt;&gt;();</span><br><span class=\"line\">    Queue&lt;Integer&gt; ll = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\">    Queue&lt;Integer&gt; pq = <span class=\"keyword\">new</span> <span class=\"title class_\">PriorityQueue</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 集合</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testSet</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    Set&lt;Object&gt; hs = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;();</span><br><span class=\"line\">    Set&lt;Object&gt; ts = <span class=\"keyword\">new</span> <span class=\"title class_\">TreeSet</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 映射</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testMap</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    Map&lt;Integer, String&gt; hm = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    Map&lt;Integer, String&gt; tm = <span class=\"keyword\">new</span> <span class=\"title class_\">TreeMap</span>&lt;&gt;();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-5-Stream-API\"><a href=\"#5-5-Stream-API\" class=\"headerlink\" title=\"5.5 Stream API\"></a>5.5 Stream API</h2><p>在 Java 8 中引入的 Stream API 用于处理对象的集合。流是支持各种方法的对象序列，这些方法可以流水线化以产生所需的结果。<br>Java 流的特点是:</p>\n<p>流不是数据结构，而是从集合、数组或 I&#x2F;O 通道获取输入。<br>流不会更改原始数据结构，它们仅根据流水线方法提供结果。<br>每个中间操作都被延迟执行并返回一个流作为结果，因此可以对各种中间操作进行流水线化。终端操作标记流的结束并返回结果。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testStream</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建</span></span><br><span class=\"line\">    List&lt;Integer&gt; number = Arrays.asList(<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用map将number的元素平方</span></span><br><span class=\"line\">    List&lt;Integer&gt; square = number.stream().map(x -&gt; x * x).collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(square);<span class=\"comment\">// [4, 9, 16, 25]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建</span></span><br><span class=\"line\">    List&lt;String&gt; names = Arrays.asList(<span class=\"string\">&quot;Reflection&quot;</span>, <span class=\"string\">&quot;Collection&quot;</span>, <span class=\"string\">&quot;Stream&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 过滤</span></span><br><span class=\"line\">    List&lt;String&gt; result = names.stream().filter(s -&gt; s.startsWith(<span class=\"string\">&quot;S&quot;</span>)).collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(result);<span class=\"comment\">// [Stream]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 排序</span></span><br><span class=\"line\">    List&lt;String&gt; show = names.stream().sorted().collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(show);<span class=\"comment\">// [Collection, Reflection, Stream]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建</span></span><br><span class=\"line\">    List&lt;Integer&gt; numbers = Arrays.asList(<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 收集</span></span><br><span class=\"line\">    Set&lt;Integer&gt; squareSet = numbers.stream().map(x -&gt; x * x).collect(Collectors.toSet());</span><br><span class=\"line\">    System.out.println(squareSet);<span class=\"comment\">// [16, 4, 9, 25]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// forEach</span></span><br><span class=\"line\">    number.stream().map(x -&gt; x * x).forEach(y -&gt; System.out.print(y + <span class=\"string\">&quot; &quot;</span>));<span class=\"comment\">// 4 9 16 25</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// reduce</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">even</span> <span class=\"operator\">=</span> number.stream().filter(x -&gt; x % <span class=\"number\">2</span> == <span class=\"number\">0</span>).reduce(<span class=\"number\">0</span>, (ans, i) -&gt; ans + i);<span class=\"comment\">// 0+2+4</span></span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(even);<span class=\"comment\">// 6</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-6-泛型\"><a href=\"#5-6-泛型\" class=\"headerlink\" title=\"5.6 泛型\"></a>5.6 泛型</h2><font color=#999AAA >\n泛型意味着参数化类型。这个想法是允许类型（整数、字符串等，以及用户定义的类型）作为方法、类和接口的参数。使用泛型，可以创建使用不同数据类型的类。\n对参数化类型进行操作的实体（例如类、接口或方法）称为泛型实体。\n</font>\n\n<p>与 C++ 一样，我们使用 &lt;&gt; 来指定泛型类创建中的参数类型。要创建泛型类的对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Pair</span>&lt;T, U&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> T first;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> U second;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Pair</span><span class=\"params\">(T first, U second)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.setFirst(first);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.setSecond(second);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the second</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> U <span class=\"title function_\">getSecond</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> second;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> second the second to set</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setSecond</span><span class=\"params\">(U second)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.second = second;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the first</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> T <span class=\"title function_\">getFirst</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> first;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> first the first to set</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setFirst</span><span class=\"params\">(T first)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.first = first;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;( &quot;</span> + first + <span class=\"string\">&quot;, &quot;</span> + second + <span class=\"string\">&quot;)&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"六、I-O流\"><a href=\"#六、I-O流\" class=\"headerlink\" title=\"六、I&#x2F;O流\"></a>六、I&#x2F;O流</h1><font color=#999AAA >\nIO是指Input/Output，即以内存为中心的输入和输出。\n</font>\n\n<h2 id=\"6-1-BIO\"><a href=\"#6-1-BIO\" class=\"headerlink\" title=\"6.1 BIO\"></a>6.1 BIO</h2><font color=#999AAA >\nBIO即 Blocking Input/Output, 即阻塞的I/O\n</font>\n\n<h3 id=\"6-1-1-Flie\"><a href=\"#6-1-1-Flie\" class=\"headerlink\" title=\"6.1.1 Flie\"></a>6.1.1 Flie</h3><p>用于文件和目录的创建、文件的查找和文件的删除等</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> lang.io;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * File表示一个文件或一个文件夹 在java.io包下</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestFile</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 构造一个File对象，并不会导致任何磁盘操作</span></span><br><span class=\"line\">    <span class=\"comment\">// 文件夹</span></span><br><span class=\"line\">    <span class=\"type\">File</span> <span class=\"variable\">floder</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;D:\\\\workspaceFolder\\\\CODE_JAVA&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 文件</span></span><br><span class=\"line\">    <span class=\"type\">File</span> <span class=\"variable\">file</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;D:\\\\workspaceFolder\\\\CODE_JAVA\\\\a.txt&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testGet</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 返回绝对路径，</span></span><br><span class=\"line\">        System.out.println(file);</span><br><span class=\"line\">        <span class=\"comment\">// 返回构造方法传入的路径，</span></span><br><span class=\"line\">        System.out.println(file.getPath());</span><br><span class=\"line\">        <span class=\"comment\">// 返回绝对路径，</span></span><br><span class=\"line\">        System.out.println(file.getAbsolutePath());</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123; <span class=\"comment\">// 返回绝对路径，</span></span><br><span class=\"line\">            System.out.println(file.getCanonicalPath());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 输出文件夹下文件</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i : floder.listFiles()) &#123;</span><br><span class=\"line\">            System.out.println(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testCreate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">File</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;test.file&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!f.exists()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 创建</span></span><br><span class=\"line\">                f.createNewFile();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testDelete</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">File</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;test.file&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (f.exists()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 删除</span></span><br><span class=\"line\">            <span class=\"type\">boolean</span> <span class=\"variable\">delete</span> <span class=\"operator\">=</span> f.delete();</span><br><span class=\"line\">            System.out.println(delete?<span class=\"string\">&quot;delete&quot;</span>:<span class=\"string\">&quot;not exist&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"6-1-2-ByteStream\"><a href=\"#6-1-2-ByteStream\" class=\"headerlink\" title=\"6.1.2 ByteStream\"></a>6.1.2 ByteStream</h3><p>即字节流, InputStream和OutputStream都是抽象类在里面分别定义了read()和write()方法<br>我们使用它们的子类, FileInputStream和FileOutputStream</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> lang.io;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileNotFoundException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestByteStream</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">copyPng</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">File</span> <span class=\"variable\">file</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;D:\\\\workspaceFolder\\\\CODE_JAVA\\\\猫咪.png&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">File</span> <span class=\"variable\">fileB</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;D:\\\\workspaceFolder\\\\CODE_JAVA\\\\猫咪2.png&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">FileInputStream</span> <span class=\"variable\">fileInputStream</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">FileOutputStream</span> <span class=\"variable\">fileOutputStream</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            fileInputStream = <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(file);</span><br><span class=\"line\">            fileOutputStream = <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(fileB);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">int</span> len;</span><br><span class=\"line\">            <span class=\"type\">byte</span>[] bbuf = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((len = fileInputStream.read(bbuf)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                fileOutputStream.write(bbuf, <span class=\"number\">0</span>, len);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (fileInputStream != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                    fileInputStream.close();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (fileOutputStream != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                    fileOutputStream.close();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">read</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">File</span> <span class=\"variable\">file</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;D:\\\\workspaceFolder\\\\CODE_JAVA\\\\lang\\\\io\\\\TestByteStream.java&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">FileInputStream</span> <span class=\"variable\">fis</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            fis = <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(file);</span><br><span class=\"line\">            <span class=\"type\">int</span> data;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((data = fis.read()) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                System.out.print((<span class=\"type\">char</span>) data);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fis != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    fis.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">TestByteStream</span>().copyPng();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"6-1-3-CharStream\"><a href=\"#6-1-3-CharStream\" class=\"headerlink\" title=\"6.1.3 CharStream\"></a>6.1.3 CharStream</h3><p>CharStream即字符流</p>\n<p>Reader是Java的IO库提供的另一个输入流接口。和InputStream的区别是，InputStream是一个字节流，即以byte为单位读取，而Reader是一个字符流，即以char为单位读取</p>\n<p>我们使用Reader的子类FileReader来演示向文件写入数据和从文件读出数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> lang.io;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileWriter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 内存的角度</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 输入:外部数据-&gt;内存</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 输出:内存-&gt;外部数据</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 字节流(8bit): InputStream, OutPutStream</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 字符流(16bit): Reader, Writer</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestCharStream</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.File对象指明文件</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">File</span> <span class=\"variable\">file</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;data.txt&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Read from file and print to console</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">Read</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 2.Reader对象</span></span><br><span class=\"line\">        <span class=\"type\">FileReader</span> <span class=\"variable\">fileReader</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 3.读</span></span><br><span class=\"line\">            fileReader = <span class=\"keyword\">new</span> <span class=\"title class_\">FileReader</span>(file);<span class=\"comment\">// 读入的文件一定要存在</span></span><br><span class=\"line\">            <span class=\"type\">int</span> read;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((read = fileReader.read()) != -<span class=\"number\">1</span>)</span><br><span class=\"line\">                System.out.print((<span class=\"type\">char</span>) read);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 4.关闭资源</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fileReader != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    fileReader.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Write String to file</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> toBeWrite</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">Write</span><span class=\"params\">(String toBeWrite)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">FileWriter</span> <span class=\"variable\">fileWriter</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            fileWriter = <span class=\"keyword\">new</span> <span class=\"title class_\">FileWriter</span>(file);</span><br><span class=\"line\">            fileWriter.write(<span class=\"string\">&quot;By_Quanwei\\n&quot;</span>);</span><br><span class=\"line\">            fileWriter.append(toBeWrite);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fileWriter != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    fileWriter.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Copy fileA to fileB</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">copyFile</span><span class=\"params\">(String fileA, String fileB)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">FileReader</span> <span class=\"variable\">fileReader</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">FileWriter</span> <span class=\"variable\">fileWriter</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            fileReader = <span class=\"keyword\">new</span> <span class=\"title class_\">FileReader</span>(fileA);</span><br><span class=\"line\">            fileWriter = <span class=\"keyword\">new</span> <span class=\"title class_\">FileWriter</span>(fileB);</span><br><span class=\"line\">            <span class=\"type\">int</span> len;</span><br><span class=\"line\">            <span class=\"type\">char</span>[] cbuf = <span class=\"keyword\">new</span> <span class=\"title class_\">char</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((len = fileReader.read(cbuf)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                fileWriter.write(cbuf, <span class=\"number\">0</span>, len);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (fileReader != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                    fileReader.close();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (fileWriter != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                    fileWriter.close();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">TestCharStream</span>().copyFile(<span class=\"string\">&quot;data.txt&quot;</span>, <span class=\"string\">&quot;file.txt&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testFileReadWite</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">TestCharStream</span> <span class=\"variable\">testIO</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TestCharStream</span>();</span><br><span class=\"line\">        testIO.Write(<span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">                public void Read() &#123;</span></span><br><span class=\"line\"><span class=\"string\">                    try &#123;</span></span><br><span class=\"line\"><span class=\"string\">                        FileReader fileReader = new FileReader(file);</span></span><br><span class=\"line\"><span class=\"string\">                        int read;</span></span><br><span class=\"line\"><span class=\"string\">                        while ((read = fileReader.read()) != -1)</span></span><br><span class=\"line\"><span class=\"string\">                            System.out.print((char)read);</span></span><br><span class=\"line\"><span class=\"string\">                        fileReader.close();</span></span><br><span class=\"line\"><span class=\"string\">                    &#125; catch (IOException e) &#123;</span></span><br><span class=\"line\"><span class=\"string\">                        e.printStackTrace();</span></span><br><span class=\"line\"><span class=\"string\">                    &#125;</span></span><br><span class=\"line\"><span class=\"string\">                &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">                public void Write(String toBeWrite) &#123;</span></span><br><span class=\"line\"><span class=\"string\">                    try &#123;</span></span><br><span class=\"line\"><span class=\"string\">                        FileWriter fileWriter = new FileWriter(file);</span></span><br><span class=\"line\"><span class=\"string\">                        fileWriter.append(toBeWrite);</span></span><br><span class=\"line\"><span class=\"string\">                        fileWriter.close();</span></span><br><span class=\"line\"><span class=\"string\">                    &#125; catch (IOException e) &#123;</span></span><br><span class=\"line\"><span class=\"string\">                        e.printStackTrace();</span></span><br><span class=\"line\"><span class=\"string\">                    &#125;</span></span><br><span class=\"line\"><span class=\"string\">                &#125;</span></span><br><span class=\"line\"><span class=\"string\">                &quot;&quot;&quot;</span>);</span><br><span class=\"line\">        testIO.Read();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Socket与网络编程\"><a href=\"#Socket与网络编程\" class=\"headerlink\" title=\"Socket与网络编程\"></a>Socket与网络编程</h3><p>1.网络编程的两个主要问题 1)如何定位网络上的一台或多态主机,定位主机上的特定应用(IPhe端口) 2)找到主机后如何高效可靠的传输数据(TCP&#x2F;IP)</p>\n<p>本地回环地址: (hostAddress):127.0.0.1</p>\n<p>主机名: (hostName):localhost</p>\n<p>局域网地址: 192.168.~</p>\n<p>端口号: 运行的程序(0-65535)</p>\n<p>Sockst &#x3D; ip + 端口号</p>\n<p>TCP 可靠, 大量(三次握手, 四次挥手)</p>\n<p>UDP 快速</p>\n<p><strong>Url类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> lang.net;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * url https://www.bilibili.com/video/BV1Kb411W75N?p=629</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;协议&gt;//:&lt;主机名&gt;:&lt;端口号&gt;/&lt;文件名/&gt;#&lt;片段名?&gt;&lt;参数列表&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyUrl</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">URL</span> <span class=\"variable\">url</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">URL</span>(<span class=\"string\">&quot;https://www.bilibili.com/video/BV1Kb411W75N?p=629&quot;</span>);</span><br><span class=\"line\">            System.out.println(url.getAuthority());<span class=\"comment\">// www.bilibili.com</span></span><br><span class=\"line\">            System.out.println(url.getDefaultPort());<span class=\"comment\">// 443</span></span><br><span class=\"line\">            System.out.println(url.getFile());<span class=\"comment\">// /video/BV1Kb411W75N?p=629</span></span><br><span class=\"line\">            System.out.println(url.getPath());<span class=\"comment\">// /video/BV1Kb411W75N</span></span><br><span class=\"line\">            System.out.println(url.getProtocol());<span class=\"comment\">// https</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>InetAddress类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">InetAddress</span> <span class=\"variable\">Aliyun</span> <span class=\"operator\">=</span> InetAddress.getByName(<span class=\"string\">&quot;39.99.54.127&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">InetAddress</span> <span class=\"variable\">localHost</span> <span class=\"operator\">=</span> InetAddress.getLocalHost();</span><br><span class=\"line\">    <span class=\"type\">InetAddress</span> <span class=\"variable\">loopbackAddress</span> <span class=\"operator\">=</span> InetAddress.getLoopbackAddress();</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">reachable</span> <span class=\"operator\">=</span> localHost.isReachable(<span class=\"number\">10</span>);</span><br><span class=\"line\">    System.out.println(reachable);<span class=\"comment\">//true</span></span><br><span class=\"line\">    System.out.println(localHost);<span class=\"comment\">//DESKTOP-V9EL4A5/192.168.0.193</span></span><br><span class=\"line\">    System.out.println(Aliyun);<span class=\"comment\">///39.99.54.127</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">canonicalHostName</span> <span class=\"operator\">=</span> Aliyun.getCanonicalHostName();</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">hostName</span> <span class=\"operator\">=</span> Aliyun.getHostName();<span class=\"comment\">//39.99.54.127</span></span><br><span class=\"line\">    System.out.println(hostName);<span class=\"comment\">//39.99.54.127</span></span><br><span class=\"line\">    System.out.println(canonicalHostName);</span><br><span class=\"line\">    System.out.println(loopbackAddress);<span class=\"comment\">//localhost/127.0.0.1</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>UDP网络编程</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 接收端</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"meta\">@Test</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">UDPReciver</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">       <span class=\"type\">DatagramSocket</span> <span class=\"variable\">server</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">       <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">           server = <span class=\"keyword\">new</span> <span class=\"title class_\">DatagramSocket</span>(<span class=\"number\">8900</span>);</span><br><span class=\"line\">           <span class=\"type\">byte</span>[] buf = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">1024</span>];<span class=\"comment\">// &lt;=8K</span></span><br><span class=\"line\">           <span class=\"type\">DatagramPacket</span> <span class=\"variable\">datagramPacket</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DatagramPacket</span>(buf, buf.length);</span><br><span class=\"line\">           System.out.println(<span class=\"string\">&quot;waiting...&quot;</span>);</span><br><span class=\"line\">           <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">               server.receive(datagramPacket);</span><br><span class=\"line\">               <span class=\"type\">String</span> <span class=\"variable\">string</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(datagramPacket.getData(), <span class=\"number\">0</span>, datagramPacket.getLength());</span><br><span class=\"line\">               System.out.println(datagramPacket.getAddress() + <span class=\"string\">&quot;:&quot;</span> + datagramPacket.getPort() + <span class=\"string\">&quot;send: &quot;</span> + string);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125; <span class=\"keyword\">catch</span> (SocketException e) &#123;</span><br><span class=\"line\">           e.printStackTrace();</span><br><span class=\"line\">       &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">           e.printStackTrace();</span><br><span class=\"line\">       &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (server != <span class=\"literal\">null</span>)</span><br><span class=\"line\">               server.close();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 发送端</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"meta\">@Test</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">UDPSender</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">       <span class=\"type\">DatagramSocket</span> <span class=\"variable\">client</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">       <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">           client = <span class=\"keyword\">new</span> <span class=\"title class_\">DatagramSocket</span>();</span><br><span class=\"line\">           <span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;hello Quanwei&quot;</span>;</span><br><span class=\"line\">           <span class=\"type\">DatagramPacket</span> <span class=\"variable\">datagramPacket</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DatagramPacket</span>(str.getBytes(), str.getBytes().length,</span><br><span class=\"line\">                   InetAddress.getLocalHost(), <span class=\"number\">8900</span>);</span><br><span class=\"line\">           System.out.println(<span class=\"string\">&quot;start send...&quot;</span>);</span><br><span class=\"line\">           client.send(datagramPacket);</span><br><span class=\"line\">       &#125; <span class=\"keyword\">catch</span> (SocketException | UnknownHostException e) &#123;</span><br><span class=\"line\">           e.printStackTrace();</span><br><span class=\"line\">       &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">           e.printStackTrace();</span><br><span class=\"line\">       &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (client != <span class=\"literal\">null</span>)</span><br><span class=\"line\">               client.close();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>TCP网络编程</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> lang.net;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ByteArrayOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.OutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.InetAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.ServerSocket;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.Socket;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.UnknownHostException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.time.LocalDateTime;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TCP</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">clientResive</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Socket</span> <span class=\"variable\">socket</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">InputStream</span> <span class=\"variable\">inputStream</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">ByteArrayOutputStream</span> <span class=\"variable\">byteArrayOutputStream</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// get from server</span></span><br><span class=\"line\">            <span class=\"type\">InetAddress</span> <span class=\"variable\">ip</span> <span class=\"operator\">=</span> InetAddress.getByName(<span class=\"string\">&quot;127.0.0.1&quot;</span>);</span><br><span class=\"line\">            socket = <span class=\"keyword\">new</span> <span class=\"title class_\">Socket</span>(ip, <span class=\"number\">8899</span>);</span><br><span class=\"line\">            inputStream = socket.getInputStream();</span><br><span class=\"line\">            <span class=\"type\">byte</span>[] buf = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">            <span class=\"type\">int</span> len;</span><br><span class=\"line\">            byteArrayOutputStream = <span class=\"keyword\">new</span> <span class=\"title class_\">ByteArrayOutputStream</span>();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((len = inputStream.read(buf)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                byteArrayOutputStream.write(buf, <span class=\"number\">0</span>, len);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(LocalDateTime.now() + <span class=\"string\">&quot; get from server: &quot;</span> + byteArrayOutputStream);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (UnknownHostException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (byteArrayOutputStream != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    byteArrayOutputStream.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (inputStream != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    inputStream.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e1) &#123;</span><br><span class=\"line\">                    e1.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (socket != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    socket.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">clientSend</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Socket</span> <span class=\"variable\">socket</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        InetAddress ip;</span><br><span class=\"line\">        <span class=\"type\">OutputStream</span> <span class=\"variable\">outputStream</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            ip = InetAddress.getByName(<span class=\"string\">&quot;127.0.0.1&quot;</span>);</span><br><span class=\"line\">            socket = <span class=\"keyword\">new</span> <span class=\"title class_\">Socket</span>(ip, <span class=\"number\">8899</span>);</span><br><span class=\"line\">            <span class=\"comment\">// send to server</span></span><br><span class=\"line\">            outputStream = socket.getOutputStream();</span><br><span class=\"line\">            outputStream.write(<span class=\"string\">&quot;权威 Quanwei&quot;</span>.getBytes());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (outputStream != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    outputStream.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (socket != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    socket.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">serverRevive</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ServerSocket</span> <span class=\"variable\">server</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">Socket</span> <span class=\"variable\">accept</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">InputStream</span> <span class=\"variable\">inputStream</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">ByteArrayOutputStream</span> <span class=\"variable\">byteArrayOutputStream</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">FileOutputStream</span> <span class=\"variable\">fileOutputStream</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            server = <span class=\"keyword\">new</span> <span class=\"title class_\">ServerSocket</span>(<span class=\"number\">8899</span>);</span><br><span class=\"line\">            accept = server.accept();</span><br><span class=\"line\">            <span class=\"comment\">// client input</span></span><br><span class=\"line\">            inputStream = accept.getInputStream();</span><br><span class=\"line\">            byteArrayOutputStream = <span class=\"keyword\">new</span> <span class=\"title class_\">ByteArrayOutputStream</span>();</span><br><span class=\"line\">            <span class=\"type\">byte</span>[] buf = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">            <span class=\"type\">int</span> len;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((len = inputStream.read(buf)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                byteArrayOutputStream.write(buf, <span class=\"number\">0</span>, len);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 控制台输出</span></span><br><span class=\"line\">            System.out.println(LocalDateTime.now() + <span class=\"string\">&quot; get from client: &quot;</span> + byteArrayOutputStream);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 保存到本地</span></span><br><span class=\"line\">            fileOutputStream = <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;D:\\\\workspaceFolder\\\\CODE_JAVA\\\\lang\\\\net\\\\file&quot;</span>));</span><br><span class=\"line\">            fileOutputStream.write(byteArrayOutputStream.toByteArray());</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (byteArrayOutputStream != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    byteArrayOutputStream.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (inputStream != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    inputStream.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (accept != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    accept.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (server != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    server.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">serverSend</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ServerSocket</span> <span class=\"variable\">server</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">Socket</span> <span class=\"variable\">accept</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">OutputStream</span> <span class=\"variable\">outputStream</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            server = <span class=\"keyword\">new</span> <span class=\"title class_\">ServerSocket</span>(<span class=\"number\">8899</span>);</span><br><span class=\"line\">            accept = server.accept();</span><br><span class=\"line\">            <span class=\"comment\">// server output</span></span><br><span class=\"line\">            outputStream = accept.getOutputStream();</span><br><span class=\"line\">            outputStream.write(<span class=\"string\">&quot;接收成功&quot;</span>.getBytes());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (outputStream != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    outputStream.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e1) &#123;</span><br><span class=\"line\">                    e1.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (accept != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    accept.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (server != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    server.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">TCP</span> <span class=\"variable\">tcp</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TCP</span>();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            tcp.serverSend(); <span class=\"comment\">// 先启动服务器</span></span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">        <span class=\"comment\">// new Thread(() -&gt; &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//     tcp.clientResive();</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125;).start();</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            tcp.clientResive();</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">        <span class=\"comment\">// new Thread(() -&gt; &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//     tcp.clientSend();</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125;).start();</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-2-NIO\"><a href=\"#6-2-NIO\" class=\"headerlink\" title=\"6.2 NIO\"></a>6.2 NIO</h2><h2 id=\"6-3-AIO\"><a href=\"#6-3-AIO\" class=\"headerlink\" title=\"6.3 AIO\"></a>6.3 AIO</h2><h1 id=\"七、多线程\"><a href=\"#七、多线程\" class=\"headerlink\" title=\"七、多线程\"></a>七、多线程</h1><pre><code>多线程是Java最基本的一种并发模型\n</code></pre>\n<p>一个线程不能独立的存在，它必须是进程的一部分。<br>进程：一个进程包括由操作系统分配的内存空间，包含一个或多个线程。</p>\n<p>创建多线程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> lang.thread;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CreateThreadDemo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testLambda</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> Thread.currentThread().getName();</span><br><span class=\"line\">            System.out.println(name);<span class=\"comment\">// Quanwei&#x27;s thread</span></span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;Quanwei&#x27;s thread&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testExtends</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> Thread.currentThread().getName();</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;Extends&quot;</span> + name);<span class=\"comment\">// ExtendsThread-0 也可能不是0</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;.start();</span><br><span class=\"line\">        ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testImplements</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Runnable</span> <span class=\"variable\">runnable</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> Thread.currentThread().getName();</span><br><span class=\"line\">                System.out.println(name);<span class=\"comment\">// Implements</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(runnable,<span class=\"string\">&quot;Implements&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">CreateThreadDemo</span>().testLambda();<span class=\"comment\">// main</span></span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>多线程通信<br>同步代码块</p>\n<p>synchronized(同步监视器){&#x2F;&#x2F;同步监视器可用: 类.class(保证唯一)<br>&#x2F;&#x2F;要同步的代码<br>}</p>\n<p>不需要synchronized的操作 JVM规范定义了几种原子操作：</p>\n<ol>\n<li>基本类型（long和double除外）赋值，例如：int n &#x3D; m； 引用类型赋值，例如：List<String> list &#x3D; anotherList。</li>\n<li>long和double是64位数据，JVM没有明确规定64位赋值操作是不是一个原子操作，不过在x64平台的JVM是把long和double的赋值作为原子操作实现的</li>\n<li>单条原子操作不需要线程同步,多条需要</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Ticket</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">var</span> <span class=\"variable\">w</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Windows1</span>();</span><br><span class=\"line\">        <span class=\"type\">var</span> <span class=\"variable\">w1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(w, <span class=\"string\">&quot;w1&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">var</span> <span class=\"variable\">w2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(w, <span class=\"string\">&quot;w2&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">var</span> <span class=\"variable\">w3</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(w, <span class=\"string\">&quot;w3&quot;</span>);</span><br><span class=\"line\">        w2.setPriority(Thread.MAX_PRIORITY);</span><br><span class=\"line\">        w1.start();</span><br><span class=\"line\">        w2.start();</span><br><span class=\"line\">        w3.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Windows1</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">tickets</span> <span class=\"operator\">=</span> <span class=\"number\">50</span>;</span><br><span class=\"line\">    <span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (Windows1.class) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (tickets &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        Thread.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot; : &quot;</span> + tickets);</span><br><span class=\"line\">                    --tickets;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"八、JDBC\"><a href=\"#八、JDBC\" class=\"headerlink\" title=\"八、JDBC\"></a>八、JDBC</h1><p>什么是JDBC?</p>\n<pre><code>DBC是Java DataBase Connectivity的缩写，它是Java程序访问数据库的标准接口。\n</code></pre>\n<p>使用Java程序访问数据库时，Java代码并不是直接通过TCP连接去访问数据库，而是通过JDBC接口来访问，而JDBC接口则通过JDBC驱动来实现真正对数据库的访问。</p>\n<p>我们在Java代码中如果要访问MySQL，那么必须编写代码操作JDBC接口。注意到JDBC接口是Java标准库自带的，所以可以直接编译。而具体的JDBC驱动是由数据库厂商提供的，。因此，访问某个具体的数据库，我们只需要引入该厂商提供的JDBC驱动，就可以通过JDBC接口来访问，这样保证了Java程序编写的是一套数据库访问代码，却可以访问各种不同的数据库，因为他们都提供了标准的JDBC驱动</p>\n<p>如何使用? (以连接PostgreSQL为例)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Connection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.ResultSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.SQLException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Statement;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Properties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.postgresql.Driver;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Postgresql</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">url</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;jdbc:postgresql://localhost:5432/quanwei&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;postgres&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">password</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;password&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">driver</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;org.postgresql.Driver&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> SQLException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 创建驱动程序类对象</span></span><br><span class=\"line\">        <span class=\"type\">Driver</span> <span class=\"variable\">driver</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">org</span>.postgresql.Driver();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 2. 设置用户名和密码</span></span><br><span class=\"line\">        <span class=\"type\">Properties</span> <span class=\"variable\">prop</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Properties</span>();</span><br><span class=\"line\">        prop.setProperty(<span class=\"string\">&quot;user&quot;</span>, user);</span><br><span class=\"line\">        prop.setProperty(<span class=\"string\">&quot;password&quot;</span>, password);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 3. 连接数据库，返回连接对象</span></span><br><span class=\"line\">        <span class=\"type\">Connection</span> <span class=\"variable\">conn</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            conn = driver.connect(url, prop);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">Statement</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> conn.createStatement();</span><br><span class=\"line\">        <span class=\"comment\">// 测试</span></span><br><span class=\"line\">        <span class=\"type\">ResultSet</span> <span class=\"variable\">rs</span> <span class=\"operator\">=</span> s.executeQuery(<span class=\"string\">&quot;select * from login&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(rs.next())&#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">string</span> <span class=\"operator\">=</span> rs.getString(<span class=\"number\">2</span>);</span><br><span class=\"line\">            System.out.println(string);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"九、GUI\"><a href=\"#九、GUI\" class=\"headerlink\" title=\"九、GUI\"></a>九、GUI</h1><h2 id=\"9-1-AWT\"><a href=\"#9-1-AWT\" class=\"headerlink\" title=\"9.1 AWT\"></a>9.1 AWT</h2><p>即抽象窗口工具包</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> lang.gui;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.event.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloAWT</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1.创建窗体</span></span><br><span class=\"line\">        <span class=\"type\">Frame</span> <span class=\"variable\">frame</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Frame</span>(<span class=\"string\">&quot;AWT&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 2.创建标签组件</span></span><br><span class=\"line\">        <span class=\"type\">Label</span> <span class=\"variable\">label</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Label</span>(<span class=\"string\">&quot;Hello Quanwei&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 3.设置相关属性</span></span><br><span class=\"line\">        label.setBackground(Color.GREEN);</span><br><span class=\"line\">        label.setSize(<span class=\"number\">20</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 4.将组件添加到窗体上</span></span><br><span class=\"line\">        frame.add(label);</span><br><span class=\"line\">        <span class=\"comment\">// 5.设置窗体关闭事件</span></span><br><span class=\"line\">        frame.addWindowListener(<span class=\"keyword\">new</span> <span class=\"title class_\">WindowAdapter</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">windowClosing</span><span class=\"params\">(WindowEvent e)</span> &#123;</span><br><span class=\"line\">                System.exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">// 6.设置窗体大小</span></span><br><span class=\"line\">        frame.setSize(<span class=\"number\">500</span>, <span class=\"number\">200</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 7.显示窗体</span></span><br><span class=\"line\">        frame.setVisible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"9-2-Swing\"><a href=\"#9-2-Swing\" class=\"headerlink\" title=\"9.2 Swing\"></a>9.2 Swing</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> lang.gui;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.event.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.swing.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.swing.event.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">window1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1.创建窗体</span></span><br><span class=\"line\">        <span class=\"type\">JFrame</span> <span class=\"variable\">frame</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JFrame</span>(<span class=\"string\">&quot;Swing&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 2.设置关闭事件</span></span><br><span class=\"line\">        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class=\"line\">        <span class=\"comment\">// 3.设置大小位置</span></span><br><span class=\"line\">        frame.setSize(<span class=\"number\">500</span>, <span class=\"number\">500</span>);</span><br><span class=\"line\">        frame.setLocation(<span class=\"number\">500</span>, <span class=\"number\">200</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 4.设置事件监听处理</span></span><br><span class=\"line\">        frame.addMouseListener(<span class=\"keyword\">new</span> <span class=\"title class_\">MouseInputAdapter</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">mouseClicked</span><span class=\"params\">(MouseEvent e)</span> &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> e.getX();</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> e.getY();</span><br><span class=\"line\">                frame.setTitle(<span class=\"string\">&quot;点击坐标为(&quot;</span> + x + <span class=\"string\">&quot;, &quot;</span> + y + <span class=\"string\">&quot;)&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">// 5.显示窗体</span></span><br><span class=\"line\">        frame.setVisible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>比我想象的要多得多😂😂😂🤣🤣🤣</p>\n","site":{"data":{}},"cover":false,"excerpt":"<h1 id=\"Java一学期复习-基础入门\"><a href=\"#Java一学期复习-基础入门\" class=\"headerlink\" title=\"Java一学期复习 &amp; 基础入门\"></a>Java一学期复习 &amp; 基础入门</h1><font color=#999AAA >\n学了一学期Java了现在开始复习吧\n</font>\n\n<hr style=\" border:solid; width:100px; height:1px;\" color=#000000 size=1\">","more":"<h1 id=\"一、Java开发入门\"><a href=\"#一、Java开发入门\" class=\"headerlink\" title=\"一、Java开发入门\"></a>一、Java开发入门</h1><h2 id=\"1-1-Java概述\"><a href=\"#1-1-Java概述\" class=\"headerlink\" title=\"1.1 Java概述\"></a>1.1 Java概述</h2><p>Java 是由 Sun Microsystems 公司于 1995 年 5 月推出的 Java 面向对象程序设计语言和 Java 平台的总称。<br>由 James Gosling和同事们共同研发，并在 1995 年正式推出。</p>\n<p>后来 Sun 公司被 Oracle （甲骨文）公司收购，Java 也随之成为 Oracle 公司的产品。</p>\n<p>Java分为三个体系：</p>\n<pre><code>JavaSE (J2SE) (Java 2 Platform Standard Edition，java平台标准版）\nJavaEE (J2EE) (Java 2 Platform,Enterprise Edition，java平台企业版)\nJavaME (J2ME) (Java 2 Platform Micro Edition，java平台微型版)\n</code></pre>\n<h2 id=\"1-2-JDK-JRE-JVM\"><a href=\"#1-2-JDK-JRE-JVM\" class=\"headerlink\" title=\"1.2 JDK, JRE, JVM\"></a>1.2 JDK, JRE, JVM</h2><p><strong>JDK(Java Development Kit)又称J2SDK(Java2 Software Development Kit)</strong></p>\n<p>是Java开发工具包，它提供了Java的开发环境(提供了编译器javac等工具，用于将java文件编译为class文件)和运行环境(提 供了JVM和Runtime辅助包，用于解析class文件使其得到运行)。如果你下载并安装了JDK，那么你不仅可以开发Java程序，也同时拥有了运行Java程序的平台。JDK是整个Java的核心，包括了Java运行环境(JRE)，一堆Java工具tools.jar和Java标准类库 (rt.jar)。</p>\n<p><strong>JRE(Java Runtime Enviroment)是Java的运行环境</strong></p>\n<p>面向Java程序的使用者，而不是开发者。如果你仅下载并安装了JRE，那么你的系统只能运行Java程序。JRE是运行Java程序所必须环境的集合，包含JVM标准实现及 Java核心类库。它包括Java虚拟机、Java平台核心类和支持文件。它不包含开发工具(编译器、调试器等)。</p>\n<p><strong>JVM（Java Virtual Machine）Java 虚拟机</strong></p>\n<p>是整个 Java 实现跨平台的最核心的部分，能够运行以 Java 语言写作的软件程序。</p>\n<h1 id=\"二、Java编程基础\"><a href=\"#二、Java编程基础\" class=\"headerlink\" title=\"二、Java编程基础\"></a>二、Java编程基础</h1><h2 id=\"2-1-基本语法\"><a href=\"#2-1-基本语法\" class=\"headerlink\" title=\"2.1 基本语法\"></a>2.1 基本语法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 文档注释</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * (类注释)</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 文件First.java</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 主类名必修和文件名一致</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">First</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">sCnt</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; <span class=\"comment\">// 类变量</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">cnt</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;<span class=\"comment\">// 实例变量</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">SIZE</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>; <span class=\"comment\">// const</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Quanwei&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printArray</span><span class=\"params\">(<span class=\"type\">int</span>[] array)</span> &#123;</span><br><span class=\"line\">        System.out.print(array);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addCnt</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        ++sCnt;</span><br><span class=\"line\">        ++cnt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">showCnt</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(cnt);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">showName</span><span class=\"params\">(<span class=\"type\">boolean</span> isOn)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isOn)</span><br><span class=\"line\">            System.out.println(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">convert</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/* 英制到公制 */</span></span><br><span class=\"line\">        <span class=\"type\">int</span> foot;</span><br><span class=\"line\">        <span class=\"type\">int</span> inch;<span class=\"comment\">// 两个整数的运算结果一定是整数</span></span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">in</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);<span class=\"comment\">// 惯用</span></span><br><span class=\"line\">        foot = in.nextInt();</span><br><span class=\"line\">        inch = in.nextInt();</span><br><span class=\"line\">        System.out.println((foot + inch / <span class=\"number\">12f</span>) * <span class=\"number\">0.3048</span>);</span><br><span class=\"line\">        in.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// showName(true);</span></span><br><span class=\"line\">        <span class=\"comment\">// int age1 = 10;// 局部变量</span></span><br><span class=\"line\">        convert();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-2-数据类型\"><a href=\"#2-2-数据类型\" class=\"headerlink\" title=\"2.2 数据类型\"></a>2.2 数据类型</h2><p>八种基本数据类型</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Type</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 基本类型 默认值 */</span></span><br><span class=\"line\">    <span class=\"type\">byte</span> y; <span class=\"comment\">// byte: 0</span></span><br><span class=\"line\">    <span class=\"type\">short</span> s; <span class=\"comment\">// short: 0</span></span><br><span class=\"line\">    <span class=\"type\">int</span> i; <span class=\"comment\">// int: 0</span></span><br><span class=\"line\">    <span class=\"type\">long</span> l; <span class=\"comment\">// long: 0</span></span><br><span class=\"line\">    <span class=\"type\">double</span> d; <span class=\"comment\">// double: 0.0</span></span><br><span class=\"line\">    <span class=\"type\">float</span> f; <span class=\"comment\">// float: 0.0</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> b; <span class=\"comment\">// boolean: false</span></span><br><span class=\"line\">    <span class=\"type\">char</span> c; <span class=\"comment\">// char:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">show</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;byte: &quot;</span> + y);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;short: &quot;</span> + s);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;int: &quot;</span> + i);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;long: &quot;</span> + l);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;double: &quot;</span> + d);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;float: &quot;</span> + f);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;boolean: &quot;</span> + b);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;char: &quot;</span> + c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">assign</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        y = -<span class=\"number\">1</span>;</span><br><span class=\"line\">        s = <span class=\"number\">1</span>;</span><br><span class=\"line\">        i = <span class=\"number\">2</span>;</span><br><span class=\"line\">        l = <span class=\"number\">3L</span>;</span><br><span class=\"line\">        d = <span class=\"number\">12.5</span>;</span><br><span class=\"line\">        f = <span class=\"number\">6.25F</span>;</span><br><span class=\"line\">        b = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        c = <span class=\"string\">&#x27;c&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    \t<span class=\"comment\">// type是引用类型</span></span><br><span class=\"line\">        <span class=\"type\">Type</span> <span class=\"variable\">type</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Type</span>();</span><br><span class=\"line\">        type.assign();</span><br><span class=\"line\">        type.show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-3-运算符\"><a href=\"#2-3-运算符\" class=\"headerlink\" title=\"2.3 运算符\"></a>2.3 运算符</h2><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>运算符</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>成员访问运算符</td>\n<td><strong>.</strong></td>\n</tr>\n<tr>\n<td>下标运算符</td>\n<td>[ ]</td>\n</tr>\n<tr>\n<td>函数调用运算符</td>\n<td>( )</td>\n</tr>\n<tr>\n<td>算数运算符</td>\n<td>* 乘&#8195; &#x2F; 除 &#8195;% 取余&#8195; + &#8195;-</td>\n</tr>\n<tr>\n<td>按位运算</td>\n<td>&amp; 与&#8195;| 或 &#8195;~ 取反 &#8195;^ 异或&#8195; &lt;&lt; 左移&#8195; &gt;&gt; 右移 &#8195;&gt;&gt;&gt; 无符号右移</td>\n</tr>\n<tr>\n<td>逻辑运算</td>\n<td>&amp;&#8195; |&#8195; !非&#8195; &amp;&amp; 短路与&#8195; || 短路非</td>\n</tr>\n<tr>\n<td>条件运算</td>\n<td>&lt;&#8195;&gt;&#8195; &lt;&#x3D; &#8195;&gt;&#x3D;&#8195; &#x3D;&#x3D;&#8195; !&#x3D;</td>\n</tr>\n<tr>\n<td>条件运算符</td>\n<td>? <strong>:</strong></td>\n</tr>\n<tr>\n<td>赋值运算符</td>\n<td>&#x3D;&#8195; +&#x3D;&#8195; -&#x3D;&#8195; *&#x3D; &#8195;&#x2F;&#x3D; &#8195;&lt;&lt;&#x3D; &#8195;&gt;&gt;&#x3D;&#8195; &gt;&gt;&gt;&#x3D;&#8195;&amp;&#x3D; &#8195;|&#x3D;&#8195; ^&#x3D;</td>\n</tr>\n</tbody></table>\n<h2 id=\"2-4-选择结构\"><a href=\"#2-4-选择结构\" class=\"headerlink\" title=\"2.4 选择结构\"></a>2.4 选择结构</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     <span class=\"type\">boolean</span> condition=<span class=\"literal\">true</span>;</span><br><span class=\"line\">     <span class=\"comment\">// if-else</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (condition) &#123;</span><br><span class=\"line\">         <span class=\"comment\">//todo</span></span><br><span class=\"line\">     &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//todo</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"comment\">// if-else if-else</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (condition)&#123;</span><br><span class=\"line\">         <span class=\"comment\">// todo</span></span><br><span class=\"line\">     &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(!condition)&#123;</span><br><span class=\"line\"><span class=\"comment\">//todo</span></span><br><span class=\"line\">     &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//todo</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"comment\">//switch</span></span><br><span class=\"line\">     <span class=\"keyword\">switch</span> (key) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> value:</span><br><span class=\"line\">             <span class=\"comment\">//todo</span></span><br><span class=\"line\">             <span class=\"keyword\">break</span>;</span><br><span class=\"line\">     </span><br><span class=\"line\">         <span class=\"keyword\">default</span>:</span><br><span class=\"line\">             <span class=\"keyword\">break</span>;</span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-5-循环结构\"><a href=\"#2-5-循环结构\" class=\"headerlink\" title=\"2.5 循环结构\"></a>2.5 循环结构</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"variable\">condition</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (condition) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// todo</span></span><br><span class=\"line\">    <span class=\"keyword\">break</span>;<span class=\"comment\">//跳出循环</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// todo</span></span><br><span class=\"line\">    <span class=\"keyword\">continue</span>;<span class=\"comment\">//进入下次循环</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span> (condition);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// todo</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"三、面向对象\"><a href=\"#三、面向对象\" class=\"headerlink\" title=\"三、面向对象\"></a>三、面向对象</h1><font color=#999AAA >\n面向对象的优点:<br>\n可重用性：代码重复使用，减少代码量，提高开发效率。<br>\n可扩展性：指新的功能可以很容易地加入到系统中来，便于软件的修改。<br>\n可管理性：能够将功能与数据结合，方便管理。\n</font>\n\n<h2 id=\"3-1-概念\"><a href=\"#3-1-概念\" class=\"headerlink\" title=\"3.1 概念\"></a>3.1 概念</h2><p>Java 是面向对象的编程语言，对象就是面向对象程序设计的核心。<br>所谓对象就是真实世界中的实体，对象与实体是一一对应的，也就是说现实世界中每一个实体都是一个对象，它是一种具体的概念。对象有以下特点：</p>\n<pre><code> 1. 对象具有属性和行为。\n 2. 对象具有变化的状态。 \n 3. 对象具有唯一性。 \n 4. 对象都是某个类别的实例。 \n 5. 一切皆为对象，真实世界中的所有事物都可以视为对象。\n</code></pre>\n<h2 id=\"3-2-特性-封装-继承-多态\"><a href=\"#3-2-特性-封装-继承-多态\" class=\"headerlink\" title=\"3.2 特性(封装, 继承, 多态)\"></a>3.2 特性(封装, 继承, 多态)</h2><h3 id=\"3-2-1-封装\"><a href=\"#3-2-1-封装\" class=\"headerlink\" title=\"3.2.1 封装\"></a>3.2.1 封装</h3><p>为什么要封装?</p>\n<pre><code> 1. 保护类中的信息，它可以阻止在外部定义的代码随意访问内部代码和数据。 \n 2. 隐藏细节信息，一些不需要程序员修改和使用的信息，用户不需要知道。\n 3. 有助于建立各个系统之间的松耦合关系，提高系统的独立性。当一个系统的实现方式发生变化时，只要它的接口不变，就不会影响其他系统的使用。\n 4. 提高软件的复用率，降低成本。每个系统都是一个相对独立的整体，可以在不同的环境中得到使用\n</code></pre>\n<p>怎样封装? (将类中属性设为私有, 公开获取属性值的接口)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 私有属性 */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String passpord;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 构造函数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">User</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the passpord</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getPasspord</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> passpord;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> passpord the passpord to set</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setPasspord</span><span class=\"params\">(String passpord)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.passpord = passpord;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the id</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getId</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> id the id to set</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setId</span><span class=\"params\">(<span class=\"type\">int</span> id)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the username</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getUsername</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> username;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> username the username to set</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setUsername</span><span class=\"params\">(String username)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.username = username;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"string\">&quot;id: &quot;</span>+getId()+<span class=\"string\">&quot;\\tusername: &quot;</span>+getUsername()+<span class=\"string\">&quot;\\tpassword: &quot;</span>+getPasspord();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"访问修饰符\"><a href=\"#访问修饰符\" class=\"headerlink\" title=\"访问修饰符:\"></a>访问修饰符:</h3><p> <strong>default (即默认，什么也不写）:</strong> </p>\n<pre><code>在同一包内可见，不使用任何修饰符。\n</code></pre>\n<p>使用对象：类、接口、变量、方法。</p>\n<p><strong>public :</strong> </p>\n<pre><code>对所有类可见。\n</code></pre>\n<p>使用对象：类、接口、变量、方法 protected : 对同一包内的类和所有子类可见。使用对象：变量、方法。</p>\n<p><strong>private :</strong> </p>\n<pre><code>在同一类内可见。\n</code></pre>\n<p>使用对象：变量、方法。 注意：不能修饰类（外部类）</p>\n<p><strong>protected :</strong> </p>\n<pre><code>对同一包内的类和所有子类可见。\n</code></pre>\n<p>使用对象：变量、方法。 注意：不能修饰类（外部类）</p>\n<p>注意：</p>\n<p>父类中声明为 public 的方法在子类中也必须为 public。 父类中声明为 protected的方法在子类中要么声明为 protected，要么声明为 public，不能声明为 private 父类中声明为 private的方法，不能够被继承</p>\n<h3 id=\"3-2-2-继承\"><a href=\"#3-2-2-继承\" class=\"headerlink\" title=\"3.2.2 继承\"></a>3.2.2 继承</h3><p>什么是继承?</p>\n<pre><code>程序中的继承性是指子类拥有父类的全部特征和行为，这是类之间的一种关系。Java 只支持单继承。\n</code></pre>\n<p>如何继承? (使用关键字 <strong>extends</strong>)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">VipUser</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">VipUser</span> <span class=\"variable\">vip</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">VipUser</span>();</span><br><span class=\"line\">        vip.setUsername(<span class=\"string\">&quot;Quanwei&quot;</span>);</span><br><span class=\"line\">        System.out.println(vip.getUsername());<span class=\"comment\">// Quanwei</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-3-多态\"><a href=\"#3-2-3-多态\" class=\"headerlink\" title=\"3.2.3 多态\"></a>3.2.3 多态</h3><p>什么是多态?</p>\n<pre><code>面向对象的多态性，即“一个接口，多个方法”。\n</code></pre>\n<p>为什么要使用多态?</p>\n<pre><code>多态性体现在父类中定义的属性和方法被子类继承后，可以具有不同的属性或表现方式。\n多态性允许一个接口被多个同类使用，弥补了单继承的不足。\n</code></pre>\n<p>如何使用多态? ( 重写父类方法)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> lang.aboutclass;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">VipUser</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> vipNum;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.toString() + <span class=\"string\">&quot;\\tvipNum: &quot;</span> + getVipNum();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the vipNum</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getVipNum</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> vipNum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> vipNum the vipNum to set</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setVipNum</span><span class=\"params\">(<span class=\"type\">int</span> vipNum)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.vipNum = vipNum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">VipUser</span>();</span><br><span class=\"line\">        user.setUsername(<span class=\"string\">&quot;Quanwei&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (user <span class=\"keyword\">instanceof</span> VipUser vip) &#123;</span><br><span class=\"line\">            vip.setVipNum(<span class=\"number\">5432</span>);</span><br><span class=\"line\">            System.out.println(vip.getUsername());<span class=\"comment\">// Quanwei</span></span><br><span class=\"line\">            System.out.println(vip);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"非访问修饰符\"><a href=\"#非访问修饰符\" class=\"headerlink\" title=\"非访问修饰符\"></a>非访问修饰符</h3><p><strong>static 修饰符</strong><br>静态变量：<br>static 关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量只有一份拷贝。 静态变量也被称为类变量。局部变量不能被声明为 static 变量。</p>\n<p>静态方法：<br>static 关键字用来声明独立于对象的静态方法。静态方法不能使用类的非静态变量。静态方法从参数列表得到数据，然后计算这些数据。</p>\n<p><strong>final 修饰符</strong><br>final 变量:<br>final 表示”最后的、最终的”含义，变量一旦赋值后，不能被重新赋值。被 final 修饰的实例变量必须显式指定初始值。<br>final 修饰符通常和 static 修饰符一起使用来创建类常量。</p>\n<p>final 方法:<br>父类中的 final 方法可以被子类继承，但是不能被子类重写。</p>\n<p>final 类:<br>final 类不能被继承，没有类能够继承 final 类的任何特性。</p>\n<p><strong>abstract 修饰符</strong><br>抽象类：<br>抽象类不能用来实例化对象，声明抽象类的唯一目的是为了将来对该类进行扩充。<br>一个类不能同时被 abstract 和 final 修饰。如果一个类包含抽象方法，那么该类一定要声明为抽象类，否则将出现编译错误。<br>抽象类可以包含抽象方法和非抽象方法。</p>\n<p>抽象方法<br>抽象方法是一种没有任何实现的方法，该方法的的具体实现由子类提供。<br>抽象方法不能被声明成 final 和 static。<br>任何继承抽象类的子类必须实现父类的所有抽象方法，除非该子类也是抽象类。<br>如果一个类包含若干个抽象方法，那么该类必须声明为抽象类。抽象类可以不包含抽象方法。<br>抽象方法的声明以分号结尾，例如：public abstract sample();。</p>\n<h2 id=\"3-3-特殊类\"><a href=\"#3-3-特殊类\" class=\"headerlink\" title=\"3.3 特殊类\"></a>3.3 特殊类</h2><h3 id=\"3-3-1-抽象类-Abstract-Class\"><a href=\"#3-3-1-抽象类-Abstract-Class\" class=\"headerlink\" title=\"3.3.1 抽象类 ( Abstract Class)\"></a>3.3.1 抽象类 ( Abstract Class)</h3><p>在面向对象的概念中，所有的对象都是通过类来描绘的，但是反过来，并不是所有的类都是用来描绘对象的，如果一个类中没有包含足够的信息来描绘一个具体的对象，这样的类就是抽象类。<br>抽象类不能用于实例化对象</p>\n<p>如何定义? (使用<strong>abstract</strong>关键字)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 抽象类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Human</span> &#123;</span><br><span class=\"line\">    String name;</span><br><span class=\"line\">    <span class=\"type\">int</span> age;</span><br><span class=\"line\">    String language;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 抽象方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">say</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如何使用? (<strong>继承</strong>)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Chinese</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Human</span> &#123;</span><br><span class=\"line\">    Chinese(String name, String language) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.language = language;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">say</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(name + <span class=\"string\">&quot; says &quot;</span> + language);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-3-2-接口-Interface\"><a href=\"#3-3-2-接口-Interface\" class=\"headerlink\" title=\"3.3.2 接口 (Interface)\"></a>3.3.2 接口 (Interface)</h3><p>是一个抽象类型，是抽象方法的集合。一个类通过继承接口的方式，从而来继承接口的抽象方法。<br>接口并不是类，类描述对象的属性和方法。接口则包含类要实现的方法。<br>除非实现接口的类是抽象类，否则该类要定义接口中的所有方法。<br>接口无法被实例化，但是可以被实现。一个实现接口的类，必须实现接口内所描述的所有方法。</p>\n<p>如何定义? (使用interface关键字)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> 1. 可以跑的接口 :)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 跑的方法</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如何使用? (使用implements关键字实现接口)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Chinese</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Human</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span>&#123;</span><br><span class=\"line\">    Chinese(String name, String language) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.language = language;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">say</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(name + <span class=\"string\">&quot; says &quot;</span> + language);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 实现接口须重写run方法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;I am Running...&quot;</span>);        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-3-3-内部类-Inner-Class\"><a href=\"#3-3-3-内部类-Inner-Class\" class=\"headerlink\" title=\"3.3.3 内部类 ( Inner Class )\"></a>3.3.3 内部类 ( Inner Class )</h3><p>Java 一个类中可以嵌套另外一个类, 即内部类<br>如何定义?</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">OuterClass</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">infomation</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Outer class&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">InnerClass</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">information</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Inner class&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">class</span> <span class=\"title class_\">InsiderClass</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">information</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Insider class&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如何使用? ( 外部类.new 内部类名() )</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> lang.aboutclass;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lang.aboutclass.OuterClass.InnerClass;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lang.aboutclass.OuterClass.InnerClass.InsiderClass;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">OuterClass</span> <span class=\"variable\">outer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OuterClass</span>();</span><br><span class=\"line\">        <span class=\"type\">InnerClass</span> <span class=\"variable\">inner</span> <span class=\"operator\">=</span> outer.<span class=\"keyword\">new</span> <span class=\"title class_\">InnerClass</span>();</span><br><span class=\"line\">        <span class=\"type\">InsiderClass</span> <span class=\"variable\">insider</span> <span class=\"operator\">=</span> inner.<span class=\"keyword\">new</span> <span class=\"title class_\">InsiderClass</span>();</span><br><span class=\"line\">        System.out.println(outer.infomation);<span class=\"comment\">// Outer class</span></span><br><span class=\"line\">        System.out.println(inner.information);<span class=\"comment\">// Inner class</span></span><br><span class=\"line\">        System.out.println(insider.information);<span class=\"comment\">// Insider class</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-3-4-枚举类-Enum\"><a href=\"#3-3-4-枚举类-Enum\" class=\"headerlink\" title=\"3.3.4 枚举类 ( Enum )\"></a>3.3.4 枚举类 ( Enum )</h3><p>Java 枚举是一个特殊的类，一般表示一组常量<br>如何定义? (使用 enum 关键字来定义，各个常量使用逗号 <strong>,</strong> 来分割)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">Weekday</span> &#123;</span><br><span class=\"line\">    SUN, MON, TUE, WED, THU, FRI, SAT;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如何使用? (枚举类名.常量)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(Weekday.FRI);<span class=\"comment\">//FRI</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-3-6-记录类\"><a href=\"#3-3-6-记录类\" class=\"headerlink\" title=\"3.3.6 记录类\"></a>3.3.6 记录类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义一个Point类，有x、y两个变量，同时它是一个不变类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">record</span> <span class=\"title class_\">Point</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相当于:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Point</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Record</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> x;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> y;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">Point</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> &#123; <span class=\"built_in\">this</span>.x = x; <span class=\"built_in\">this</span>.y = y; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">x</span><span class=\"params\">()</span> &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.x; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">y</span><span class=\"params\">()</span> &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.y; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123; <span class=\"keyword\">return</span> String.format(<span class=\"string\">&quot;Point[x=%s, y=%s]&quot;</span>, x, y); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">equals</span><span class=\"params\">(Object o)</span> &#123; <span class=\"comment\">//... &#125; public int hashCode() &#123; //... &#125; &#125;</span></span><br></pre></td></tr></table></figure>\n<p>也可以在里面写构造函数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">record</span> <span class=\"title class_\">Point</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Compact Constructor，它的目的是让我们编写检查逻辑 </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Point &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span> || y &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-3-6-注解类（Annotation）\"><a href=\"#3-3-6-注解类（Annotation）\" class=\"headerlink\" title=\"3.3.6 注解类（Annotation）\"></a>3.3.6 注解类（Annotation）</h3><p>Java 语言中的类、方法、变量、参数和包等都可以被标注。<br>和 Javadoc 不同，Java 标注可以通过反射获取标注内容。在编译器生成类文件时，标注可以被嵌入到字节码中。Java 虚拟机可以保留标注内容，在运行时可以获取到标注内容 。 当然它也支持自定义 Java 标注。</p>\n<p>如何定义? ( 使用@interface关键字 )</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> lang.annotation;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.ElementType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Retention;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Target;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3.用元注解配置注解 </span></span><br><span class=\"line\"><span class=\"comment\">// 必须设置@Target和@Retention，@Retention一般设置为RUNTIME，因为我们自定义的注解通常要求在运行期读取</span></span><br><span class=\"line\"><span class=\"meta\">@Target(ElementType.LOCAL_VARIABLE)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Report &#123;<span class=\"comment\">// 1.用@interface定义注解</span></span><br><span class=\"line\">    <span class=\"comment\">// 2.添加默认参数</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">type</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    String <span class=\"title function_\">level</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"string\">&quot;info&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    String <span class=\"title function_\">value</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 把最常用的参数定义为value()，推荐所有参数都尽量设置默认值</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 注解定义后也是一种class，所有的注解都继承自java.lang.annotation.Annotation，因此，读取注解，需要使用反射API</span></span><br></pre></td></tr></table></figure>\n<p><strong>元注解（meta annotation）</strong> 有一些注解可以修饰其他注解，这些注解就称为元注解</p>\n<p>最常用的元注解是@Target。<br>使用@Target可以定义Annotation能够被应用于源码的哪些位置：<br>类或接口：ElementType.TYPE；<br>字段：ElementType.FIELD；<br>方法：ElementType.METHOD；<br>构造方法：ElementType.CONSTRUCTOR；<br>方法参数：ElementType.PARAMETER</p>\n<p>另一个重要的元注解@Retention定义了Annotation的生命周期：<br>仅编译期：RetentionPolicy.SOURCE；<br>仅class文件：RetentionPolicy.CLASS； (默认)<br>运行期：RetentionPolicy.RUNTIME</p>\n<p>如何使用? ( 通过反射获取注解信息 )</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@MyAnnotation(value = 20, name = &quot;Quanwei&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAnnoTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MyAnnotation</span> <span class=\"variable\">anno</span> <span class=\"operator\">=</span> MyAnnoTest.class.getDeclaredAnnotation(MyAnnotation.class);</span><br><span class=\"line\">        System.out.println(anno.name());<span class=\"comment\">// Quanwei</span></span><br><span class=\"line\">        System.out.println(anno.value());<span class=\"comment\">// 20</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在注解的定义中使用注解:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(&#123; ElementType.TYPE, ElementType.FIELD, ElementType.METHOD &#125;)</span><span class=\"comment\">//注解使用位置</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span><span class=\"comment\">// 保留时间</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> MyAnnotation &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">value</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"number\">12</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    String <span class=\"title function_\">name</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"string\">&quot;quanwei&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Report <span class=\"title function_\">report</span><span class=\"params\">()</span><span class=\"keyword\">default</span> <span class=\"meta\">@Report</span> ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-4-反射-Reflection\"><a href=\"#3-4-反射-Reflection\" class=\"headerlink\" title=\"3.4 反射 Reflection\"></a>3.4 反射 Reflection</h2><p>是什么?</p>\n<pre><code>反射就是一种能在程序 运行 时获取类、接口、方法和变量等信息的能力。\n</code></pre>\n<p>有什么用?</p>\n<pre><code>解决在运行期，对某个实例一无所知的情况下，调用其方法\n</code></pre>\n<p>如何使用? (类名.class)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        Class&lt;Student&gt; stdClass = Student.class;</span><br><span class=\"line\">        <span class=\"comment\">// 获取public方法getScore，参数为String:</span></span><br><span class=\"line\">        System.out.println(stdClass.getMethod(<span class=\"string\">&quot;getScore&quot;</span>, String.class));</span><br><span class=\"line\">        <span class=\"comment\">// 获取继承的public方法getName，无参数:</span></span><br><span class=\"line\">        System.out.println(stdClass.getMethod(<span class=\"string\">&quot;getName&quot;</span>));</span><br><span class=\"line\">        <span class=\"comment\">// 获取private方法getGrade，参数为int:</span></span><br><span class=\"line\">        System.out.println(stdClass.getDeclaredMethod(<span class=\"string\">&quot;getGrade&quot;</span>, <span class=\"type\">int</span>.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getScore</span><span class=\"params\">(String type)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">99</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"meta\">@SuppressWarnings(&quot;unused&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"title function_\">getGrade</span><span class=\"params\">(<span class=\"type\">int</span> year)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Person&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>还有多种情况,<a href=\"https://www.oracle.com/technical-resources/articles/java/javareflection.html\">参考</a></p>\n<h2 id=\"3-5-lambda表达式\"><a href=\"#3-5-lambda表达式\" class=\"headerlink\" title=\"3.5 lambda表达式\"></a>3.5 lambda表达式</h2><p>lambda表达式也即<strong>匿名函数</strong>, 允许把函数作为一个方法的参数（函数作为参数传递进方法中）<br>在java中lambda表达式本质上是一个对象</p>\n<p>基本的语法像这样:</p>\n<pre><code>(parameters) -&gt;&#123; statements; &#125;\n</code></pre>\n<p>基本使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-6-异常\"><a href=\"#3-6-异常\" class=\"headerlink\" title=\"3.6 异常\"></a>3.6 异常</h2><p>异常主要指程序运行的时候，会发生各种错误, 不包括编译时发生的</p>\n<p>异常可以捕获:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">          <span class=\"type\">int</span> i=<span class=\"number\">10</span>/<span class=\"number\">0</span>;</span><br><span class=\"line\">      &#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</span><br><span class=\"line\">          e.printStackTrace();</span><br><span class=\"line\">      &#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">         <span class=\"comment\">// todo</span></span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n<p>也可以抛出</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 自动抛出</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">       testException(<span class=\"number\">10</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 手动抛出</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testException</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> <span class=\"keyword\">throws</span> RuntimeException &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (b &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           System.out.println(a / b);</span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;除数不能为零&quot;</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br></pre></td></tr></table></figure>\n<p>还可以自定义异常 (继承Exception类)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyException</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Exception</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyException</span><span class=\"params\">(String msg)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(msg+<span class=\"string\">&quot; from MyException&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"四、常用类\"><a href=\"#四、常用类\" class=\"headerlink\" title=\"四、常用类\"></a>四、常用类</h1><h2 id=\"4-1-数组-Arrays\"><a href=\"#4-1-数组-Arrays\" class=\"headerlink\" title=\"4.1 数组 &amp; Arrays\"></a>4.1 数组 &amp; Arrays</h2><p>数组的定义和使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.创建array对象</span></span><br><span class=\"line\"><span class=\"type\">int</span>[] array=<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"comment\">// 赋值</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">    array[i]=i+<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 使用</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i : array) &#123;</span><br><span class=\"line\">    System.out.print(i+<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 其他</span></span><br><span class=\"line\"><span class=\"type\">int</span>[] a2=&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>&#125;;</span><br><span class=\"line\">String[] strings=&#123;<span class=\"string\">&quot;asd&quot;</span>,<span class=\"string\">&quot;sdas&quot;</span>&#125;;</span><br></pre></td></tr></table></figure>\n<p>Arrays 类是一个工具类，其中包含了数组操作的很多方法。 Arrays 类里均为 static 修饰的方法可以直接通过类名调用。<br>例如使用Arrays对数组排序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.创建array对象, 并赋值</span></span><br><span class=\"line\">String[] strings = &#123; <span class=\"string\">&quot;hello&quot;</span>, <span class=\"string\">&quot;thank&quot;</span>, <span class=\"string\">&quot;you&quot;</span>, <span class=\"string\">&quot;are&quot;</span>, <span class=\"string\">&quot;ok&quot;</span> &#125;;</span><br><span class=\"line\"><span class=\"comment\">// 顺序</span></span><br><span class=\"line\">Arrays.sort(strings);</span><br><span class=\"line\">System.out.println(Arrays.toString(strings)); <span class=\"comment\">// [are, hello, ok, thank, you]</span></span><br><span class=\"line\"><span class=\"comment\">// 逆序</span></span><br><span class=\"line\">Arrays.sort(strings, Comparator.reverseOrder());</span><br><span class=\"line\">System.out.println(Arrays.toString(strings)); <span class=\"comment\">// [you, thank, ok, hello, are]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-2-String-StringBuffer和StringBuilder\"><a href=\"#4-2-String-StringBuffer和StringBuilder\" class=\"headerlink\" title=\"4.2 String, StringBuffer和StringBuilder\"></a>4.2 String, StringBuffer和StringBuilder</h2><h3 id=\"4-2-1-String\"><a href=\"#4-2-1-String\" class=\"headerlink\" title=\"4.2.1 String\"></a>4.2.1 String</h3><p> String 是 final 修饰的，无法被继承。且 String 不是 Java 的基本数据类型<br>通过new创建的String对象,和直接赋值的String对象稍有不同:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * TestString</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 可以和八种基本数据类型做运算</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestString</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testStringJoint</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 字面量定义,s1指向方法区中的静态常量池</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Quanwei&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s2</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Quanwei&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">// s2-&gt;堆空间地址值</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s3</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;Quanwei&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;s1 == s2: &quot;</span> + (s1 == s2)); <span class=\"comment\">// true</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;s1 == s3: &quot;</span> + (s1 == s3)); <span class=\"comment\">// false</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;s1.equals(s2): &quot;</span> + (s1.equals(s2)));<span class=\"comment\">// true</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;s1.equals(s3): &quot;</span> + (s1.equals(s3)));<span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s4</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;TangQuanwei&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s5</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Tang&quot;</span> + <span class=\"string\">&quot;Quanwei&quot;</span>; <span class=\"comment\">// 常量与常量拼接在静态常量池</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;s4 == s5: &quot;</span> + (s4 == s5)); <span class=\"comment\">// true</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s6</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Tang&quot;</span> + s1; <span class=\"comment\">// 常量与引用拼接-&gt;堆空间地址值</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;s4 == s6: &quot;</span> + (s4 == s6)); <span class=\"comment\">// false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testToCharArray</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Quanwei&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">char</span>[] charArray = s1.toCharArray();</span><br><span class=\"line\">        System.out.println(Arrays.toString(charArray));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s2</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;权威&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">char</span>[] charArray2 = s2.toCharArray();</span><br><span class=\"line\">        System.out.println(Arrays.toString(charArray2));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testGetBytes</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Quanwei&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">byte</span>[] bytes = s1.getBytes();</span><br><span class=\"line\">        System.out.println(Arrays.toString(bytes));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s2</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;权威&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">byte</span>[] bytes2 = s2.getBytes();<span class=\"comment\">// 默认utf-8</span></span><br><span class=\"line\">        System.out.println(Arrays.toString(bytes2));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">byte</span>[] bytes3 = s2.getBytes(<span class=\"string\">&quot;gbk&quot;</span>);</span><br><span class=\"line\">            System.out.println(Arrays.toString(bytes3));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">byte</span>[] bytes4 = s2.getBytes(<span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\">            System.out.println(Arrays.toString(bytes4));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> String 是不可变的，而 StringBuffer 和 StringBuilder 是可变类</p>\n<h3 id=\"4-2-2-StringBuffer和StringBuilder\"><a href=\"#4-2-2-StringBuffer和StringBuilder\" class=\"headerlink\" title=\"4.2.2 StringBuffer和StringBuilder\"></a>4.2.2 StringBuffer和StringBuilder</h3><p> 二者区别就是:</p>\n<table>\n<thead>\n<tr>\n<th>StringBuffer</th>\n<th>StringBuilder</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>线程安全</td>\n<td>非线程安全</td>\n</tr>\n<tr>\n<td>同步</td>\n<td>非同步</td>\n</tr>\n<tr>\n<td>慢</td>\n<td>快</td>\n</tr>\n<tr>\n<td>所以在非多线程环境中的字符串操作，我们一般用 StringBuilder , 因为二者的方法都是差不多的</td>\n<td></td>\n</tr>\n<tr>\n<td>它们为字符串操作提供了 append、insert、delete 和 substring 方法</td>\n<td></td>\n</tr>\n</tbody></table>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testStringBuilder</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">var</span> <span class=\"variable\">sb1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>(<span class=\"string\">&quot;Tang&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">var</span> <span class=\"variable\">sb2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>(<span class=\"string\">&quot;t&quot;</span>);</span><br><span class=\"line\">    System.out.println(sb1.capacity());<span class=\"comment\">// 20</span></span><br><span class=\"line\">    System.out.println(sb1.length());<span class=\"comment\">// 4</span></span><br><span class=\"line\">    sb1.ensureCapacity(<span class=\"number\">40</span>);</span><br><span class=\"line\">    System.out.println(sb1.capacity());<span class=\"comment\">// 42</span></span><br><span class=\"line\">    System.out.println(sb2.capacity());<span class=\"comment\">// 17</span></span><br><span class=\"line\">    sb1.append(<span class=\"string\">&quot;Quawnei&quot;</span>);</span><br><span class=\"line\">    System.out.println(sb1);<span class=\"comment\">//TangQuawnei</span></span><br><span class=\"line\">    sb1.insert(<span class=\"number\">4</span>, <span class=\"string\">&quot;-&gt;&quot;</span>);</span><br><span class=\"line\">    System.out.println(sb1);<span class=\"comment\">//Tang-&gt;Quawnei</span></span><br><span class=\"line\">    sb1.delete(<span class=\"number\">0</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">    System.out.println(sb1);<span class=\"comment\">//-&gt;Quawnei</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-3-System类和Runtime类\"><a href=\"#4-3-System类和Runtime类\" class=\"headerlink\" title=\"4.3 System类和Runtime类\"></a>4.3 System类和Runtime类</h2><h3 id=\"4-3-1-静态字段\"><a href=\"#4-3-1-静态字段\" class=\"headerlink\" title=\"4.3.1 静态字段\"></a>4.3.1 静态字段</h3><p>System 类有 3 个静态成员变量，分别是 PrintStream <strong>out</strong>、InputStream <strong>in</strong> 和 PrintStream <strong>err</strong><br>out跟err的区别大概是:<br>System.out.println可能会被缓冲,而System.err.println不会，由于err不需要缓冲即可输出</p>\n<pre><code>PrintStream out\n</code></pre>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(<span class=\"string\">&quot;quanwei);</span></span><br></pre></td></tr></table></figure>\n<pre><code>InputStream in \n</code></pre>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">read</span> <span class=\"operator\">=</span> System.in.read();<span class=\"comment\">// 读一个字符的ascii码</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-3-2-静态方法\"><a href=\"#4-3-2-静态方法\" class=\"headerlink\" title=\"4.3.2 静态方法\"></a>4.3.2 静态方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取系统属性</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">jversion</span> <span class=\"operator\">=</span> System.getProperty(<span class=\"string\">&quot;java.version&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">oName</span> <span class=\"operator\">=</span> System.getProperty(<span class=\"string\">&quot;os.name&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> System.getProperty(<span class=\"string\">&quot;user.name&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Java 运行时环境版本：&quot;</span> + jversion);<span class=\"comment\">// Java 运行时环境版本：17.0.1</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;当前操作系统是：&quot;</span> + oName);<span class=\"comment\">// 当前操作系统是：Windows 10</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;当前用户是：&quot;</span> + user);<span class=\"comment\">// 当前用户是：QUANWEI</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 时间的格式为当前计算机时间与 GMT 时间（格林尼治时间）</span></span><br><span class=\"line\">        <span class=\"comment\">// 1970 年 1 月 1 日 0 时 0 分 0 秒所差的毫秒数</span></span><br><span class=\"line\">        <span class=\"type\">Date</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(System.currentTimeMillis());<span class=\"comment\">//</span></span><br><span class=\"line\">        System.out.println(date); <span class=\"comment\">// Mon Jan 10 20:20:43 CST 2022</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span>[] a = &#123; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span> &#125;;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] b = &#123; <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span> &#125;;</span><br><span class=\"line\">        <span class=\"comment\">// 合并数组</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[] marge = marge(a, b);</span><br><span class=\"line\">        System.out.println(Arrays.toString(marge));<span class=\"comment\">// [1, 2, 3, 4, 5, 2, 3, 4, 5, 6]</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 请求系统进行垃圾回收</span></span><br><span class=\"line\">        System.gc();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 终止当前正在运行的 Java 虚拟机</span></span><br><span class=\"line\">        System.exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] marge(<span class=\"type\">int</span>[] a, <span class=\"type\">int</span>[] b) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] ret = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[a.length + b.length];</span><br><span class=\"line\">        System.arraycopy(a, <span class=\"number\">0</span>, ret, <span class=\"number\">0</span>, a.length);</span><br><span class=\"line\">        System.arraycopy(b, <span class=\"number\">0</span>, ret, a.length, b.length);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-4-包装类\"><a href=\"#4-4-包装类\" class=\"headerlink\" title=\"4.4 包装类\"></a>4.4 包装类</h2><p>| 基本类 | 包装类 |<br>|-|-|-|<br>|byte| Byte|<br>|short | Short|<br>|int | Integer|<br>|long | Long|<br>|char | Character|<br>|float| Float|<br>|double | Double|<br>|boolean | Boolean|<br>常用方法 :<br>        <strong>包装类名.parseXxx(String );</strong><br>        <strong>包装类名.valueOf(String );</strong><br>        <strong>包装类名.toString();</strong></p>\n<h2 id=\"4-5-Math和Random\"><a href=\"#4-5-Math和Random\" class=\"headerlink\" title=\"4.5 Math和Random\"></a>4.5 Math和Random</h2><p>Math类就是用来进行数学计算的，它提供了大量的静态方法来便于我们实现数学计算<br>比如:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数学常量：</span></span><br><span class=\"line\"><span class=\"type\">double</span> <span class=\"variable\">pi</span> <span class=\"operator\">=</span> Math.PI; <span class=\"comment\">// 3.14159...</span></span><br><span class=\"line\"><span class=\"type\">double</span> <span class=\"variable\">e</span> <span class=\"operator\">=</span> Math.E; <span class=\"comment\">// 2.7182818...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 求绝对值：</span></span><br><span class=\"line\">Math.abs(-<span class=\"number\">100</span>); <span class=\"comment\">// 100</span></span><br><span class=\"line\">Math.abs(-<span class=\"number\">7.8</span>); <span class=\"comment\">// 7.8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 取最大或最小值：</span></span><br><span class=\"line\"></span><br><span class=\"line\">Math.max(<span class=\"number\">100</span>, <span class=\"number\">99</span>); <span class=\"comment\">// 100</span></span><br><span class=\"line\">Math.min(<span class=\"number\">1.2</span>, <span class=\"number\">2.3</span>); <span class=\"comment\">// 1.2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 计算xy次方：</span></span><br><span class=\"line\">Math.pow(<span class=\"number\">2</span>, <span class=\"number\">10</span>); <span class=\"comment\">// 2的10次方=1024</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 计算√x：</span></span><br><span class=\"line\">Math.sqrt(<span class=\"number\">2</span>); <span class=\"comment\">// 1.414...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 计算ex次方：</span></span><br><span class=\"line\">Math.exp(<span class=\"number\">2</span>); <span class=\"comment\">// 7.389...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 计算以e为底的对数：</span></span><br><span class=\"line\">Math.log(<span class=\"number\">4</span>); <span class=\"comment\">// 1.386...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 计算以10为底的对数：</span></span><br><span class=\"line\">Math.log10(<span class=\"number\">100</span>); <span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 三角函数：</span></span><br><span class=\"line\">Math.sin(<span class=\"number\">3.14</span>); <span class=\"comment\">// 0.00159...</span></span><br><span class=\"line\">Math.cos(<span class=\"number\">3.14</span>); <span class=\"comment\">// -0.9999...</span></span><br><span class=\"line\">Math.tan(<span class=\"number\">3.14</span>); <span class=\"comment\">// -0.0015...</span></span><br><span class=\"line\">Math.asin(<span class=\"number\">1.0</span>); <span class=\"comment\">// 1.57079...</span></span><br><span class=\"line\">Math.acos(<span class=\"number\">1.0</span>); <span class=\"comment\">// 0.0</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-6-BigInteger类和BigDecimal类\"><a href=\"#4-6-BigInteger类和BigDecimal类\" class=\"headerlink\" title=\"4.6 BigInteger类和BigDecimal类\"></a>4.6 BigInteger类和BigDecimal类</h2><font color=#999AAA >\n在Java中，由CPU原生提供的整型最大范围是64位long型整数。使用long型整数可以直接通过CPU指令进行计算, 如果我们使用的整数范围超过了long型就只能用软件来模拟一个大整数。java.math.BigInteger就是用来表示任意大小的整数。BigInteger内部用一个int[]数组来模拟一个非常大的整数\n</font>\n<br />\n<br />\n由于Java不支持运算符重载, 在对BigInteger做运算的时候，只能使用对象的方法，例如，\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">BigInteger</span> <span class=\"variable\">i1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigInteger</span>(<span class=\"string\">&quot;1234567890&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">BigInteger</span> <span class=\"variable\">i2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigInteger</span>(<span class=\"string\">&quot;12345678901234567890&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">BigInteger</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> i1.add(i2); <span class=\"comment\">// 12345678902469135780</span></span><br></pre></td></tr></table></figure>\n<p>BigDecimal和BigInteger类似，可以用来表示一个任意大小且精度完全准确的浮点数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">BigDecimal</span> <span class=\"variable\">d1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(<span class=\"string\">&quot;9876543210.0123456789&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">BigDecimal</span> <span class=\"variable\">d2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(<span class=\"string\">&quot;123.45000000000000000&quot;</span>);</span><br><span class=\"line\">System.out.println(d1.scale()); <span class=\"comment\">// 10,两位小数</span></span><br><span class=\"line\">System.out.println(d1.add(d2));</span><br><span class=\"line\">System.out.println(d1.subtract(d2));</span><br><span class=\"line\">System.out.println(d1.multiply(d2));</span><br><span class=\"line\"><span class=\"comment\">// 无法除尽时，就必须指定精度以及如何进行截断</span></span><br><span class=\"line\">System.out.println(d1.divide(d2, <span class=\"number\">10</span>, RoundingMode.HALF_UP));<span class=\"comment\">// 四舍五入</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-7-时间和日期类\"><a href=\"#4-7-时间和日期类\" class=\"headerlink\" title=\"4.7 时间和日期类\"></a>4.7 时间和日期类</h2><p>JDK8以前</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.text.ParseException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.SimpleDateFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Calendar;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * JDK 8 以前 时间日期API</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 1.System.currentTimeMillis()</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 2.java.util.Calendar;  java.util.Date;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 3.SimpleDateFormat</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 4.Calender</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestBefer8</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testTime</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取当前时间的毫秒数时间戳</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;TestDateTime.testTime()&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">currentTimeMillis</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">        System.out.println(currentTimeMillis);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testDate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// java.util.Date</span></span><br><span class=\"line\">        <span class=\"type\">Date</span> <span class=\"variable\">d1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\">        System.out.println(d1);</span><br><span class=\"line\">        System.out.println(d1.getTime());<span class=\"comment\">// 毫秒数时间戳</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">var</span> <span class=\"variable\">d2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"number\">1631504736660L</span>);</span><br><span class=\"line\">        System.out.println(d2);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// java.sql.Date 是 java.util.Date 的子类</span></span><br><span class=\"line\">        <span class=\"type\">var</span> <span class=\"variable\">d3</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">java</span>.sql.Date(<span class=\"number\">0L</span>);</span><br><span class=\"line\">        System.out.println(d3);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// java.sql.Date -&gt; java.util.Date</span></span><br><span class=\"line\">        <span class=\"type\">Date</span> <span class=\"variable\">d4</span> <span class=\"operator\">=</span> (Date) d3;</span><br><span class=\"line\">        System.out.println(d4);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// java.util.Date -&gt; java.sql.Date</span></span><br><span class=\"line\">        java.sql.<span class=\"type\">Date</span> <span class=\"variable\">d5</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">java</span>.sql.Date(d4.getTime());</span><br><span class=\"line\">        System.out.println(d5);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * SimpleDateFormat对Date类的格式化和解析</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * 1.格式化: 日期 --&gt; 字符串</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * 2.解析:格式化的逆过程: 字符串 --&gt; 日期</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testFormat</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;TestDateTime.testFormat()&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 格式化</span></span><br><span class=\"line\">        <span class=\"type\">SimpleDateFormat</span> <span class=\"variable\">sdf</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>();</span><br><span class=\"line\">        <span class=\"type\">Date</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">format</span> <span class=\"operator\">=</span> sdf.format(date);</span><br><span class=\"line\">        System.out.println(format);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 指定格式</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">parttern</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;yyyy-MM-dd hh:mm:ss:SSS z&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">SimpleDateFormat</span> <span class=\"variable\">sdf2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(parttern);</span><br><span class=\"line\">        System.out.println(sdf2.format(date));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 解析</span></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;2021/9/13 下午2:58&quot;</span>;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">s2</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;2002-10-09 08:31:12:234 CST&quot;</span>;</span><br><span class=\"line\">            <span class=\"type\">Date</span> <span class=\"variable\">d1</span> <span class=\"operator\">=</span> sdf.parse(str);</span><br><span class=\"line\">            System.out.println(d1);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ParseException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Calender 抽象基类</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * 主要用于完成日期字段之间相互操作的功能</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testCalender</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1.调用静态方法获取实例</span></span><br><span class=\"line\">        <span class=\"type\">Calendar</span> <span class=\"variable\">cal</span> <span class=\"operator\">=</span> Calendar.getInstance();</span><br><span class=\"line\">        <span class=\"type\">Calendar</span> <span class=\"variable\">instance2</span> <span class=\"operator\">=</span> Calendar.getInstance();</span><br><span class=\"line\">        System.out.println(cal.getClass());<span class=\"comment\">// class java.util.GregorianCalendar</span></span><br><span class=\"line\">        System.out.println(cal.equals(instance2));<span class=\"comment\">//false</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//get</span></span><br><span class=\"line\">        System.out.println(cal.get(Calendar.DAY_OF_MONTH));</span><br><span class=\"line\">        System.out.println(cal.get(Calendar.DAY_OF_YEAR));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>JDK8以后</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.time.Instant;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.time.LocalDate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.time.LocalDateTime;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.time.LocalTime;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.time.OffsetDateTime;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.time.ZoneOffset;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.time.format.DateTimeFormatter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.time.format.FormatStyle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.time.temporal.TemporalAccessor;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * JDK 8 中的时间日期API</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 1.LocalDate</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 2.LocalTime</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 3.LocalDateTime</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 4.Instant 机器时间</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 5.DateTimeFormater</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestIn8</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testDate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">LocalDate</span> <span class=\"variable\">now</span> <span class=\"operator\">=</span> LocalDate.now();</span><br><span class=\"line\">        System.out.println(now);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testTime</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">LocalTime</span> <span class=\"variable\">now</span> <span class=\"operator\">=</span> LocalTime.now();</span><br><span class=\"line\">        System.out.println(now);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testLocalDateTime</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// now 获取当前的日期和时间</span></span><br><span class=\"line\">        <span class=\"type\">LocalDateTime</span> <span class=\"variable\">now</span> <span class=\"operator\">=</span> LocalDateTime.now();</span><br><span class=\"line\">        System.out.println(now);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// of 获取指定的日期时间 没有偏移量</span></span><br><span class=\"line\">        <span class=\"type\">LocalDateTime</span> <span class=\"variable\">of</span> <span class=\"operator\">=</span> LocalDateTime.of(<span class=\"number\">2002</span>, <span class=\"number\">10</span>, <span class=\"number\">9</span>, <span class=\"number\">16</span>, <span class=\"number\">34</span>, <span class=\"number\">35</span>);</span><br><span class=\"line\">        System.out.println(of);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// getXxx</span></span><br><span class=\"line\">        System.out.println(now.getDayOfMonth());</span><br><span class=\"line\">        System.out.println(now.getDayOfYear());</span><br><span class=\"line\">        System.out.println(now.getChronology());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testInstant</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// now() 获取本初子午线对应的标准时间</span></span><br><span class=\"line\">        <span class=\"type\">Instant</span> <span class=\"variable\">now</span> <span class=\"operator\">=</span> Instant.now();</span><br><span class=\"line\">        System.out.println(now);<span class=\"comment\">// 慢八个小时</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 添加时间偏移量</span></span><br><span class=\"line\">        <span class=\"type\">OffsetDateTime</span> <span class=\"variable\">offSet</span> <span class=\"operator\">=</span> now.atOffset(ZoneOffset.ofHours(<span class=\"number\">8</span>));</span><br><span class=\"line\">        System.out.println(offSet);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 1970(UTC)-&gt;现在 经过的毫秒数</span></span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">epochMilli</span> <span class=\"operator\">=</span> now.toEpochMilli();</span><br><span class=\"line\">        System.out.println(epochMilli);<span class=\"comment\">// 1631521135573</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 毫秒数-&gt;instant</span></span><br><span class=\"line\">        <span class=\"type\">Instant</span> <span class=\"variable\">ofEpochMilli</span> <span class=\"operator\">=</span> Instant.ofEpochMilli(<span class=\"number\">1631521135573L</span>);</span><br><span class=\"line\">        System.out.println(ofEpochMilli);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testDateTimeFormater</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">LocalDateTime</span> <span class=\"variable\">now</span> <span class=\"operator\">=</span> LocalDateTime.now();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 格式化1</span></span><br><span class=\"line\">        <span class=\"type\">DateTimeFormatter</span> <span class=\"variable\">formatter</span> <span class=\"operator\">=</span> DateTimeFormatter.ISO_LOCAL_DATE_TIME;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">format</span> <span class=\"operator\">=</span> formatter.format(now);</span><br><span class=\"line\">        System.out.println(format); <span class=\"comment\">// 2021-09-13T16:56:14.4738222</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 解析</span></span><br><span class=\"line\">        <span class=\"type\">TemporalAccessor</span> <span class=\"variable\">parse</span> <span class=\"operator\">=</span> formatter.parse(<span class=\"string\">&quot;2021-09-13T16:56:14.4738222&quot;</span>);</span><br><span class=\"line\">        System.out.println(parse);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 格式化2: 本地格式化</span></span><br><span class=\"line\">        <span class=\"type\">DateTimeFormatter</span> <span class=\"variable\">formatter2</span> <span class=\"operator\">=</span> DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">format2</span> <span class=\"operator\">=</span> formatter2.format(now);</span><br><span class=\"line\">        System.out.println(format2);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 格式化3: 自定义格式化</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> String pattern=<span class=\"string\">&quot;GG yyyy年MM月dd日 EE a hh时mm分ss秒&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">DateTimeFormatter</span> <span class=\"variable\">formatter3</span> <span class=\"operator\">=</span> DateTimeFormatter.ofPattern(pattern);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">format3</span> <span class=\"operator\">=</span> formatter3.format(LocalDateTime.now());</span><br><span class=\"line\">        System.out.println(format3);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"五、集合\"><a href=\"#五、集合\" class=\"headerlink\" title=\"五、集合\"></a>五、集合</h1><font color=#999AAA >\nJava Collection Framework  (JCF) Java集合框架是一组提供现成架构的类和接口。为了实现一个新特性或一个类，不需要定义一个框架。然而，一个最佳的面向对象设计总是包含一个具有类集合的框架，这样所有的类都执行相同类型的任务。\n</font>\n\n<h2 id=\"5-1-Collection和Collections\"><a href=\"#5-1-Collection和Collections\" class=\"headerlink\" title=\"5.1 Collection和Collections\"></a>5.1 Collection和Collections</h2><p>Collections</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">       List&lt;String&gt; ls = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">       ls.add(<span class=\"string\">&quot;reverse&quot;</span>);</span><br><span class=\"line\">       ls.add(<span class=\"string\">&quot;shuffle&quot;</span>);</span><br><span class=\"line\">       ls.add(<span class=\"string\">&quot;sort&quot;</span>);</span><br><span class=\"line\">       ls.add(<span class=\"string\">&quot;swap&quot;</span>);</span><br><span class=\"line\">       ls.add(<span class=\"string\">&quot;rotate&quot;</span>);</span><br><span class=\"line\">       System.out.println(ls);<span class=\"comment\">// [reverse, shuffle, sort, swap, rotate]</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// 反转</span></span><br><span class=\"line\">       Collections.reverse(ls);</span><br><span class=\"line\">       System.out.println(ls);<span class=\"comment\">// [rotate, swap, sort, shuffle, reverse]</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// 按升序进行排序</span></span><br><span class=\"line\">       Collections.sort(ls);</span><br><span class=\"line\">       System.out.println(ls);<span class=\"comment\">// [reverse, rotate, shuffle, sort, swap]</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// 根据指定 Comparator排序</span></span><br><span class=\"line\">       Collections.sort(ls, <span class=\"keyword\">new</span> <span class=\"title class_\">Comparator</span>&lt;String&gt;() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"meta\">@Override</span></span><br><span class=\"line\">           <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compare</span><span class=\"params\">(String o1, String o2)</span> &#123;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> -o1.compareTo(o2);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\">       System.out.println(ls);<span class=\"comment\">// [swap, sort, shuffle, rotate, reverse]</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// 按下标交换</span></span><br><span class=\"line\">       Collections.swap(ls, <span class=\"number\">0</span>, ls.size() - <span class=\"number\">1</span>);</span><br><span class=\"line\">       System.out.println(ls);<span class=\"comment\">// [reverse, sort, shuffle, rotate, swap]</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// 将 list 集合的后 distance 个元素整体移到前面</span></span><br><span class=\"line\">       Collections.rotate(ls, <span class=\"number\">2</span>);</span><br><span class=\"line\">       System.out.println(ls);<span class=\"comment\">// [rotate, swap, reverse, sort, shuffle]</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// 将 list 集合的前 distance 个元素整体移到后面</span></span><br><span class=\"line\">       Collections.rotate(ls, -<span class=\"number\">3</span>);</span><br><span class=\"line\">       System.out.println(ls);<span class=\"comment\">// [sort, shuffle, rotate, swap, reverse]</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// 返回指定集合中指定元素的出现次数</span></span><br><span class=\"line\">       ls.add(<span class=\"string\">&quot;sort&quot;</span>);</span><br><span class=\"line\">       <span class=\"type\">int</span> <span class=\"variable\">frequency</span> <span class=\"operator\">=</span> Collections.frequency(ls, <span class=\"string\">&quot;sort&quot;</span>);</span><br><span class=\"line\">       System.out.println(frequency);<span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// 将指定集合中的所有元素复制到另一个集合中,目标集合的长度至少和源集合的长度相同</span></span><br><span class=\"line\">       List&lt;String&gt; l2 = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();<span class=\"comment\">// ArrayList -&gt; LinkedList</span></span><br><span class=\"line\">       l2.add(<span class=\"string\">&quot;reverse1&quot;</span>);</span><br><span class=\"line\">       l2.add(<span class=\"string\">&quot;shuffle1&quot;</span>);</span><br><span class=\"line\">       l2.add(<span class=\"string\">&quot;sort1&quot;</span>);</span><br><span class=\"line\">       l2.add(<span class=\"string\">&quot;swap1&quot;</span>);</span><br><span class=\"line\">       l2.add(<span class=\"string\">&quot;rotate1&quot;</span>);</span><br><span class=\"line\">       Collections.copy(ls, l2);</span><br><span class=\"line\">       System.out.println(ls);<span class=\"comment\">// [reverse1, shuffle1, sort1, swap1, rotate1, sort]</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// LinkedList -&gt; ArrayList</span></span><br><span class=\"line\">       <span class=\"comment\">// ! IndexOutOfBoundsException Source does not fit in dest</span></span><br><span class=\"line\">       Collections.copy(l2, ls);</span><br><span class=\"line\">       System.out.println(ls);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"5-2-常用类-接口\"><a href=\"#5-2-常用类-接口\" class=\"headerlink\" title=\"5.2 常用类, 接口\"></a>5.2 常用类, 接口</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 列表</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testList</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// &lt;&gt; 中的类型只能是引用类型</span></span><br><span class=\"line\">    List&lt;Integer&gt; al = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    List&lt;Integer&gt; ll = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 队列</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testQueue</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    Queue&lt;Integer&gt; ad = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayDeque</span>&lt;&gt;();</span><br><span class=\"line\">    Queue&lt;Integer&gt; ll = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\">    Queue&lt;Integer&gt; pq = <span class=\"keyword\">new</span> <span class=\"title class_\">PriorityQueue</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 集合</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testSet</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    Set&lt;Object&gt; hs = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;();</span><br><span class=\"line\">    Set&lt;Object&gt; ts = <span class=\"keyword\">new</span> <span class=\"title class_\">TreeSet</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 映射</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testMap</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    Map&lt;Integer, String&gt; hm = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    Map&lt;Integer, String&gt; tm = <span class=\"keyword\">new</span> <span class=\"title class_\">TreeMap</span>&lt;&gt;();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-5-Stream-API\"><a href=\"#5-5-Stream-API\" class=\"headerlink\" title=\"5.5 Stream API\"></a>5.5 Stream API</h2><p>在 Java 8 中引入的 Stream API 用于处理对象的集合。流是支持各种方法的对象序列，这些方法可以流水线化以产生所需的结果。<br>Java 流的特点是:</p>\n<p>流不是数据结构，而是从集合、数组或 I&#x2F;O 通道获取输入。<br>流不会更改原始数据结构，它们仅根据流水线方法提供结果。<br>每个中间操作都被延迟执行并返回一个流作为结果，因此可以对各种中间操作进行流水线化。终端操作标记流的结束并返回结果。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testStream</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建</span></span><br><span class=\"line\">    List&lt;Integer&gt; number = Arrays.asList(<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用map将number的元素平方</span></span><br><span class=\"line\">    List&lt;Integer&gt; square = number.stream().map(x -&gt; x * x).collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(square);<span class=\"comment\">// [4, 9, 16, 25]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建</span></span><br><span class=\"line\">    List&lt;String&gt; names = Arrays.asList(<span class=\"string\">&quot;Reflection&quot;</span>, <span class=\"string\">&quot;Collection&quot;</span>, <span class=\"string\">&quot;Stream&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 过滤</span></span><br><span class=\"line\">    List&lt;String&gt; result = names.stream().filter(s -&gt; s.startsWith(<span class=\"string\">&quot;S&quot;</span>)).collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(result);<span class=\"comment\">// [Stream]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 排序</span></span><br><span class=\"line\">    List&lt;String&gt; show = names.stream().sorted().collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(show);<span class=\"comment\">// [Collection, Reflection, Stream]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建</span></span><br><span class=\"line\">    List&lt;Integer&gt; numbers = Arrays.asList(<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 收集</span></span><br><span class=\"line\">    Set&lt;Integer&gt; squareSet = numbers.stream().map(x -&gt; x * x).collect(Collectors.toSet());</span><br><span class=\"line\">    System.out.println(squareSet);<span class=\"comment\">// [16, 4, 9, 25]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// forEach</span></span><br><span class=\"line\">    number.stream().map(x -&gt; x * x).forEach(y -&gt; System.out.print(y + <span class=\"string\">&quot; &quot;</span>));<span class=\"comment\">// 4 9 16 25</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// reduce</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">even</span> <span class=\"operator\">=</span> number.stream().filter(x -&gt; x % <span class=\"number\">2</span> == <span class=\"number\">0</span>).reduce(<span class=\"number\">0</span>, (ans, i) -&gt; ans + i);<span class=\"comment\">// 0+2+4</span></span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(even);<span class=\"comment\">// 6</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-6-泛型\"><a href=\"#5-6-泛型\" class=\"headerlink\" title=\"5.6 泛型\"></a>5.6 泛型</h2><font color=#999AAA >\n泛型意味着参数化类型。这个想法是允许类型（整数、字符串等，以及用户定义的类型）作为方法、类和接口的参数。使用泛型，可以创建使用不同数据类型的类。\n对参数化类型进行操作的实体（例如类、接口或方法）称为泛型实体。\n</font>\n\n<p>与 C++ 一样，我们使用 &lt;&gt; 来指定泛型类创建中的参数类型。要创建泛型类的对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Pair</span>&lt;T, U&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> T first;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> U second;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Pair</span><span class=\"params\">(T first, U second)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.setFirst(first);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.setSecond(second);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the second</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> U <span class=\"title function_\">getSecond</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> second;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> second the second to set</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setSecond</span><span class=\"params\">(U second)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.second = second;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the first</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> T <span class=\"title function_\">getFirst</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> first;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> first the first to set</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setFirst</span><span class=\"params\">(T first)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.first = first;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;( &quot;</span> + first + <span class=\"string\">&quot;, &quot;</span> + second + <span class=\"string\">&quot;)&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"六、I-O流\"><a href=\"#六、I-O流\" class=\"headerlink\" title=\"六、I&#x2F;O流\"></a>六、I&#x2F;O流</h1><font color=#999AAA >\nIO是指Input/Output，即以内存为中心的输入和输出。\n</font>\n\n<h2 id=\"6-1-BIO\"><a href=\"#6-1-BIO\" class=\"headerlink\" title=\"6.1 BIO\"></a>6.1 BIO</h2><font color=#999AAA >\nBIO即 Blocking Input/Output, 即阻塞的I/O\n</font>\n\n<h3 id=\"6-1-1-Flie\"><a href=\"#6-1-1-Flie\" class=\"headerlink\" title=\"6.1.1 Flie\"></a>6.1.1 Flie</h3><p>用于文件和目录的创建、文件的查找和文件的删除等</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> lang.io;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * File表示一个文件或一个文件夹 在java.io包下</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestFile</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 构造一个File对象，并不会导致任何磁盘操作</span></span><br><span class=\"line\">    <span class=\"comment\">// 文件夹</span></span><br><span class=\"line\">    <span class=\"type\">File</span> <span class=\"variable\">floder</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;D:\\\\workspaceFolder\\\\CODE_JAVA&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 文件</span></span><br><span class=\"line\">    <span class=\"type\">File</span> <span class=\"variable\">file</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;D:\\\\workspaceFolder\\\\CODE_JAVA\\\\a.txt&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testGet</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 返回绝对路径，</span></span><br><span class=\"line\">        System.out.println(file);</span><br><span class=\"line\">        <span class=\"comment\">// 返回构造方法传入的路径，</span></span><br><span class=\"line\">        System.out.println(file.getPath());</span><br><span class=\"line\">        <span class=\"comment\">// 返回绝对路径，</span></span><br><span class=\"line\">        System.out.println(file.getAbsolutePath());</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123; <span class=\"comment\">// 返回绝对路径，</span></span><br><span class=\"line\">            System.out.println(file.getCanonicalPath());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 输出文件夹下文件</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i : floder.listFiles()) &#123;</span><br><span class=\"line\">            System.out.println(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testCreate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">File</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;test.file&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!f.exists()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 创建</span></span><br><span class=\"line\">                f.createNewFile();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testDelete</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">File</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;test.file&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (f.exists()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 删除</span></span><br><span class=\"line\">            <span class=\"type\">boolean</span> <span class=\"variable\">delete</span> <span class=\"operator\">=</span> f.delete();</span><br><span class=\"line\">            System.out.println(delete?<span class=\"string\">&quot;delete&quot;</span>:<span class=\"string\">&quot;not exist&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"6-1-2-ByteStream\"><a href=\"#6-1-2-ByteStream\" class=\"headerlink\" title=\"6.1.2 ByteStream\"></a>6.1.2 ByteStream</h3><p>即字节流, InputStream和OutputStream都是抽象类在里面分别定义了read()和write()方法<br>我们使用它们的子类, FileInputStream和FileOutputStream</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> lang.io;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileNotFoundException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestByteStream</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">copyPng</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">File</span> <span class=\"variable\">file</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;D:\\\\workspaceFolder\\\\CODE_JAVA\\\\猫咪.png&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">File</span> <span class=\"variable\">fileB</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;D:\\\\workspaceFolder\\\\CODE_JAVA\\\\猫咪2.png&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">FileInputStream</span> <span class=\"variable\">fileInputStream</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">FileOutputStream</span> <span class=\"variable\">fileOutputStream</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            fileInputStream = <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(file);</span><br><span class=\"line\">            fileOutputStream = <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(fileB);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">int</span> len;</span><br><span class=\"line\">            <span class=\"type\">byte</span>[] bbuf = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((len = fileInputStream.read(bbuf)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                fileOutputStream.write(bbuf, <span class=\"number\">0</span>, len);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (fileInputStream != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                    fileInputStream.close();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (fileOutputStream != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                    fileOutputStream.close();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">read</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">File</span> <span class=\"variable\">file</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;D:\\\\workspaceFolder\\\\CODE_JAVA\\\\lang\\\\io\\\\TestByteStream.java&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">FileInputStream</span> <span class=\"variable\">fis</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            fis = <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(file);</span><br><span class=\"line\">            <span class=\"type\">int</span> data;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((data = fis.read()) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                System.out.print((<span class=\"type\">char</span>) data);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fis != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    fis.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">TestByteStream</span>().copyPng();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"6-1-3-CharStream\"><a href=\"#6-1-3-CharStream\" class=\"headerlink\" title=\"6.1.3 CharStream\"></a>6.1.3 CharStream</h3><p>CharStream即字符流</p>\n<p>Reader是Java的IO库提供的另一个输入流接口。和InputStream的区别是，InputStream是一个字节流，即以byte为单位读取，而Reader是一个字符流，即以char为单位读取</p>\n<p>我们使用Reader的子类FileReader来演示向文件写入数据和从文件读出数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> lang.io;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileWriter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 内存的角度</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 输入:外部数据-&gt;内存</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 输出:内存-&gt;外部数据</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 字节流(8bit): InputStream, OutPutStream</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 字符流(16bit): Reader, Writer</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestCharStream</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.File对象指明文件</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">File</span> <span class=\"variable\">file</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;data.txt&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Read from file and print to console</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">Read</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 2.Reader对象</span></span><br><span class=\"line\">        <span class=\"type\">FileReader</span> <span class=\"variable\">fileReader</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 3.读</span></span><br><span class=\"line\">            fileReader = <span class=\"keyword\">new</span> <span class=\"title class_\">FileReader</span>(file);<span class=\"comment\">// 读入的文件一定要存在</span></span><br><span class=\"line\">            <span class=\"type\">int</span> read;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((read = fileReader.read()) != -<span class=\"number\">1</span>)</span><br><span class=\"line\">                System.out.print((<span class=\"type\">char</span>) read);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 4.关闭资源</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fileReader != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    fileReader.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Write String to file</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> toBeWrite</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">Write</span><span class=\"params\">(String toBeWrite)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">FileWriter</span> <span class=\"variable\">fileWriter</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            fileWriter = <span class=\"keyword\">new</span> <span class=\"title class_\">FileWriter</span>(file);</span><br><span class=\"line\">            fileWriter.write(<span class=\"string\">&quot;By_Quanwei\\n&quot;</span>);</span><br><span class=\"line\">            fileWriter.append(toBeWrite);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fileWriter != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    fileWriter.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Copy fileA to fileB</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">copyFile</span><span class=\"params\">(String fileA, String fileB)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">FileReader</span> <span class=\"variable\">fileReader</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">FileWriter</span> <span class=\"variable\">fileWriter</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            fileReader = <span class=\"keyword\">new</span> <span class=\"title class_\">FileReader</span>(fileA);</span><br><span class=\"line\">            fileWriter = <span class=\"keyword\">new</span> <span class=\"title class_\">FileWriter</span>(fileB);</span><br><span class=\"line\">            <span class=\"type\">int</span> len;</span><br><span class=\"line\">            <span class=\"type\">char</span>[] cbuf = <span class=\"keyword\">new</span> <span class=\"title class_\">char</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((len = fileReader.read(cbuf)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                fileWriter.write(cbuf, <span class=\"number\">0</span>, len);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (fileReader != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                    fileReader.close();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (fileWriter != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                    fileWriter.close();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">TestCharStream</span>().copyFile(<span class=\"string\">&quot;data.txt&quot;</span>, <span class=\"string\">&quot;file.txt&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testFileReadWite</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">TestCharStream</span> <span class=\"variable\">testIO</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TestCharStream</span>();</span><br><span class=\"line\">        testIO.Write(<span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">                public void Read() &#123;</span></span><br><span class=\"line\"><span class=\"string\">                    try &#123;</span></span><br><span class=\"line\"><span class=\"string\">                        FileReader fileReader = new FileReader(file);</span></span><br><span class=\"line\"><span class=\"string\">                        int read;</span></span><br><span class=\"line\"><span class=\"string\">                        while ((read = fileReader.read()) != -1)</span></span><br><span class=\"line\"><span class=\"string\">                            System.out.print((char)read);</span></span><br><span class=\"line\"><span class=\"string\">                        fileReader.close();</span></span><br><span class=\"line\"><span class=\"string\">                    &#125; catch (IOException e) &#123;</span></span><br><span class=\"line\"><span class=\"string\">                        e.printStackTrace();</span></span><br><span class=\"line\"><span class=\"string\">                    &#125;</span></span><br><span class=\"line\"><span class=\"string\">                &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">                public void Write(String toBeWrite) &#123;</span></span><br><span class=\"line\"><span class=\"string\">                    try &#123;</span></span><br><span class=\"line\"><span class=\"string\">                        FileWriter fileWriter = new FileWriter(file);</span></span><br><span class=\"line\"><span class=\"string\">                        fileWriter.append(toBeWrite);</span></span><br><span class=\"line\"><span class=\"string\">                        fileWriter.close();</span></span><br><span class=\"line\"><span class=\"string\">                    &#125; catch (IOException e) &#123;</span></span><br><span class=\"line\"><span class=\"string\">                        e.printStackTrace();</span></span><br><span class=\"line\"><span class=\"string\">                    &#125;</span></span><br><span class=\"line\"><span class=\"string\">                &#125;</span></span><br><span class=\"line\"><span class=\"string\">                &quot;&quot;&quot;</span>);</span><br><span class=\"line\">        testIO.Read();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Socket与网络编程\"><a href=\"#Socket与网络编程\" class=\"headerlink\" title=\"Socket与网络编程\"></a>Socket与网络编程</h3><p>1.网络编程的两个主要问题 1)如何定位网络上的一台或多态主机,定位主机上的特定应用(IPhe端口) 2)找到主机后如何高效可靠的传输数据(TCP&#x2F;IP)</p>\n<p>本地回环地址: (hostAddress):127.0.0.1</p>\n<p>主机名: (hostName):localhost</p>\n<p>局域网地址: 192.168.~</p>\n<p>端口号: 运行的程序(0-65535)</p>\n<p>Sockst &#x3D; ip + 端口号</p>\n<p>TCP 可靠, 大量(三次握手, 四次挥手)</p>\n<p>UDP 快速</p>\n<p><strong>Url类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> lang.net;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * url https://www.bilibili.com/video/BV1Kb411W75N?p=629</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;协议&gt;//:&lt;主机名&gt;:&lt;端口号&gt;/&lt;文件名/&gt;#&lt;片段名?&gt;&lt;参数列表&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyUrl</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">URL</span> <span class=\"variable\">url</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">URL</span>(<span class=\"string\">&quot;https://www.bilibili.com/video/BV1Kb411W75N?p=629&quot;</span>);</span><br><span class=\"line\">            System.out.println(url.getAuthority());<span class=\"comment\">// www.bilibili.com</span></span><br><span class=\"line\">            System.out.println(url.getDefaultPort());<span class=\"comment\">// 443</span></span><br><span class=\"line\">            System.out.println(url.getFile());<span class=\"comment\">// /video/BV1Kb411W75N?p=629</span></span><br><span class=\"line\">            System.out.println(url.getPath());<span class=\"comment\">// /video/BV1Kb411W75N</span></span><br><span class=\"line\">            System.out.println(url.getProtocol());<span class=\"comment\">// https</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>InetAddress类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">InetAddress</span> <span class=\"variable\">Aliyun</span> <span class=\"operator\">=</span> InetAddress.getByName(<span class=\"string\">&quot;39.99.54.127&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">InetAddress</span> <span class=\"variable\">localHost</span> <span class=\"operator\">=</span> InetAddress.getLocalHost();</span><br><span class=\"line\">    <span class=\"type\">InetAddress</span> <span class=\"variable\">loopbackAddress</span> <span class=\"operator\">=</span> InetAddress.getLoopbackAddress();</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">reachable</span> <span class=\"operator\">=</span> localHost.isReachable(<span class=\"number\">10</span>);</span><br><span class=\"line\">    System.out.println(reachable);<span class=\"comment\">//true</span></span><br><span class=\"line\">    System.out.println(localHost);<span class=\"comment\">//DESKTOP-V9EL4A5/192.168.0.193</span></span><br><span class=\"line\">    System.out.println(Aliyun);<span class=\"comment\">///39.99.54.127</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">canonicalHostName</span> <span class=\"operator\">=</span> Aliyun.getCanonicalHostName();</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">hostName</span> <span class=\"operator\">=</span> Aliyun.getHostName();<span class=\"comment\">//39.99.54.127</span></span><br><span class=\"line\">    System.out.println(hostName);<span class=\"comment\">//39.99.54.127</span></span><br><span class=\"line\">    System.out.println(canonicalHostName);</span><br><span class=\"line\">    System.out.println(loopbackAddress);<span class=\"comment\">//localhost/127.0.0.1</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>UDP网络编程</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 接收端</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"meta\">@Test</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">UDPReciver</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">       <span class=\"type\">DatagramSocket</span> <span class=\"variable\">server</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">       <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">           server = <span class=\"keyword\">new</span> <span class=\"title class_\">DatagramSocket</span>(<span class=\"number\">8900</span>);</span><br><span class=\"line\">           <span class=\"type\">byte</span>[] buf = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">1024</span>];<span class=\"comment\">// &lt;=8K</span></span><br><span class=\"line\">           <span class=\"type\">DatagramPacket</span> <span class=\"variable\">datagramPacket</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DatagramPacket</span>(buf, buf.length);</span><br><span class=\"line\">           System.out.println(<span class=\"string\">&quot;waiting...&quot;</span>);</span><br><span class=\"line\">           <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">               server.receive(datagramPacket);</span><br><span class=\"line\">               <span class=\"type\">String</span> <span class=\"variable\">string</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(datagramPacket.getData(), <span class=\"number\">0</span>, datagramPacket.getLength());</span><br><span class=\"line\">               System.out.println(datagramPacket.getAddress() + <span class=\"string\">&quot;:&quot;</span> + datagramPacket.getPort() + <span class=\"string\">&quot;send: &quot;</span> + string);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125; <span class=\"keyword\">catch</span> (SocketException e) &#123;</span><br><span class=\"line\">           e.printStackTrace();</span><br><span class=\"line\">       &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">           e.printStackTrace();</span><br><span class=\"line\">       &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (server != <span class=\"literal\">null</span>)</span><br><span class=\"line\">               server.close();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 发送端</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"meta\">@Test</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">UDPSender</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">       <span class=\"type\">DatagramSocket</span> <span class=\"variable\">client</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">       <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">           client = <span class=\"keyword\">new</span> <span class=\"title class_\">DatagramSocket</span>();</span><br><span class=\"line\">           <span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;hello Quanwei&quot;</span>;</span><br><span class=\"line\">           <span class=\"type\">DatagramPacket</span> <span class=\"variable\">datagramPacket</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DatagramPacket</span>(str.getBytes(), str.getBytes().length,</span><br><span class=\"line\">                   InetAddress.getLocalHost(), <span class=\"number\">8900</span>);</span><br><span class=\"line\">           System.out.println(<span class=\"string\">&quot;start send...&quot;</span>);</span><br><span class=\"line\">           client.send(datagramPacket);</span><br><span class=\"line\">       &#125; <span class=\"keyword\">catch</span> (SocketException | UnknownHostException e) &#123;</span><br><span class=\"line\">           e.printStackTrace();</span><br><span class=\"line\">       &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">           e.printStackTrace();</span><br><span class=\"line\">       &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (client != <span class=\"literal\">null</span>)</span><br><span class=\"line\">               client.close();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>TCP网络编程</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> lang.net;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ByteArrayOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.OutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.InetAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.ServerSocket;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.Socket;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.UnknownHostException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.time.LocalDateTime;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TCP</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">clientResive</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Socket</span> <span class=\"variable\">socket</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">InputStream</span> <span class=\"variable\">inputStream</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">ByteArrayOutputStream</span> <span class=\"variable\">byteArrayOutputStream</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// get from server</span></span><br><span class=\"line\">            <span class=\"type\">InetAddress</span> <span class=\"variable\">ip</span> <span class=\"operator\">=</span> InetAddress.getByName(<span class=\"string\">&quot;127.0.0.1&quot;</span>);</span><br><span class=\"line\">            socket = <span class=\"keyword\">new</span> <span class=\"title class_\">Socket</span>(ip, <span class=\"number\">8899</span>);</span><br><span class=\"line\">            inputStream = socket.getInputStream();</span><br><span class=\"line\">            <span class=\"type\">byte</span>[] buf = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">            <span class=\"type\">int</span> len;</span><br><span class=\"line\">            byteArrayOutputStream = <span class=\"keyword\">new</span> <span class=\"title class_\">ByteArrayOutputStream</span>();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((len = inputStream.read(buf)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                byteArrayOutputStream.write(buf, <span class=\"number\">0</span>, len);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(LocalDateTime.now() + <span class=\"string\">&quot; get from server: &quot;</span> + byteArrayOutputStream);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (UnknownHostException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (byteArrayOutputStream != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    byteArrayOutputStream.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (inputStream != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    inputStream.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e1) &#123;</span><br><span class=\"line\">                    e1.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (socket != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    socket.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">clientSend</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Socket</span> <span class=\"variable\">socket</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        InetAddress ip;</span><br><span class=\"line\">        <span class=\"type\">OutputStream</span> <span class=\"variable\">outputStream</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            ip = InetAddress.getByName(<span class=\"string\">&quot;127.0.0.1&quot;</span>);</span><br><span class=\"line\">            socket = <span class=\"keyword\">new</span> <span class=\"title class_\">Socket</span>(ip, <span class=\"number\">8899</span>);</span><br><span class=\"line\">            <span class=\"comment\">// send to server</span></span><br><span class=\"line\">            outputStream = socket.getOutputStream();</span><br><span class=\"line\">            outputStream.write(<span class=\"string\">&quot;权威 Quanwei&quot;</span>.getBytes());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (outputStream != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    outputStream.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (socket != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    socket.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">serverRevive</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ServerSocket</span> <span class=\"variable\">server</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">Socket</span> <span class=\"variable\">accept</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">InputStream</span> <span class=\"variable\">inputStream</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">ByteArrayOutputStream</span> <span class=\"variable\">byteArrayOutputStream</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">FileOutputStream</span> <span class=\"variable\">fileOutputStream</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            server = <span class=\"keyword\">new</span> <span class=\"title class_\">ServerSocket</span>(<span class=\"number\">8899</span>);</span><br><span class=\"line\">            accept = server.accept();</span><br><span class=\"line\">            <span class=\"comment\">// client input</span></span><br><span class=\"line\">            inputStream = accept.getInputStream();</span><br><span class=\"line\">            byteArrayOutputStream = <span class=\"keyword\">new</span> <span class=\"title class_\">ByteArrayOutputStream</span>();</span><br><span class=\"line\">            <span class=\"type\">byte</span>[] buf = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">            <span class=\"type\">int</span> len;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((len = inputStream.read(buf)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                byteArrayOutputStream.write(buf, <span class=\"number\">0</span>, len);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 控制台输出</span></span><br><span class=\"line\">            System.out.println(LocalDateTime.now() + <span class=\"string\">&quot; get from client: &quot;</span> + byteArrayOutputStream);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 保存到本地</span></span><br><span class=\"line\">            fileOutputStream = <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;D:\\\\workspaceFolder\\\\CODE_JAVA\\\\lang\\\\net\\\\file&quot;</span>));</span><br><span class=\"line\">            fileOutputStream.write(byteArrayOutputStream.toByteArray());</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (byteArrayOutputStream != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    byteArrayOutputStream.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (inputStream != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    inputStream.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (accept != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    accept.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (server != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    server.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">serverSend</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ServerSocket</span> <span class=\"variable\">server</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">Socket</span> <span class=\"variable\">accept</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">OutputStream</span> <span class=\"variable\">outputStream</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            server = <span class=\"keyword\">new</span> <span class=\"title class_\">ServerSocket</span>(<span class=\"number\">8899</span>);</span><br><span class=\"line\">            accept = server.accept();</span><br><span class=\"line\">            <span class=\"comment\">// server output</span></span><br><span class=\"line\">            outputStream = accept.getOutputStream();</span><br><span class=\"line\">            outputStream.write(<span class=\"string\">&quot;接收成功&quot;</span>.getBytes());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (outputStream != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    outputStream.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e1) &#123;</span><br><span class=\"line\">                    e1.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (accept != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    accept.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (server != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    server.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">TCP</span> <span class=\"variable\">tcp</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TCP</span>();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            tcp.serverSend(); <span class=\"comment\">// 先启动服务器</span></span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">        <span class=\"comment\">// new Thread(() -&gt; &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//     tcp.clientResive();</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125;).start();</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            tcp.clientResive();</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">        <span class=\"comment\">// new Thread(() -&gt; &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//     tcp.clientSend();</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125;).start();</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-2-NIO\"><a href=\"#6-2-NIO\" class=\"headerlink\" title=\"6.2 NIO\"></a>6.2 NIO</h2><h2 id=\"6-3-AIO\"><a href=\"#6-3-AIO\" class=\"headerlink\" title=\"6.3 AIO\"></a>6.3 AIO</h2><h1 id=\"七、多线程\"><a href=\"#七、多线程\" class=\"headerlink\" title=\"七、多线程\"></a>七、多线程</h1><pre><code>多线程是Java最基本的一种并发模型\n</code></pre>\n<p>一个线程不能独立的存在，它必须是进程的一部分。<br>进程：一个进程包括由操作系统分配的内存空间，包含一个或多个线程。</p>\n<p>创建多线程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> lang.thread;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CreateThreadDemo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testLambda</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> Thread.currentThread().getName();</span><br><span class=\"line\">            System.out.println(name);<span class=\"comment\">// Quanwei&#x27;s thread</span></span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;Quanwei&#x27;s thread&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testExtends</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> Thread.currentThread().getName();</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;Extends&quot;</span> + name);<span class=\"comment\">// ExtendsThread-0 也可能不是0</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;.start();</span><br><span class=\"line\">        ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testImplements</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Runnable</span> <span class=\"variable\">runnable</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> Thread.currentThread().getName();</span><br><span class=\"line\">                System.out.println(name);<span class=\"comment\">// Implements</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(runnable,<span class=\"string\">&quot;Implements&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">CreateThreadDemo</span>().testLambda();<span class=\"comment\">// main</span></span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>多线程通信<br>同步代码块</p>\n<p>synchronized(同步监视器){&#x2F;&#x2F;同步监视器可用: 类.class(保证唯一)<br>&#x2F;&#x2F;要同步的代码<br>}</p>\n<p>不需要synchronized的操作 JVM规范定义了几种原子操作：</p>\n<ol>\n<li>基本类型（long和double除外）赋值，例如：int n &#x3D; m； 引用类型赋值，例如：List<String> list &#x3D; anotherList。</li>\n<li>long和double是64位数据，JVM没有明确规定64位赋值操作是不是一个原子操作，不过在x64平台的JVM是把long和double的赋值作为原子操作实现的</li>\n<li>单条原子操作不需要线程同步,多条需要</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Ticket</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">var</span> <span class=\"variable\">w</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Windows1</span>();</span><br><span class=\"line\">        <span class=\"type\">var</span> <span class=\"variable\">w1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(w, <span class=\"string\">&quot;w1&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">var</span> <span class=\"variable\">w2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(w, <span class=\"string\">&quot;w2&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">var</span> <span class=\"variable\">w3</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(w, <span class=\"string\">&quot;w3&quot;</span>);</span><br><span class=\"line\">        w2.setPriority(Thread.MAX_PRIORITY);</span><br><span class=\"line\">        w1.start();</span><br><span class=\"line\">        w2.start();</span><br><span class=\"line\">        w3.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Windows1</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">tickets</span> <span class=\"operator\">=</span> <span class=\"number\">50</span>;</span><br><span class=\"line\">    <span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (Windows1.class) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (tickets &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        Thread.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot; : &quot;</span> + tickets);</span><br><span class=\"line\">                    --tickets;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"八、JDBC\"><a href=\"#八、JDBC\" class=\"headerlink\" title=\"八、JDBC\"></a>八、JDBC</h1><p>什么是JDBC?</p>\n<pre><code>DBC是Java DataBase Connectivity的缩写，它是Java程序访问数据库的标准接口。\n</code></pre>\n<p>使用Java程序访问数据库时，Java代码并不是直接通过TCP连接去访问数据库，而是通过JDBC接口来访问，而JDBC接口则通过JDBC驱动来实现真正对数据库的访问。</p>\n<p>我们在Java代码中如果要访问MySQL，那么必须编写代码操作JDBC接口。注意到JDBC接口是Java标准库自带的，所以可以直接编译。而具体的JDBC驱动是由数据库厂商提供的，。因此，访问某个具体的数据库，我们只需要引入该厂商提供的JDBC驱动，就可以通过JDBC接口来访问，这样保证了Java程序编写的是一套数据库访问代码，却可以访问各种不同的数据库，因为他们都提供了标准的JDBC驱动</p>\n<p>如何使用? (以连接PostgreSQL为例)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Connection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.ResultSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.SQLException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Statement;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Properties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.postgresql.Driver;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Postgresql</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">url</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;jdbc:postgresql://localhost:5432/quanwei&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;postgres&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">password</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;password&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">driver</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;org.postgresql.Driver&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> SQLException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 创建驱动程序类对象</span></span><br><span class=\"line\">        <span class=\"type\">Driver</span> <span class=\"variable\">driver</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">org</span>.postgresql.Driver();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 2. 设置用户名和密码</span></span><br><span class=\"line\">        <span class=\"type\">Properties</span> <span class=\"variable\">prop</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Properties</span>();</span><br><span class=\"line\">        prop.setProperty(<span class=\"string\">&quot;user&quot;</span>, user);</span><br><span class=\"line\">        prop.setProperty(<span class=\"string\">&quot;password&quot;</span>, password);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 3. 连接数据库，返回连接对象</span></span><br><span class=\"line\">        <span class=\"type\">Connection</span> <span class=\"variable\">conn</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            conn = driver.connect(url, prop);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">Statement</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> conn.createStatement();</span><br><span class=\"line\">        <span class=\"comment\">// 测试</span></span><br><span class=\"line\">        <span class=\"type\">ResultSet</span> <span class=\"variable\">rs</span> <span class=\"operator\">=</span> s.executeQuery(<span class=\"string\">&quot;select * from login&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(rs.next())&#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">string</span> <span class=\"operator\">=</span> rs.getString(<span class=\"number\">2</span>);</span><br><span class=\"line\">            System.out.println(string);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"九、GUI\"><a href=\"#九、GUI\" class=\"headerlink\" title=\"九、GUI\"></a>九、GUI</h1><h2 id=\"9-1-AWT\"><a href=\"#9-1-AWT\" class=\"headerlink\" title=\"9.1 AWT\"></a>9.1 AWT</h2><p>即抽象窗口工具包</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> lang.gui;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.event.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloAWT</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1.创建窗体</span></span><br><span class=\"line\">        <span class=\"type\">Frame</span> <span class=\"variable\">frame</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Frame</span>(<span class=\"string\">&quot;AWT&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 2.创建标签组件</span></span><br><span class=\"line\">        <span class=\"type\">Label</span> <span class=\"variable\">label</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Label</span>(<span class=\"string\">&quot;Hello Quanwei&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 3.设置相关属性</span></span><br><span class=\"line\">        label.setBackground(Color.GREEN);</span><br><span class=\"line\">        label.setSize(<span class=\"number\">20</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 4.将组件添加到窗体上</span></span><br><span class=\"line\">        frame.add(label);</span><br><span class=\"line\">        <span class=\"comment\">// 5.设置窗体关闭事件</span></span><br><span class=\"line\">        frame.addWindowListener(<span class=\"keyword\">new</span> <span class=\"title class_\">WindowAdapter</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">windowClosing</span><span class=\"params\">(WindowEvent e)</span> &#123;</span><br><span class=\"line\">                System.exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">// 6.设置窗体大小</span></span><br><span class=\"line\">        frame.setSize(<span class=\"number\">500</span>, <span class=\"number\">200</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 7.显示窗体</span></span><br><span class=\"line\">        frame.setVisible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"9-2-Swing\"><a href=\"#9-2-Swing\" class=\"headerlink\" title=\"9.2 Swing\"></a>9.2 Swing</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> lang.gui;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.event.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.swing.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.swing.event.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">window1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1.创建窗体</span></span><br><span class=\"line\">        <span class=\"type\">JFrame</span> <span class=\"variable\">frame</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JFrame</span>(<span class=\"string\">&quot;Swing&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 2.设置关闭事件</span></span><br><span class=\"line\">        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class=\"line\">        <span class=\"comment\">// 3.设置大小位置</span></span><br><span class=\"line\">        frame.setSize(<span class=\"number\">500</span>, <span class=\"number\">500</span>);</span><br><span class=\"line\">        frame.setLocation(<span class=\"number\">500</span>, <span class=\"number\">200</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 4.设置事件监听处理</span></span><br><span class=\"line\">        frame.addMouseListener(<span class=\"keyword\">new</span> <span class=\"title class_\">MouseInputAdapter</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">mouseClicked</span><span class=\"params\">(MouseEvent e)</span> &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> e.getX();</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> e.getY();</span><br><span class=\"line\">                frame.setTitle(<span class=\"string\">&quot;点击坐标为(&quot;</span> + x + <span class=\"string\">&quot;, &quot;</span> + y + <span class=\"string\">&quot;)&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">// 5.显示窗体</span></span><br><span class=\"line\">        frame.setVisible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>比我想象的要多得多😂😂😂🤣🤣🤣</p>"},{"title":"Java 多线程","date":"2023-04-15T01:07:35.000Z","_content":"\n# Java 多线程\n\n## synchronized\n\n对于非静态成员：锁加在 类.class 对象上\n对于静态成员：锁加在 this 对象上\n\n锁是什么？\n  锁是一个”对象“：\n  1. 对象中有一个标志位，记录自己有没有被某个线程占用。\n  2. 如果被占用记录线程的id,知道是那个线程。\n  3. 维护一个 thread id list,记录其他所有阻塞的、等待拿锁的线程。\n  4. 锁是“对象”，共享资源也是”对象“，二者可合二为一。\n\n### wait notify\n\nwait notify和synchronized 作用的对象是同一个\n\nwait \n  1. 释放锁\n  2. 阻塞，等待被其他对象notify\n  3. 重新拿锁\n\n## volatile\n\n使用内存屏障实现\n\n内存可见性\n  多核逻辑CUP缓存和内存\n  \n\n指令重排序\n  1. 没有依赖关系的指令可能重排序\n\nas-if-serial 语义\n  和单线程执行结果相同\n\nhappen-before\n  若 A happen-before B,则A的执行结果对B可见。\n\n## Compare And Set (CAS)\n\n悲观锁：认为并发冲突的概率很大，所以读操作之前就上锁。\n\n乐观锁：认为并发冲突的概率很小，所以读之前不加锁，等写的时候判断是否被其他线程修改（1）\n如果修改了就把数据重新读出来，重复该过程如果没修改，就写回去（2）。\n（1）（2）合并为一个原子操作。\n\n拿不到锁时的策略：\n  1. 自旋：不放弃CUP,空转，不断重试。\n  2. 阻塞：放弃CUP,进入阻塞状态，等待被唤醒，再被操作系统调度。\n  3. 先自旋再阻塞\n\n## 原子类\n\nAtomicInteger\n\nAtomicLong\n\nAtomicReference\n\nAtomicBoolean\n\n```java\nif(f==false){\n  f=true\n}\n```\n\n### 解决ABA问题\n\nA->B->A 从结果不能看出是否修改\n\n解决方法：不仅比较“值”还比较“版本号”\n\n\nAtomicStampedReference 使用累加量\n```java\nInteger i = 100;\nint is = 1;\nvar ai = new AtomicStampedReference<>(i, is);\nSystem.out.println(ai.compareAndSet(i, ai.getReference(), is, ai.getStamp()));\nai.set(i + 1, is + 1);\nSystem.out.println(ai.compareAndSet(i, ai.getReference(), is, ai.getStamp()));\n```\n\nAtomicMarkableReference 使用bool\n```java\nInteger i = 1;\nvar ai = new AtomicMarkableReference<>(i, false);\nSystem.out.println(ai.compareAndSet(i,\n        ai.getReference(),\n        false,\n        ai.isMarked()));\n```\n### 将已有类成员变量改为原子类型\n","source":"_posts/Java-多线程.md","raw":"---\ntitle: Java 多线程\ndate: 2023-04-15 09:07:35\ntags: Java\n---\n\n# Java 多线程\n\n## synchronized\n\n对于非静态成员：锁加在 类.class 对象上\n对于静态成员：锁加在 this 对象上\n\n锁是什么？\n  锁是一个”对象“：\n  1. 对象中有一个标志位，记录自己有没有被某个线程占用。\n  2. 如果被占用记录线程的id,知道是那个线程。\n  3. 维护一个 thread id list,记录其他所有阻塞的、等待拿锁的线程。\n  4. 锁是“对象”，共享资源也是”对象“，二者可合二为一。\n\n### wait notify\n\nwait notify和synchronized 作用的对象是同一个\n\nwait \n  1. 释放锁\n  2. 阻塞，等待被其他对象notify\n  3. 重新拿锁\n\n## volatile\n\n使用内存屏障实现\n\n内存可见性\n  多核逻辑CUP缓存和内存\n  \n\n指令重排序\n  1. 没有依赖关系的指令可能重排序\n\nas-if-serial 语义\n  和单线程执行结果相同\n\nhappen-before\n  若 A happen-before B,则A的执行结果对B可见。\n\n## Compare And Set (CAS)\n\n悲观锁：认为并发冲突的概率很大，所以读操作之前就上锁。\n\n乐观锁：认为并发冲突的概率很小，所以读之前不加锁，等写的时候判断是否被其他线程修改（1）\n如果修改了就把数据重新读出来，重复该过程如果没修改，就写回去（2）。\n（1）（2）合并为一个原子操作。\n\n拿不到锁时的策略：\n  1. 自旋：不放弃CUP,空转，不断重试。\n  2. 阻塞：放弃CUP,进入阻塞状态，等待被唤醒，再被操作系统调度。\n  3. 先自旋再阻塞\n\n## 原子类\n\nAtomicInteger\n\nAtomicLong\n\nAtomicReference\n\nAtomicBoolean\n\n```java\nif(f==false){\n  f=true\n}\n```\n\n### 解决ABA问题\n\nA->B->A 从结果不能看出是否修改\n\n解决方法：不仅比较“值”还比较“版本号”\n\n\nAtomicStampedReference 使用累加量\n```java\nInteger i = 100;\nint is = 1;\nvar ai = new AtomicStampedReference<>(i, is);\nSystem.out.println(ai.compareAndSet(i, ai.getReference(), is, ai.getStamp()));\nai.set(i + 1, is + 1);\nSystem.out.println(ai.compareAndSet(i, ai.getReference(), is, ai.getStamp()));\n```\n\nAtomicMarkableReference 使用bool\n```java\nInteger i = 1;\nvar ai = new AtomicMarkableReference<>(i, false);\nSystem.out.println(ai.compareAndSet(i,\n        ai.getReference(),\n        false,\n        ai.isMarked()));\n```\n### 将已有类成员变量改为原子类型\n","slug":"Java-多线程","published":1,"updated":"2023-05-07T08:11:56.499Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5ue0017lv9egj8u8kjl","content":"<h1 id=\"Java-多线程\"><a href=\"#Java-多线程\" class=\"headerlink\" title=\"Java 多线程\"></a>Java 多线程</h1><h2 id=\"synchronized\"><a href=\"#synchronized\" class=\"headerlink\" title=\"synchronized\"></a>synchronized</h2><p>对于非静态成员：锁加在 类.class 对象上<br>对于静态成员：锁加在 this 对象上</p>\n<p>锁是什么？<br>  锁是一个”对象“：</p>\n<ol>\n<li>对象中有一个标志位，记录自己有没有被某个线程占用。</li>\n<li>如果被占用记录线程的id,知道是那个线程。</li>\n<li>维护一个 thread id list,记录其他所有阻塞的、等待拿锁的线程。</li>\n<li>锁是“对象”，共享资源也是”对象“，二者可合二为一。</li>\n</ol>\n<h3 id=\"wait-notify\"><a href=\"#wait-notify\" class=\"headerlink\" title=\"wait notify\"></a>wait notify</h3><p>wait notify和synchronized 作用的对象是同一个</p>\n<p>wait </p>\n<ol>\n<li>释放锁</li>\n<li>阻塞，等待被其他对象notify</li>\n<li>重新拿锁</li>\n</ol>\n<h2 id=\"volatile\"><a href=\"#volatile\" class=\"headerlink\" title=\"volatile\"></a>volatile</h2><p>使用内存屏障实现</p>\n<p>内存可见性<br>  多核逻辑CUP缓存和内存</p>\n<p>指令重排序</p>\n<ol>\n<li>没有依赖关系的指令可能重排序</li>\n</ol>\n<p>as-if-serial 语义<br>  和单线程执行结果相同</p>\n<p>happen-before<br>  若 A happen-before B,则A的执行结果对B可见。</p>\n<h2 id=\"Compare-And-Set-CAS\"><a href=\"#Compare-And-Set-CAS\" class=\"headerlink\" title=\"Compare And Set (CAS)\"></a>Compare And Set (CAS)</h2><p>悲观锁：认为并发冲突的概率很大，所以读操作之前就上锁。</p>\n<p>乐观锁：认为并发冲突的概率很小，所以读之前不加锁，等写的时候判断是否被其他线程修改（1）<br>如果修改了就把数据重新读出来，重复该过程如果没修改，就写回去（2）。<br>（1）（2）合并为一个原子操作。</p>\n<p>拿不到锁时的策略：</p>\n<ol>\n<li>自旋：不放弃CUP,空转，不断重试。</li>\n<li>阻塞：放弃CUP,进入阻塞状态，等待被唤醒，再被操作系统调度。</li>\n<li>先自旋再阻塞</li>\n</ol>\n<h2 id=\"原子类\"><a href=\"#原子类\" class=\"headerlink\" title=\"原子类\"></a>原子类</h2><p>AtomicInteger</p>\n<p>AtomicLong</p>\n<p>AtomicReference</p>\n<p>AtomicBoolean</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(f==<span class=\"literal\">false</span>)&#123;</span><br><span class=\"line\">  f=<span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"解决ABA问题\"><a href=\"#解决ABA问题\" class=\"headerlink\" title=\"解决ABA问题\"></a>解决ABA问题</h3><p>A-&gt;B-&gt;A 从结果不能看出是否修改</p>\n<p>解决方法：不仅比较“值”还比较“版本号”</p>\n<p>AtomicStampedReference 使用累加量</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"type\">var</span> <span class=\"variable\">ai</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicStampedReference</span>&lt;&gt;(i, is);</span><br><span class=\"line\">System.out.println(ai.compareAndSet(i, ai.getReference(), is, ai.getStamp()));</span><br><span class=\"line\">ai.set(i + <span class=\"number\">1</span>, is + <span class=\"number\">1</span>);</span><br><span class=\"line\">System.out.println(ai.compareAndSet(i, ai.getReference(), is, ai.getStamp()));</span><br></pre></td></tr></table></figure>\n\n<p>AtomicMarkableReference 使用bool</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"type\">var</span> <span class=\"variable\">ai</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicMarkableReference</span>&lt;&gt;(i, <span class=\"literal\">false</span>);</span><br><span class=\"line\">System.out.println(ai.compareAndSet(i,</span><br><span class=\"line\">        ai.getReference(),</span><br><span class=\"line\">        <span class=\"literal\">false</span>,</span><br><span class=\"line\">        ai.isMarked()));</span><br></pre></td></tr></table></figure>\n<h3 id=\"将已有类成员变量改为原子类型\"><a href=\"#将已有类成员变量改为原子类型\" class=\"headerlink\" title=\"将已有类成员变量改为原子类型\"></a>将已有类成员变量改为原子类型</h3>","site":{"data":{}},"cover":false,"excerpt":"","more":"<h1 id=\"Java-多线程\"><a href=\"#Java-多线程\" class=\"headerlink\" title=\"Java 多线程\"></a>Java 多线程</h1><h2 id=\"synchronized\"><a href=\"#synchronized\" class=\"headerlink\" title=\"synchronized\"></a>synchronized</h2><p>对于非静态成员：锁加在 类.class 对象上<br>对于静态成员：锁加在 this 对象上</p>\n<p>锁是什么？<br>  锁是一个”对象“：</p>\n<ol>\n<li>对象中有一个标志位，记录自己有没有被某个线程占用。</li>\n<li>如果被占用记录线程的id,知道是那个线程。</li>\n<li>维护一个 thread id list,记录其他所有阻塞的、等待拿锁的线程。</li>\n<li>锁是“对象”，共享资源也是”对象“，二者可合二为一。</li>\n</ol>\n<h3 id=\"wait-notify\"><a href=\"#wait-notify\" class=\"headerlink\" title=\"wait notify\"></a>wait notify</h3><p>wait notify和synchronized 作用的对象是同一个</p>\n<p>wait </p>\n<ol>\n<li>释放锁</li>\n<li>阻塞，等待被其他对象notify</li>\n<li>重新拿锁</li>\n</ol>\n<h2 id=\"volatile\"><a href=\"#volatile\" class=\"headerlink\" title=\"volatile\"></a>volatile</h2><p>使用内存屏障实现</p>\n<p>内存可见性<br>  多核逻辑CUP缓存和内存</p>\n<p>指令重排序</p>\n<ol>\n<li>没有依赖关系的指令可能重排序</li>\n</ol>\n<p>as-if-serial 语义<br>  和单线程执行结果相同</p>\n<p>happen-before<br>  若 A happen-before B,则A的执行结果对B可见。</p>\n<h2 id=\"Compare-And-Set-CAS\"><a href=\"#Compare-And-Set-CAS\" class=\"headerlink\" title=\"Compare And Set (CAS)\"></a>Compare And Set (CAS)</h2><p>悲观锁：认为并发冲突的概率很大，所以读操作之前就上锁。</p>\n<p>乐观锁：认为并发冲突的概率很小，所以读之前不加锁，等写的时候判断是否被其他线程修改（1）<br>如果修改了就把数据重新读出来，重复该过程如果没修改，就写回去（2）。<br>（1）（2）合并为一个原子操作。</p>\n<p>拿不到锁时的策略：</p>\n<ol>\n<li>自旋：不放弃CUP,空转，不断重试。</li>\n<li>阻塞：放弃CUP,进入阻塞状态，等待被唤醒，再被操作系统调度。</li>\n<li>先自旋再阻塞</li>\n</ol>\n<h2 id=\"原子类\"><a href=\"#原子类\" class=\"headerlink\" title=\"原子类\"></a>原子类</h2><p>AtomicInteger</p>\n<p>AtomicLong</p>\n<p>AtomicReference</p>\n<p>AtomicBoolean</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(f==<span class=\"literal\">false</span>)&#123;</span><br><span class=\"line\">  f=<span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"解决ABA问题\"><a href=\"#解决ABA问题\" class=\"headerlink\" title=\"解决ABA问题\"></a>解决ABA问题</h3><p>A-&gt;B-&gt;A 从结果不能看出是否修改</p>\n<p>解决方法：不仅比较“值”还比较“版本号”</p>\n<p>AtomicStampedReference 使用累加量</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"type\">var</span> <span class=\"variable\">ai</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicStampedReference</span>&lt;&gt;(i, is);</span><br><span class=\"line\">System.out.println(ai.compareAndSet(i, ai.getReference(), is, ai.getStamp()));</span><br><span class=\"line\">ai.set(i + <span class=\"number\">1</span>, is + <span class=\"number\">1</span>);</span><br><span class=\"line\">System.out.println(ai.compareAndSet(i, ai.getReference(), is, ai.getStamp()));</span><br></pre></td></tr></table></figure>\n\n<p>AtomicMarkableReference 使用bool</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"type\">var</span> <span class=\"variable\">ai</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicMarkableReference</span>&lt;&gt;(i, <span class=\"literal\">false</span>);</span><br><span class=\"line\">System.out.println(ai.compareAndSet(i,</span><br><span class=\"line\">        ai.getReference(),</span><br><span class=\"line\">        <span class=\"literal\">false</span>,</span><br><span class=\"line\">        ai.isMarked()));</span><br></pre></td></tr></table></figure>\n<h3 id=\"将已有类成员变量改为原子类型\"><a href=\"#将已有类成员变量改为原子类型\" class=\"headerlink\" title=\"将已有类成员变量改为原子类型\"></a>将已有类成员变量改为原子类型</h3>"},{"title":"Java 数据库框架","date":"2023-05-28T14:21:33.000Z","_content":"\n# Java 数据库访问框架\n\n## JDBC\n\nJDBC（Java Database Connectivity）是Java语言中用于连接和操作数据库的API。JDBC提供了一组标准接口，使得Java程序可以与各种关系型数据库进行交互，如Oracle、MySQL、SQL Server等。\n\nJDBC的工作原理是通过驱动程序（Driver）来实现与数据库的连接。驱动程序是一个Java类库，它包含了与特定数据库通信所需的代码和协议。在使用JDBC时，需要先加载相应的驱动程序，然后通过驱动程序建立与数据库的连接，最后执行SQL语句或存储过程等操作。\n\nJDBC的主要功能包括：\n\n1. 建立与数据库的连接：通过DriverManager类的getConnection()方法建立与数据库的连接。\n\n2. 执行SQL语句：通过Statement或PreparedStatement对象执行SQL语句，如查询数据、插入数据、更新数据等。\n\n3. 处理结果集：通过ResultSet对象处理查询结果集，如获取查询结果、遍历结果集等。\n\n4. 事务管理：通过Connection对象控制事务的提交、回滚等操作。\n\nJDBC是Java EE平台的核心技术之一，被广泛应用于企业级应用程序、Web应用程序等领域。\n\n## JOOQ\n\nJOOQ（Java Object Oriented Querying）是一个用于Java语言的数据库访问框架，它提供了一种类型安全、面向对象的方式来构建SQL查询。JOOQ支持多种关系型数据库，如MySQL、Oracle、PostgreSQL等。\n\nJOOQ提供了一种DSL来解决查询问题。这种语言基于生成的entity对象提供编译时安全\n（compile-time-safe）查询。JOOQ支持不同的数据库，能够减少模板代码。\n\nJOOQ的主要特点包括：\n\n1. 类型安全：JOOQ使用Java代码来构建SQL查询，因此可以在编译时检查SQL语句的正确性，避免了运行时错误。\n\n2. 面向对象：JOOQ将数据库表、列等元素映射为Java类和属性，使得查询结果可以直接转换为Java对象。\n\n3. 灵活性：JOOQ提供了丰富的API，可以灵活地构建各种复杂的SQL查询，同时也支持原生SQL语句。\n\n4. 性能优化：JOOQ通过生成高效的SQL语句和预编译语句来提高查询性能。\n\n使用JOOQ可以大大简化Java程序与数据库的交互过程，同时也提高了代码的可读性和可维护性。JOOQ还提供了丰富的文档和示例，方便开发人员学习和使用。\n\n## Spring Data JDBC\n\nSpring Data JDBC是Spring框架中的一个模块，它提供了一种简单、轻量级的方式来访问关系型数据库。与传统的ORM框架不同，Spring Data JDBC采用了更加直接的方式来操作数据库，将Java对象映射为数据库表和列。\n\nSpring Data JDBC的主要特点包括：\n\n1. 简单易用：Spring Data JDBC提供了简单的API，使得开发人员可以快速地进行数据库操作。\n\n2. 高效性能：Spring Data JDBC采用了基于JDBC的底层实现，具有较高的性能和可扩展性。\n\n3. 灵活性：Spring Data JDBC支持自定义查询、存储过程等高级功能，同时也支持原生SQL语句。\n\n4. 易于集成：Spring Data JDBC与Spring框架紧密集成，可以方便地与其他Spring组件（如Spring Boot）一起使用。\n\nSpring Data JDBC的核心概念是Entity、Repository和Query，其中Entity表示Java对象与数据库表之间的映射关系，Repository提供了对Entity的CRUD操作，Query则提供了自定义查询的功能。\n\n使用Spring Data JDBC可以大大简化Java程序与数据库的交互过程，同时也提高了代码的可读性和可维护性。\n\n## Mybatis\n\nMyBatis是一种开源的持久化框架，它可以将Java对象映射到关系型数据库中的表和列。MyBatis提供了灵活的配置方式和强大的SQL查询功能，使得开发人员可以更加方便地进行数据库操作。\n\nMyBatis的主要特点包括：\n\n1. 灵活的配置：MyBatis使用XML或注解来配置SQL语句和映射关系，可以根据需要进行灵活的配置。\n\n2. 强大的SQL查询：MyBatis支持动态SQL、参数映射、结果集映射等高级功能，可以满足各种复杂的查询需求。\n\n3. 易于集成：MyBatis与Spring框架紧密集成，可以方便地与其他Spring组件（如Spring Boot）一起使用。\n\n4. 易于扩展：MyBatis提供了插件机制，可以方便地扩展其功能。\n\n使用MyBatis可以大大简化Java程序与数据库的交互过程，同时也提高了代码的可读性和可维护性。MyBatis还提供了丰富的文档和示例，方便开发人员学习和使用。\n\n## Mybatis Plus\n\nMyBatis Plus是MyBatis的增强工具，它提供了一系列的便捷功能和增强特性，使得开发人员可以更加方便地进行数据库操作。\n\nMyBatis Plus的主要特点包括：\n\n1. 简化CRUD操作：MyBatis Plus提供了通用的Mapper接口和实现类，可以大大简化CRUD操作的编写。\n\n2. 支持Lambda表达式：MyBatis Plus支持使用Lambda表达式来构建查询条件，使得查询语句更加简洁易懂。\n\n3. 自动生成代码：MyBatis Plus提供了代码生成器，可以根据数据库表自动生成Java实体类、Mapper接口和XML文件等代码。\n\n4. 支持分页查询：MyBatis Plus提供了分页插件，可以方便地进行分页查询。\n\n5. 易于扩展：MyBatis Plus提供了丰富的插件机制，可以方便地扩展其功能。\n\n使用MyBatis Plus可以大大简化Java程序与数据库的交互过程，同时也提高了代码的可读性和可维护性。MyBatis Plus还提供了丰富的文档和示例，方便开发人员学习和使用。\n\n## Hibernate\n\nHibernate是一个开源的ORM（对象关系映射）框架，它可以将Java对象映射到关系型数据库中的表和列。Hibernate提供了灵活的配置方式和强大的查询功能，使得开发人员可以更加方便地进行数据库操作。\n\nHibernate的主要特点包括：\n\n1. 灵活的配置：Hibernate使用XML或注解来配置映射关系和查询语句，可以根据需要进行灵活的配置。\n\n2. 强大的查询功能：Hibernate支持动态SQL、参数映射、结果集映射等高级功能，可以满足各种复杂的查询需求。\n\n3. 易于集成：Hibernate与Spring框架紧密集成，可以方便地与其他Spring组件（如Spring Boot）一起使用。\n\n4. 易于扩展：Hibernate提供了插件机制，可以方便地扩展其功能。\n\n使用Hibernate可以大大简化Java程序与数据库的交互过程，同时也提高了代码的可读性和可维护性。Hibernate还提供了丰富的文档和示例，方便开发人员学习和使用。\n\n## JPA\n\nJPA（Java Persistence API）是Java EE平台中的一种ORM（对象关系映射）规范，它定义了一组标准接口和注解，使得开发人员可以更加方便地进行数据库操作。\n\nJPA的主要特点包括：\n\n1. 简化数据访问：JPA提供了简单的API，使得开发人员可以快速地进行数据库操作。\n\n2. 面向对象：JPA将数据库表、列等元素映射为Java类和属性，使得查询结果可以直接转换为Java对象。\n\n3. 灵活性：JPA支持多种映射方式、查询语言和事务管理策略，可以根据需要进行灵活的配置。\n\n4. 易于集成：JPA与Spring框架紧密集成，可以方便地与其他Spring组件（如Spring Boot）一起使用。\n\nJPA的核心概念是Entity、EntityManager和Query，其中Entity表示Java对象与数据库表之间的映射关系，EntityManager提供了对Entity的CRUD操作，Query则提供了自定义查询的功能。\n\n使用JPA可以大大简化Java程序与数据库的交互过程，同时也提高了代码的可读性和可维护性。JPA还提供了丰富的文档和示例，方便开发人员学习和使用。\n\n## Spring Data JPA\n\nSpring Data JPA是Spring框架中的一个模块，它提供了一种简单、轻量级的方式来访问关系型数据库。Spring Data JPA基于JPA规范，封装了JPA的复杂性，使得开发人员可以更加方便地进行数据库操作。\n\nSpring Data JPA的主要特点包括：\n\n1. 简化数据访问：Spring Data JPA提供了简单的API，使得开发人员可以快速地进行数据库操作。\n\n2. 面向对象：Spring Data JPA将数据库表、列等元素映射为Java类和属性，使得查询结果可以直接转换为Java对象。\n\n3. 灵活性：Spring Data JPA支持多种映射方式、查询语言和事务管理策略，可以根据需要进行灵活的配置。\n\n4. 易于集成：Spring Data JPA与Spring框架紧密集成，可以方便地与其他Spring组件（如Spring Boot）一起使用。\n\nSpring Data JPA的核心概念是Entity、Repository和Query，其中Entity表示Java对象与数据库表之间的映射关系，Repository提供了对Entity的CRUD操作，Query则提供了自定义查询的功能。\n\n使用Spring Data JPA可以大大简化Java程序与数据库的交互过程，同时也提高了代码的可读性和可维护性。Spring Data JPA还提供了丰富的文档和示例，方便开发人员学习和使用。\n\n## QueryDSL\n\nQueryDSL 是一个基于 Java 的框架，用于构建类型安全的 SQL 查询。它提供了一种简单、直观的方式来编写 SQL 查询，同时避免了手动编写 SQL 语句所带来的错误和不便。\n\nQueryDSL 在 SpringData JPA 的基础上，更近一步，提供了统一的类型安全的查询方式，正如标题所说的，它更面向对象了。QueryDSL 由一些查询方法构成，熟悉 SpringData JPA 基本上可以立刻上手去 coding。\n\nQueryDSL 支持多种数据库，包括 MySQL、PostgreSQL、Oracle、SQL Server 等。它可以与 JPA、Hibernate、Spring Data 等 ORM 框架集成使用，也可以直接使用 JDBC 进行操作。\n\nQueryDSL 的主要特点包括：\n\n- 类型安全：通过使用 Java 类型来表示查询条件和结果，避免了手动编写 SQL 语句时可能出现的语法错误和类型错误。\n- 可读性强：使用 QueryDSL 编写的查询语句通常比手写 SQL 更易读、易懂。\n- 灵活性高：QueryDSL 提供了丰富的 API，可以满足各种复杂的查询需求。\n- 易于集成：QueryDSL 可以与多种 ORM 框架集成使用，也可以直接使用 JDBC 进行操作。\n\n总之，QueryDSL 是一个非常实用的 Java 框架，可以大大简化 SQL 查询的编写过程，提高开发效率和代码质量。\n\n## Java 数据库连接池\n\n## C3p0\n\n开源的JDBC连接池，实现了数据源和JNDI绑定，支持JDBC3规范和JDBC2的标准扩展。\n\n目前使用它的开源项目有Hibernate、Spring等。单线程，性能较差，适用于小型系统，代码600KB左右。\n\n## DBCP (Database Connection Pool)\n\n由Apache开发的一个Java数据库连接池项目， Jakarta commons-pool对象池机制，Tomcat使用的连接池组件就是DBCP。\n\n单独使用dbcp需要3个包：common-dbcp.jar,common-pool.jar,common-collections.jar，预先将数据库连接放在内存中，应用程序需要建立数据库连接时直接到连接池中申请一个就行，用完再放回。单线程，并发量低，性能不好，适用于小型系统。\n\n## Tomcat Jdbc Pool\n\nTomcat在7.0以前都是使用common-dbcp做为连接池组件，但是dbcp是单线程，为保证线程安全会锁整个连接池，性能较差，dbcp有超过60个类，也相对复杂。\n\nTomcat从7.0开始引入了新增连接池模块叫做Tomcat jdbc pool，基于Tomcat JULI，使用Tomcat日志框架，完全兼容dbcp，通过异步方式获取连接，支持高并发应用环境，超级简单核心文件只有8个，支持JMX，支持XA Connection。\n\n## BoneCP\n\n官方说法BoneCP是一个高效、免费、开源的Java数据库连接池实现库。\n\n设计初衷就是为了提高数据库连接池性能，根据某些测试数据显示，BoneCP的速度是最快的，要比当时第二快速的连接池快25倍左右，完美集成到一些持久化产品如Hibernate和DataNucleus中。\n\nBoneCP特色：高度可扩展，快速；连接状态切换的回调机制；允许直接访问连接；自动化重置能力；JMX支持；懒加载能力；支持XML和属性文件配置方式；较好的Java代码组织，100%单元测试分支代码覆盖率；代码40KB左右。\n\n## HikariCP\n\nHikariCP 是一个高性能的 JDBC 连接池组件，号称性能最好的后起之秀，是一个基于BoneCP做了不少的改进和优化的高性能JDBC连接池。\n\n其作者还有产出了另外一个开源作品HikariJSON——高性能的JSON解析器。\n\n代码体积更是少的可怜，130kb。Spring Boot 2都已经宣布支持了该组件，由之前的Tomcat换成HikariCP。\n\n其性能远高于c3p0、tomcat等连接池，以致后来BoneCP作者都放弃了维护，在Github项目主页推荐大家使用HikariCP\n\n## Druid\n\nDruid是目前 Java 语言中最好的数据库连接池，Druid能够提供强大的监控和扩展功能，是一个可用于大数据实时查询和分析的高容错、高性能的开源分布式系统，尤其是当发生代码部署、机器故障以及其他产品系统遇到宕机等情况时，Druid仍能够保持100%正常运行。\n\n主要特色：\n\n1. 为分析监控设计；\n\n2. 快速的交互式查询；\n\n3. 高可用；\n\n5. 可扩展；\n\nDruid是一个开源项目，源码托管在github上。","source":"_posts/Java-数据库框架.md","raw":"---\ntitle: Java 数据库框架\ndate: 2023-05-28 22:21:33\ntags: \n- Java\n- Database\n---\n\n# Java 数据库访问框架\n\n## JDBC\n\nJDBC（Java Database Connectivity）是Java语言中用于连接和操作数据库的API。JDBC提供了一组标准接口，使得Java程序可以与各种关系型数据库进行交互，如Oracle、MySQL、SQL Server等。\n\nJDBC的工作原理是通过驱动程序（Driver）来实现与数据库的连接。驱动程序是一个Java类库，它包含了与特定数据库通信所需的代码和协议。在使用JDBC时，需要先加载相应的驱动程序，然后通过驱动程序建立与数据库的连接，最后执行SQL语句或存储过程等操作。\n\nJDBC的主要功能包括：\n\n1. 建立与数据库的连接：通过DriverManager类的getConnection()方法建立与数据库的连接。\n\n2. 执行SQL语句：通过Statement或PreparedStatement对象执行SQL语句，如查询数据、插入数据、更新数据等。\n\n3. 处理结果集：通过ResultSet对象处理查询结果集，如获取查询结果、遍历结果集等。\n\n4. 事务管理：通过Connection对象控制事务的提交、回滚等操作。\n\nJDBC是Java EE平台的核心技术之一，被广泛应用于企业级应用程序、Web应用程序等领域。\n\n## JOOQ\n\nJOOQ（Java Object Oriented Querying）是一个用于Java语言的数据库访问框架，它提供了一种类型安全、面向对象的方式来构建SQL查询。JOOQ支持多种关系型数据库，如MySQL、Oracle、PostgreSQL等。\n\nJOOQ提供了一种DSL来解决查询问题。这种语言基于生成的entity对象提供编译时安全\n（compile-time-safe）查询。JOOQ支持不同的数据库，能够减少模板代码。\n\nJOOQ的主要特点包括：\n\n1. 类型安全：JOOQ使用Java代码来构建SQL查询，因此可以在编译时检查SQL语句的正确性，避免了运行时错误。\n\n2. 面向对象：JOOQ将数据库表、列等元素映射为Java类和属性，使得查询结果可以直接转换为Java对象。\n\n3. 灵活性：JOOQ提供了丰富的API，可以灵活地构建各种复杂的SQL查询，同时也支持原生SQL语句。\n\n4. 性能优化：JOOQ通过生成高效的SQL语句和预编译语句来提高查询性能。\n\n使用JOOQ可以大大简化Java程序与数据库的交互过程，同时也提高了代码的可读性和可维护性。JOOQ还提供了丰富的文档和示例，方便开发人员学习和使用。\n\n## Spring Data JDBC\n\nSpring Data JDBC是Spring框架中的一个模块，它提供了一种简单、轻量级的方式来访问关系型数据库。与传统的ORM框架不同，Spring Data JDBC采用了更加直接的方式来操作数据库，将Java对象映射为数据库表和列。\n\nSpring Data JDBC的主要特点包括：\n\n1. 简单易用：Spring Data JDBC提供了简单的API，使得开发人员可以快速地进行数据库操作。\n\n2. 高效性能：Spring Data JDBC采用了基于JDBC的底层实现，具有较高的性能和可扩展性。\n\n3. 灵活性：Spring Data JDBC支持自定义查询、存储过程等高级功能，同时也支持原生SQL语句。\n\n4. 易于集成：Spring Data JDBC与Spring框架紧密集成，可以方便地与其他Spring组件（如Spring Boot）一起使用。\n\nSpring Data JDBC的核心概念是Entity、Repository和Query，其中Entity表示Java对象与数据库表之间的映射关系，Repository提供了对Entity的CRUD操作，Query则提供了自定义查询的功能。\n\n使用Spring Data JDBC可以大大简化Java程序与数据库的交互过程，同时也提高了代码的可读性和可维护性。\n\n## Mybatis\n\nMyBatis是一种开源的持久化框架，它可以将Java对象映射到关系型数据库中的表和列。MyBatis提供了灵活的配置方式和强大的SQL查询功能，使得开发人员可以更加方便地进行数据库操作。\n\nMyBatis的主要特点包括：\n\n1. 灵活的配置：MyBatis使用XML或注解来配置SQL语句和映射关系，可以根据需要进行灵活的配置。\n\n2. 强大的SQL查询：MyBatis支持动态SQL、参数映射、结果集映射等高级功能，可以满足各种复杂的查询需求。\n\n3. 易于集成：MyBatis与Spring框架紧密集成，可以方便地与其他Spring组件（如Spring Boot）一起使用。\n\n4. 易于扩展：MyBatis提供了插件机制，可以方便地扩展其功能。\n\n使用MyBatis可以大大简化Java程序与数据库的交互过程，同时也提高了代码的可读性和可维护性。MyBatis还提供了丰富的文档和示例，方便开发人员学习和使用。\n\n## Mybatis Plus\n\nMyBatis Plus是MyBatis的增强工具，它提供了一系列的便捷功能和增强特性，使得开发人员可以更加方便地进行数据库操作。\n\nMyBatis Plus的主要特点包括：\n\n1. 简化CRUD操作：MyBatis Plus提供了通用的Mapper接口和实现类，可以大大简化CRUD操作的编写。\n\n2. 支持Lambda表达式：MyBatis Plus支持使用Lambda表达式来构建查询条件，使得查询语句更加简洁易懂。\n\n3. 自动生成代码：MyBatis Plus提供了代码生成器，可以根据数据库表自动生成Java实体类、Mapper接口和XML文件等代码。\n\n4. 支持分页查询：MyBatis Plus提供了分页插件，可以方便地进行分页查询。\n\n5. 易于扩展：MyBatis Plus提供了丰富的插件机制，可以方便地扩展其功能。\n\n使用MyBatis Plus可以大大简化Java程序与数据库的交互过程，同时也提高了代码的可读性和可维护性。MyBatis Plus还提供了丰富的文档和示例，方便开发人员学习和使用。\n\n## Hibernate\n\nHibernate是一个开源的ORM（对象关系映射）框架，它可以将Java对象映射到关系型数据库中的表和列。Hibernate提供了灵活的配置方式和强大的查询功能，使得开发人员可以更加方便地进行数据库操作。\n\nHibernate的主要特点包括：\n\n1. 灵活的配置：Hibernate使用XML或注解来配置映射关系和查询语句，可以根据需要进行灵活的配置。\n\n2. 强大的查询功能：Hibernate支持动态SQL、参数映射、结果集映射等高级功能，可以满足各种复杂的查询需求。\n\n3. 易于集成：Hibernate与Spring框架紧密集成，可以方便地与其他Spring组件（如Spring Boot）一起使用。\n\n4. 易于扩展：Hibernate提供了插件机制，可以方便地扩展其功能。\n\n使用Hibernate可以大大简化Java程序与数据库的交互过程，同时也提高了代码的可读性和可维护性。Hibernate还提供了丰富的文档和示例，方便开发人员学习和使用。\n\n## JPA\n\nJPA（Java Persistence API）是Java EE平台中的一种ORM（对象关系映射）规范，它定义了一组标准接口和注解，使得开发人员可以更加方便地进行数据库操作。\n\nJPA的主要特点包括：\n\n1. 简化数据访问：JPA提供了简单的API，使得开发人员可以快速地进行数据库操作。\n\n2. 面向对象：JPA将数据库表、列等元素映射为Java类和属性，使得查询结果可以直接转换为Java对象。\n\n3. 灵活性：JPA支持多种映射方式、查询语言和事务管理策略，可以根据需要进行灵活的配置。\n\n4. 易于集成：JPA与Spring框架紧密集成，可以方便地与其他Spring组件（如Spring Boot）一起使用。\n\nJPA的核心概念是Entity、EntityManager和Query，其中Entity表示Java对象与数据库表之间的映射关系，EntityManager提供了对Entity的CRUD操作，Query则提供了自定义查询的功能。\n\n使用JPA可以大大简化Java程序与数据库的交互过程，同时也提高了代码的可读性和可维护性。JPA还提供了丰富的文档和示例，方便开发人员学习和使用。\n\n## Spring Data JPA\n\nSpring Data JPA是Spring框架中的一个模块，它提供了一种简单、轻量级的方式来访问关系型数据库。Spring Data JPA基于JPA规范，封装了JPA的复杂性，使得开发人员可以更加方便地进行数据库操作。\n\nSpring Data JPA的主要特点包括：\n\n1. 简化数据访问：Spring Data JPA提供了简单的API，使得开发人员可以快速地进行数据库操作。\n\n2. 面向对象：Spring Data JPA将数据库表、列等元素映射为Java类和属性，使得查询结果可以直接转换为Java对象。\n\n3. 灵活性：Spring Data JPA支持多种映射方式、查询语言和事务管理策略，可以根据需要进行灵活的配置。\n\n4. 易于集成：Spring Data JPA与Spring框架紧密集成，可以方便地与其他Spring组件（如Spring Boot）一起使用。\n\nSpring Data JPA的核心概念是Entity、Repository和Query，其中Entity表示Java对象与数据库表之间的映射关系，Repository提供了对Entity的CRUD操作，Query则提供了自定义查询的功能。\n\n使用Spring Data JPA可以大大简化Java程序与数据库的交互过程，同时也提高了代码的可读性和可维护性。Spring Data JPA还提供了丰富的文档和示例，方便开发人员学习和使用。\n\n## QueryDSL\n\nQueryDSL 是一个基于 Java 的框架，用于构建类型安全的 SQL 查询。它提供了一种简单、直观的方式来编写 SQL 查询，同时避免了手动编写 SQL 语句所带来的错误和不便。\n\nQueryDSL 在 SpringData JPA 的基础上，更近一步，提供了统一的类型安全的查询方式，正如标题所说的，它更面向对象了。QueryDSL 由一些查询方法构成，熟悉 SpringData JPA 基本上可以立刻上手去 coding。\n\nQueryDSL 支持多种数据库，包括 MySQL、PostgreSQL、Oracle、SQL Server 等。它可以与 JPA、Hibernate、Spring Data 等 ORM 框架集成使用，也可以直接使用 JDBC 进行操作。\n\nQueryDSL 的主要特点包括：\n\n- 类型安全：通过使用 Java 类型来表示查询条件和结果，避免了手动编写 SQL 语句时可能出现的语法错误和类型错误。\n- 可读性强：使用 QueryDSL 编写的查询语句通常比手写 SQL 更易读、易懂。\n- 灵活性高：QueryDSL 提供了丰富的 API，可以满足各种复杂的查询需求。\n- 易于集成：QueryDSL 可以与多种 ORM 框架集成使用，也可以直接使用 JDBC 进行操作。\n\n总之，QueryDSL 是一个非常实用的 Java 框架，可以大大简化 SQL 查询的编写过程，提高开发效率和代码质量。\n\n## Java 数据库连接池\n\n## C3p0\n\n开源的JDBC连接池，实现了数据源和JNDI绑定，支持JDBC3规范和JDBC2的标准扩展。\n\n目前使用它的开源项目有Hibernate、Spring等。单线程，性能较差，适用于小型系统，代码600KB左右。\n\n## DBCP (Database Connection Pool)\n\n由Apache开发的一个Java数据库连接池项目， Jakarta commons-pool对象池机制，Tomcat使用的连接池组件就是DBCP。\n\n单独使用dbcp需要3个包：common-dbcp.jar,common-pool.jar,common-collections.jar，预先将数据库连接放在内存中，应用程序需要建立数据库连接时直接到连接池中申请一个就行，用完再放回。单线程，并发量低，性能不好，适用于小型系统。\n\n## Tomcat Jdbc Pool\n\nTomcat在7.0以前都是使用common-dbcp做为连接池组件，但是dbcp是单线程，为保证线程安全会锁整个连接池，性能较差，dbcp有超过60个类，也相对复杂。\n\nTomcat从7.0开始引入了新增连接池模块叫做Tomcat jdbc pool，基于Tomcat JULI，使用Tomcat日志框架，完全兼容dbcp，通过异步方式获取连接，支持高并发应用环境，超级简单核心文件只有8个，支持JMX，支持XA Connection。\n\n## BoneCP\n\n官方说法BoneCP是一个高效、免费、开源的Java数据库连接池实现库。\n\n设计初衷就是为了提高数据库连接池性能，根据某些测试数据显示，BoneCP的速度是最快的，要比当时第二快速的连接池快25倍左右，完美集成到一些持久化产品如Hibernate和DataNucleus中。\n\nBoneCP特色：高度可扩展，快速；连接状态切换的回调机制；允许直接访问连接；自动化重置能力；JMX支持；懒加载能力；支持XML和属性文件配置方式；较好的Java代码组织，100%单元测试分支代码覆盖率；代码40KB左右。\n\n## HikariCP\n\nHikariCP 是一个高性能的 JDBC 连接池组件，号称性能最好的后起之秀，是一个基于BoneCP做了不少的改进和优化的高性能JDBC连接池。\n\n其作者还有产出了另外一个开源作品HikariJSON——高性能的JSON解析器。\n\n代码体积更是少的可怜，130kb。Spring Boot 2都已经宣布支持了该组件，由之前的Tomcat换成HikariCP。\n\n其性能远高于c3p0、tomcat等连接池，以致后来BoneCP作者都放弃了维护，在Github项目主页推荐大家使用HikariCP\n\n## Druid\n\nDruid是目前 Java 语言中最好的数据库连接池，Druid能够提供强大的监控和扩展功能，是一个可用于大数据实时查询和分析的高容错、高性能的开源分布式系统，尤其是当发生代码部署、机器故障以及其他产品系统遇到宕机等情况时，Druid仍能够保持100%正常运行。\n\n主要特色：\n\n1. 为分析监控设计；\n\n2. 快速的交互式查询；\n\n3. 高可用；\n\n5. 可扩展；\n\nDruid是一个开源项目，源码托管在github上。","slug":"Java-数据库框架","published":1,"updated":"2023-06-23T01:02:19.096Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5ue0018lv9egfk4hmly","content":"<h1 id=\"Java-数据库访问框架\"><a href=\"#Java-数据库访问框架\" class=\"headerlink\" title=\"Java 数据库访问框架\"></a>Java 数据库访问框架</h1><h2 id=\"JDBC\"><a href=\"#JDBC\" class=\"headerlink\" title=\"JDBC\"></a>JDBC</h2><p>JDBC（Java Database Connectivity）是Java语言中用于连接和操作数据库的API。JDBC提供了一组标准接口，使得Java程序可以与各种关系型数据库进行交互，如Oracle、MySQL、SQL Server等。</p>\n<p>JDBC的工作原理是通过驱动程序（Driver）来实现与数据库的连接。驱动程序是一个Java类库，它包含了与特定数据库通信所需的代码和协议。在使用JDBC时，需要先加载相应的驱动程序，然后通过驱动程序建立与数据库的连接，最后执行SQL语句或存储过程等操作。</p>\n<p>JDBC的主要功能包括：</p>\n<ol>\n<li><p>建立与数据库的连接：通过DriverManager类的getConnection()方法建立与数据库的连接。</p>\n</li>\n<li><p>执行SQL语句：通过Statement或PreparedStatement对象执行SQL语句，如查询数据、插入数据、更新数据等。</p>\n</li>\n<li><p>处理结果集：通过ResultSet对象处理查询结果集，如获取查询结果、遍历结果集等。</p>\n</li>\n<li><p>事务管理：通过Connection对象控制事务的提交、回滚等操作。</p>\n</li>\n</ol>\n<p>JDBC是Java EE平台的核心技术之一，被广泛应用于企业级应用程序、Web应用程序等领域。</p>\n<h2 id=\"JOOQ\"><a href=\"#JOOQ\" class=\"headerlink\" title=\"JOOQ\"></a>JOOQ</h2><p>JOOQ（Java Object Oriented Querying）是一个用于Java语言的数据库访问框架，它提供了一种类型安全、面向对象的方式来构建SQL查询。JOOQ支持多种关系型数据库，如MySQL、Oracle、PostgreSQL等。</p>\n<p>JOOQ提供了一种DSL来解决查询问题。这种语言基于生成的entity对象提供编译时安全<br>（compile-time-safe）查询。JOOQ支持不同的数据库，能够减少模板代码。</p>\n<p>JOOQ的主要特点包括：</p>\n<ol>\n<li><p>类型安全：JOOQ使用Java代码来构建SQL查询，因此可以在编译时检查SQL语句的正确性，避免了运行时错误。</p>\n</li>\n<li><p>面向对象：JOOQ将数据库表、列等元素映射为Java类和属性，使得查询结果可以直接转换为Java对象。</p>\n</li>\n<li><p>灵活性：JOOQ提供了丰富的API，可以灵活地构建各种复杂的SQL查询，同时也支持原生SQL语句。</p>\n</li>\n<li><p>性能优化：JOOQ通过生成高效的SQL语句和预编译语句来提高查询性能。</p>\n</li>\n</ol>\n<p>使用JOOQ可以大大简化Java程序与数据库的交互过程，同时也提高了代码的可读性和可维护性。JOOQ还提供了丰富的文档和示例，方便开发人员学习和使用。</p>\n<h2 id=\"Spring-Data-JDBC\"><a href=\"#Spring-Data-JDBC\" class=\"headerlink\" title=\"Spring Data JDBC\"></a>Spring Data JDBC</h2><p>Spring Data JDBC是Spring框架中的一个模块，它提供了一种简单、轻量级的方式来访问关系型数据库。与传统的ORM框架不同，Spring Data JDBC采用了更加直接的方式来操作数据库，将Java对象映射为数据库表和列。</p>\n<p>Spring Data JDBC的主要特点包括：</p>\n<ol>\n<li><p>简单易用：Spring Data JDBC提供了简单的API，使得开发人员可以快速地进行数据库操作。</p>\n</li>\n<li><p>高效性能：Spring Data JDBC采用了基于JDBC的底层实现，具有较高的性能和可扩展性。</p>\n</li>\n<li><p>灵活性：Spring Data JDBC支持自定义查询、存储过程等高级功能，同时也支持原生SQL语句。</p>\n</li>\n<li><p>易于集成：Spring Data JDBC与Spring框架紧密集成，可以方便地与其他Spring组件（如Spring Boot）一起使用。</p>\n</li>\n</ol>\n<p>Spring Data JDBC的核心概念是Entity、Repository和Query，其中Entity表示Java对象与数据库表之间的映射关系，Repository提供了对Entity的CRUD操作，Query则提供了自定义查询的功能。</p>\n<p>使用Spring Data JDBC可以大大简化Java程序与数据库的交互过程，同时也提高了代码的可读性和可维护性。</p>\n<h2 id=\"Mybatis\"><a href=\"#Mybatis\" class=\"headerlink\" title=\"Mybatis\"></a>Mybatis</h2><p>MyBatis是一种开源的持久化框架，它可以将Java对象映射到关系型数据库中的表和列。MyBatis提供了灵活的配置方式和强大的SQL查询功能，使得开发人员可以更加方便地进行数据库操作。</p>\n<p>MyBatis的主要特点包括：</p>\n<ol>\n<li><p>灵活的配置：MyBatis使用XML或注解来配置SQL语句和映射关系，可以根据需要进行灵活的配置。</p>\n</li>\n<li><p>强大的SQL查询：MyBatis支持动态SQL、参数映射、结果集映射等高级功能，可以满足各种复杂的查询需求。</p>\n</li>\n<li><p>易于集成：MyBatis与Spring框架紧密集成，可以方便地与其他Spring组件（如Spring Boot）一起使用。</p>\n</li>\n<li><p>易于扩展：MyBatis提供了插件机制，可以方便地扩展其功能。</p>\n</li>\n</ol>\n<p>使用MyBatis可以大大简化Java程序与数据库的交互过程，同时也提高了代码的可读性和可维护性。MyBatis还提供了丰富的文档和示例，方便开发人员学习和使用。</p>\n<h2 id=\"Mybatis-Plus\"><a href=\"#Mybatis-Plus\" class=\"headerlink\" title=\"Mybatis Plus\"></a>Mybatis Plus</h2><p>MyBatis Plus是MyBatis的增强工具，它提供了一系列的便捷功能和增强特性，使得开发人员可以更加方便地进行数据库操作。</p>\n<p>MyBatis Plus的主要特点包括：</p>\n<ol>\n<li><p>简化CRUD操作：MyBatis Plus提供了通用的Mapper接口和实现类，可以大大简化CRUD操作的编写。</p>\n</li>\n<li><p>支持Lambda表达式：MyBatis Plus支持使用Lambda表达式来构建查询条件，使得查询语句更加简洁易懂。</p>\n</li>\n<li><p>自动生成代码：MyBatis Plus提供了代码生成器，可以根据数据库表自动生成Java实体类、Mapper接口和XML文件等代码。</p>\n</li>\n<li><p>支持分页查询：MyBatis Plus提供了分页插件，可以方便地进行分页查询。</p>\n</li>\n<li><p>易于扩展：MyBatis Plus提供了丰富的插件机制，可以方便地扩展其功能。</p>\n</li>\n</ol>\n<p>使用MyBatis Plus可以大大简化Java程序与数据库的交互过程，同时也提高了代码的可读性和可维护性。MyBatis Plus还提供了丰富的文档和示例，方便开发人员学习和使用。</p>\n<h2 id=\"Hibernate\"><a href=\"#Hibernate\" class=\"headerlink\" title=\"Hibernate\"></a>Hibernate</h2><p>Hibernate是一个开源的ORM（对象关系映射）框架，它可以将Java对象映射到关系型数据库中的表和列。Hibernate提供了灵活的配置方式和强大的查询功能，使得开发人员可以更加方便地进行数据库操作。</p>\n<p>Hibernate的主要特点包括：</p>\n<ol>\n<li><p>灵活的配置：Hibernate使用XML或注解来配置映射关系和查询语句，可以根据需要进行灵活的配置。</p>\n</li>\n<li><p>强大的查询功能：Hibernate支持动态SQL、参数映射、结果集映射等高级功能，可以满足各种复杂的查询需求。</p>\n</li>\n<li><p>易于集成：Hibernate与Spring框架紧密集成，可以方便地与其他Spring组件（如Spring Boot）一起使用。</p>\n</li>\n<li><p>易于扩展：Hibernate提供了插件机制，可以方便地扩展其功能。</p>\n</li>\n</ol>\n<p>使用Hibernate可以大大简化Java程序与数据库的交互过程，同时也提高了代码的可读性和可维护性。Hibernate还提供了丰富的文档和示例，方便开发人员学习和使用。</p>\n<h2 id=\"JPA\"><a href=\"#JPA\" class=\"headerlink\" title=\"JPA\"></a>JPA</h2><p>JPA（Java Persistence API）是Java EE平台中的一种ORM（对象关系映射）规范，它定义了一组标准接口和注解，使得开发人员可以更加方便地进行数据库操作。</p>\n<p>JPA的主要特点包括：</p>\n<ol>\n<li><p>简化数据访问：JPA提供了简单的API，使得开发人员可以快速地进行数据库操作。</p>\n</li>\n<li><p>面向对象：JPA将数据库表、列等元素映射为Java类和属性，使得查询结果可以直接转换为Java对象。</p>\n</li>\n<li><p>灵活性：JPA支持多种映射方式、查询语言和事务管理策略，可以根据需要进行灵活的配置。</p>\n</li>\n<li><p>易于集成：JPA与Spring框架紧密集成，可以方便地与其他Spring组件（如Spring Boot）一起使用。</p>\n</li>\n</ol>\n<p>JPA的核心概念是Entity、EntityManager和Query，其中Entity表示Java对象与数据库表之间的映射关系，EntityManager提供了对Entity的CRUD操作，Query则提供了自定义查询的功能。</p>\n<p>使用JPA可以大大简化Java程序与数据库的交互过程，同时也提高了代码的可读性和可维护性。JPA还提供了丰富的文档和示例，方便开发人员学习和使用。</p>\n<h2 id=\"Spring-Data-JPA\"><a href=\"#Spring-Data-JPA\" class=\"headerlink\" title=\"Spring Data JPA\"></a>Spring Data JPA</h2><p>Spring Data JPA是Spring框架中的一个模块，它提供了一种简单、轻量级的方式来访问关系型数据库。Spring Data JPA基于JPA规范，封装了JPA的复杂性，使得开发人员可以更加方便地进行数据库操作。</p>\n<p>Spring Data JPA的主要特点包括：</p>\n<ol>\n<li><p>简化数据访问：Spring Data JPA提供了简单的API，使得开发人员可以快速地进行数据库操作。</p>\n</li>\n<li><p>面向对象：Spring Data JPA将数据库表、列等元素映射为Java类和属性，使得查询结果可以直接转换为Java对象。</p>\n</li>\n<li><p>灵活性：Spring Data JPA支持多种映射方式、查询语言和事务管理策略，可以根据需要进行灵活的配置。</p>\n</li>\n<li><p>易于集成：Spring Data JPA与Spring框架紧密集成，可以方便地与其他Spring组件（如Spring Boot）一起使用。</p>\n</li>\n</ol>\n<p>Spring Data JPA的核心概念是Entity、Repository和Query，其中Entity表示Java对象与数据库表之间的映射关系，Repository提供了对Entity的CRUD操作，Query则提供了自定义查询的功能。</p>\n<p>使用Spring Data JPA可以大大简化Java程序与数据库的交互过程，同时也提高了代码的可读性和可维护性。Spring Data JPA还提供了丰富的文档和示例，方便开发人员学习和使用。</p>\n<h2 id=\"QueryDSL\"><a href=\"#QueryDSL\" class=\"headerlink\" title=\"QueryDSL\"></a>QueryDSL</h2><p>QueryDSL 是一个基于 Java 的框架，用于构建类型安全的 SQL 查询。它提供了一种简单、直观的方式来编写 SQL 查询，同时避免了手动编写 SQL 语句所带来的错误和不便。</p>\n<p>QueryDSL 在 SpringData JPA 的基础上，更近一步，提供了统一的类型安全的查询方式，正如标题所说的，它更面向对象了。QueryDSL 由一些查询方法构成，熟悉 SpringData JPA 基本上可以立刻上手去 coding。</p>\n<p>QueryDSL 支持多种数据库，包括 MySQL、PostgreSQL、Oracle、SQL Server 等。它可以与 JPA、Hibernate、Spring Data 等 ORM 框架集成使用，也可以直接使用 JDBC 进行操作。</p>\n<p>QueryDSL 的主要特点包括：</p>\n<ul>\n<li>类型安全：通过使用 Java 类型来表示查询条件和结果，避免了手动编写 SQL 语句时可能出现的语法错误和类型错误。</li>\n<li>可读性强：使用 QueryDSL 编写的查询语句通常比手写 SQL 更易读、易懂。</li>\n<li>灵活性高：QueryDSL 提供了丰富的 API，可以满足各种复杂的查询需求。</li>\n<li>易于集成：QueryDSL 可以与多种 ORM 框架集成使用，也可以直接使用 JDBC 进行操作。</li>\n</ul>\n<p>总之，QueryDSL 是一个非常实用的 Java 框架，可以大大简化 SQL 查询的编写过程，提高开发效率和代码质量。</p>\n<h2 id=\"Java-数据库连接池\"><a href=\"#Java-数据库连接池\" class=\"headerlink\" title=\"Java 数据库连接池\"></a>Java 数据库连接池</h2><h2 id=\"C3p0\"><a href=\"#C3p0\" class=\"headerlink\" title=\"C3p0\"></a>C3p0</h2><p>开源的JDBC连接池，实现了数据源和JNDI绑定，支持JDBC3规范和JDBC2的标准扩展。</p>\n<p>目前使用它的开源项目有Hibernate、Spring等。单线程，性能较差，适用于小型系统，代码600KB左右。</p>\n<h2 id=\"DBCP-Database-Connection-Pool\"><a href=\"#DBCP-Database-Connection-Pool\" class=\"headerlink\" title=\"DBCP (Database Connection Pool)\"></a>DBCP (Database Connection Pool)</h2><p>由Apache开发的一个Java数据库连接池项目， Jakarta commons-pool对象池机制，Tomcat使用的连接池组件就是DBCP。</p>\n<p>单独使用dbcp需要3个包：common-dbcp.jar,common-pool.jar,common-collections.jar，预先将数据库连接放在内存中，应用程序需要建立数据库连接时直接到连接池中申请一个就行，用完再放回。单线程，并发量低，性能不好，适用于小型系统。</p>\n<h2 id=\"Tomcat-Jdbc-Pool\"><a href=\"#Tomcat-Jdbc-Pool\" class=\"headerlink\" title=\"Tomcat Jdbc Pool\"></a>Tomcat Jdbc Pool</h2><p>Tomcat在7.0以前都是使用common-dbcp做为连接池组件，但是dbcp是单线程，为保证线程安全会锁整个连接池，性能较差，dbcp有超过60个类，也相对复杂。</p>\n<p>Tomcat从7.0开始引入了新增连接池模块叫做Tomcat jdbc pool，基于Tomcat JULI，使用Tomcat日志框架，完全兼容dbcp，通过异步方式获取连接，支持高并发应用环境，超级简单核心文件只有8个，支持JMX，支持XA Connection。</p>\n<h2 id=\"BoneCP\"><a href=\"#BoneCP\" class=\"headerlink\" title=\"BoneCP\"></a>BoneCP</h2><p>官方说法BoneCP是一个高效、免费、开源的Java数据库连接池实现库。</p>\n<p>设计初衷就是为了提高数据库连接池性能，根据某些测试数据显示，BoneCP的速度是最快的，要比当时第二快速的连接池快25倍左右，完美集成到一些持久化产品如Hibernate和DataNucleus中。</p>\n<p>BoneCP特色：高度可扩展，快速；连接状态切换的回调机制；允许直接访问连接；自动化重置能力；JMX支持；懒加载能力；支持XML和属性文件配置方式；较好的Java代码组织，100%单元测试分支代码覆盖率；代码40KB左右。</p>\n<h2 id=\"HikariCP\"><a href=\"#HikariCP\" class=\"headerlink\" title=\"HikariCP\"></a>HikariCP</h2><p>HikariCP 是一个高性能的 JDBC 连接池组件，号称性能最好的后起之秀，是一个基于BoneCP做了不少的改进和优化的高性能JDBC连接池。</p>\n<p>其作者还有产出了另外一个开源作品HikariJSON——高性能的JSON解析器。</p>\n<p>代码体积更是少的可怜，130kb。Spring Boot 2都已经宣布支持了该组件，由之前的Tomcat换成HikariCP。</p>\n<p>其性能远高于c3p0、tomcat等连接池，以致后来BoneCP作者都放弃了维护，在Github项目主页推荐大家使用HikariCP</p>\n<h2 id=\"Druid\"><a href=\"#Druid\" class=\"headerlink\" title=\"Druid\"></a>Druid</h2><p>Druid是目前 Java 语言中最好的数据库连接池，Druid能够提供强大的监控和扩展功能，是一个可用于大数据实时查询和分析的高容错、高性能的开源分布式系统，尤其是当发生代码部署、机器故障以及其他产品系统遇到宕机等情况时，Druid仍能够保持100%正常运行。</p>\n<p>主要特色：</p>\n<ol>\n<li><p>为分析监控设计；</p>\n</li>\n<li><p>快速的交互式查询；</p>\n</li>\n<li><p>高可用；</p>\n</li>\n<li><p>可扩展；</p>\n</li>\n</ol>\n<p>Druid是一个开源项目，源码托管在github上。</p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h1 id=\"Java-数据库访问框架\"><a href=\"#Java-数据库访问框架\" class=\"headerlink\" title=\"Java 数据库访问框架\"></a>Java 数据库访问框架</h1><h2 id=\"JDBC\"><a href=\"#JDBC\" class=\"headerlink\" title=\"JDBC\"></a>JDBC</h2><p>JDBC（Java Database Connectivity）是Java语言中用于连接和操作数据库的API。JDBC提供了一组标准接口，使得Java程序可以与各种关系型数据库进行交互，如Oracle、MySQL、SQL Server等。</p>\n<p>JDBC的工作原理是通过驱动程序（Driver）来实现与数据库的连接。驱动程序是一个Java类库，它包含了与特定数据库通信所需的代码和协议。在使用JDBC时，需要先加载相应的驱动程序，然后通过驱动程序建立与数据库的连接，最后执行SQL语句或存储过程等操作。</p>\n<p>JDBC的主要功能包括：</p>\n<ol>\n<li><p>建立与数据库的连接：通过DriverManager类的getConnection()方法建立与数据库的连接。</p>\n</li>\n<li><p>执行SQL语句：通过Statement或PreparedStatement对象执行SQL语句，如查询数据、插入数据、更新数据等。</p>\n</li>\n<li><p>处理结果集：通过ResultSet对象处理查询结果集，如获取查询结果、遍历结果集等。</p>\n</li>\n<li><p>事务管理：通过Connection对象控制事务的提交、回滚等操作。</p>\n</li>\n</ol>\n<p>JDBC是Java EE平台的核心技术之一，被广泛应用于企业级应用程序、Web应用程序等领域。</p>\n<h2 id=\"JOOQ\"><a href=\"#JOOQ\" class=\"headerlink\" title=\"JOOQ\"></a>JOOQ</h2><p>JOOQ（Java Object Oriented Querying）是一个用于Java语言的数据库访问框架，它提供了一种类型安全、面向对象的方式来构建SQL查询。JOOQ支持多种关系型数据库，如MySQL、Oracle、PostgreSQL等。</p>\n<p>JOOQ提供了一种DSL来解决查询问题。这种语言基于生成的entity对象提供编译时安全<br>（compile-time-safe）查询。JOOQ支持不同的数据库，能够减少模板代码。</p>\n<p>JOOQ的主要特点包括：</p>\n<ol>\n<li><p>类型安全：JOOQ使用Java代码来构建SQL查询，因此可以在编译时检查SQL语句的正确性，避免了运行时错误。</p>\n</li>\n<li><p>面向对象：JOOQ将数据库表、列等元素映射为Java类和属性，使得查询结果可以直接转换为Java对象。</p>\n</li>\n<li><p>灵活性：JOOQ提供了丰富的API，可以灵活地构建各种复杂的SQL查询，同时也支持原生SQL语句。</p>\n</li>\n<li><p>性能优化：JOOQ通过生成高效的SQL语句和预编译语句来提高查询性能。</p>\n</li>\n</ol>\n<p>使用JOOQ可以大大简化Java程序与数据库的交互过程，同时也提高了代码的可读性和可维护性。JOOQ还提供了丰富的文档和示例，方便开发人员学习和使用。</p>\n<h2 id=\"Spring-Data-JDBC\"><a href=\"#Spring-Data-JDBC\" class=\"headerlink\" title=\"Spring Data JDBC\"></a>Spring Data JDBC</h2><p>Spring Data JDBC是Spring框架中的一个模块，它提供了一种简单、轻量级的方式来访问关系型数据库。与传统的ORM框架不同，Spring Data JDBC采用了更加直接的方式来操作数据库，将Java对象映射为数据库表和列。</p>\n<p>Spring Data JDBC的主要特点包括：</p>\n<ol>\n<li><p>简单易用：Spring Data JDBC提供了简单的API，使得开发人员可以快速地进行数据库操作。</p>\n</li>\n<li><p>高效性能：Spring Data JDBC采用了基于JDBC的底层实现，具有较高的性能和可扩展性。</p>\n</li>\n<li><p>灵活性：Spring Data JDBC支持自定义查询、存储过程等高级功能，同时也支持原生SQL语句。</p>\n</li>\n<li><p>易于集成：Spring Data JDBC与Spring框架紧密集成，可以方便地与其他Spring组件（如Spring Boot）一起使用。</p>\n</li>\n</ol>\n<p>Spring Data JDBC的核心概念是Entity、Repository和Query，其中Entity表示Java对象与数据库表之间的映射关系，Repository提供了对Entity的CRUD操作，Query则提供了自定义查询的功能。</p>\n<p>使用Spring Data JDBC可以大大简化Java程序与数据库的交互过程，同时也提高了代码的可读性和可维护性。</p>\n<h2 id=\"Mybatis\"><a href=\"#Mybatis\" class=\"headerlink\" title=\"Mybatis\"></a>Mybatis</h2><p>MyBatis是一种开源的持久化框架，它可以将Java对象映射到关系型数据库中的表和列。MyBatis提供了灵活的配置方式和强大的SQL查询功能，使得开发人员可以更加方便地进行数据库操作。</p>\n<p>MyBatis的主要特点包括：</p>\n<ol>\n<li><p>灵活的配置：MyBatis使用XML或注解来配置SQL语句和映射关系，可以根据需要进行灵活的配置。</p>\n</li>\n<li><p>强大的SQL查询：MyBatis支持动态SQL、参数映射、结果集映射等高级功能，可以满足各种复杂的查询需求。</p>\n</li>\n<li><p>易于集成：MyBatis与Spring框架紧密集成，可以方便地与其他Spring组件（如Spring Boot）一起使用。</p>\n</li>\n<li><p>易于扩展：MyBatis提供了插件机制，可以方便地扩展其功能。</p>\n</li>\n</ol>\n<p>使用MyBatis可以大大简化Java程序与数据库的交互过程，同时也提高了代码的可读性和可维护性。MyBatis还提供了丰富的文档和示例，方便开发人员学习和使用。</p>\n<h2 id=\"Mybatis-Plus\"><a href=\"#Mybatis-Plus\" class=\"headerlink\" title=\"Mybatis Plus\"></a>Mybatis Plus</h2><p>MyBatis Plus是MyBatis的增强工具，它提供了一系列的便捷功能和增强特性，使得开发人员可以更加方便地进行数据库操作。</p>\n<p>MyBatis Plus的主要特点包括：</p>\n<ol>\n<li><p>简化CRUD操作：MyBatis Plus提供了通用的Mapper接口和实现类，可以大大简化CRUD操作的编写。</p>\n</li>\n<li><p>支持Lambda表达式：MyBatis Plus支持使用Lambda表达式来构建查询条件，使得查询语句更加简洁易懂。</p>\n</li>\n<li><p>自动生成代码：MyBatis Plus提供了代码生成器，可以根据数据库表自动生成Java实体类、Mapper接口和XML文件等代码。</p>\n</li>\n<li><p>支持分页查询：MyBatis Plus提供了分页插件，可以方便地进行分页查询。</p>\n</li>\n<li><p>易于扩展：MyBatis Plus提供了丰富的插件机制，可以方便地扩展其功能。</p>\n</li>\n</ol>\n<p>使用MyBatis Plus可以大大简化Java程序与数据库的交互过程，同时也提高了代码的可读性和可维护性。MyBatis Plus还提供了丰富的文档和示例，方便开发人员学习和使用。</p>\n<h2 id=\"Hibernate\"><a href=\"#Hibernate\" class=\"headerlink\" title=\"Hibernate\"></a>Hibernate</h2><p>Hibernate是一个开源的ORM（对象关系映射）框架，它可以将Java对象映射到关系型数据库中的表和列。Hibernate提供了灵活的配置方式和强大的查询功能，使得开发人员可以更加方便地进行数据库操作。</p>\n<p>Hibernate的主要特点包括：</p>\n<ol>\n<li><p>灵活的配置：Hibernate使用XML或注解来配置映射关系和查询语句，可以根据需要进行灵活的配置。</p>\n</li>\n<li><p>强大的查询功能：Hibernate支持动态SQL、参数映射、结果集映射等高级功能，可以满足各种复杂的查询需求。</p>\n</li>\n<li><p>易于集成：Hibernate与Spring框架紧密集成，可以方便地与其他Spring组件（如Spring Boot）一起使用。</p>\n</li>\n<li><p>易于扩展：Hibernate提供了插件机制，可以方便地扩展其功能。</p>\n</li>\n</ol>\n<p>使用Hibernate可以大大简化Java程序与数据库的交互过程，同时也提高了代码的可读性和可维护性。Hibernate还提供了丰富的文档和示例，方便开发人员学习和使用。</p>\n<h2 id=\"JPA\"><a href=\"#JPA\" class=\"headerlink\" title=\"JPA\"></a>JPA</h2><p>JPA（Java Persistence API）是Java EE平台中的一种ORM（对象关系映射）规范，它定义了一组标准接口和注解，使得开发人员可以更加方便地进行数据库操作。</p>\n<p>JPA的主要特点包括：</p>\n<ol>\n<li><p>简化数据访问：JPA提供了简单的API，使得开发人员可以快速地进行数据库操作。</p>\n</li>\n<li><p>面向对象：JPA将数据库表、列等元素映射为Java类和属性，使得查询结果可以直接转换为Java对象。</p>\n</li>\n<li><p>灵活性：JPA支持多种映射方式、查询语言和事务管理策略，可以根据需要进行灵活的配置。</p>\n</li>\n<li><p>易于集成：JPA与Spring框架紧密集成，可以方便地与其他Spring组件（如Spring Boot）一起使用。</p>\n</li>\n</ol>\n<p>JPA的核心概念是Entity、EntityManager和Query，其中Entity表示Java对象与数据库表之间的映射关系，EntityManager提供了对Entity的CRUD操作，Query则提供了自定义查询的功能。</p>\n<p>使用JPA可以大大简化Java程序与数据库的交互过程，同时也提高了代码的可读性和可维护性。JPA还提供了丰富的文档和示例，方便开发人员学习和使用。</p>\n<h2 id=\"Spring-Data-JPA\"><a href=\"#Spring-Data-JPA\" class=\"headerlink\" title=\"Spring Data JPA\"></a>Spring Data JPA</h2><p>Spring Data JPA是Spring框架中的一个模块，它提供了一种简单、轻量级的方式来访问关系型数据库。Spring Data JPA基于JPA规范，封装了JPA的复杂性，使得开发人员可以更加方便地进行数据库操作。</p>\n<p>Spring Data JPA的主要特点包括：</p>\n<ol>\n<li><p>简化数据访问：Spring Data JPA提供了简单的API，使得开发人员可以快速地进行数据库操作。</p>\n</li>\n<li><p>面向对象：Spring Data JPA将数据库表、列等元素映射为Java类和属性，使得查询结果可以直接转换为Java对象。</p>\n</li>\n<li><p>灵活性：Spring Data JPA支持多种映射方式、查询语言和事务管理策略，可以根据需要进行灵活的配置。</p>\n</li>\n<li><p>易于集成：Spring Data JPA与Spring框架紧密集成，可以方便地与其他Spring组件（如Spring Boot）一起使用。</p>\n</li>\n</ol>\n<p>Spring Data JPA的核心概念是Entity、Repository和Query，其中Entity表示Java对象与数据库表之间的映射关系，Repository提供了对Entity的CRUD操作，Query则提供了自定义查询的功能。</p>\n<p>使用Spring Data JPA可以大大简化Java程序与数据库的交互过程，同时也提高了代码的可读性和可维护性。Spring Data JPA还提供了丰富的文档和示例，方便开发人员学习和使用。</p>\n<h2 id=\"QueryDSL\"><a href=\"#QueryDSL\" class=\"headerlink\" title=\"QueryDSL\"></a>QueryDSL</h2><p>QueryDSL 是一个基于 Java 的框架，用于构建类型安全的 SQL 查询。它提供了一种简单、直观的方式来编写 SQL 查询，同时避免了手动编写 SQL 语句所带来的错误和不便。</p>\n<p>QueryDSL 在 SpringData JPA 的基础上，更近一步，提供了统一的类型安全的查询方式，正如标题所说的，它更面向对象了。QueryDSL 由一些查询方法构成，熟悉 SpringData JPA 基本上可以立刻上手去 coding。</p>\n<p>QueryDSL 支持多种数据库，包括 MySQL、PostgreSQL、Oracle、SQL Server 等。它可以与 JPA、Hibernate、Spring Data 等 ORM 框架集成使用，也可以直接使用 JDBC 进行操作。</p>\n<p>QueryDSL 的主要特点包括：</p>\n<ul>\n<li>类型安全：通过使用 Java 类型来表示查询条件和结果，避免了手动编写 SQL 语句时可能出现的语法错误和类型错误。</li>\n<li>可读性强：使用 QueryDSL 编写的查询语句通常比手写 SQL 更易读、易懂。</li>\n<li>灵活性高：QueryDSL 提供了丰富的 API，可以满足各种复杂的查询需求。</li>\n<li>易于集成：QueryDSL 可以与多种 ORM 框架集成使用，也可以直接使用 JDBC 进行操作。</li>\n</ul>\n<p>总之，QueryDSL 是一个非常实用的 Java 框架，可以大大简化 SQL 查询的编写过程，提高开发效率和代码质量。</p>\n<h2 id=\"Java-数据库连接池\"><a href=\"#Java-数据库连接池\" class=\"headerlink\" title=\"Java 数据库连接池\"></a>Java 数据库连接池</h2><h2 id=\"C3p0\"><a href=\"#C3p0\" class=\"headerlink\" title=\"C3p0\"></a>C3p0</h2><p>开源的JDBC连接池，实现了数据源和JNDI绑定，支持JDBC3规范和JDBC2的标准扩展。</p>\n<p>目前使用它的开源项目有Hibernate、Spring等。单线程，性能较差，适用于小型系统，代码600KB左右。</p>\n<h2 id=\"DBCP-Database-Connection-Pool\"><a href=\"#DBCP-Database-Connection-Pool\" class=\"headerlink\" title=\"DBCP (Database Connection Pool)\"></a>DBCP (Database Connection Pool)</h2><p>由Apache开发的一个Java数据库连接池项目， Jakarta commons-pool对象池机制，Tomcat使用的连接池组件就是DBCP。</p>\n<p>单独使用dbcp需要3个包：common-dbcp.jar,common-pool.jar,common-collections.jar，预先将数据库连接放在内存中，应用程序需要建立数据库连接时直接到连接池中申请一个就行，用完再放回。单线程，并发量低，性能不好，适用于小型系统。</p>\n<h2 id=\"Tomcat-Jdbc-Pool\"><a href=\"#Tomcat-Jdbc-Pool\" class=\"headerlink\" title=\"Tomcat Jdbc Pool\"></a>Tomcat Jdbc Pool</h2><p>Tomcat在7.0以前都是使用common-dbcp做为连接池组件，但是dbcp是单线程，为保证线程安全会锁整个连接池，性能较差，dbcp有超过60个类，也相对复杂。</p>\n<p>Tomcat从7.0开始引入了新增连接池模块叫做Tomcat jdbc pool，基于Tomcat JULI，使用Tomcat日志框架，完全兼容dbcp，通过异步方式获取连接，支持高并发应用环境，超级简单核心文件只有8个，支持JMX，支持XA Connection。</p>\n<h2 id=\"BoneCP\"><a href=\"#BoneCP\" class=\"headerlink\" title=\"BoneCP\"></a>BoneCP</h2><p>官方说法BoneCP是一个高效、免费、开源的Java数据库连接池实现库。</p>\n<p>设计初衷就是为了提高数据库连接池性能，根据某些测试数据显示，BoneCP的速度是最快的，要比当时第二快速的连接池快25倍左右，完美集成到一些持久化产品如Hibernate和DataNucleus中。</p>\n<p>BoneCP特色：高度可扩展，快速；连接状态切换的回调机制；允许直接访问连接；自动化重置能力；JMX支持；懒加载能力；支持XML和属性文件配置方式；较好的Java代码组织，100%单元测试分支代码覆盖率；代码40KB左右。</p>\n<h2 id=\"HikariCP\"><a href=\"#HikariCP\" class=\"headerlink\" title=\"HikariCP\"></a>HikariCP</h2><p>HikariCP 是一个高性能的 JDBC 连接池组件，号称性能最好的后起之秀，是一个基于BoneCP做了不少的改进和优化的高性能JDBC连接池。</p>\n<p>其作者还有产出了另外一个开源作品HikariJSON——高性能的JSON解析器。</p>\n<p>代码体积更是少的可怜，130kb。Spring Boot 2都已经宣布支持了该组件，由之前的Tomcat换成HikariCP。</p>\n<p>其性能远高于c3p0、tomcat等连接池，以致后来BoneCP作者都放弃了维护，在Github项目主页推荐大家使用HikariCP</p>\n<h2 id=\"Druid\"><a href=\"#Druid\" class=\"headerlink\" title=\"Druid\"></a>Druid</h2><p>Druid是目前 Java 语言中最好的数据库连接池，Druid能够提供强大的监控和扩展功能，是一个可用于大数据实时查询和分析的高容错、高性能的开源分布式系统，尤其是当发生代码部署、机器故障以及其他产品系统遇到宕机等情况时，Druid仍能够保持100%正常运行。</p>\n<p>主要特色：</p>\n<ol>\n<li><p>为分析监控设计；</p>\n</li>\n<li><p>快速的交互式查询；</p>\n</li>\n<li><p>高可用；</p>\n</li>\n<li><p>可扩展；</p>\n</li>\n</ol>\n<p>Druid是一个开源项目，源码托管在github上。</p>\n"},{"title":"Java 更多\"特性\"","date":"2023-06-02T13:35:50.000Z","_content":"\n# 不仅仅是语言特性\n\n## SPI\n\nJava SPI（Service Provider Interface）是一种机制，它允许在运行时动态地替换接口的实现。这种机制允许开发人员编写一组接口，然后由不同的实现提供者提供不同的实现。SPI机制是Java标准库中的一部分，可以用于扩展Java应用程序的功能，而无需修改代码。SPI机制通过类加载器机制实现，它允许应用程序在运行时动态地加载和卸载实现。在Java中，SPI机制主要用于服务发现、插件机制等场景。\n\n一个常见的例子是Java数据库连接（JDBC）。JDBC是一种标准的API，它定义了一组接口，用于访问各种不同类型的数据库。然而，不同的数据库供应商会提供不同的JDBC驱动程序来实现这些接口。在Java中，可以使用SPI机制来动态地加载和使用这些不同的JDBC驱动程序，而不需要在代码中显式地指定使用哪个驱动程序。这样，应用程序就可以在运行时根据需要选择不同的数据库驱动程序，而不需要修改代码。\n\n\n## Java Agent\n\nJava Agent是一种Java应用程序，它可以在运行时监控和修改Java应用程序的行为。Java Agent通常被用于性能分析、调试、安全审计等方面。Java Agent通过Java Instrumentation API来实现对Java应用程序的监控和修改。Java Agent可以在应用程序启动时通过JVM参数指定，并且可以在运行时动态加载和卸载。Java Agent可以访问应用程序的类、方法、字段等元数据信息，并且可以在运行时修改这些信息。Java Agent还可以在应用程序运行时插入自定义的代码逻辑，以实现各种功能。\n\n## ASM\n\nJava ASM（Java字节码操作框架）是一个轻量级的Java字节码操作框架，它可以用于生成、转换和分析Java字节码。ASM提供了一组API，可以让开发人员直接操作Java字节码，而不需要了解Java虚拟机的细节和复杂性。\n\n使用ASM，开发人员可以：\n\n1. 直接生成Java字节码，而不需要编写Java源代码。\n\n2. 对现有的Java字节码进行修改和优化，以提高性能。\n\n3. 分析Java字节码，以获得有关类、方法和字段的信息。\n\nASM具有轻量级、高性能和灵活性等特点，已经成为许多Java框架和工具的基础，例如Spring、Hibernate和JUnit等。\n\n## 字节码\n\nJava字节码是Java源代码编译后生成的中间代码，它可以在Java虚拟机上运行。Java字节码是一种基于栈的指令集，每个指令都有一个操作码和零个或多个操作数。Java字节码包含了类、接口、方法、字段等信息，以及方法的实现代码。\n\nJava字节码的格式是固定的，由多个字节组成，其中包含了常量池、类信息、方法信息、字段信息、指令等内容。Java字节码可以通过反编译工具转换为可读性更高的Java源代码，但是反编译后的代码可能不完全等同于原始的Java源代码。\n\nJava字节码的优点是跨平台性强，因为Java虚拟机可以在不同的操作系统和硬件平台上运行。此外，Java字节码还可以进行动态修改和生成，这使得Java程序可以在运行时动态地加载和卸载类、修改类的行为等。\n\n## JVM语言\n\nJVM语言是指可以在Java虚拟机（JVM）上运行的编程语言。由于JVM提供了跨平台的能力，因此许多编程语言都选择了基于JVM开发，以便在不同的操作系统和硬件平台上运行。\n\n以下是一些常见的JVM语言：\n\n1. Java：Java是最流行的JVM语言之一，它是由Sun Microsystems（现在是Oracle）开发的面向对象编程语言。Java具有简单、可移植、安全等特点，广泛应用于企业级应用程序、Web应用程序、移动应用程序等领域。\n\n2. Kotlin：Kotlin是一种静态类型的编程语言，由JetBrains开发。Kotlin具有与Java兼容、表达式更简洁、空安全等特点，被认为是Java的替代品。\n\n3. Scala：Scala是一种多范式编程语言，由Martin Odersky等人开发。Scala结合了面向对象编程和函数式编程的特点，具有高度的可扩展性和灵活性。\n\n4. Groovy：Groovy是一种动态类型的编程语言，由James Strachan等人开发。Groovy具有与Java兼容、脚本化编程、元编程等特点，被广泛应用于构建Web应用程序、测试框架等领域。\n\n5. Clojure：Clojure是一种函数式编程语言，由Rich Hickey开发。Clojure具有简洁、可扩展、并发编程等特点，被广泛应用于大数据处理、Web应用程序等领域。\n\n这些JVM语言都可以通过编译器将源代码编译成Java字节码，然后在JVM上运行。\n\n## [JNI](https://docs.oracle.com/javase/8/docs/technotes/guides/jni/)\n\nJava Native Interface (JNI) 是 Java 语言提供的一种机制，用于在 Java 程序中调用本地（Native）方法。它允许 Java 应用程序通过 JNI 接口调用 C/C++ 等本地语言编写的函数库，并且可以将 Java 对象传递给本地代码进行处理。\n\nJNI 提供了一组 API，使得 Java 程序可以与本地代码进行交互。Java 程序员可以使用 JNI 定义本地方法，然后通过 Java 虚拟机加载本地库并调用本地方法。本地库可以是动态链接库（.dll 或 .so 文件），也可以是静态链接库（.lib 或 .a 文件）。\n\nJNI 的主要用途是在 Java 程序中调用本地代码，从而扩展 Java 语言的功能：\n\n    调用本地库：Java 程序可以通过 JNI 接口调用 C/C++ 等本地语言编写的函数库，从而实现更高效、更底层的操作。\n\n    提高性能：JNI 可以用于实现图像处理、音频处理、网络通信等需要高性能的应用程序，从而提高程序的执行效率。\n\n    跨平台开发：JNI 可以使得 Java 程序与本地代码进行交互，从而实现跨平台开发，例如在 Windows 和 Linux 平台上运行相同的 Java 应用程序。\n\n    访问硬件设备：JNI 可以用于访问硬件设备，例如打印机、摄像头、传感器等，从而实现更底层的控制和操作。\n\n## [JNA]()\n\nJNA（Java Native Access）是一个开源的 Java 库，它提供了一种简单的方式来调用本地代码。与 JNI 不同，JNA 不需要编写任何本地代码或头文件，而是使用 Java 接口描述本地函数，并通过 JNA 库自动映射到本地库中的函数。\n\nJNA 的主要优点是简化了与本地代码的交互过程，使得 Java 程序员可以更容易地调用本地库中的函数。同时，JNA 还提供了一些高级特性，例如结构体、回调函数等，使得 Java 程序员可以更方便地处理复杂的数据类型和逻辑。\n\nJNA 的使用非常简单，只需要定义一个 Java 接口来描述本地函数，然后通过 JNA 库加载本地库并调用本地函数即可。\n```java\nimport com.sun.jna.Library;\nimport com.sun.jna.Native;\n\npublic interface MyLibrary extends Library {\n    MyLibrary INSTANCE = (MyLibrary) Native.loadLibrary(\"mylib\", MyLibrary.class);\n\n    int add(int a, int b);\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        int result = MyLibrary.INSTANCE.add(1, 2);\n        System.out.println(result); // 输出 3\n    }\n}\n```","source":"_posts/Java-更多-特性.md","raw":"---\ntitle: Java 更多\"特性\"\ndate: 2023-06-02 21:35:50\ntags: Java\n---\n\n# 不仅仅是语言特性\n\n## SPI\n\nJava SPI（Service Provider Interface）是一种机制，它允许在运行时动态地替换接口的实现。这种机制允许开发人员编写一组接口，然后由不同的实现提供者提供不同的实现。SPI机制是Java标准库中的一部分，可以用于扩展Java应用程序的功能，而无需修改代码。SPI机制通过类加载器机制实现，它允许应用程序在运行时动态地加载和卸载实现。在Java中，SPI机制主要用于服务发现、插件机制等场景。\n\n一个常见的例子是Java数据库连接（JDBC）。JDBC是一种标准的API，它定义了一组接口，用于访问各种不同类型的数据库。然而，不同的数据库供应商会提供不同的JDBC驱动程序来实现这些接口。在Java中，可以使用SPI机制来动态地加载和使用这些不同的JDBC驱动程序，而不需要在代码中显式地指定使用哪个驱动程序。这样，应用程序就可以在运行时根据需要选择不同的数据库驱动程序，而不需要修改代码。\n\n\n## Java Agent\n\nJava Agent是一种Java应用程序，它可以在运行时监控和修改Java应用程序的行为。Java Agent通常被用于性能分析、调试、安全审计等方面。Java Agent通过Java Instrumentation API来实现对Java应用程序的监控和修改。Java Agent可以在应用程序启动时通过JVM参数指定，并且可以在运行时动态加载和卸载。Java Agent可以访问应用程序的类、方法、字段等元数据信息，并且可以在运行时修改这些信息。Java Agent还可以在应用程序运行时插入自定义的代码逻辑，以实现各种功能。\n\n## ASM\n\nJava ASM（Java字节码操作框架）是一个轻量级的Java字节码操作框架，它可以用于生成、转换和分析Java字节码。ASM提供了一组API，可以让开发人员直接操作Java字节码，而不需要了解Java虚拟机的细节和复杂性。\n\n使用ASM，开发人员可以：\n\n1. 直接生成Java字节码，而不需要编写Java源代码。\n\n2. 对现有的Java字节码进行修改和优化，以提高性能。\n\n3. 分析Java字节码，以获得有关类、方法和字段的信息。\n\nASM具有轻量级、高性能和灵活性等特点，已经成为许多Java框架和工具的基础，例如Spring、Hibernate和JUnit等。\n\n## 字节码\n\nJava字节码是Java源代码编译后生成的中间代码，它可以在Java虚拟机上运行。Java字节码是一种基于栈的指令集，每个指令都有一个操作码和零个或多个操作数。Java字节码包含了类、接口、方法、字段等信息，以及方法的实现代码。\n\nJava字节码的格式是固定的，由多个字节组成，其中包含了常量池、类信息、方法信息、字段信息、指令等内容。Java字节码可以通过反编译工具转换为可读性更高的Java源代码，但是反编译后的代码可能不完全等同于原始的Java源代码。\n\nJava字节码的优点是跨平台性强，因为Java虚拟机可以在不同的操作系统和硬件平台上运行。此外，Java字节码还可以进行动态修改和生成，这使得Java程序可以在运行时动态地加载和卸载类、修改类的行为等。\n\n## JVM语言\n\nJVM语言是指可以在Java虚拟机（JVM）上运行的编程语言。由于JVM提供了跨平台的能力，因此许多编程语言都选择了基于JVM开发，以便在不同的操作系统和硬件平台上运行。\n\n以下是一些常见的JVM语言：\n\n1. Java：Java是最流行的JVM语言之一，它是由Sun Microsystems（现在是Oracle）开发的面向对象编程语言。Java具有简单、可移植、安全等特点，广泛应用于企业级应用程序、Web应用程序、移动应用程序等领域。\n\n2. Kotlin：Kotlin是一种静态类型的编程语言，由JetBrains开发。Kotlin具有与Java兼容、表达式更简洁、空安全等特点，被认为是Java的替代品。\n\n3. Scala：Scala是一种多范式编程语言，由Martin Odersky等人开发。Scala结合了面向对象编程和函数式编程的特点，具有高度的可扩展性和灵活性。\n\n4. Groovy：Groovy是一种动态类型的编程语言，由James Strachan等人开发。Groovy具有与Java兼容、脚本化编程、元编程等特点，被广泛应用于构建Web应用程序、测试框架等领域。\n\n5. Clojure：Clojure是一种函数式编程语言，由Rich Hickey开发。Clojure具有简洁、可扩展、并发编程等特点，被广泛应用于大数据处理、Web应用程序等领域。\n\n这些JVM语言都可以通过编译器将源代码编译成Java字节码，然后在JVM上运行。\n\n## [JNI](https://docs.oracle.com/javase/8/docs/technotes/guides/jni/)\n\nJava Native Interface (JNI) 是 Java 语言提供的一种机制，用于在 Java 程序中调用本地（Native）方法。它允许 Java 应用程序通过 JNI 接口调用 C/C++ 等本地语言编写的函数库，并且可以将 Java 对象传递给本地代码进行处理。\n\nJNI 提供了一组 API，使得 Java 程序可以与本地代码进行交互。Java 程序员可以使用 JNI 定义本地方法，然后通过 Java 虚拟机加载本地库并调用本地方法。本地库可以是动态链接库（.dll 或 .so 文件），也可以是静态链接库（.lib 或 .a 文件）。\n\nJNI 的主要用途是在 Java 程序中调用本地代码，从而扩展 Java 语言的功能：\n\n    调用本地库：Java 程序可以通过 JNI 接口调用 C/C++ 等本地语言编写的函数库，从而实现更高效、更底层的操作。\n\n    提高性能：JNI 可以用于实现图像处理、音频处理、网络通信等需要高性能的应用程序，从而提高程序的执行效率。\n\n    跨平台开发：JNI 可以使得 Java 程序与本地代码进行交互，从而实现跨平台开发，例如在 Windows 和 Linux 平台上运行相同的 Java 应用程序。\n\n    访问硬件设备：JNI 可以用于访问硬件设备，例如打印机、摄像头、传感器等，从而实现更底层的控制和操作。\n\n## [JNA]()\n\nJNA（Java Native Access）是一个开源的 Java 库，它提供了一种简单的方式来调用本地代码。与 JNI 不同，JNA 不需要编写任何本地代码或头文件，而是使用 Java 接口描述本地函数，并通过 JNA 库自动映射到本地库中的函数。\n\nJNA 的主要优点是简化了与本地代码的交互过程，使得 Java 程序员可以更容易地调用本地库中的函数。同时，JNA 还提供了一些高级特性，例如结构体、回调函数等，使得 Java 程序员可以更方便地处理复杂的数据类型和逻辑。\n\nJNA 的使用非常简单，只需要定义一个 Java 接口来描述本地函数，然后通过 JNA 库加载本地库并调用本地函数即可。\n```java\nimport com.sun.jna.Library;\nimport com.sun.jna.Native;\n\npublic interface MyLibrary extends Library {\n    MyLibrary INSTANCE = (MyLibrary) Native.loadLibrary(\"mylib\", MyLibrary.class);\n\n    int add(int a, int b);\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        int result = MyLibrary.INSTANCE.add(1, 2);\n        System.out.println(result); // 输出 3\n    }\n}\n```","slug":"Java-更多-特性","published":1,"updated":"2023-06-04T08:17:53.556Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5uf001alv9e0wfp1f6v","content":"<h1 id=\"不仅仅是语言特性\"><a href=\"#不仅仅是语言特性\" class=\"headerlink\" title=\"不仅仅是语言特性\"></a>不仅仅是语言特性</h1><h2 id=\"SPI\"><a href=\"#SPI\" class=\"headerlink\" title=\"SPI\"></a>SPI</h2><p>Java SPI（Service Provider Interface）是一种机制，它允许在运行时动态地替换接口的实现。这种机制允许开发人员编写一组接口，然后由不同的实现提供者提供不同的实现。SPI机制是Java标准库中的一部分，可以用于扩展Java应用程序的功能，而无需修改代码。SPI机制通过类加载器机制实现，它允许应用程序在运行时动态地加载和卸载实现。在Java中，SPI机制主要用于服务发现、插件机制等场景。</p>\n<p>一个常见的例子是Java数据库连接（JDBC）。JDBC是一种标准的API，它定义了一组接口，用于访问各种不同类型的数据库。然而，不同的数据库供应商会提供不同的JDBC驱动程序来实现这些接口。在Java中，可以使用SPI机制来动态地加载和使用这些不同的JDBC驱动程序，而不需要在代码中显式地指定使用哪个驱动程序。这样，应用程序就可以在运行时根据需要选择不同的数据库驱动程序，而不需要修改代码。</p>\n<h2 id=\"Java-Agent\"><a href=\"#Java-Agent\" class=\"headerlink\" title=\"Java Agent\"></a>Java Agent</h2><p>Java Agent是一种Java应用程序，它可以在运行时监控和修改Java应用程序的行为。Java Agent通常被用于性能分析、调试、安全审计等方面。Java Agent通过Java Instrumentation API来实现对Java应用程序的监控和修改。Java Agent可以在应用程序启动时通过JVM参数指定，并且可以在运行时动态加载和卸载。Java Agent可以访问应用程序的类、方法、字段等元数据信息，并且可以在运行时修改这些信息。Java Agent还可以在应用程序运行时插入自定义的代码逻辑，以实现各种功能。</p>\n<h2 id=\"ASM\"><a href=\"#ASM\" class=\"headerlink\" title=\"ASM\"></a>ASM</h2><p>Java ASM（Java字节码操作框架）是一个轻量级的Java字节码操作框架，它可以用于生成、转换和分析Java字节码。ASM提供了一组API，可以让开发人员直接操作Java字节码，而不需要了解Java虚拟机的细节和复杂性。</p>\n<p>使用ASM，开发人员可以：</p>\n<ol>\n<li><p>直接生成Java字节码，而不需要编写Java源代码。</p>\n</li>\n<li><p>对现有的Java字节码进行修改和优化，以提高性能。</p>\n</li>\n<li><p>分析Java字节码，以获得有关类、方法和字段的信息。</p>\n</li>\n</ol>\n<p>ASM具有轻量级、高性能和灵活性等特点，已经成为许多Java框架和工具的基础，例如Spring、Hibernate和JUnit等。</p>\n<h2 id=\"字节码\"><a href=\"#字节码\" class=\"headerlink\" title=\"字节码\"></a>字节码</h2><p>Java字节码是Java源代码编译后生成的中间代码，它可以在Java虚拟机上运行。Java字节码是一种基于栈的指令集，每个指令都有一个操作码和零个或多个操作数。Java字节码包含了类、接口、方法、字段等信息，以及方法的实现代码。</p>\n<p>Java字节码的格式是固定的，由多个字节组成，其中包含了常量池、类信息、方法信息、字段信息、指令等内容。Java字节码可以通过反编译工具转换为可读性更高的Java源代码，但是反编译后的代码可能不完全等同于原始的Java源代码。</p>\n<p>Java字节码的优点是跨平台性强，因为Java虚拟机可以在不同的操作系统和硬件平台上运行。此外，Java字节码还可以进行动态修改和生成，这使得Java程序可以在运行时动态地加载和卸载类、修改类的行为等。</p>\n<h2 id=\"JVM语言\"><a href=\"#JVM语言\" class=\"headerlink\" title=\"JVM语言\"></a>JVM语言</h2><p>JVM语言是指可以在Java虚拟机（JVM）上运行的编程语言。由于JVM提供了跨平台的能力，因此许多编程语言都选择了基于JVM开发，以便在不同的操作系统和硬件平台上运行。</p>\n<p>以下是一些常见的JVM语言：</p>\n<ol>\n<li><p>Java：Java是最流行的JVM语言之一，它是由Sun Microsystems（现在是Oracle）开发的面向对象编程语言。Java具有简单、可移植、安全等特点，广泛应用于企业级应用程序、Web应用程序、移动应用程序等领域。</p>\n</li>\n<li><p>Kotlin：Kotlin是一种静态类型的编程语言，由JetBrains开发。Kotlin具有与Java兼容、表达式更简洁、空安全等特点，被认为是Java的替代品。</p>\n</li>\n<li><p>Scala：Scala是一种多范式编程语言，由Martin Odersky等人开发。Scala结合了面向对象编程和函数式编程的特点，具有高度的可扩展性和灵活性。</p>\n</li>\n<li><p>Groovy：Groovy是一种动态类型的编程语言，由James Strachan等人开发。Groovy具有与Java兼容、脚本化编程、元编程等特点，被广泛应用于构建Web应用程序、测试框架等领域。</p>\n</li>\n<li><p>Clojure：Clojure是一种函数式编程语言，由Rich Hickey开发。Clojure具有简洁、可扩展、并发编程等特点，被广泛应用于大数据处理、Web应用程序等领域。</p>\n</li>\n</ol>\n<p>这些JVM语言都可以通过编译器将源代码编译成Java字节码，然后在JVM上运行。</p>\n<h2 id=\"JNI\"><a href=\"#JNI\" class=\"headerlink\" title=\"JNI\"></a><a href=\"https://docs.oracle.com/javase/8/docs/technotes/guides/jni/\">JNI</a></h2><p>Java Native Interface (JNI) 是 Java 语言提供的一种机制，用于在 Java 程序中调用本地（Native）方法。它允许 Java 应用程序通过 JNI 接口调用 C&#x2F;C++ 等本地语言编写的函数库，并且可以将 Java 对象传递给本地代码进行处理。</p>\n<p>JNI 提供了一组 API，使得 Java 程序可以与本地代码进行交互。Java 程序员可以使用 JNI 定义本地方法，然后通过 Java 虚拟机加载本地库并调用本地方法。本地库可以是动态链接库（.dll 或 .so 文件），也可以是静态链接库（.lib 或 .a 文件）。</p>\n<p>JNI 的主要用途是在 Java 程序中调用本地代码，从而扩展 Java 语言的功能：</p>\n<pre><code>调用本地库：Java 程序可以通过 JNI 接口调用 C/C++ 等本地语言编写的函数库，从而实现更高效、更底层的操作。\n\n提高性能：JNI 可以用于实现图像处理、音频处理、网络通信等需要高性能的应用程序，从而提高程序的执行效率。\n\n跨平台开发：JNI 可以使得 Java 程序与本地代码进行交互，从而实现跨平台开发，例如在 Windows 和 Linux 平台上运行相同的 Java 应用程序。\n\n访问硬件设备：JNI 可以用于访问硬件设备，例如打印机、摄像头、传感器等，从而实现更底层的控制和操作。\n</code></pre>\n<h2 id=\"JNA\"><a href=\"#JNA\" class=\"headerlink\" title=\"JNA\"></a><a href=\"\">JNA</a></h2><p>JNA（Java Native Access）是一个开源的 Java 库，它提供了一种简单的方式来调用本地代码。与 JNI 不同，JNA 不需要编写任何本地代码或头文件，而是使用 Java 接口描述本地函数，并通过 JNA 库自动映射到本地库中的函数。</p>\n<p>JNA 的主要优点是简化了与本地代码的交互过程，使得 Java 程序员可以更容易地调用本地库中的函数。同时，JNA 还提供了一些高级特性，例如结构体、回调函数等，使得 Java 程序员可以更方便地处理复杂的数据类型和逻辑。</p>\n<p>JNA 的使用非常简单，只需要定义一个 Java 接口来描述本地函数，然后通过 JNA 库加载本地库并调用本地函数即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.sun.jna.Library;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.jna.Native;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MyLibrary</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Library</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">MyLibrary</span> <span class=\"variable\">INSTANCE</span> <span class=\"operator\">=</span> (MyLibrary) Native.loadLibrary(<span class=\"string\">&quot;mylib&quot;</span>, MyLibrary.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> MyLibrary.INSTANCE.add(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">        System.out.println(result); <span class=\"comment\">// 输出 3</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"cover":false,"excerpt":"","more":"<h1 id=\"不仅仅是语言特性\"><a href=\"#不仅仅是语言特性\" class=\"headerlink\" title=\"不仅仅是语言特性\"></a>不仅仅是语言特性</h1><h2 id=\"SPI\"><a href=\"#SPI\" class=\"headerlink\" title=\"SPI\"></a>SPI</h2><p>Java SPI（Service Provider Interface）是一种机制，它允许在运行时动态地替换接口的实现。这种机制允许开发人员编写一组接口，然后由不同的实现提供者提供不同的实现。SPI机制是Java标准库中的一部分，可以用于扩展Java应用程序的功能，而无需修改代码。SPI机制通过类加载器机制实现，它允许应用程序在运行时动态地加载和卸载实现。在Java中，SPI机制主要用于服务发现、插件机制等场景。</p>\n<p>一个常见的例子是Java数据库连接（JDBC）。JDBC是一种标准的API，它定义了一组接口，用于访问各种不同类型的数据库。然而，不同的数据库供应商会提供不同的JDBC驱动程序来实现这些接口。在Java中，可以使用SPI机制来动态地加载和使用这些不同的JDBC驱动程序，而不需要在代码中显式地指定使用哪个驱动程序。这样，应用程序就可以在运行时根据需要选择不同的数据库驱动程序，而不需要修改代码。</p>\n<h2 id=\"Java-Agent\"><a href=\"#Java-Agent\" class=\"headerlink\" title=\"Java Agent\"></a>Java Agent</h2><p>Java Agent是一种Java应用程序，它可以在运行时监控和修改Java应用程序的行为。Java Agent通常被用于性能分析、调试、安全审计等方面。Java Agent通过Java Instrumentation API来实现对Java应用程序的监控和修改。Java Agent可以在应用程序启动时通过JVM参数指定，并且可以在运行时动态加载和卸载。Java Agent可以访问应用程序的类、方法、字段等元数据信息，并且可以在运行时修改这些信息。Java Agent还可以在应用程序运行时插入自定义的代码逻辑，以实现各种功能。</p>\n<h2 id=\"ASM\"><a href=\"#ASM\" class=\"headerlink\" title=\"ASM\"></a>ASM</h2><p>Java ASM（Java字节码操作框架）是一个轻量级的Java字节码操作框架，它可以用于生成、转换和分析Java字节码。ASM提供了一组API，可以让开发人员直接操作Java字节码，而不需要了解Java虚拟机的细节和复杂性。</p>\n<p>使用ASM，开发人员可以：</p>\n<ol>\n<li><p>直接生成Java字节码，而不需要编写Java源代码。</p>\n</li>\n<li><p>对现有的Java字节码进行修改和优化，以提高性能。</p>\n</li>\n<li><p>分析Java字节码，以获得有关类、方法和字段的信息。</p>\n</li>\n</ol>\n<p>ASM具有轻量级、高性能和灵活性等特点，已经成为许多Java框架和工具的基础，例如Spring、Hibernate和JUnit等。</p>\n<h2 id=\"字节码\"><a href=\"#字节码\" class=\"headerlink\" title=\"字节码\"></a>字节码</h2><p>Java字节码是Java源代码编译后生成的中间代码，它可以在Java虚拟机上运行。Java字节码是一种基于栈的指令集，每个指令都有一个操作码和零个或多个操作数。Java字节码包含了类、接口、方法、字段等信息，以及方法的实现代码。</p>\n<p>Java字节码的格式是固定的，由多个字节组成，其中包含了常量池、类信息、方法信息、字段信息、指令等内容。Java字节码可以通过反编译工具转换为可读性更高的Java源代码，但是反编译后的代码可能不完全等同于原始的Java源代码。</p>\n<p>Java字节码的优点是跨平台性强，因为Java虚拟机可以在不同的操作系统和硬件平台上运行。此外，Java字节码还可以进行动态修改和生成，这使得Java程序可以在运行时动态地加载和卸载类、修改类的行为等。</p>\n<h2 id=\"JVM语言\"><a href=\"#JVM语言\" class=\"headerlink\" title=\"JVM语言\"></a>JVM语言</h2><p>JVM语言是指可以在Java虚拟机（JVM）上运行的编程语言。由于JVM提供了跨平台的能力，因此许多编程语言都选择了基于JVM开发，以便在不同的操作系统和硬件平台上运行。</p>\n<p>以下是一些常见的JVM语言：</p>\n<ol>\n<li><p>Java：Java是最流行的JVM语言之一，它是由Sun Microsystems（现在是Oracle）开发的面向对象编程语言。Java具有简单、可移植、安全等特点，广泛应用于企业级应用程序、Web应用程序、移动应用程序等领域。</p>\n</li>\n<li><p>Kotlin：Kotlin是一种静态类型的编程语言，由JetBrains开发。Kotlin具有与Java兼容、表达式更简洁、空安全等特点，被认为是Java的替代品。</p>\n</li>\n<li><p>Scala：Scala是一种多范式编程语言，由Martin Odersky等人开发。Scala结合了面向对象编程和函数式编程的特点，具有高度的可扩展性和灵活性。</p>\n</li>\n<li><p>Groovy：Groovy是一种动态类型的编程语言，由James Strachan等人开发。Groovy具有与Java兼容、脚本化编程、元编程等特点，被广泛应用于构建Web应用程序、测试框架等领域。</p>\n</li>\n<li><p>Clojure：Clojure是一种函数式编程语言，由Rich Hickey开发。Clojure具有简洁、可扩展、并发编程等特点，被广泛应用于大数据处理、Web应用程序等领域。</p>\n</li>\n</ol>\n<p>这些JVM语言都可以通过编译器将源代码编译成Java字节码，然后在JVM上运行。</p>\n<h2 id=\"JNI\"><a href=\"#JNI\" class=\"headerlink\" title=\"JNI\"></a><a href=\"https://docs.oracle.com/javase/8/docs/technotes/guides/jni/\">JNI</a></h2><p>Java Native Interface (JNI) 是 Java 语言提供的一种机制，用于在 Java 程序中调用本地（Native）方法。它允许 Java 应用程序通过 JNI 接口调用 C&#x2F;C++ 等本地语言编写的函数库，并且可以将 Java 对象传递给本地代码进行处理。</p>\n<p>JNI 提供了一组 API，使得 Java 程序可以与本地代码进行交互。Java 程序员可以使用 JNI 定义本地方法，然后通过 Java 虚拟机加载本地库并调用本地方法。本地库可以是动态链接库（.dll 或 .so 文件），也可以是静态链接库（.lib 或 .a 文件）。</p>\n<p>JNI 的主要用途是在 Java 程序中调用本地代码，从而扩展 Java 语言的功能：</p>\n<pre><code>调用本地库：Java 程序可以通过 JNI 接口调用 C/C++ 等本地语言编写的函数库，从而实现更高效、更底层的操作。\n\n提高性能：JNI 可以用于实现图像处理、音频处理、网络通信等需要高性能的应用程序，从而提高程序的执行效率。\n\n跨平台开发：JNI 可以使得 Java 程序与本地代码进行交互，从而实现跨平台开发，例如在 Windows 和 Linux 平台上运行相同的 Java 应用程序。\n\n访问硬件设备：JNI 可以用于访问硬件设备，例如打印机、摄像头、传感器等，从而实现更底层的控制和操作。\n</code></pre>\n<h2 id=\"JNA\"><a href=\"#JNA\" class=\"headerlink\" title=\"JNA\"></a><a href=\"\">JNA</a></h2><p>JNA（Java Native Access）是一个开源的 Java 库，它提供了一种简单的方式来调用本地代码。与 JNI 不同，JNA 不需要编写任何本地代码或头文件，而是使用 Java 接口描述本地函数，并通过 JNA 库自动映射到本地库中的函数。</p>\n<p>JNA 的主要优点是简化了与本地代码的交互过程，使得 Java 程序员可以更容易地调用本地库中的函数。同时，JNA 还提供了一些高级特性，例如结构体、回调函数等，使得 Java 程序员可以更方便地处理复杂的数据类型和逻辑。</p>\n<p>JNA 的使用非常简单，只需要定义一个 Java 接口来描述本地函数，然后通过 JNA 库加载本地库并调用本地函数即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.sun.jna.Library;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.jna.Native;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MyLibrary</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Library</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">MyLibrary</span> <span class=\"variable\">INSTANCE</span> <span class=\"operator\">=</span> (MyLibrary) Native.loadLibrary(<span class=\"string\">&quot;mylib&quot;</span>, MyLibrary.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> MyLibrary.INSTANCE.add(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">        System.out.println(result); <span class=\"comment\">// 输出 3</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Java 语言特性","date":"2023-06-02T11:57:56.000Z","_content":"\n## 基本特性\n\nJava语言的特性包括：\n\n1. 简单易学：Java语言的语法与C++类似，但是去掉了一些复杂的特性，使得Java更加容易学习和使用。\n\n2. 面向对象：Java是一种纯面向对象的编程语言，所有的数据类型都是对象，所有的操作都是方法调用。\n\n3. 平台无关性：Java程序可以在不同的平台上运行，只需要安装相应的JVM即可。\n\n4. 安全性：Java提供了严格的安全机制，防止恶意代码对系统造成破坏。\n\n5. 自动内存管理：Java自动进行垃圾回收，程序员不需要手动管理内存。\n\n6. 多线程支持：Java提供了多线程支持，可以方便地实现并发编程。\n\n7. 异常处理：Java提供了异常处理机制，可以有效地处理程序中出现的错误。\n\n8. 开放性：Java是一种开放的编程语言，有大量的开源库和框架可供使用。\n\n9. 高性能：Java虚拟机（JVM）可以将字节码转换为本地机器码执行，具有较高的性能。\n\n10. 动态性：Java支持动态加载和卸载类，可以在运行时动态地修改程序行为。\n\n\n## 版本的新特性\n\nJava历代版本的新特性如下：\n\n## Java 1.0：\n\nJava语言首次发布，包括基本的面向对象特性和网络编程API。\n\n## Java 1.1：\n\n增加了内部类、反射、JAR文件格式等特性，并引入了AWT（Abstract Window Toolkit）图形用户界面库。\n\n## Java 1.2：\n\n引入了Java虚拟机的HotSpot技术，提高了性能；增加了Swing图形用户界面库、集合框架、JavaBeans组件 \n\n## Java 1.3：\n\n增加了JNDI（Java Naming and Directory Interface）   \nJava Sound API   \nJPDA（Java Platform Debugger Architecture）调试器 \n\n## Java 1.4：\n\n增加了NIO（New Input/Output）库   \n正则表达式支持   \nXML解析器 \n\n## Java 5.0（Java SE 5）：\n\n引入了泛型   \n自动装箱/拆箱   \n枚举类型   \n注解   \n可变参数 \n\n## Java 6（Java SE 6）：\n\n增加了JDBC 4.0   \nJAX-WS 2.0   \nJava Compiler API等特性，并优化了JVM性能。\n\n## Java 7（Java SE 7）：\n\n增加了switch语句支持字符串   \n二进制字面量   \ntry-with-resources语句   \nDiamond操作符 \n\n## Java 8（Java SE 8）：\n\n引入了Lambda表达式   \nStream API   \nDate/Time API   \n默认方法 \n\n## Java 9（Java SE 9）：\n\n引入了模块化系统   \n\n\tJDK9将JDK分成一组模块，可以在编译时或运行时进行组合。这样可以减少内存开销，只需必要的模块，并非全部模块，可以简化各种类库和大型应用的开发和维护。比如在使用java开发的时候通常用不到图形化界面的库，分模块之后，在java的base模块中没有这些图形化相关的内容，达到了一个瘦身的效果\n\n接口私有方法    \n\n\t```java\n\tpublic interface MyInterface {\n\t\t//定义私有方法\n\t\tprivate void m1() {\n\t\tSystem.out.println(\"123\");\n\t}\n\n\t//default中调用\n\tdefault void m2() {\n\t\t\n\t}\n\t}\n\t```\nJShell交互式命令行工具  \n\n不能使用下划线命名变量\n\nString字符串的变化\n\n    jdk9中将String内部的char数组改成了byte数组，这样就节省了一半的内存占用\n\nHTTP/2客户端 \n\n改进的try with resource\n\n## Java 10（Java SE 10）：\n\n增加了局部变量类型推断   \n\n    类型都可以使用var来代替，JVM会自动推断该变量是什么类型的\n\nG1垃圾回收器改进\n\n\n## Java 11（Java SE 11）：\njava直接运行\n\n\t在以前的版本中，我们在命令提示下，需要先编译，生成class文件之后再运行\n增加了HTTP客户端API   \nZGC垃圾回收器   \nEpsilon垃圾回收器  \nString新增方法\n\n\tisBlank方法，判断字符串长度是否为0，或者是否是空格，制表符等其他空白字符  \n\tstrip方法，可以去除首尾空格，与之前的trim的区别是还可以去除unicode编码的空白字符  \n\trepeat方法，字符串重复的次数  \n\nlambda表达式中的变量类型推断\n\n\t允许在lambda表达式的参数中使用var修饰\n\n\tMyInterface mi = (var a,var b)->{\n       System.out.println(a);\n       System.out.println(b);\n    };\n\n## Java 12（Java SE 12）：\n增加了Switch表达式   \n```java\nint month = 3;\nswitch (month) {\n\tcase 3,4,5 -> System.out.println(\"spring\");\n\tcase 6,7,8 -> System.out.println(\"summer\");\n\tcase 9,10,11 -> System.out.println(\"autumn\");\n\tcase 12, 1,2 -> System.out.println(\"winter\");\n\tdefault -> System.out.println(\"wrong\");\n}\n```\nJVM常量API \n\n## Java 13（Java SE 13）：\n\nSwitch表达式增强 \n```java\nint month = 3;\nString result = switch (month) {\n\tcase 3,4,5 -> \"spring\";\n\tcase 6,7,8 -> \"summer\";\n\tcase 9,10,11 -> \"autumn\";\n\tcase 12, 1,2 -> \"winter\";\n\tdefault -> \"wrong\";\n};\n```\n增加了文本块  \n```java\nString s = \"\"\"\n            Hello\n            World\n            Learn\n            Java\n           \"\"\";\n  System.out.println(s);\n```\n\n## Java 14（Java SE 14）：\n\n增加了Records   \n\n```java\npublic record User(String name,Integer age){}\n```\n\t记录类型有自动生成的成员，包括：\n\n    状态描述中的每个组件都有对应的private final字段。状态描述中的每个组件都有对应的public访问方法。方法的名称与组件名称相同。一个包含全部组件的公开构造器，用来初始化对应组件。实现了equals()和hashCode()方法。equals()要求全部组件都必须相等。实现了toString()，输出全部组件的信息。\n\nPattern Matching for instanceof \n\n```java\nif(obj instanceof Integer){\n\t\tInteger i = (Integer)obj;\n\t\tint result = i + 10;\n\t\tSystem.out.println(i);\n\t}\n```\n\n友好的空指针（NullPointerException）提示\n\n\t错误信息就可以明确的指出那个对象为null了。此外，还可以使用下面参数来查看:\n\n\tjava -XX:+ShowCodeDetailsInExceptionMessages <className>\n\nSealed Classes密封类和接口\n\n\t作用是限制一个类可以由哪些子类继承或者实现。\n\n    如果指定模块的话，sealed class和其子类必须在同一个模块下。如果没有指定模块，则需要在同一个包下。sealed class指定的子类必须直接继承该sealed class。sealed class的子类要用final修饰。sealed class的子类如果不想用final修饰的话，可以将子类声明为sealed class\n\nCharSequence新增的方法\n\n\t该接口中新增了default方法isEmpty()，作用是判断CharSequence是否为空。\n\nTreeMap新增方法\n\n    putIfAbsent\n\tcomputeIfAbsent\n\tcomputeIfPresent\n\tcomputemerge\n## Java 15（Java SE 15）：\n\n增加了Sealed Classes   \n\nText Blocks增强 \n\n## Java 16（Java SE 16）：\n\n增加了Records增强   \n\nPattern Matching for switch\n\n新增日时段\n\n\t在DateTimeFormatter.ofPattern传入B可以获取现在时间对应的日时段，上午，下午等\n```java\n\tSystem.out.println(DateTimeFormatter.ofPattern(\"B\").format(LocalDateTime.now()));\n```\nInvocationHandler新增方法\n\n\t在该接口中添加了下面方法\n```java\npublic static Object invokeDefault(Object proxy, Method method, Object... args)\n```\n\n## Java 17 (Java SE 17) :\n\ninstanceof模式匹配\n\n```JAVA\nswitch(a){\n\t//如果a是Rabbit类型，则在强转之后赋值给r，然后再调用其特有的run方法\n\tcase Rabbit r -> r.run();\n\t//如果a是Bird类型，则在强转之后赋值给b，然后调用其特有的fly方法\n\tcase Bird b -> b.fly();\n\t//支持null的判断\n\tcase null -> System.out.println(\"null\");\n\tdefault -> System.out.println(\"no animal\");\n}\n```\n\n伪随机数的变化\n\n增加了伪随机数相关的类和接口来让开发者使用stream流进行操作\n\n    RandomGenerator\n\tRandomGeneratorFactory\n\n去除了AOT和JIT\n\n\tAOT（Ahead-of-Time）是java9中新增的功能，可以先将应用中中的字节码编译成机器码。\n\n\tGraal编译器作为使用java开发的JIT（just-in-time ）即时编译器\n\n## Java 18 (Java SE 18) :\n\n\t从jdk18开始，默认使用UTF-8字符编码。我们可以通过如下参数修改其他字符编码：\n\n\t-Dfile.encoding=UTF-8 \n\n简单的web服务器\n\n\t可以通过jwebserver命令启动jdk18中提供的静态web服务器，可以利用该工具查看一些原型，做简单的测试。在命令提示符中输入jwebserver命令后会启动，然后在浏览器中输入:http://127.0.0.1:8000/ 即可看到当前命令提示符路径下的文件了。\n\t将被移除的方法\n\n在jdk18中标记了Object中的finalize方法，Thread中的stop方法将在未来被移除。\n\n@snippet注解\n\t以前在文档注释中编写代码时需要添加code标签，使用较为不便，通过@snippet注解可以更方便的将文档注释中的代码展示在api文档中。\n\n## Java 19 (Java SE 19) :\n\nJEP 405 - Record 模式\n```JAVA\nrecord Point(int x, int y) {}\nstatic void printSum(Object o) {\n\tif (o instanceof Point(int x, int y)) {\n\t\tSystem.out.println(x + y);\n\t}\n}\n\npublic static void main(String[] args) {\n\tprintSum(new Point(3, 6));\n}\n```\n\nJEP 427 - switch 模式匹配\n\n\t1.增强类型检查，case 表达式支持多种类型\t\n\t2.switch 表达式和语句分支全覆盖检测\n\t3.扩展了模式变量声明范围\n\t4.优化 null 处理，可以声明一个 null case\n\nJEP 422 - Linux/RISC-V 移植\n\nJEP 424 - 外部函数和内存 API \n\n\t易用性：通过卓越的纯 Java 开发模型代替 JNI\n\t高性能：提供能与当前 JNI 和 sun.misc.Unsafe 相当甚至更优越的性能\n\t通用性：提供支持不同种类的外部内存（如本地内存、持久化内存和托管堆内存）的 API，并随着时间推移支持其他操作系统甚至其他语言编写的外部函数\n\t安全性：允许程序对外部内存执行不安全的操作，但默认警告用户此类操作\n\n\t分配外部内存：MemorySegment、MemoryAddress和SegmentAllocator\n\t操作和访问结构化的外部内存：MemoryLayout和VarHandle\n\t控制外部内存(分配和回收) ：MemorySession\n\t调用外部函数：Linker、FunctionDescriptor和SymbolLookup\n\nJEP 426 - 向量 API\n\nJEP 425 - 虚拟线程\n\nJEP 428 - 结构化并发\n\n## Java 20 (Java SE 20) :\n\nJEP 429：作用域值（Scoped Values，孵化阶段）\n\nJEP 432：记录模式（Record Patterns，第二轮预览）\n\nJEP 433: switch的模式匹配（Pattern Matching for switch，第四轮预览）\n\nJEP 434：外部函数与内存API（Foreign Function & Memory API，第二轮预览）\n\nJEP 436：虚拟线程（Virtual Threads，第二轮预览）\n\nJEP 437：结构化并发（Structured Concurrency，第二轮孵化）\n\nJEP 438：Vector API（第五轮孵化）","source":"_posts/Java-语言特性.md","raw":"---\ntitle: Java 语言特性\ndate: 2023-06-02 19:57:56\ntags: Java\n---\n\n## 基本特性\n\nJava语言的特性包括：\n\n1. 简单易学：Java语言的语法与C++类似，但是去掉了一些复杂的特性，使得Java更加容易学习和使用。\n\n2. 面向对象：Java是一种纯面向对象的编程语言，所有的数据类型都是对象，所有的操作都是方法调用。\n\n3. 平台无关性：Java程序可以在不同的平台上运行，只需要安装相应的JVM即可。\n\n4. 安全性：Java提供了严格的安全机制，防止恶意代码对系统造成破坏。\n\n5. 自动内存管理：Java自动进行垃圾回收，程序员不需要手动管理内存。\n\n6. 多线程支持：Java提供了多线程支持，可以方便地实现并发编程。\n\n7. 异常处理：Java提供了异常处理机制，可以有效地处理程序中出现的错误。\n\n8. 开放性：Java是一种开放的编程语言，有大量的开源库和框架可供使用。\n\n9. 高性能：Java虚拟机（JVM）可以将字节码转换为本地机器码执行，具有较高的性能。\n\n10. 动态性：Java支持动态加载和卸载类，可以在运行时动态地修改程序行为。\n\n\n## 版本的新特性\n\nJava历代版本的新特性如下：\n\n## Java 1.0：\n\nJava语言首次发布，包括基本的面向对象特性和网络编程API。\n\n## Java 1.1：\n\n增加了内部类、反射、JAR文件格式等特性，并引入了AWT（Abstract Window Toolkit）图形用户界面库。\n\n## Java 1.2：\n\n引入了Java虚拟机的HotSpot技术，提高了性能；增加了Swing图形用户界面库、集合框架、JavaBeans组件 \n\n## Java 1.3：\n\n增加了JNDI（Java Naming and Directory Interface）   \nJava Sound API   \nJPDA（Java Platform Debugger Architecture）调试器 \n\n## Java 1.4：\n\n增加了NIO（New Input/Output）库   \n正则表达式支持   \nXML解析器 \n\n## Java 5.0（Java SE 5）：\n\n引入了泛型   \n自动装箱/拆箱   \n枚举类型   \n注解   \n可变参数 \n\n## Java 6（Java SE 6）：\n\n增加了JDBC 4.0   \nJAX-WS 2.0   \nJava Compiler API等特性，并优化了JVM性能。\n\n## Java 7（Java SE 7）：\n\n增加了switch语句支持字符串   \n二进制字面量   \ntry-with-resources语句   \nDiamond操作符 \n\n## Java 8（Java SE 8）：\n\n引入了Lambda表达式   \nStream API   \nDate/Time API   \n默认方法 \n\n## Java 9（Java SE 9）：\n\n引入了模块化系统   \n\n\tJDK9将JDK分成一组模块，可以在编译时或运行时进行组合。这样可以减少内存开销，只需必要的模块，并非全部模块，可以简化各种类库和大型应用的开发和维护。比如在使用java开发的时候通常用不到图形化界面的库，分模块之后，在java的base模块中没有这些图形化相关的内容，达到了一个瘦身的效果\n\n接口私有方法    \n\n\t```java\n\tpublic interface MyInterface {\n\t\t//定义私有方法\n\t\tprivate void m1() {\n\t\tSystem.out.println(\"123\");\n\t}\n\n\t//default中调用\n\tdefault void m2() {\n\t\t\n\t}\n\t}\n\t```\nJShell交互式命令行工具  \n\n不能使用下划线命名变量\n\nString字符串的变化\n\n    jdk9中将String内部的char数组改成了byte数组，这样就节省了一半的内存占用\n\nHTTP/2客户端 \n\n改进的try with resource\n\n## Java 10（Java SE 10）：\n\n增加了局部变量类型推断   \n\n    类型都可以使用var来代替，JVM会自动推断该变量是什么类型的\n\nG1垃圾回收器改进\n\n\n## Java 11（Java SE 11）：\njava直接运行\n\n\t在以前的版本中，我们在命令提示下，需要先编译，生成class文件之后再运行\n增加了HTTP客户端API   \nZGC垃圾回收器   \nEpsilon垃圾回收器  \nString新增方法\n\n\tisBlank方法，判断字符串长度是否为0，或者是否是空格，制表符等其他空白字符  \n\tstrip方法，可以去除首尾空格，与之前的trim的区别是还可以去除unicode编码的空白字符  \n\trepeat方法，字符串重复的次数  \n\nlambda表达式中的变量类型推断\n\n\t允许在lambda表达式的参数中使用var修饰\n\n\tMyInterface mi = (var a,var b)->{\n       System.out.println(a);\n       System.out.println(b);\n    };\n\n## Java 12（Java SE 12）：\n增加了Switch表达式   \n```java\nint month = 3;\nswitch (month) {\n\tcase 3,4,5 -> System.out.println(\"spring\");\n\tcase 6,7,8 -> System.out.println(\"summer\");\n\tcase 9,10,11 -> System.out.println(\"autumn\");\n\tcase 12, 1,2 -> System.out.println(\"winter\");\n\tdefault -> System.out.println(\"wrong\");\n}\n```\nJVM常量API \n\n## Java 13（Java SE 13）：\n\nSwitch表达式增强 \n```java\nint month = 3;\nString result = switch (month) {\n\tcase 3,4,5 -> \"spring\";\n\tcase 6,7,8 -> \"summer\";\n\tcase 9,10,11 -> \"autumn\";\n\tcase 12, 1,2 -> \"winter\";\n\tdefault -> \"wrong\";\n};\n```\n增加了文本块  \n```java\nString s = \"\"\"\n            Hello\n            World\n            Learn\n            Java\n           \"\"\";\n  System.out.println(s);\n```\n\n## Java 14（Java SE 14）：\n\n增加了Records   \n\n```java\npublic record User(String name,Integer age){}\n```\n\t记录类型有自动生成的成员，包括：\n\n    状态描述中的每个组件都有对应的private final字段。状态描述中的每个组件都有对应的public访问方法。方法的名称与组件名称相同。一个包含全部组件的公开构造器，用来初始化对应组件。实现了equals()和hashCode()方法。equals()要求全部组件都必须相等。实现了toString()，输出全部组件的信息。\n\nPattern Matching for instanceof \n\n```java\nif(obj instanceof Integer){\n\t\tInteger i = (Integer)obj;\n\t\tint result = i + 10;\n\t\tSystem.out.println(i);\n\t}\n```\n\n友好的空指针（NullPointerException）提示\n\n\t错误信息就可以明确的指出那个对象为null了。此外，还可以使用下面参数来查看:\n\n\tjava -XX:+ShowCodeDetailsInExceptionMessages <className>\n\nSealed Classes密封类和接口\n\n\t作用是限制一个类可以由哪些子类继承或者实现。\n\n    如果指定模块的话，sealed class和其子类必须在同一个模块下。如果没有指定模块，则需要在同一个包下。sealed class指定的子类必须直接继承该sealed class。sealed class的子类要用final修饰。sealed class的子类如果不想用final修饰的话，可以将子类声明为sealed class\n\nCharSequence新增的方法\n\n\t该接口中新增了default方法isEmpty()，作用是判断CharSequence是否为空。\n\nTreeMap新增方法\n\n    putIfAbsent\n\tcomputeIfAbsent\n\tcomputeIfPresent\n\tcomputemerge\n## Java 15（Java SE 15）：\n\n增加了Sealed Classes   \n\nText Blocks增强 \n\n## Java 16（Java SE 16）：\n\n增加了Records增强   \n\nPattern Matching for switch\n\n新增日时段\n\n\t在DateTimeFormatter.ofPattern传入B可以获取现在时间对应的日时段，上午，下午等\n```java\n\tSystem.out.println(DateTimeFormatter.ofPattern(\"B\").format(LocalDateTime.now()));\n```\nInvocationHandler新增方法\n\n\t在该接口中添加了下面方法\n```java\npublic static Object invokeDefault(Object proxy, Method method, Object... args)\n```\n\n## Java 17 (Java SE 17) :\n\ninstanceof模式匹配\n\n```JAVA\nswitch(a){\n\t//如果a是Rabbit类型，则在强转之后赋值给r，然后再调用其特有的run方法\n\tcase Rabbit r -> r.run();\n\t//如果a是Bird类型，则在强转之后赋值给b，然后调用其特有的fly方法\n\tcase Bird b -> b.fly();\n\t//支持null的判断\n\tcase null -> System.out.println(\"null\");\n\tdefault -> System.out.println(\"no animal\");\n}\n```\n\n伪随机数的变化\n\n增加了伪随机数相关的类和接口来让开发者使用stream流进行操作\n\n    RandomGenerator\n\tRandomGeneratorFactory\n\n去除了AOT和JIT\n\n\tAOT（Ahead-of-Time）是java9中新增的功能，可以先将应用中中的字节码编译成机器码。\n\n\tGraal编译器作为使用java开发的JIT（just-in-time ）即时编译器\n\n## Java 18 (Java SE 18) :\n\n\t从jdk18开始，默认使用UTF-8字符编码。我们可以通过如下参数修改其他字符编码：\n\n\t-Dfile.encoding=UTF-8 \n\n简单的web服务器\n\n\t可以通过jwebserver命令启动jdk18中提供的静态web服务器，可以利用该工具查看一些原型，做简单的测试。在命令提示符中输入jwebserver命令后会启动，然后在浏览器中输入:http://127.0.0.1:8000/ 即可看到当前命令提示符路径下的文件了。\n\t将被移除的方法\n\n在jdk18中标记了Object中的finalize方法，Thread中的stop方法将在未来被移除。\n\n@snippet注解\n\t以前在文档注释中编写代码时需要添加code标签，使用较为不便，通过@snippet注解可以更方便的将文档注释中的代码展示在api文档中。\n\n## Java 19 (Java SE 19) :\n\nJEP 405 - Record 模式\n```JAVA\nrecord Point(int x, int y) {}\nstatic void printSum(Object o) {\n\tif (o instanceof Point(int x, int y)) {\n\t\tSystem.out.println(x + y);\n\t}\n}\n\npublic static void main(String[] args) {\n\tprintSum(new Point(3, 6));\n}\n```\n\nJEP 427 - switch 模式匹配\n\n\t1.增强类型检查，case 表达式支持多种类型\t\n\t2.switch 表达式和语句分支全覆盖检测\n\t3.扩展了模式变量声明范围\n\t4.优化 null 处理，可以声明一个 null case\n\nJEP 422 - Linux/RISC-V 移植\n\nJEP 424 - 外部函数和内存 API \n\n\t易用性：通过卓越的纯 Java 开发模型代替 JNI\n\t高性能：提供能与当前 JNI 和 sun.misc.Unsafe 相当甚至更优越的性能\n\t通用性：提供支持不同种类的外部内存（如本地内存、持久化内存和托管堆内存）的 API，并随着时间推移支持其他操作系统甚至其他语言编写的外部函数\n\t安全性：允许程序对外部内存执行不安全的操作，但默认警告用户此类操作\n\n\t分配外部内存：MemorySegment、MemoryAddress和SegmentAllocator\n\t操作和访问结构化的外部内存：MemoryLayout和VarHandle\n\t控制外部内存(分配和回收) ：MemorySession\n\t调用外部函数：Linker、FunctionDescriptor和SymbolLookup\n\nJEP 426 - 向量 API\n\nJEP 425 - 虚拟线程\n\nJEP 428 - 结构化并发\n\n## Java 20 (Java SE 20) :\n\nJEP 429：作用域值（Scoped Values，孵化阶段）\n\nJEP 432：记录模式（Record Patterns，第二轮预览）\n\nJEP 433: switch的模式匹配（Pattern Matching for switch，第四轮预览）\n\nJEP 434：外部函数与内存API（Foreign Function & Memory API，第二轮预览）\n\nJEP 436：虚拟线程（Virtual Threads，第二轮预览）\n\nJEP 437：结构化并发（Structured Concurrency，第二轮孵化）\n\nJEP 438：Vector API（第五轮孵化）","slug":"Java-语言特性","published":1,"updated":"2023-06-02T14:31:08.173Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5uf001clv9e1f564vpd","content":"<h2 id=\"基本特性\"><a href=\"#基本特性\" class=\"headerlink\" title=\"基本特性\"></a>基本特性</h2><p>Java语言的特性包括：</p>\n<ol>\n<li><p>简单易学：Java语言的语法与C++类似，但是去掉了一些复杂的特性，使得Java更加容易学习和使用。</p>\n</li>\n<li><p>面向对象：Java是一种纯面向对象的编程语言，所有的数据类型都是对象，所有的操作都是方法调用。</p>\n</li>\n<li><p>平台无关性：Java程序可以在不同的平台上运行，只需要安装相应的JVM即可。</p>\n</li>\n<li><p>安全性：Java提供了严格的安全机制，防止恶意代码对系统造成破坏。</p>\n</li>\n<li><p>自动内存管理：Java自动进行垃圾回收，程序员不需要手动管理内存。</p>\n</li>\n<li><p>多线程支持：Java提供了多线程支持，可以方便地实现并发编程。</p>\n</li>\n<li><p>异常处理：Java提供了异常处理机制，可以有效地处理程序中出现的错误。</p>\n</li>\n<li><p>开放性：Java是一种开放的编程语言，有大量的开源库和框架可供使用。</p>\n</li>\n<li><p>高性能：Java虚拟机（JVM）可以将字节码转换为本地机器码执行，具有较高的性能。</p>\n</li>\n<li><p>动态性：Java支持动态加载和卸载类，可以在运行时动态地修改程序行为。</p>\n</li>\n</ol>\n<h2 id=\"版本的新特性\"><a href=\"#版本的新特性\" class=\"headerlink\" title=\"版本的新特性\"></a>版本的新特性</h2><p>Java历代版本的新特性如下：</p>\n<h2 id=\"Java-1-0：\"><a href=\"#Java-1-0：\" class=\"headerlink\" title=\"Java 1.0：\"></a>Java 1.0：</h2><p>Java语言首次发布，包括基本的面向对象特性和网络编程API。</p>\n<h2 id=\"Java-1-1：\"><a href=\"#Java-1-1：\" class=\"headerlink\" title=\"Java 1.1：\"></a>Java 1.1：</h2><p>增加了内部类、反射、JAR文件格式等特性，并引入了AWT（Abstract Window Toolkit）图形用户界面库。</p>\n<h2 id=\"Java-1-2：\"><a href=\"#Java-1-2：\" class=\"headerlink\" title=\"Java 1.2：\"></a>Java 1.2：</h2><p>引入了Java虚拟机的HotSpot技术，提高了性能；增加了Swing图形用户界面库、集合框架、JavaBeans组件 </p>\n<h2 id=\"Java-1-3：\"><a href=\"#Java-1-3：\" class=\"headerlink\" title=\"Java 1.3：\"></a>Java 1.3：</h2><p>增加了JNDI（Java Naming and Directory Interface）<br>Java Sound API<br>JPDA（Java Platform Debugger Architecture）调试器 </p>\n<h2 id=\"Java-1-4：\"><a href=\"#Java-1-4：\" class=\"headerlink\" title=\"Java 1.4：\"></a>Java 1.4：</h2><p>增加了NIO（New Input&#x2F;Output）库<br>正则表达式支持<br>XML解析器 </p>\n<h2 id=\"Java-5-0（Java-SE-5）：\"><a href=\"#Java-5-0（Java-SE-5）：\" class=\"headerlink\" title=\"Java 5.0（Java SE 5）：\"></a>Java 5.0（Java SE 5）：</h2><p>引入了泛型<br>自动装箱&#x2F;拆箱<br>枚举类型<br>注解<br>可变参数 </p>\n<h2 id=\"Java-6（Java-SE-6）：\"><a href=\"#Java-6（Java-SE-6）：\" class=\"headerlink\" title=\"Java 6（Java SE 6）：\"></a>Java 6（Java SE 6）：</h2><p>增加了JDBC 4.0<br>JAX-WS 2.0<br>Java Compiler API等特性，并优化了JVM性能。</p>\n<h2 id=\"Java-7（Java-SE-7）：\"><a href=\"#Java-7（Java-SE-7）：\" class=\"headerlink\" title=\"Java 7（Java SE 7）：\"></a>Java 7（Java SE 7）：</h2><p>增加了switch语句支持字符串<br>二进制字面量<br>try-with-resources语句<br>Diamond操作符 </p>\n<h2 id=\"Java-8（Java-SE-8）：\"><a href=\"#Java-8（Java-SE-8）：\" class=\"headerlink\" title=\"Java 8（Java SE 8）：\"></a>Java 8（Java SE 8）：</h2><p>引入了Lambda表达式<br>Stream API<br>Date&#x2F;Time API<br>默认方法 </p>\n<h2 id=\"Java-9（Java-SE-9）：\"><a href=\"#Java-9（Java-SE-9）：\" class=\"headerlink\" title=\"Java 9（Java SE 9）：\"></a>Java 9（Java SE 9）：</h2><p>引入了模块化系统   </p>\n<pre><code>JDK9将JDK分成一组模块，可以在编译时或运行时进行组合。这样可以减少内存开销，只需必要的模块，并非全部模块，可以简化各种类库和大型应用的开发和维护。比如在使用java开发的时候通常用不到图形化界面的库，分模块之后，在java的base模块中没有这些图形化相关的内容，达到了一个瘦身的效果\n</code></pre>\n<p>接口私有方法    </p>\n<pre><code><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MyInterface</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//定义私有方法</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">m1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">&quot;123&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//default中调用</span></span><br><span class=\"line\"><span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title function_\">m2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<p>JShell交互式命令行工具  </p>\n<p>不能使用下划线命名变量</p>\n<p>String字符串的变化</p>\n<pre><code>jdk9中将String内部的char数组改成了byte数组，这样就节省了一半的内存占用\n</code></pre>\n<p>HTTP&#x2F;2客户端 </p>\n<p>改进的try with resource</p>\n<h2 id=\"Java-10（Java-SE-10）：\"><a href=\"#Java-10（Java-SE-10）：\" class=\"headerlink\" title=\"Java 10（Java SE 10）：\"></a>Java 10（Java SE 10）：</h2><p>增加了局部变量类型推断   </p>\n<pre><code>类型都可以使用var来代替，JVM会自动推断该变量是什么类型的\n</code></pre>\n<p>G1垃圾回收器改进</p>\n<h2 id=\"Java-11（Java-SE-11）：\"><a href=\"#Java-11（Java-SE-11）：\" class=\"headerlink\" title=\"Java 11（Java SE 11）：\"></a>Java 11（Java SE 11）：</h2><p>java直接运行</p>\n<pre><code>在以前的版本中，我们在命令提示下，需要先编译，生成class文件之后再运行\n</code></pre>\n<p>增加了HTTP客户端API<br>ZGC垃圾回收器<br>Epsilon垃圾回收器<br>String新增方法</p>\n<pre><code>isBlank方法，判断字符串长度是否为0，或者是否是空格，制表符等其他空白字符  \nstrip方法，可以去除首尾空格，与之前的trim的区别是还可以去除unicode编码的空白字符  \nrepeat方法，字符串重复的次数  \n</code></pre>\n<p>lambda表达式中的变量类型推断</p>\n<pre><code>允许在lambda表达式的参数中使用var修饰\n\nMyInterface mi = (var a,var b)-&gt;&#123;\n   System.out.println(a);\n   System.out.println(b);\n&#125;;\n</code></pre>\n<h2 id=\"Java-12（Java-SE-12）：\"><a href=\"#Java-12（Java-SE-12）：\" class=\"headerlink\" title=\"Java 12（Java SE 12）：\"></a>Java 12（Java SE 12）：</h2><p>增加了Switch表达式   </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">month</span> <span class=\"operator\">=</span> <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">switch</span> (month) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span> -&gt; System.out.println(<span class=\"string\">&quot;spring&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span> -&gt; System.out.println(<span class=\"string\">&quot;summer&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">9</span>,<span class=\"number\">10</span>,<span class=\"number\">11</span> -&gt; System.out.println(<span class=\"string\">&quot;autumn&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">12</span>, <span class=\"number\">1</span>,<span class=\"number\">2</span> -&gt; System.out.println(<span class=\"string\">&quot;winter&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">default</span> -&gt; System.out.println(<span class=\"string\">&quot;wrong&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>JVM常量API </p>\n<h2 id=\"Java-13（Java-SE-13）：\"><a href=\"#Java-13（Java-SE-13）：\" class=\"headerlink\" title=\"Java 13（Java SE 13）：\"></a>Java 13（Java SE 13）：</h2><p>Switch表达式增强 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">month</span> <span class=\"operator\">=</span> <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"keyword\">switch</span> (month) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span> -&gt; <span class=\"string\">&quot;spring&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span> -&gt; <span class=\"string\">&quot;summer&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">9</span>,<span class=\"number\">10</span>,<span class=\"number\">11</span> -&gt; <span class=\"string\">&quot;autumn&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">12</span>, <span class=\"number\">1</span>,<span class=\"number\">2</span> -&gt; <span class=\"string\">&quot;winter&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">default</span> -&gt; <span class=\"string\">&quot;wrong&quot;</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>增加了文本块  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">            Hello</span></span><br><span class=\"line\"><span class=\"string\">            World</span></span><br><span class=\"line\"><span class=\"string\">            Learn</span></span><br><span class=\"line\"><span class=\"string\">            Java</span></span><br><span class=\"line\"><span class=\"string\">           &quot;&quot;&quot;</span>;</span><br><span class=\"line\">  System.out.println(s);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Java-14（Java-SE-14）：\"><a href=\"#Java-14（Java-SE-14）：\" class=\"headerlink\" title=\"Java 14（Java SE 14）：\"></a>Java 14（Java SE 14）：</h2><p>增加了Records   </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">record</span> <span class=\"title class_\">User</span><span class=\"params\">(String name,Integer age)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<pre><code>记录类型有自动生成的成员，包括：\n\n状态描述中的每个组件都有对应的private final字段。状态描述中的每个组件都有对应的public访问方法。方法的名称与组件名称相同。一个包含全部组件的公开构造器，用来初始化对应组件。实现了equals()和hashCode()方法。equals()要求全部组件都必须相等。实现了toString()，输出全部组件的信息。\n</code></pre>\n<p>Pattern Matching for instanceof </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(obj <span class=\"keyword\">instanceof</span> Integer)&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Integer</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> (Integer)obj;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> i + <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\tSystem.out.println(i);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>友好的空指针（NullPointerException）提示</p>\n<pre><code>错误信息就可以明确的指出那个对象为null了。此外，还可以使用下面参数来查看:\n\njava -XX:+ShowCodeDetailsInExceptionMessages &lt;className&gt;\n</code></pre>\n<p>Sealed Classes密封类和接口</p>\n<pre><code>作用是限制一个类可以由哪些子类继承或者实现。\n\n如果指定模块的话，sealed class和其子类必须在同一个模块下。如果没有指定模块，则需要在同一个包下。sealed class指定的子类必须直接继承该sealed class。sealed class的子类要用final修饰。sealed class的子类如果不想用final修饰的话，可以将子类声明为sealed class\n</code></pre>\n<p>CharSequence新增的方法</p>\n<pre><code>该接口中新增了default方法isEmpty()，作用是判断CharSequence是否为空。\n</code></pre>\n<p>TreeMap新增方法</p>\n<pre><code>putIfAbsent\ncomputeIfAbsent\ncomputeIfPresent\ncomputemerge\n</code></pre>\n<h2 id=\"Java-15（Java-SE-15）：\"><a href=\"#Java-15（Java-SE-15）：\" class=\"headerlink\" title=\"Java 15（Java SE 15）：\"></a>Java 15（Java SE 15）：</h2><p>增加了Sealed Classes   </p>\n<p>Text Blocks增强 </p>\n<h2 id=\"Java-16（Java-SE-16）：\"><a href=\"#Java-16（Java-SE-16）：\" class=\"headerlink\" title=\"Java 16（Java SE 16）：\"></a>Java 16（Java SE 16）：</h2><p>增加了Records增强   </p>\n<p>Pattern Matching for switch</p>\n<p>新增日时段</p>\n<pre><code>在DateTimeFormatter.ofPattern传入B可以获取现在时间对应的日时段，上午，下午等\n</code></pre>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(DateTimeFormatter.ofPattern(<span class=\"string\">&quot;B&quot;</span>).format(LocalDateTime.now()));</span><br></pre></td></tr></table></figure>\n<p>InvocationHandler新增方法</p>\n<pre><code>在该接口中添加了下面方法\n</code></pre>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title function_\">invokeDefault</span><span class=\"params\">(Object proxy, Method method, Object... args)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Java-17-Java-SE-17\"><a href=\"#Java-17-Java-SE-17\" class=\"headerlink\" title=\"Java 17 (Java SE 17) :\"></a>Java 17 (Java SE 17) :</h2><p>instanceof模式匹配</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span>(a)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//如果a是Rabbit类型，则在强转之后赋值给r，然后再调用其特有的run方法</span></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> Rabbit r -&gt; r.run();</span><br><span class=\"line\">\t<span class=\"comment\">//如果a是Bird类型，则在强转之后赋值给b，然后调用其特有的fly方法</span></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> Bird b -&gt; b.fly();</span><br><span class=\"line\">\t<span class=\"comment\">//支持null的判断</span></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"literal\">null</span> -&gt; System.out.println(<span class=\"string\">&quot;null&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">default</span> -&gt; System.out.println(<span class=\"string\">&quot;no animal&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>伪随机数的变化</p>\n<p>增加了伪随机数相关的类和接口来让开发者使用stream流进行操作</p>\n<pre><code>RandomGenerator\nRandomGeneratorFactory\n</code></pre>\n<p>去除了AOT和JIT</p>\n<pre><code>AOT（Ahead-of-Time）是java9中新增的功能，可以先将应用中中的字节码编译成机器码。\n\nGraal编译器作为使用java开发的JIT（just-in-time ）即时编译器\n</code></pre>\n<h2 id=\"Java-18-Java-SE-18\"><a href=\"#Java-18-Java-SE-18\" class=\"headerlink\" title=\"Java 18 (Java SE 18) :\"></a>Java 18 (Java SE 18) :</h2><pre><code>从jdk18开始，默认使用UTF-8字符编码。我们可以通过如下参数修改其他字符编码：\n\n-Dfile.encoding=UTF-8 \n</code></pre>\n<p>简单的web服务器</p>\n<pre><code>可以通过jwebserver命令启动jdk18中提供的静态web服务器，可以利用该工具查看一些原型，做简单的测试。在命令提示符中输入jwebserver命令后会启动，然后在浏览器中输入:http://127.0.0.1:8000/ 即可看到当前命令提示符路径下的文件了。\n将被移除的方法\n</code></pre>\n<p>在jdk18中标记了Object中的finalize方法，Thread中的stop方法将在未来被移除。</p>\n<p>@snippet注解<br>    以前在文档注释中编写代码时需要添加code标签，使用较为不便，通过@snippet注解可以更方便的将文档注释中的代码展示在api文档中。</p>\n<h2 id=\"Java-19-Java-SE-19\"><a href=\"#Java-19-Java-SE-19\" class=\"headerlink\" title=\"Java 19 (Java SE 19) :\"></a>Java 19 (Java SE 19) :</h2><p>JEP 405 - Record 模式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">record</span> <span class=\"title class_\">Point</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printSum</span><span class=\"params\">(Object o)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (o <span class=\"keyword\">instanceof</span> <span class=\"title function_\">Point</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span>) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(x + y);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\tprintSum(<span class=\"keyword\">new</span> <span class=\"title class_\">Point</span>(<span class=\"number\">3</span>, <span class=\"number\">6</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>JEP 427 - switch 模式匹配</p>\n<pre><code>1.增强类型检查，case 表达式支持多种类型\t\n2.switch 表达式和语句分支全覆盖检测\n3.扩展了模式变量声明范围\n4.优化 null 处理，可以声明一个 null case\n</code></pre>\n<p>JEP 422 - Linux&#x2F;RISC-V 移植</p>\n<p>JEP 424 - 外部函数和内存 API </p>\n<pre><code>易用性：通过卓越的纯 Java 开发模型代替 JNI\n高性能：提供能与当前 JNI 和 sun.misc.Unsafe 相当甚至更优越的性能\n通用性：提供支持不同种类的外部内存（如本地内存、持久化内存和托管堆内存）的 API，并随着时间推移支持其他操作系统甚至其他语言编写的外部函数\n安全性：允许程序对外部内存执行不安全的操作，但默认警告用户此类操作\n\n分配外部内存：MemorySegment、MemoryAddress和SegmentAllocator\n操作和访问结构化的外部内存：MemoryLayout和VarHandle\n控制外部内存(分配和回收) ：MemorySession\n调用外部函数：Linker、FunctionDescriptor和SymbolLookup\n</code></pre>\n<p>JEP 426 - 向量 API</p>\n<p>JEP 425 - 虚拟线程</p>\n<p>JEP 428 - 结构化并发</p>\n<h2 id=\"Java-20-Java-SE-20\"><a href=\"#Java-20-Java-SE-20\" class=\"headerlink\" title=\"Java 20 (Java SE 20) :\"></a>Java 20 (Java SE 20) :</h2><p>JEP 429：作用域值（Scoped Values，孵化阶段）</p>\n<p>JEP 432：记录模式（Record Patterns，第二轮预览）</p>\n<p>JEP 433: switch的模式匹配（Pattern Matching for switch，第四轮预览）</p>\n<p>JEP 434：外部函数与内存API（Foreign Function &amp; Memory API，第二轮预览）</p>\n<p>JEP 436：虚拟线程（Virtual Threads，第二轮预览）</p>\n<p>JEP 437：结构化并发（Structured Concurrency，第二轮孵化）</p>\n<p>JEP 438：Vector API（第五轮孵化）</p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h2 id=\"基本特性\"><a href=\"#基本特性\" class=\"headerlink\" title=\"基本特性\"></a>基本特性</h2><p>Java语言的特性包括：</p>\n<ol>\n<li><p>简单易学：Java语言的语法与C++类似，但是去掉了一些复杂的特性，使得Java更加容易学习和使用。</p>\n</li>\n<li><p>面向对象：Java是一种纯面向对象的编程语言，所有的数据类型都是对象，所有的操作都是方法调用。</p>\n</li>\n<li><p>平台无关性：Java程序可以在不同的平台上运行，只需要安装相应的JVM即可。</p>\n</li>\n<li><p>安全性：Java提供了严格的安全机制，防止恶意代码对系统造成破坏。</p>\n</li>\n<li><p>自动内存管理：Java自动进行垃圾回收，程序员不需要手动管理内存。</p>\n</li>\n<li><p>多线程支持：Java提供了多线程支持，可以方便地实现并发编程。</p>\n</li>\n<li><p>异常处理：Java提供了异常处理机制，可以有效地处理程序中出现的错误。</p>\n</li>\n<li><p>开放性：Java是一种开放的编程语言，有大量的开源库和框架可供使用。</p>\n</li>\n<li><p>高性能：Java虚拟机（JVM）可以将字节码转换为本地机器码执行，具有较高的性能。</p>\n</li>\n<li><p>动态性：Java支持动态加载和卸载类，可以在运行时动态地修改程序行为。</p>\n</li>\n</ol>\n<h2 id=\"版本的新特性\"><a href=\"#版本的新特性\" class=\"headerlink\" title=\"版本的新特性\"></a>版本的新特性</h2><p>Java历代版本的新特性如下：</p>\n<h2 id=\"Java-1-0：\"><a href=\"#Java-1-0：\" class=\"headerlink\" title=\"Java 1.0：\"></a>Java 1.0：</h2><p>Java语言首次发布，包括基本的面向对象特性和网络编程API。</p>\n<h2 id=\"Java-1-1：\"><a href=\"#Java-1-1：\" class=\"headerlink\" title=\"Java 1.1：\"></a>Java 1.1：</h2><p>增加了内部类、反射、JAR文件格式等特性，并引入了AWT（Abstract Window Toolkit）图形用户界面库。</p>\n<h2 id=\"Java-1-2：\"><a href=\"#Java-1-2：\" class=\"headerlink\" title=\"Java 1.2：\"></a>Java 1.2：</h2><p>引入了Java虚拟机的HotSpot技术，提高了性能；增加了Swing图形用户界面库、集合框架、JavaBeans组件 </p>\n<h2 id=\"Java-1-3：\"><a href=\"#Java-1-3：\" class=\"headerlink\" title=\"Java 1.3：\"></a>Java 1.3：</h2><p>增加了JNDI（Java Naming and Directory Interface）<br>Java Sound API<br>JPDA（Java Platform Debugger Architecture）调试器 </p>\n<h2 id=\"Java-1-4：\"><a href=\"#Java-1-4：\" class=\"headerlink\" title=\"Java 1.4：\"></a>Java 1.4：</h2><p>增加了NIO（New Input&#x2F;Output）库<br>正则表达式支持<br>XML解析器 </p>\n<h2 id=\"Java-5-0（Java-SE-5）：\"><a href=\"#Java-5-0（Java-SE-5）：\" class=\"headerlink\" title=\"Java 5.0（Java SE 5）：\"></a>Java 5.0（Java SE 5）：</h2><p>引入了泛型<br>自动装箱&#x2F;拆箱<br>枚举类型<br>注解<br>可变参数 </p>\n<h2 id=\"Java-6（Java-SE-6）：\"><a href=\"#Java-6（Java-SE-6）：\" class=\"headerlink\" title=\"Java 6（Java SE 6）：\"></a>Java 6（Java SE 6）：</h2><p>增加了JDBC 4.0<br>JAX-WS 2.0<br>Java Compiler API等特性，并优化了JVM性能。</p>\n<h2 id=\"Java-7（Java-SE-7）：\"><a href=\"#Java-7（Java-SE-7）：\" class=\"headerlink\" title=\"Java 7（Java SE 7）：\"></a>Java 7（Java SE 7）：</h2><p>增加了switch语句支持字符串<br>二进制字面量<br>try-with-resources语句<br>Diamond操作符 </p>\n<h2 id=\"Java-8（Java-SE-8）：\"><a href=\"#Java-8（Java-SE-8）：\" class=\"headerlink\" title=\"Java 8（Java SE 8）：\"></a>Java 8（Java SE 8）：</h2><p>引入了Lambda表达式<br>Stream API<br>Date&#x2F;Time API<br>默认方法 </p>\n<h2 id=\"Java-9（Java-SE-9）：\"><a href=\"#Java-9（Java-SE-9）：\" class=\"headerlink\" title=\"Java 9（Java SE 9）：\"></a>Java 9（Java SE 9）：</h2><p>引入了模块化系统   </p>\n<pre><code>JDK9将JDK分成一组模块，可以在编译时或运行时进行组合。这样可以减少内存开销，只需必要的模块，并非全部模块，可以简化各种类库和大型应用的开发和维护。比如在使用java开发的时候通常用不到图形化界面的库，分模块之后，在java的base模块中没有这些图形化相关的内容，达到了一个瘦身的效果\n</code></pre>\n<p>接口私有方法    </p>\n<pre><code><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MyInterface</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//定义私有方法</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">m1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">&quot;123&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//default中调用</span></span><br><span class=\"line\"><span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title function_\">m2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<p>JShell交互式命令行工具  </p>\n<p>不能使用下划线命名变量</p>\n<p>String字符串的变化</p>\n<pre><code>jdk9中将String内部的char数组改成了byte数组，这样就节省了一半的内存占用\n</code></pre>\n<p>HTTP&#x2F;2客户端 </p>\n<p>改进的try with resource</p>\n<h2 id=\"Java-10（Java-SE-10）：\"><a href=\"#Java-10（Java-SE-10）：\" class=\"headerlink\" title=\"Java 10（Java SE 10）：\"></a>Java 10（Java SE 10）：</h2><p>增加了局部变量类型推断   </p>\n<pre><code>类型都可以使用var来代替，JVM会自动推断该变量是什么类型的\n</code></pre>\n<p>G1垃圾回收器改进</p>\n<h2 id=\"Java-11（Java-SE-11）：\"><a href=\"#Java-11（Java-SE-11）：\" class=\"headerlink\" title=\"Java 11（Java SE 11）：\"></a>Java 11（Java SE 11）：</h2><p>java直接运行</p>\n<pre><code>在以前的版本中，我们在命令提示下，需要先编译，生成class文件之后再运行\n</code></pre>\n<p>增加了HTTP客户端API<br>ZGC垃圾回收器<br>Epsilon垃圾回收器<br>String新增方法</p>\n<pre><code>isBlank方法，判断字符串长度是否为0，或者是否是空格，制表符等其他空白字符  \nstrip方法，可以去除首尾空格，与之前的trim的区别是还可以去除unicode编码的空白字符  \nrepeat方法，字符串重复的次数  \n</code></pre>\n<p>lambda表达式中的变量类型推断</p>\n<pre><code>允许在lambda表达式的参数中使用var修饰\n\nMyInterface mi = (var a,var b)-&gt;&#123;\n   System.out.println(a);\n   System.out.println(b);\n&#125;;\n</code></pre>\n<h2 id=\"Java-12（Java-SE-12）：\"><a href=\"#Java-12（Java-SE-12）：\" class=\"headerlink\" title=\"Java 12（Java SE 12）：\"></a>Java 12（Java SE 12）：</h2><p>增加了Switch表达式   </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">month</span> <span class=\"operator\">=</span> <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">switch</span> (month) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span> -&gt; System.out.println(<span class=\"string\">&quot;spring&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span> -&gt; System.out.println(<span class=\"string\">&quot;summer&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">9</span>,<span class=\"number\">10</span>,<span class=\"number\">11</span> -&gt; System.out.println(<span class=\"string\">&quot;autumn&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">12</span>, <span class=\"number\">1</span>,<span class=\"number\">2</span> -&gt; System.out.println(<span class=\"string\">&quot;winter&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">default</span> -&gt; System.out.println(<span class=\"string\">&quot;wrong&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>JVM常量API </p>\n<h2 id=\"Java-13（Java-SE-13）：\"><a href=\"#Java-13（Java-SE-13）：\" class=\"headerlink\" title=\"Java 13（Java SE 13）：\"></a>Java 13（Java SE 13）：</h2><p>Switch表达式增强 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">month</span> <span class=\"operator\">=</span> <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"keyword\">switch</span> (month) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span> -&gt; <span class=\"string\">&quot;spring&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span> -&gt; <span class=\"string\">&quot;summer&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">9</span>,<span class=\"number\">10</span>,<span class=\"number\">11</span> -&gt; <span class=\"string\">&quot;autumn&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">12</span>, <span class=\"number\">1</span>,<span class=\"number\">2</span> -&gt; <span class=\"string\">&quot;winter&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">default</span> -&gt; <span class=\"string\">&quot;wrong&quot;</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>增加了文本块  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">            Hello</span></span><br><span class=\"line\"><span class=\"string\">            World</span></span><br><span class=\"line\"><span class=\"string\">            Learn</span></span><br><span class=\"line\"><span class=\"string\">            Java</span></span><br><span class=\"line\"><span class=\"string\">           &quot;&quot;&quot;</span>;</span><br><span class=\"line\">  System.out.println(s);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Java-14（Java-SE-14）：\"><a href=\"#Java-14（Java-SE-14）：\" class=\"headerlink\" title=\"Java 14（Java SE 14）：\"></a>Java 14（Java SE 14）：</h2><p>增加了Records   </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">record</span> <span class=\"title class_\">User</span><span class=\"params\">(String name,Integer age)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<pre><code>记录类型有自动生成的成员，包括：\n\n状态描述中的每个组件都有对应的private final字段。状态描述中的每个组件都有对应的public访问方法。方法的名称与组件名称相同。一个包含全部组件的公开构造器，用来初始化对应组件。实现了equals()和hashCode()方法。equals()要求全部组件都必须相等。实现了toString()，输出全部组件的信息。\n</code></pre>\n<p>Pattern Matching for instanceof </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(obj <span class=\"keyword\">instanceof</span> Integer)&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Integer</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> (Integer)obj;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> i + <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\tSystem.out.println(i);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>友好的空指针（NullPointerException）提示</p>\n<pre><code>错误信息就可以明确的指出那个对象为null了。此外，还可以使用下面参数来查看:\n\njava -XX:+ShowCodeDetailsInExceptionMessages &lt;className&gt;\n</code></pre>\n<p>Sealed Classes密封类和接口</p>\n<pre><code>作用是限制一个类可以由哪些子类继承或者实现。\n\n如果指定模块的话，sealed class和其子类必须在同一个模块下。如果没有指定模块，则需要在同一个包下。sealed class指定的子类必须直接继承该sealed class。sealed class的子类要用final修饰。sealed class的子类如果不想用final修饰的话，可以将子类声明为sealed class\n</code></pre>\n<p>CharSequence新增的方法</p>\n<pre><code>该接口中新增了default方法isEmpty()，作用是判断CharSequence是否为空。\n</code></pre>\n<p>TreeMap新增方法</p>\n<pre><code>putIfAbsent\ncomputeIfAbsent\ncomputeIfPresent\ncomputemerge\n</code></pre>\n<h2 id=\"Java-15（Java-SE-15）：\"><a href=\"#Java-15（Java-SE-15）：\" class=\"headerlink\" title=\"Java 15（Java SE 15）：\"></a>Java 15（Java SE 15）：</h2><p>增加了Sealed Classes   </p>\n<p>Text Blocks增强 </p>\n<h2 id=\"Java-16（Java-SE-16）：\"><a href=\"#Java-16（Java-SE-16）：\" class=\"headerlink\" title=\"Java 16（Java SE 16）：\"></a>Java 16（Java SE 16）：</h2><p>增加了Records增强   </p>\n<p>Pattern Matching for switch</p>\n<p>新增日时段</p>\n<pre><code>在DateTimeFormatter.ofPattern传入B可以获取现在时间对应的日时段，上午，下午等\n</code></pre>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(DateTimeFormatter.ofPattern(<span class=\"string\">&quot;B&quot;</span>).format(LocalDateTime.now()));</span><br></pre></td></tr></table></figure>\n<p>InvocationHandler新增方法</p>\n<pre><code>在该接口中添加了下面方法\n</code></pre>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title function_\">invokeDefault</span><span class=\"params\">(Object proxy, Method method, Object... args)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Java-17-Java-SE-17\"><a href=\"#Java-17-Java-SE-17\" class=\"headerlink\" title=\"Java 17 (Java SE 17) :\"></a>Java 17 (Java SE 17) :</h2><p>instanceof模式匹配</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span>(a)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//如果a是Rabbit类型，则在强转之后赋值给r，然后再调用其特有的run方法</span></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> Rabbit r -&gt; r.run();</span><br><span class=\"line\">\t<span class=\"comment\">//如果a是Bird类型，则在强转之后赋值给b，然后调用其特有的fly方法</span></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> Bird b -&gt; b.fly();</span><br><span class=\"line\">\t<span class=\"comment\">//支持null的判断</span></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"literal\">null</span> -&gt; System.out.println(<span class=\"string\">&quot;null&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">default</span> -&gt; System.out.println(<span class=\"string\">&quot;no animal&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>伪随机数的变化</p>\n<p>增加了伪随机数相关的类和接口来让开发者使用stream流进行操作</p>\n<pre><code>RandomGenerator\nRandomGeneratorFactory\n</code></pre>\n<p>去除了AOT和JIT</p>\n<pre><code>AOT（Ahead-of-Time）是java9中新增的功能，可以先将应用中中的字节码编译成机器码。\n\nGraal编译器作为使用java开发的JIT（just-in-time ）即时编译器\n</code></pre>\n<h2 id=\"Java-18-Java-SE-18\"><a href=\"#Java-18-Java-SE-18\" class=\"headerlink\" title=\"Java 18 (Java SE 18) :\"></a>Java 18 (Java SE 18) :</h2><pre><code>从jdk18开始，默认使用UTF-8字符编码。我们可以通过如下参数修改其他字符编码：\n\n-Dfile.encoding=UTF-8 \n</code></pre>\n<p>简单的web服务器</p>\n<pre><code>可以通过jwebserver命令启动jdk18中提供的静态web服务器，可以利用该工具查看一些原型，做简单的测试。在命令提示符中输入jwebserver命令后会启动，然后在浏览器中输入:http://127.0.0.1:8000/ 即可看到当前命令提示符路径下的文件了。\n将被移除的方法\n</code></pre>\n<p>在jdk18中标记了Object中的finalize方法，Thread中的stop方法将在未来被移除。</p>\n<p>@snippet注解<br>    以前在文档注释中编写代码时需要添加code标签，使用较为不便，通过@snippet注解可以更方便的将文档注释中的代码展示在api文档中。</p>\n<h2 id=\"Java-19-Java-SE-19\"><a href=\"#Java-19-Java-SE-19\" class=\"headerlink\" title=\"Java 19 (Java SE 19) :\"></a>Java 19 (Java SE 19) :</h2><p>JEP 405 - Record 模式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">record</span> <span class=\"title class_\">Point</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printSum</span><span class=\"params\">(Object o)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (o <span class=\"keyword\">instanceof</span> <span class=\"title function_\">Point</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span>) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(x + y);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\tprintSum(<span class=\"keyword\">new</span> <span class=\"title class_\">Point</span>(<span class=\"number\">3</span>, <span class=\"number\">6</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>JEP 427 - switch 模式匹配</p>\n<pre><code>1.增强类型检查，case 表达式支持多种类型\t\n2.switch 表达式和语句分支全覆盖检测\n3.扩展了模式变量声明范围\n4.优化 null 处理，可以声明一个 null case\n</code></pre>\n<p>JEP 422 - Linux&#x2F;RISC-V 移植</p>\n<p>JEP 424 - 外部函数和内存 API </p>\n<pre><code>易用性：通过卓越的纯 Java 开发模型代替 JNI\n高性能：提供能与当前 JNI 和 sun.misc.Unsafe 相当甚至更优越的性能\n通用性：提供支持不同种类的外部内存（如本地内存、持久化内存和托管堆内存）的 API，并随着时间推移支持其他操作系统甚至其他语言编写的外部函数\n安全性：允许程序对外部内存执行不安全的操作，但默认警告用户此类操作\n\n分配外部内存：MemorySegment、MemoryAddress和SegmentAllocator\n操作和访问结构化的外部内存：MemoryLayout和VarHandle\n控制外部内存(分配和回收) ：MemorySession\n调用外部函数：Linker、FunctionDescriptor和SymbolLookup\n</code></pre>\n<p>JEP 426 - 向量 API</p>\n<p>JEP 425 - 虚拟线程</p>\n<p>JEP 428 - 结构化并发</p>\n<h2 id=\"Java-20-Java-SE-20\"><a href=\"#Java-20-Java-SE-20\" class=\"headerlink\" title=\"Java 20 (Java SE 20) :\"></a>Java 20 (Java SE 20) :</h2><p>JEP 429：作用域值（Scoped Values，孵化阶段）</p>\n<p>JEP 432：记录模式（Record Patterns，第二轮预览）</p>\n<p>JEP 433: switch的模式匹配（Pattern Matching for switch，第四轮预览）</p>\n<p>JEP 434：外部函数与内存API（Foreign Function &amp; Memory API，第二轮预览）</p>\n<p>JEP 436：虚拟线程（Virtual Threads，第二轮预览）</p>\n<p>JEP 437：结构化并发（Structured Concurrency，第二轮孵化）</p>\n<p>JEP 438：Vector API（第五轮孵化）</p>\n"},{"title":"Java实现文件上传下载","date":"2023-05-28T12:43:05.000Z","_content":"\n#  Java实现文件上传下载\n\n## 开始之前\n\n使用Linux，比较麻烦的一点就是和手机共享文件（下载电脑上的，上传手机上的），\n\n目前存在的选择有：\n\n1. QQ,微信   \n    优点：简单，安装即用  \n    缺点：基于wine,慢,不稳定容易崩溃  \n2. Kde connection  \n    优点：功能强大  \n    缺点：依赖多，不稳定（连接不上），仅限于局域网  \n\n所以我就想用Java实现一个文件上传下载的小工具\n\n## 简单的需求\n\n1. 启动程序会打开一个网页\n2. 网页显示二维码，手机浏览器扫描二维码在手机上打开相同网页\n3. 网页分为 \"文件上传\" 和 \"文件下载\" 两个部分\n4. \"文件上传\" 用户选择手机上的文件上传\n5. \"文件下载\" 显示电脑上的文件，并提供下载\n\n## 设计\n\n我想的是使用快速原型，先实现基本的需求（文件上传和下载）\n再在基础功能上添加新的功能或者使得程序更易用\n\n为了简单起见，我使用 SpringBoot 作为开发框架，\n我想想让程序能跑起来，再把它变得轻量快速\n\n程序使用 MVC 架构\n\nV ：\n1. 负责和用户交互，提供文件上传下载的接口\n2. 异步获取二维码\n\nC ：\n1. 处理文件上传下载\n\nM :\n1. 生成二维码\n\n\n## 实现\n\n## 结果","source":"_posts/Java实现文件上传下载.md","raw":"---\ntitle: Java实现文件上传下载\ndate: 2023-05-28 20:43:05\ntags: Java\n---\n\n#  Java实现文件上传下载\n\n## 开始之前\n\n使用Linux，比较麻烦的一点就是和手机共享文件（下载电脑上的，上传手机上的），\n\n目前存在的选择有：\n\n1. QQ,微信   \n    优点：简单，安装即用  \n    缺点：基于wine,慢,不稳定容易崩溃  \n2. Kde connection  \n    优点：功能强大  \n    缺点：依赖多，不稳定（连接不上），仅限于局域网  \n\n所以我就想用Java实现一个文件上传下载的小工具\n\n## 简单的需求\n\n1. 启动程序会打开一个网页\n2. 网页显示二维码，手机浏览器扫描二维码在手机上打开相同网页\n3. 网页分为 \"文件上传\" 和 \"文件下载\" 两个部分\n4. \"文件上传\" 用户选择手机上的文件上传\n5. \"文件下载\" 显示电脑上的文件，并提供下载\n\n## 设计\n\n我想的是使用快速原型，先实现基本的需求（文件上传和下载）\n再在基础功能上添加新的功能或者使得程序更易用\n\n为了简单起见，我使用 SpringBoot 作为开发框架，\n我想想让程序能跑起来，再把它变得轻量快速\n\n程序使用 MVC 架构\n\nV ：\n1. 负责和用户交互，提供文件上传下载的接口\n2. 异步获取二维码\n\nC ：\n1. 处理文件上传下载\n\nM :\n1. 生成二维码\n\n\n## 实现\n\n## 结果","slug":"Java实现文件上传下载","published":1,"updated":"2023-05-28T13:18:04.771Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5ug001flv9e7o85cjcs","content":"<h1 id=\"Java实现文件上传下载\"><a href=\"#Java实现文件上传下载\" class=\"headerlink\" title=\"Java实现文件上传下载\"></a>Java实现文件上传下载</h1><h2 id=\"开始之前\"><a href=\"#开始之前\" class=\"headerlink\" title=\"开始之前\"></a>开始之前</h2><p>使用Linux，比较麻烦的一点就是和手机共享文件（下载电脑上的，上传手机上的），</p>\n<p>目前存在的选择有：</p>\n<ol>\n<li>QQ,微信<br> 优点：简单，安装即用<br> 缺点：基于wine,慢,不稳定容易崩溃  </li>\n<li>Kde connection<br> 优点：功能强大<br> 缺点：依赖多，不稳定（连接不上），仅限于局域网</li>\n</ol>\n<p>所以我就想用Java实现一个文件上传下载的小工具</p>\n<h2 id=\"简单的需求\"><a href=\"#简单的需求\" class=\"headerlink\" title=\"简单的需求\"></a>简单的需求</h2><ol>\n<li>启动程序会打开一个网页</li>\n<li>网页显示二维码，手机浏览器扫描二维码在手机上打开相同网页</li>\n<li>网页分为 “文件上传” 和 “文件下载” 两个部分</li>\n<li>“文件上传” 用户选择手机上的文件上传</li>\n<li>“文件下载” 显示电脑上的文件，并提供下载</li>\n</ol>\n<h2 id=\"设计\"><a href=\"#设计\" class=\"headerlink\" title=\"设计\"></a>设计</h2><p>我想的是使用快速原型，先实现基本的需求（文件上传和下载）<br>再在基础功能上添加新的功能或者使得程序更易用</p>\n<p>为了简单起见，我使用 SpringBoot 作为开发框架，<br>我想想让程序能跑起来，再把它变得轻量快速</p>\n<p>程序使用 MVC 架构</p>\n<p>V ：</p>\n<ol>\n<li>负责和用户交互，提供文件上传下载的接口</li>\n<li>异步获取二维码</li>\n</ol>\n<p>C ：</p>\n<ol>\n<li>处理文件上传下载</li>\n</ol>\n<p>M :</p>\n<ol>\n<li>生成二维码</li>\n</ol>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2>","site":{"data":{}},"cover":false,"excerpt":"","more":"<h1 id=\"Java实现文件上传下载\"><a href=\"#Java实现文件上传下载\" class=\"headerlink\" title=\"Java实现文件上传下载\"></a>Java实现文件上传下载</h1><h2 id=\"开始之前\"><a href=\"#开始之前\" class=\"headerlink\" title=\"开始之前\"></a>开始之前</h2><p>使用Linux，比较麻烦的一点就是和手机共享文件（下载电脑上的，上传手机上的），</p>\n<p>目前存在的选择有：</p>\n<ol>\n<li>QQ,微信<br> 优点：简单，安装即用<br> 缺点：基于wine,慢,不稳定容易崩溃  </li>\n<li>Kde connection<br> 优点：功能强大<br> 缺点：依赖多，不稳定（连接不上），仅限于局域网</li>\n</ol>\n<p>所以我就想用Java实现一个文件上传下载的小工具</p>\n<h2 id=\"简单的需求\"><a href=\"#简单的需求\" class=\"headerlink\" title=\"简单的需求\"></a>简单的需求</h2><ol>\n<li>启动程序会打开一个网页</li>\n<li>网页显示二维码，手机浏览器扫描二维码在手机上打开相同网页</li>\n<li>网页分为 “文件上传” 和 “文件下载” 两个部分</li>\n<li>“文件上传” 用户选择手机上的文件上传</li>\n<li>“文件下载” 显示电脑上的文件，并提供下载</li>\n</ol>\n<h2 id=\"设计\"><a href=\"#设计\" class=\"headerlink\" title=\"设计\"></a>设计</h2><p>我想的是使用快速原型，先实现基本的需求（文件上传和下载）<br>再在基础功能上添加新的功能或者使得程序更易用</p>\n<p>为了简单起见，我使用 SpringBoot 作为开发框架，<br>我想想让程序能跑起来，再把它变得轻量快速</p>\n<p>程序使用 MVC 架构</p>\n<p>V ：</p>\n<ol>\n<li>负责和用户交互，提供文件上传下载的接口</li>\n<li>异步获取二维码</li>\n</ol>\n<p>C ：</p>\n<ol>\n<li>处理文件上传下载</li>\n</ol>\n<p>M :</p>\n<ol>\n<li>生成二维码</li>\n</ol>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2>"},{"title":"Jenkins Gitlab","date":"2023-03-06T09:52:31.000Z","_content":"\n## Docker 安装 Jenkins\n\n```bash\ndocker run \\\n-d \\\n-uroot \\\n-p 9090:8080 \\\n-p 50000:50000 \\\n--name jenkins \\\n-v ~/.jenkins_home:/var/jenkins_home \\\n-v /etc/localtime:/etc/localtime \\\njenkins/jenkins\n```\n\n## Docker 安装 Gitlab\n\n```bash\nsudo docker run --detach \\\n  --hostname gitlab.quanwei.vip \\\n  --publish 443:443 --publish 80:80 --publish 22:22 \\\n  --name gitlab \\\n  --restart always \\\n  --volume ~/.gitlab/config:/etc/gitlab \\\n  --volume ~/.gitlab/logs:/var/log/gitlab \\\n  --volume ~/.gitlab/data:/var/opt/gitlab \\\n  gitlab/gitlab-ce:latest\n```\n\n","source":"_posts/Jenkins-Gitlab.md","raw":"---\ntitle: Jenkins Gitlab\ndate: 2023-03-06 17:52:31\ntags: \n- Linux\n- Jenkins\n- Gitlab\n---\n\n## Docker 安装 Jenkins\n\n```bash\ndocker run \\\n-d \\\n-uroot \\\n-p 9090:8080 \\\n-p 50000:50000 \\\n--name jenkins \\\n-v ~/.jenkins_home:/var/jenkins_home \\\n-v /etc/localtime:/etc/localtime \\\njenkins/jenkins\n```\n\n## Docker 安装 Gitlab\n\n```bash\nsudo docker run --detach \\\n  --hostname gitlab.quanwei.vip \\\n  --publish 443:443 --publish 80:80 --publish 22:22 \\\n  --name gitlab \\\n  --restart always \\\n  --volume ~/.gitlab/config:/etc/gitlab \\\n  --volume ~/.gitlab/logs:/var/log/gitlab \\\n  --volume ~/.gitlab/data:/var/opt/gitlab \\\n  gitlab/gitlab-ce:latest\n```\n\n","slug":"Jenkins-Gitlab","published":1,"updated":"2023-06-23T01:02:41.691Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5ug001glv9e57g5h3ll","content":"<h2 id=\"Docker-安装-Jenkins\"><a href=\"#Docker-安装-Jenkins\" class=\"headerlink\" title=\"Docker 安装 Jenkins\"></a>Docker 安装 Jenkins</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run \\</span><br><span class=\"line\">-d \\</span><br><span class=\"line\">-uroot \\</span><br><span class=\"line\">-p 9090:8080 \\</span><br><span class=\"line\">-p 50000:50000 \\</span><br><span class=\"line\">--name jenkins \\</span><br><span class=\"line\">-v ~/.jenkins_home:/var/jenkins_home \\</span><br><span class=\"line\">-v /etc/localtime:/etc/localtime \\</span><br><span class=\"line\">jenkins/jenkins</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Docker-安装-Gitlab\"><a href=\"#Docker-安装-Gitlab\" class=\"headerlink\" title=\"Docker 安装 Gitlab\"></a>Docker 安装 Gitlab</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run --detach \\</span><br><span class=\"line\">  --hostname gitlab.quanwei.vip \\</span><br><span class=\"line\">  --publish 443:443 --publish 80:80 --publish 22:22 \\</span><br><span class=\"line\">  --name gitlab \\</span><br><span class=\"line\">  --restart always \\</span><br><span class=\"line\">  --volume ~/.gitlab/config:/etc/gitlab \\</span><br><span class=\"line\">  --volume ~/.gitlab/logs:/var/log/gitlab \\</span><br><span class=\"line\">  --volume ~/.gitlab/data:/var/opt/gitlab \\</span><br><span class=\"line\">  gitlab/gitlab-ce:latest</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h2 id=\"Docker-安装-Jenkins\"><a href=\"#Docker-安装-Jenkins\" class=\"headerlink\" title=\"Docker 安装 Jenkins\"></a>Docker 安装 Jenkins</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run \\</span><br><span class=\"line\">-d \\</span><br><span class=\"line\">-uroot \\</span><br><span class=\"line\">-p 9090:8080 \\</span><br><span class=\"line\">-p 50000:50000 \\</span><br><span class=\"line\">--name jenkins \\</span><br><span class=\"line\">-v ~/.jenkins_home:/var/jenkins_home \\</span><br><span class=\"line\">-v /etc/localtime:/etc/localtime \\</span><br><span class=\"line\">jenkins/jenkins</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Docker-安装-Gitlab\"><a href=\"#Docker-安装-Gitlab\" class=\"headerlink\" title=\"Docker 安装 Gitlab\"></a>Docker 安装 Gitlab</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run --detach \\</span><br><span class=\"line\">  --hostname gitlab.quanwei.vip \\</span><br><span class=\"line\">  --publish 443:443 --publish 80:80 --publish 22:22 \\</span><br><span class=\"line\">  --name gitlab \\</span><br><span class=\"line\">  --restart always \\</span><br><span class=\"line\">  --volume ~/.gitlab/config:/etc/gitlab \\</span><br><span class=\"line\">  --volume ~/.gitlab/logs:/var/log/gitlab \\</span><br><span class=\"line\">  --volume ~/.gitlab/data:/var/opt/gitlab \\</span><br><span class=\"line\">  gitlab/gitlab-ce:latest</span><br></pre></td></tr></table></figure>\n\n"},{"title":"KeyCloak - Open Source Identity and Access Management","date":"2023-08-02T09:55:57.000Z","cover":"2023/08/02/KeyCloak/2023-08-02-17-57-00.png","_content":"\n## Docker 安装\n\n```\ndocker run --name keycloak -p 8001:8080 -e KEYCLOAK_ADMIN=admin -e KEYCLOAK_ADMIN_PASSWORD=021009 quay.io/keycloak/keycloak:22.0.1 start-dev\n```\n\n## 登录管理控制台\n\n转到 [Keycloak 管理控制台](localhost:8000)。\n\n使用之前创建的用户名和密码登录。\n\n## 创建领域(realm)\n\nKeycloak 中的领域等效于租户。每个领域都允许管理员创建独立的应用程序和用户组。\n最初，Keycloak 包括一个 master 领域。此领域仅用于管理 Keycloak，而不用于管理任何应用程序。\n\n使用以下步骤创建第一个领域。\n\n打开 Keycloak 管理控制台。\n\n点按左上角的单词 master，然后点按“创建领域”。\n\n在领域名称字段中输入: myrealm\n\n单击创建。\n![](2023-08-02-18-02-37.png)\n\n## 创建用户\n\n最初，领域没有用户。使用以下步骤创建用户：\n\n打开 Keycloak 管理控制台。\n\n单击左侧菜单中的用户。\n\n单击创建新用户。\n\n使用以下值填写表单：\n\n用户名：myuser\n\n名字：任何名字\n\n姓氏：任何姓氏\n\n单击创建。\n\n![](2023-08-02-18-03-04.png)\n\n此用户需要密码才能登录。要设置初始密码：\n\n单击页面顶部的凭据。\n\n使用密码填写“设置密码”表单。\n\n将“临时”切换为“关闭”，以便用户在首次登录时无需更新此密码。\n\n![](2023-08-02-18-03-23.png)\n\n## 登录账户控制台\n\n您现在可以登录到帐户控制台以验证此用户是否已正确配置。\n\n打开Keycloak帐户控制台。\n\n使用您之前创建的密码登录。myuser\n\n作为账户控制台中的用户，您可以管理您的账户，包括修改您的个人资料、添加双因素身份验证以及包括身份提供商账户。\n\n![](2023-08-02-18-04-00.png)\n\n## 保护第一个应用程序\n\n要保护第一个应用程序，首先将应用程序注册到 Keycloak 实例：\n\n打开 Keycloak 管理控制台。\n\n单击“客户端”。\n\n单击“创建客户端”\n\n使用以下值填写表单：\n\n客户端类型：OpenID Connect\n\n客户端 ID：myclient\n\n单击下一步\n\n确认已启用标准流。\n\n单击保存。\n![](2023-08-02-18-04-29.png)\n\n创建客户端后，对客户端进行以下更新：\n\n向下滚动到“访问设置”。\n\n将有效重定向 URI 设置为https://www.keycloak.org/app/*\n\n将 Web 源设置为https://www.keycloak.org\n\n单击保存。\n\n![](2023-08-02-18-04-49.png)\n\n要确认客户端已成功创建，您可以使用Keycloak网站上的SPA测试应用程序。\n\n打开 https://www.keycloak.org/app/。\n\n单击保存以使用默认配置。\n\n单击“登录”以使用之前启动的 Keycloak 服务器对此应用程序进行身份验证。\n\n","source":"_posts/KeyCloak.md","raw":"---\ntitle: KeyCloak - Open Source Identity and Access Management\ntags: \n- KeyCloak \n- Identity\ndate: 2023-08-02 17:55:57\ncover: 2023-08-02-17-57-00.png\n---\n\n## Docker 安装\n\n```\ndocker run --name keycloak -p 8001:8080 -e KEYCLOAK_ADMIN=admin -e KEYCLOAK_ADMIN_PASSWORD=021009 quay.io/keycloak/keycloak:22.0.1 start-dev\n```\n\n## 登录管理控制台\n\n转到 [Keycloak 管理控制台](localhost:8000)。\n\n使用之前创建的用户名和密码登录。\n\n## 创建领域(realm)\n\nKeycloak 中的领域等效于租户。每个领域都允许管理员创建独立的应用程序和用户组。\n最初，Keycloak 包括一个 master 领域。此领域仅用于管理 Keycloak，而不用于管理任何应用程序。\n\n使用以下步骤创建第一个领域。\n\n打开 Keycloak 管理控制台。\n\n点按左上角的单词 master，然后点按“创建领域”。\n\n在领域名称字段中输入: myrealm\n\n单击创建。\n![](2023-08-02-18-02-37.png)\n\n## 创建用户\n\n最初，领域没有用户。使用以下步骤创建用户：\n\n打开 Keycloak 管理控制台。\n\n单击左侧菜单中的用户。\n\n单击创建新用户。\n\n使用以下值填写表单：\n\n用户名：myuser\n\n名字：任何名字\n\n姓氏：任何姓氏\n\n单击创建。\n\n![](2023-08-02-18-03-04.png)\n\n此用户需要密码才能登录。要设置初始密码：\n\n单击页面顶部的凭据。\n\n使用密码填写“设置密码”表单。\n\n将“临时”切换为“关闭”，以便用户在首次登录时无需更新此密码。\n\n![](2023-08-02-18-03-23.png)\n\n## 登录账户控制台\n\n您现在可以登录到帐户控制台以验证此用户是否已正确配置。\n\n打开Keycloak帐户控制台。\n\n使用您之前创建的密码登录。myuser\n\n作为账户控制台中的用户，您可以管理您的账户，包括修改您的个人资料、添加双因素身份验证以及包括身份提供商账户。\n\n![](2023-08-02-18-04-00.png)\n\n## 保护第一个应用程序\n\n要保护第一个应用程序，首先将应用程序注册到 Keycloak 实例：\n\n打开 Keycloak 管理控制台。\n\n单击“客户端”。\n\n单击“创建客户端”\n\n使用以下值填写表单：\n\n客户端类型：OpenID Connect\n\n客户端 ID：myclient\n\n单击下一步\n\n确认已启用标准流。\n\n单击保存。\n![](2023-08-02-18-04-29.png)\n\n创建客户端后，对客户端进行以下更新：\n\n向下滚动到“访问设置”。\n\n将有效重定向 URI 设置为https://www.keycloak.org/app/*\n\n将 Web 源设置为https://www.keycloak.org\n\n单击保存。\n\n![](2023-08-02-18-04-49.png)\n\n要确认客户端已成功创建，您可以使用Keycloak网站上的SPA测试应用程序。\n\n打开 https://www.keycloak.org/app/。\n\n单击保存以使用默认配置。\n\n单击“登录”以使用之前启动的 Keycloak 服务器对此应用程序进行身份验证。\n\n","slug":"KeyCloak","published":1,"updated":"2023-08-02T10:47:45.555Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5ug001ilv9e4s749fmx","content":"<h2 id=\"Docker-安装\"><a href=\"#Docker-安装\" class=\"headerlink\" title=\"Docker 安装\"></a>Docker 安装</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name keycloak -p 8001:8080 -e KEYCLOAK_ADMIN=admin -e KEYCLOAK_ADMIN_PASSWORD=021009 quay.io/keycloak/keycloak:22.0.1 start-dev</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"登录管理控制台\"><a href=\"#登录管理控制台\" class=\"headerlink\" title=\"登录管理控制台\"></a>登录管理控制台</h2><p>转到 <a href=\"localhost:8000\">Keycloak 管理控制台</a>。</p>\n<p>使用之前创建的用户名和密码登录。</p>\n<h2 id=\"创建领域-realm\"><a href=\"#创建领域-realm\" class=\"headerlink\" title=\"创建领域(realm)\"></a>创建领域(realm)</h2><p>Keycloak 中的领域等效于租户。每个领域都允许管理员创建独立的应用程序和用户组。<br>最初，Keycloak 包括一个 master 领域。此领域仅用于管理 Keycloak，而不用于管理任何应用程序。</p>\n<p>使用以下步骤创建第一个领域。</p>\n<p>打开 Keycloak 管理控制台。</p>\n<p>点按左上角的单词 master，然后点按“创建领域”。</p>\n<p>在领域名称字段中输入: myrealm</p>\n<p>单击创建。<br><img src=\"/2023/08/02/KeyCloak/2023-08-02-18-02-37.png\"></p>\n<h2 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h2><p>最初，领域没有用户。使用以下步骤创建用户：</p>\n<p>打开 Keycloak 管理控制台。</p>\n<p>单击左侧菜单中的用户。</p>\n<p>单击创建新用户。</p>\n<p>使用以下值填写表单：</p>\n<p>用户名：myuser</p>\n<p>名字：任何名字</p>\n<p>姓氏：任何姓氏</p>\n<p>单击创建。</p>\n<p><img src=\"/2023/08/02/KeyCloak/2023-08-02-18-03-04.png\"></p>\n<p>此用户需要密码才能登录。要设置初始密码：</p>\n<p>单击页面顶部的凭据。</p>\n<p>使用密码填写“设置密码”表单。</p>\n<p>将“临时”切换为“关闭”，以便用户在首次登录时无需更新此密码。</p>\n<p><img src=\"/2023/08/02/KeyCloak/2023-08-02-18-03-23.png\"></p>\n<h2 id=\"登录账户控制台\"><a href=\"#登录账户控制台\" class=\"headerlink\" title=\"登录账户控制台\"></a>登录账户控制台</h2><p>您现在可以登录到帐户控制台以验证此用户是否已正确配置。</p>\n<p>打开Keycloak帐户控制台。</p>\n<p>使用您之前创建的密码登录。myuser</p>\n<p>作为账户控制台中的用户，您可以管理您的账户，包括修改您的个人资料、添加双因素身份验证以及包括身份提供商账户。</p>\n<p><img src=\"/2023/08/02/KeyCloak/2023-08-02-18-04-00.png\"></p>\n<h2 id=\"保护第一个应用程序\"><a href=\"#保护第一个应用程序\" class=\"headerlink\" title=\"保护第一个应用程序\"></a>保护第一个应用程序</h2><p>要保护第一个应用程序，首先将应用程序注册到 Keycloak 实例：</p>\n<p>打开 Keycloak 管理控制台。</p>\n<p>单击“客户端”。</p>\n<p>单击“创建客户端”</p>\n<p>使用以下值填写表单：</p>\n<p>客户端类型：OpenID Connect</p>\n<p>客户端 ID：myclient</p>\n<p>单击下一步</p>\n<p>确认已启用标准流。</p>\n<p>单击保存。<br><img src=\"/2023/08/02/KeyCloak/2023-08-02-18-04-29.png\"></p>\n<p>创建客户端后，对客户端进行以下更新：</p>\n<p>向下滚动到“访问设置”。</p>\n<p>将有效重定向 URI 设置为<a href=\"https://www.keycloak.org/app/\">https://www.keycloak.org/app/</a>*</p>\n<p>将 Web 源设置为<a href=\"https://www.keycloak.org/\">https://www.keycloak.org</a></p>\n<p>单击保存。</p>\n<p><img src=\"/2023/08/02/KeyCloak/2023-08-02-18-04-49.png\"></p>\n<p>要确认客户端已成功创建，您可以使用Keycloak网站上的SPA测试应用程序。</p>\n<p>打开 <a href=\"https://www.keycloak.org/app/%E3%80%82\">https://www.keycloak.org/app/。</a></p>\n<p>单击保存以使用默认配置。</p>\n<p>单击“登录”以使用之前启动的 Keycloak 服务器对此应用程序进行身份验证。</p>\n","site":{"data":{}},"cover_type":"img","excerpt":"","more":"<h2 id=\"Docker-安装\"><a href=\"#Docker-安装\" class=\"headerlink\" title=\"Docker 安装\"></a>Docker 安装</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name keycloak -p 8001:8080 -e KEYCLOAK_ADMIN=admin -e KEYCLOAK_ADMIN_PASSWORD=021009 quay.io/keycloak/keycloak:22.0.1 start-dev</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"登录管理控制台\"><a href=\"#登录管理控制台\" class=\"headerlink\" title=\"登录管理控制台\"></a>登录管理控制台</h2><p>转到 <a href=\"localhost:8000\">Keycloak 管理控制台</a>。</p>\n<p>使用之前创建的用户名和密码登录。</p>\n<h2 id=\"创建领域-realm\"><a href=\"#创建领域-realm\" class=\"headerlink\" title=\"创建领域(realm)\"></a>创建领域(realm)</h2><p>Keycloak 中的领域等效于租户。每个领域都允许管理员创建独立的应用程序和用户组。<br>最初，Keycloak 包括一个 master 领域。此领域仅用于管理 Keycloak，而不用于管理任何应用程序。</p>\n<p>使用以下步骤创建第一个领域。</p>\n<p>打开 Keycloak 管理控制台。</p>\n<p>点按左上角的单词 master，然后点按“创建领域”。</p>\n<p>在领域名称字段中输入: myrealm</p>\n<p>单击创建。<br><img src=\"/2023/08/02/KeyCloak/2023-08-02-18-02-37.png\"></p>\n<h2 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h2><p>最初，领域没有用户。使用以下步骤创建用户：</p>\n<p>打开 Keycloak 管理控制台。</p>\n<p>单击左侧菜单中的用户。</p>\n<p>单击创建新用户。</p>\n<p>使用以下值填写表单：</p>\n<p>用户名：myuser</p>\n<p>名字：任何名字</p>\n<p>姓氏：任何姓氏</p>\n<p>单击创建。</p>\n<p><img src=\"/2023/08/02/KeyCloak/2023-08-02-18-03-04.png\"></p>\n<p>此用户需要密码才能登录。要设置初始密码：</p>\n<p>单击页面顶部的凭据。</p>\n<p>使用密码填写“设置密码”表单。</p>\n<p>将“临时”切换为“关闭”，以便用户在首次登录时无需更新此密码。</p>\n<p><img src=\"/2023/08/02/KeyCloak/2023-08-02-18-03-23.png\"></p>\n<h2 id=\"登录账户控制台\"><a href=\"#登录账户控制台\" class=\"headerlink\" title=\"登录账户控制台\"></a>登录账户控制台</h2><p>您现在可以登录到帐户控制台以验证此用户是否已正确配置。</p>\n<p>打开Keycloak帐户控制台。</p>\n<p>使用您之前创建的密码登录。myuser</p>\n<p>作为账户控制台中的用户，您可以管理您的账户，包括修改您的个人资料、添加双因素身份验证以及包括身份提供商账户。</p>\n<p><img src=\"/2023/08/02/KeyCloak/2023-08-02-18-04-00.png\"></p>\n<h2 id=\"保护第一个应用程序\"><a href=\"#保护第一个应用程序\" class=\"headerlink\" title=\"保护第一个应用程序\"></a>保护第一个应用程序</h2><p>要保护第一个应用程序，首先将应用程序注册到 Keycloak 实例：</p>\n<p>打开 Keycloak 管理控制台。</p>\n<p>单击“客户端”。</p>\n<p>单击“创建客户端”</p>\n<p>使用以下值填写表单：</p>\n<p>客户端类型：OpenID Connect</p>\n<p>客户端 ID：myclient</p>\n<p>单击下一步</p>\n<p>确认已启用标准流。</p>\n<p>单击保存。<br><img src=\"/2023/08/02/KeyCloak/2023-08-02-18-04-29.png\"></p>\n<p>创建客户端后，对客户端进行以下更新：</p>\n<p>向下滚动到“访问设置”。</p>\n<p>将有效重定向 URI 设置为<a href=\"https://www.keycloak.org/app/\">https://www.keycloak.org/app/</a>*</p>\n<p>将 Web 源设置为<a href=\"https://www.keycloak.org/\">https://www.keycloak.org</a></p>\n<p>单击保存。</p>\n<p><img src=\"/2023/08/02/KeyCloak/2023-08-02-18-04-49.png\"></p>\n<p>要确认客户端已成功创建，您可以使用Keycloak网站上的SPA测试应用程序。</p>\n<p>打开 <a href=\"https://www.keycloak.org/app/%E3%80%82\">https://www.keycloak.org/app/。</a></p>\n<p>单击保存以使用默认配置。</p>\n<p>单击“登录”以使用之前启动的 Keycloak 服务器对此应用程序进行身份验证。</p>\n"},{"title":"Linux 常用命令","date":"2023-03-13T02:52:31.000Z","_content":"\n# LINUX 命令\n\n## LINUX 终端快捷键\n\n```\nCtrl + Shift + C 复制\nCtrl + Shift + V 粘贴 \n\nCtrl + Shift + + 放大字体\nCtrl + Shift + - 缩小字体\n\nCtrl + l 清屏\n\nCtrl + a  移动光标到命令行首\nCtrl + e  移动光标到命令行尾 \n\nCtrl + b  同键盘左键，向左移动光标\nCtrl + f  同键盘右键，向右移动光标\n\nAlt + b  向前移动一个词的距离\nAlt + f  向后移动一个词的距离 \n\nCtrl + w  剪切光标之前的一个词\nAlt + d  剪切光标之后的一个词\n\nCtrl + u  从当前光标所在位置向左剪切全部命令\nCtrl + k  从当前光标所在位置向右剪切全部命令\n\nCtrl + t  交换光标前的最后两个字符\nAlt + t  交换当前单词和前一个单词的位置\n\nCtrl + r  查看历史命令，需要输入命令的起始字母，剩下的部分自动补全\n\nCtrl + p  显示上一条命令，同向上箭头\nCtrl + n  显示下一条命令，同向下箭头\n\nTab  按一次补全，按两次列出所有相关信息\n\nEsc + .  插入最后一个参数，也就是上一个命令的最后一个参数或者叫字符串 \n```\n\n<!-- more -->\n\n## 系统管理\n\n```bash\n# 关闭\nshutdown \n  -H Halt\n  -P -h  poweroff\n  -c cancle\n  -r reboot\n  -k 警告\n\n# 将数据由内存同步到硬盘中\nsync \n```\n\n## 文件管理\n\n```bash\n# 确定文件类型\nfile fname\n\n# 切换目录\n# ./ 当前目录\n# ../ 父目录\ncd 相对路径or绝对路径\n\n# 回到上次的目录\ncd -\n\n# print work dir\npwd\n\n# 列出文件目录\nls \n  -l 长格式\n  -R 递归\n  -a 包含隐藏文件\n  -h 人性化的\n  -F 添加标识符\n\n# 创建目录\nmkdir \n  -p make parent directories as needed\n\n# 创建文件\ntouch\n\n# 文件状态\nstat\n  Access: 文件上一次打开的时间\n  Modify: 文件内容上一次变动的时间\n  Change: ctime 指 inode 上一次变动的时间\n   Birth：文件创建时间\n\n# 复制\ncp\n  -r 递归复制目录\n  -p 保持权限和属性\n  -a rp\n\n# 移动\nmv\n\n# 删除\nrm\n  -r 递归\n  -i 提示\n  -f 强制\n\n# 查看\ncat/tac\n  -n number all output lines  \n  -A show-all   \n  -e show-nonprinting show-ends   \n\n# 带行号\nnl\n  -<line>\n\n# 一页,可以滚动\nmore/less\n\nldd print shared object dependencies\n```\n\n## 历史命令\n\n```bash\nhistory  查看历史命令，按顺序全部显示出来，有对应的编号\n\n!num  执行history历史命令列表中第num条命令\n\n!!  执行上一条命令\n!-1 执行上一条命令\n\n!?string?  执行含有string字符串的最新命令\n\nls !$  执行命令ls，并以上一条命令的最后一个字符串为其参数\n```\n\n## 内容查找\n\n```bash\ngrep [OPTION...] PATTERNS [FILE...]\n```\n\n## 路径查找\n```bash\nwhich\n\nwhere\n\nwhereis\n\nlocate\n\nfind [path] [expression]\n\n    -name\n    -user -uid -group -gid\n    -perm\n    -atime -mtime -ctime\n    -i(gnore-case)\n    -a(nd)\n\n    -size n[cwbkMG]\n          `b'    for 512-byte blocks (this is the default if no suffix is used)\n          `c'    for bytes\n          `w'    for two-byte words\n          `k'    for kibibytes (KiB, units of 1024 bytes)\n          `M'    for mebibytes (MiB, units of 1024 * 1024 = 1048576 bytes)\n          `G'    for gibibytes (GiB, units of 1024 * 1024 * 1024 = 1073741824 bytes)\n    +n     for greater than n,\n    -n     for less than n,\n    n      for exactly n.\n```\n## 打包压缩\n\n```bash\n# zip往压缩包里添加文件\nzip <name>.zip <file1> <file2>\nupzip <name>.zip -d <dir>\n\n# 只能压缩单个文件\ngzip <name>.gz <file1> \ngunzip <name>.gz \n\nbzip2 <name>\nbunzip2 <name>.bz2\n\nxz <name>\nunxz <name>.xz\n\n# 打包不压缩\ntar -cvf <name>.tar <file>\n\n# 打包gzip压缩\ntar -cvzf <name>.tar.gz <file>\n\n# 打包bzip2压缩 \ntar -cvjf <name>.tar.bz2 <file>\n\n# 打包xz压缩\ntar -cvJf <name>.tar.xz <file>\n\n# 解压到指定目录\ntar -xvf <name> -C <dir>\n```\n\n## 链接\n\nln src dest\n\n硬链接 链接到inode\n\n软链接 --symbolic \n\n![](2023-06-24-11-21-34.png)","source":"_posts/Linux 命令.md","raw":"---\ntitle: Linux 常用命令\ndate: 2023-03-13 10:52:31\ntags: Linux\n---\n\n# LINUX 命令\n\n## LINUX 终端快捷键\n\n```\nCtrl + Shift + C 复制\nCtrl + Shift + V 粘贴 \n\nCtrl + Shift + + 放大字体\nCtrl + Shift + - 缩小字体\n\nCtrl + l 清屏\n\nCtrl + a  移动光标到命令行首\nCtrl + e  移动光标到命令行尾 \n\nCtrl + b  同键盘左键，向左移动光标\nCtrl + f  同键盘右键，向右移动光标\n\nAlt + b  向前移动一个词的距离\nAlt + f  向后移动一个词的距离 \n\nCtrl + w  剪切光标之前的一个词\nAlt + d  剪切光标之后的一个词\n\nCtrl + u  从当前光标所在位置向左剪切全部命令\nCtrl + k  从当前光标所在位置向右剪切全部命令\n\nCtrl + t  交换光标前的最后两个字符\nAlt + t  交换当前单词和前一个单词的位置\n\nCtrl + r  查看历史命令，需要输入命令的起始字母，剩下的部分自动补全\n\nCtrl + p  显示上一条命令，同向上箭头\nCtrl + n  显示下一条命令，同向下箭头\n\nTab  按一次补全，按两次列出所有相关信息\n\nEsc + .  插入最后一个参数，也就是上一个命令的最后一个参数或者叫字符串 \n```\n\n<!-- more -->\n\n## 系统管理\n\n```bash\n# 关闭\nshutdown \n  -H Halt\n  -P -h  poweroff\n  -c cancle\n  -r reboot\n  -k 警告\n\n# 将数据由内存同步到硬盘中\nsync \n```\n\n## 文件管理\n\n```bash\n# 确定文件类型\nfile fname\n\n# 切换目录\n# ./ 当前目录\n# ../ 父目录\ncd 相对路径or绝对路径\n\n# 回到上次的目录\ncd -\n\n# print work dir\npwd\n\n# 列出文件目录\nls \n  -l 长格式\n  -R 递归\n  -a 包含隐藏文件\n  -h 人性化的\n  -F 添加标识符\n\n# 创建目录\nmkdir \n  -p make parent directories as needed\n\n# 创建文件\ntouch\n\n# 文件状态\nstat\n  Access: 文件上一次打开的时间\n  Modify: 文件内容上一次变动的时间\n  Change: ctime 指 inode 上一次变动的时间\n   Birth：文件创建时间\n\n# 复制\ncp\n  -r 递归复制目录\n  -p 保持权限和属性\n  -a rp\n\n# 移动\nmv\n\n# 删除\nrm\n  -r 递归\n  -i 提示\n  -f 强制\n\n# 查看\ncat/tac\n  -n number all output lines  \n  -A show-all   \n  -e show-nonprinting show-ends   \n\n# 带行号\nnl\n  -<line>\n\n# 一页,可以滚动\nmore/less\n\nldd print shared object dependencies\n```\n\n## 历史命令\n\n```bash\nhistory  查看历史命令，按顺序全部显示出来，有对应的编号\n\n!num  执行history历史命令列表中第num条命令\n\n!!  执行上一条命令\n!-1 执行上一条命令\n\n!?string?  执行含有string字符串的最新命令\n\nls !$  执行命令ls，并以上一条命令的最后一个字符串为其参数\n```\n\n## 内容查找\n\n```bash\ngrep [OPTION...] PATTERNS [FILE...]\n```\n\n## 路径查找\n```bash\nwhich\n\nwhere\n\nwhereis\n\nlocate\n\nfind [path] [expression]\n\n    -name\n    -user -uid -group -gid\n    -perm\n    -atime -mtime -ctime\n    -i(gnore-case)\n    -a(nd)\n\n    -size n[cwbkMG]\n          `b'    for 512-byte blocks (this is the default if no suffix is used)\n          `c'    for bytes\n          `w'    for two-byte words\n          `k'    for kibibytes (KiB, units of 1024 bytes)\n          `M'    for mebibytes (MiB, units of 1024 * 1024 = 1048576 bytes)\n          `G'    for gibibytes (GiB, units of 1024 * 1024 * 1024 = 1073741824 bytes)\n    +n     for greater than n,\n    -n     for less than n,\n    n      for exactly n.\n```\n## 打包压缩\n\n```bash\n# zip往压缩包里添加文件\nzip <name>.zip <file1> <file2>\nupzip <name>.zip -d <dir>\n\n# 只能压缩单个文件\ngzip <name>.gz <file1> \ngunzip <name>.gz \n\nbzip2 <name>\nbunzip2 <name>.bz2\n\nxz <name>\nunxz <name>.xz\n\n# 打包不压缩\ntar -cvf <name>.tar <file>\n\n# 打包gzip压缩\ntar -cvzf <name>.tar.gz <file>\n\n# 打包bzip2压缩 \ntar -cvjf <name>.tar.bz2 <file>\n\n# 打包xz压缩\ntar -cvJf <name>.tar.xz <file>\n\n# 解压到指定目录\ntar -xvf <name> -C <dir>\n```\n\n## 链接\n\nln src dest\n\n硬链接 链接到inode\n\n软链接 --symbolic \n\n![](2023-06-24-11-21-34.png)","slug":"Linux 命令","published":1,"updated":"2023-06-24T08:55:53.791Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5uh001klv9ehmuuec53","content":"<h1 id=\"LINUX-命令\"><a href=\"#LINUX-命令\" class=\"headerlink\" title=\"LINUX 命令\"></a>LINUX 命令</h1><h2 id=\"LINUX-终端快捷键\"><a href=\"#LINUX-终端快捷键\" class=\"headerlink\" title=\"LINUX 终端快捷键\"></a>LINUX 终端快捷键</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ctrl + Shift + C 复制</span><br><span class=\"line\">Ctrl + Shift + V 粘贴 </span><br><span class=\"line\"></span><br><span class=\"line\">Ctrl + Shift + + 放大字体</span><br><span class=\"line\">Ctrl + Shift + - 缩小字体</span><br><span class=\"line\"></span><br><span class=\"line\">Ctrl + l 清屏</span><br><span class=\"line\"></span><br><span class=\"line\">Ctrl + a  移动光标到命令行首</span><br><span class=\"line\">Ctrl + e  移动光标到命令行尾 </span><br><span class=\"line\"></span><br><span class=\"line\">Ctrl + b  同键盘左键，向左移动光标</span><br><span class=\"line\">Ctrl + f  同键盘右键，向右移动光标</span><br><span class=\"line\"></span><br><span class=\"line\">Alt + b  向前移动一个词的距离</span><br><span class=\"line\">Alt + f  向后移动一个词的距离 </span><br><span class=\"line\"></span><br><span class=\"line\">Ctrl + w  剪切光标之前的一个词</span><br><span class=\"line\">Alt + d  剪切光标之后的一个词</span><br><span class=\"line\"></span><br><span class=\"line\">Ctrl + u  从当前光标所在位置向左剪切全部命令</span><br><span class=\"line\">Ctrl + k  从当前光标所在位置向右剪切全部命令</span><br><span class=\"line\"></span><br><span class=\"line\">Ctrl + t  交换光标前的最后两个字符</span><br><span class=\"line\">Alt + t  交换当前单词和前一个单词的位置</span><br><span class=\"line\"></span><br><span class=\"line\">Ctrl + r  查看历史命令，需要输入命令的起始字母，剩下的部分自动补全</span><br><span class=\"line\"></span><br><span class=\"line\">Ctrl + p  显示上一条命令，同向上箭头</span><br><span class=\"line\">Ctrl + n  显示下一条命令，同向下箭头</span><br><span class=\"line\"></span><br><span class=\"line\">Tab  按一次补全，按两次列出所有相关信息</span><br><span class=\"line\"></span><br><span class=\"line\">Esc + .  插入最后一个参数，也就是上一个命令的最后一个参数或者叫字符串 </span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"系统管理\"><a href=\"#系统管理\" class=\"headerlink\" title=\"系统管理\"></a>系统管理</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 关闭</span></span><br><span class=\"line\">shutdown </span><br><span class=\"line\">  -H Halt</span><br><span class=\"line\">  -P -h  poweroff</span><br><span class=\"line\">  -c cancle</span><br><span class=\"line\">  -r reboot</span><br><span class=\"line\">  -k 警告</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将数据由内存同步到硬盘中</span></span><br><span class=\"line\"><span class=\"built_in\">sync</span> </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文件管理\"><a href=\"#文件管理\" class=\"headerlink\" title=\"文件管理\"></a>文件管理</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 确定文件类型</span></span><br><span class=\"line\">file fname</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换目录</span></span><br><span class=\"line\"><span class=\"comment\"># ./ 当前目录</span></span><br><span class=\"line\"><span class=\"comment\"># ../ 父目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> 相对路径or绝对路径</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 回到上次的目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> -</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># print work dir</span></span><br><span class=\"line\"><span class=\"built_in\">pwd</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出文件目录</span></span><br><span class=\"line\"><span class=\"built_in\">ls</span> </span><br><span class=\"line\">  -l 长格式</span><br><span class=\"line\">  -R 递归</span><br><span class=\"line\">  -a 包含隐藏文件</span><br><span class=\"line\">  -h 人性化的</span><br><span class=\"line\">  -F 添加标识符</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建目录</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> </span><br><span class=\"line\">  -p make parent directories as needed</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建文件</span></span><br><span class=\"line\"><span class=\"built_in\">touch</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 文件状态</span></span><br><span class=\"line\"><span class=\"built_in\">stat</span></span><br><span class=\"line\">  Access: 文件上一次打开的时间</span><br><span class=\"line\">  Modify: 文件内容上一次变动的时间</span><br><span class=\"line\">  Change: ctime 指 inode 上一次变动的时间</span><br><span class=\"line\">   Birth：文件创建时间</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 复制</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span></span><br><span class=\"line\">  -r 递归复制目录</span><br><span class=\"line\">  -p 保持权限和属性</span><br><span class=\"line\">  -a rp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 移动</span></span><br><span class=\"line\"><span class=\"built_in\">mv</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span></span><br><span class=\"line\">  -r 递归</span><br><span class=\"line\">  -i 提示</span><br><span class=\"line\">  -f 强制</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span>/tac</span><br><span class=\"line\">  -n number all output lines  </span><br><span class=\"line\">  -A show-all   </span><br><span class=\"line\">  -e show-nonprinting show-ends   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 带行号</span></span><br><span class=\"line\"><span class=\"built_in\">nl</span></span><br><span class=\"line\">  -&lt;line&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 一页,可以滚动</span></span><br><span class=\"line\">more/less</span><br><span class=\"line\"></span><br><span class=\"line\">ldd <span class=\"built_in\">print</span> shared object dependencies</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"历史命令\"><a href=\"#历史命令\" class=\"headerlink\" title=\"历史命令\"></a>历史命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">history</span>  查看历史命令，按顺序全部显示出来，有对应的编号</span><br><span class=\"line\"></span><br><span class=\"line\">!num  执行<span class=\"built_in\">history</span>历史命令列表中第num条命令</span><br><span class=\"line\"></span><br><span class=\"line\">!!  执行上一条命令</span><br><span class=\"line\">!-1 执行上一条命令</span><br><span class=\"line\"></span><br><span class=\"line\">!?string?  执行含有string字符串的最新命令</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">ls</span> !$  执行命令<span class=\"built_in\">ls</span>，并以上一条命令的最后一个字符串为其参数</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"内容查找\"><a href=\"#内容查找\" class=\"headerlink\" title=\"内容查找\"></a>内容查找</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep [OPTION...] PATTERNS [FILE...]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"路径查找\"><a href=\"#路径查找\" class=\"headerlink\" title=\"路径查找\"></a>路径查找</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">which</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">where</span></span><br><span class=\"line\"></span><br><span class=\"line\">whereis</span><br><span class=\"line\"></span><br><span class=\"line\">locate</span><br><span class=\"line\"></span><br><span class=\"line\">find [path] [expression]</span><br><span class=\"line\"></span><br><span class=\"line\">    -name</span><br><span class=\"line\">    -user -uid -group -gid</span><br><span class=\"line\">    -perm</span><br><span class=\"line\">    -atime -mtime -ctime</span><br><span class=\"line\">    -i(gnore-case)</span><br><span class=\"line\">    -a(nd)</span><br><span class=\"line\"></span><br><span class=\"line\">    -size n[cwbkMG]</span><br><span class=\"line\">          `b<span class=\"string\">&#x27;    for 512-byte blocks (this is the default if no suffix is used)</span></span><br><span class=\"line\"><span class=\"string\">          `c&#x27;</span>    <span class=\"keyword\">for</span> bytes</span><br><span class=\"line\">          `w<span class=\"string\">&#x27;    for two-byte words</span></span><br><span class=\"line\"><span class=\"string\">          `k&#x27;</span>    <span class=\"keyword\">for</span> kibibytes (KiB, units of 1024 bytes)</span><br><span class=\"line\">          `M<span class=\"string\">&#x27;    for mebibytes (MiB, units of 1024 * 1024 = 1048576 bytes)</span></span><br><span class=\"line\"><span class=\"string\">          `G&#x27;</span>    <span class=\"keyword\">for</span> gibibytes (GiB, units of 1024 * 1024 * 1024 = 1073741824 bytes)</span><br><span class=\"line\">    +n     <span class=\"keyword\">for</span> greater than n,</span><br><span class=\"line\">    -n     <span class=\"keyword\">for</span> less than n,</span><br><span class=\"line\">    n      <span class=\"keyword\">for</span> exactly n.</span><br></pre></td></tr></table></figure>\n<h2 id=\"打包压缩\"><a href=\"#打包压缩\" class=\"headerlink\" title=\"打包压缩\"></a>打包压缩</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># zip往压缩包里添加文件</span></span><br><span class=\"line\">zip &lt;name&gt;.zip &lt;file1&gt; &lt;file2&gt;</span><br><span class=\"line\">upzip &lt;name&gt;.zip -d &lt;<span class=\"built_in\">dir</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 只能压缩单个文件</span></span><br><span class=\"line\">gzip &lt;name&gt;.gz &lt;file1&gt; </span><br><span class=\"line\">gunzip &lt;name&gt;.gz </span><br><span class=\"line\"></span><br><span class=\"line\">bzip2 &lt;name&gt;</span><br><span class=\"line\">bunzip2 &lt;name&gt;.bz2</span><br><span class=\"line\"></span><br><span class=\"line\">xz &lt;name&gt;</span><br><span class=\"line\">unxz &lt;name&gt;.xz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打包不压缩</span></span><br><span class=\"line\">tar -cvf &lt;name&gt;.tar &lt;file&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打包gzip压缩</span></span><br><span class=\"line\">tar -cvzf &lt;name&gt;.tar.gz &lt;file&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打包bzip2压缩 </span></span><br><span class=\"line\">tar -cvjf &lt;name&gt;.tar.bz2 &lt;file&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打包xz压缩</span></span><br><span class=\"line\">tar -cvJf &lt;name&gt;.tar.xz &lt;file&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解压到指定目录</span></span><br><span class=\"line\">tar -xvf &lt;name&gt; -C &lt;<span class=\"built_in\">dir</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h2><p>ln src dest</p>\n<p>硬链接 链接到inode</p>\n<p>软链接 –symbolic </p>\n<p><img src=\"/2023-06-24-11-21-34.png\"></p>\n","site":{"data":{}},"cover":false,"excerpt":"<h1 id=\"LINUX-命令\"><a href=\"#LINUX-命令\" class=\"headerlink\" title=\"LINUX 命令\"></a>LINUX 命令</h1><h2 id=\"LINUX-终端快捷键\"><a href=\"#LINUX-终端快捷键\" class=\"headerlink\" title=\"LINUX 终端快捷键\"></a>LINUX 终端快捷键</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ctrl + Shift + C 复制</span><br><span class=\"line\">Ctrl + Shift + V 粘贴 </span><br><span class=\"line\"></span><br><span class=\"line\">Ctrl + Shift + + 放大字体</span><br><span class=\"line\">Ctrl + Shift + - 缩小字体</span><br><span class=\"line\"></span><br><span class=\"line\">Ctrl + l 清屏</span><br><span class=\"line\"></span><br><span class=\"line\">Ctrl + a  移动光标到命令行首</span><br><span class=\"line\">Ctrl + e  移动光标到命令行尾 </span><br><span class=\"line\"></span><br><span class=\"line\">Ctrl + b  同键盘左键，向左移动光标</span><br><span class=\"line\">Ctrl + f  同键盘右键，向右移动光标</span><br><span class=\"line\"></span><br><span class=\"line\">Alt + b  向前移动一个词的距离</span><br><span class=\"line\">Alt + f  向后移动一个词的距离 </span><br><span class=\"line\"></span><br><span class=\"line\">Ctrl + w  剪切光标之前的一个词</span><br><span class=\"line\">Alt + d  剪切光标之后的一个词</span><br><span class=\"line\"></span><br><span class=\"line\">Ctrl + u  从当前光标所在位置向左剪切全部命令</span><br><span class=\"line\">Ctrl + k  从当前光标所在位置向右剪切全部命令</span><br><span class=\"line\"></span><br><span class=\"line\">Ctrl + t  交换光标前的最后两个字符</span><br><span class=\"line\">Alt + t  交换当前单词和前一个单词的位置</span><br><span class=\"line\"></span><br><span class=\"line\">Ctrl + r  查看历史命令，需要输入命令的起始字母，剩下的部分自动补全</span><br><span class=\"line\"></span><br><span class=\"line\">Ctrl + p  显示上一条命令，同向上箭头</span><br><span class=\"line\">Ctrl + n  显示下一条命令，同向下箭头</span><br><span class=\"line\"></span><br><span class=\"line\">Tab  按一次补全，按两次列出所有相关信息</span><br><span class=\"line\"></span><br><span class=\"line\">Esc + .  插入最后一个参数，也就是上一个命令的最后一个参数或者叫字符串 </span><br></pre></td></tr></table></figure>","more":"<h2 id=\"系统管理\"><a href=\"#系统管理\" class=\"headerlink\" title=\"系统管理\"></a>系统管理</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 关闭</span></span><br><span class=\"line\">shutdown </span><br><span class=\"line\">  -H Halt</span><br><span class=\"line\">  -P -h  poweroff</span><br><span class=\"line\">  -c cancle</span><br><span class=\"line\">  -r reboot</span><br><span class=\"line\">  -k 警告</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将数据由内存同步到硬盘中</span></span><br><span class=\"line\"><span class=\"built_in\">sync</span> </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文件管理\"><a href=\"#文件管理\" class=\"headerlink\" title=\"文件管理\"></a>文件管理</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 确定文件类型</span></span><br><span class=\"line\">file fname</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换目录</span></span><br><span class=\"line\"><span class=\"comment\"># ./ 当前目录</span></span><br><span class=\"line\"><span class=\"comment\"># ../ 父目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> 相对路径or绝对路径</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 回到上次的目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> -</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># print work dir</span></span><br><span class=\"line\"><span class=\"built_in\">pwd</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出文件目录</span></span><br><span class=\"line\"><span class=\"built_in\">ls</span> </span><br><span class=\"line\">  -l 长格式</span><br><span class=\"line\">  -R 递归</span><br><span class=\"line\">  -a 包含隐藏文件</span><br><span class=\"line\">  -h 人性化的</span><br><span class=\"line\">  -F 添加标识符</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建目录</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> </span><br><span class=\"line\">  -p make parent directories as needed</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建文件</span></span><br><span class=\"line\"><span class=\"built_in\">touch</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 文件状态</span></span><br><span class=\"line\"><span class=\"built_in\">stat</span></span><br><span class=\"line\">  Access: 文件上一次打开的时间</span><br><span class=\"line\">  Modify: 文件内容上一次变动的时间</span><br><span class=\"line\">  Change: ctime 指 inode 上一次变动的时间</span><br><span class=\"line\">   Birth：文件创建时间</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 复制</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span></span><br><span class=\"line\">  -r 递归复制目录</span><br><span class=\"line\">  -p 保持权限和属性</span><br><span class=\"line\">  -a rp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 移动</span></span><br><span class=\"line\"><span class=\"built_in\">mv</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span></span><br><span class=\"line\">  -r 递归</span><br><span class=\"line\">  -i 提示</span><br><span class=\"line\">  -f 强制</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span>/tac</span><br><span class=\"line\">  -n number all output lines  </span><br><span class=\"line\">  -A show-all   </span><br><span class=\"line\">  -e show-nonprinting show-ends   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 带行号</span></span><br><span class=\"line\"><span class=\"built_in\">nl</span></span><br><span class=\"line\">  -&lt;line&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 一页,可以滚动</span></span><br><span class=\"line\">more/less</span><br><span class=\"line\"></span><br><span class=\"line\">ldd <span class=\"built_in\">print</span> shared object dependencies</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"历史命令\"><a href=\"#历史命令\" class=\"headerlink\" title=\"历史命令\"></a>历史命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">history</span>  查看历史命令，按顺序全部显示出来，有对应的编号</span><br><span class=\"line\"></span><br><span class=\"line\">!num  执行<span class=\"built_in\">history</span>历史命令列表中第num条命令</span><br><span class=\"line\"></span><br><span class=\"line\">!!  执行上一条命令</span><br><span class=\"line\">!-1 执行上一条命令</span><br><span class=\"line\"></span><br><span class=\"line\">!?string?  执行含有string字符串的最新命令</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">ls</span> !$  执行命令<span class=\"built_in\">ls</span>，并以上一条命令的最后一个字符串为其参数</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"内容查找\"><a href=\"#内容查找\" class=\"headerlink\" title=\"内容查找\"></a>内容查找</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep [OPTION...] PATTERNS [FILE...]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"路径查找\"><a href=\"#路径查找\" class=\"headerlink\" title=\"路径查找\"></a>路径查找</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">which</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">where</span></span><br><span class=\"line\"></span><br><span class=\"line\">whereis</span><br><span class=\"line\"></span><br><span class=\"line\">locate</span><br><span class=\"line\"></span><br><span class=\"line\">find [path] [expression]</span><br><span class=\"line\"></span><br><span class=\"line\">    -name</span><br><span class=\"line\">    -user -uid -group -gid</span><br><span class=\"line\">    -perm</span><br><span class=\"line\">    -atime -mtime -ctime</span><br><span class=\"line\">    -i(gnore-case)</span><br><span class=\"line\">    -a(nd)</span><br><span class=\"line\"></span><br><span class=\"line\">    -size n[cwbkMG]</span><br><span class=\"line\">          `b<span class=\"string\">&#x27;    for 512-byte blocks (this is the default if no suffix is used)</span></span><br><span class=\"line\"><span class=\"string\">          `c&#x27;</span>    <span class=\"keyword\">for</span> bytes</span><br><span class=\"line\">          `w<span class=\"string\">&#x27;    for two-byte words</span></span><br><span class=\"line\"><span class=\"string\">          `k&#x27;</span>    <span class=\"keyword\">for</span> kibibytes (KiB, units of 1024 bytes)</span><br><span class=\"line\">          `M<span class=\"string\">&#x27;    for mebibytes (MiB, units of 1024 * 1024 = 1048576 bytes)</span></span><br><span class=\"line\"><span class=\"string\">          `G&#x27;</span>    <span class=\"keyword\">for</span> gibibytes (GiB, units of 1024 * 1024 * 1024 = 1073741824 bytes)</span><br><span class=\"line\">    +n     <span class=\"keyword\">for</span> greater than n,</span><br><span class=\"line\">    -n     <span class=\"keyword\">for</span> less than n,</span><br><span class=\"line\">    n      <span class=\"keyword\">for</span> exactly n.</span><br></pre></td></tr></table></figure>\n<h2 id=\"打包压缩\"><a href=\"#打包压缩\" class=\"headerlink\" title=\"打包压缩\"></a>打包压缩</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># zip往压缩包里添加文件</span></span><br><span class=\"line\">zip &lt;name&gt;.zip &lt;file1&gt; &lt;file2&gt;</span><br><span class=\"line\">upzip &lt;name&gt;.zip -d &lt;<span class=\"built_in\">dir</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 只能压缩单个文件</span></span><br><span class=\"line\">gzip &lt;name&gt;.gz &lt;file1&gt; </span><br><span class=\"line\">gunzip &lt;name&gt;.gz </span><br><span class=\"line\"></span><br><span class=\"line\">bzip2 &lt;name&gt;</span><br><span class=\"line\">bunzip2 &lt;name&gt;.bz2</span><br><span class=\"line\"></span><br><span class=\"line\">xz &lt;name&gt;</span><br><span class=\"line\">unxz &lt;name&gt;.xz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打包不压缩</span></span><br><span class=\"line\">tar -cvf &lt;name&gt;.tar &lt;file&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打包gzip压缩</span></span><br><span class=\"line\">tar -cvzf &lt;name&gt;.tar.gz &lt;file&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打包bzip2压缩 </span></span><br><span class=\"line\">tar -cvjf &lt;name&gt;.tar.bz2 &lt;file&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打包xz压缩</span></span><br><span class=\"line\">tar -cvJf &lt;name&gt;.tar.xz &lt;file&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解压到指定目录</span></span><br><span class=\"line\">tar -xvf &lt;name&gt; -C &lt;<span class=\"built_in\">dir</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h2><p>ln src dest</p>\n<p>硬链接 链接到inode</p>\n<p>软链接 –symbolic </p>\n<p><img src=\"/2023-06-24-11-21-34.png\"></p>"},{"title":"Linux AT&T 汇编","date":"2023-05-21T04:30:48.000Z","_content":"## 开始之前\n\n大名鼎鼎的**Hello World**\n\n```s\n.data \n  msg : .string \"Hello Word!\\n\"\n  len = . -msg\n\n.text\n.global _start \n\n_start :\n  movl $len,%edx  # len -> edx\n  movl $msg,%ecx  # msg -> ecx\n  movl $1,%ebx\n  movl $4,%eax    # 系统调用号\n  int $0x80       # 调用  \n\n  movl $0,%ebx    # 退出代码\n  movl $1,%eax\n  int $0x80\n```\n\n\n## 通用寄存器\n\n汇编就是在几个寄存器间倒来倒去\n\n寄存器有两种概念，逻辑上的和物理上的，分别是：\n\n* 架构相关寄存器（architectural register）\n* 物理寄存器（physical register）  \n  \n前者是指令集（ISA）提供给编译器可见的，相当于API接口规范，一共16个通用寄存器；后者是硬件上实际设计的，软件领域不直接接触。最新的CPU可能有上百个实际的物理寄存器。对软件开发人员来说，我们只需要关注逻辑上的通用寄存器。\n\n这16个逻辑上的通用寄存器如下所示：\n\n| 寄存器 | 约束         | 惯例                                        |\n| ------ | ------------ | ------------------------------------------- |\n| rax    | 否           | 系统调用时，调用号                          |\n|        |              | 函数返回值                                  |\n|        |              | 除法运算中，存放除数、以及运算结果的商      |\n|        |              | 乘法运算中，存放被乘数、以及运算结果        |\n| rbx    | 被调用者保存 | 在32位模式下，用来存放GOT的地址             |\n| rcx    | 否           | 函数调用时，第4个参数                       |\n|        |              | 有时用作counter                             |\n| rdx    | 否           | 函数调用时，第3个参数                       |\n|        |              | 除法运算中，存放运算结果的余数              |\n|        |              | 乘法运算中，存放运算结果溢出的部分          |\n| rbp    | 被调用者保存 | frame pointer，存放当前函数调用时栈的基地址 |\n| rsp    | 被调用者保存 | 时刻指向栈顶                                |\n| rdi    | 否           | 函数调用时，第1个参数                       |\n|        |              | rep movsb中的目的寄存器                     |\n| rsi    | 否           | 函数调用时，第2个参数                       |\n|        |              | rep movsb中的源寄存器                       |\n| r8     | 否           | 函数调用时，第5个参数                       |\n| r9     | 否           | 函数调用时，第6个参数                       |\n| r10    | 否           |                                             |\n| r11    | 否           |                                             |\n| r12    | 被调用者保存 |                                             |\n| r13    | 被调用者保存 |                                             |\n| r14    | 被调用者保存 |                                             |\n| r15    | 被调用者保存 |                                             |\n\n## 指令\n\n### 1. 前缀、操作数的方向、操作码的后缀\n\n关于前缀，AT&T 汇编中：\n\n    寄存器：“%”\n    立即数：“$”\n    十六进制数：“0x”\n\n\n在AT&T 语境中说到386的通用寄存器时，会这样描述：8个32-bit寄存器 %eax，%ebx，%ecx，%edx，%edi，%esi，%ebp，%esp。比如：在stage1.s中，有这么一个定义：\n\n    #define ABS(x) （x-_start+0x7c00）\n\n那么你就会知到0x7c00是个十六进制数（_start函数的入口地址就位于内存的0x7c00处）。而在设置int 0x13的0x42功能号时，它是这么说的：\n\n    movb $0x42,%ah\n\n这句告诉了我们一些不同之处：\n\n    首先，操作码的后缀l表示的是操作码的大小：\n    l是长整数32位，\n    movw是16位，\n    movb是8位；\n    \n    其次，立即数是用$前缀来表示的，就像$0x42；\n    再次，寄存器的名字是有%前缀的，像例子中的%ah；\n    最后，操作数的方向有点不一样，比如把立即数$0x42放 到寄存器%ah中，用的是movb $0x42,%ah，也即源操作数在前，目的操作数在后，这一点和intel汇编语法正好相反。\n\n对于内存单元操作数来说，在AT&T 中是把寄存器用（）括起来，而非[]。比如：\n\n    movl %ebx,8（%si）\n\n将ebx寄存器里的值放到内存地址是8（%si）的内存单元上。正好，这里同时遇到了另一个问题，就是在AT&T 汇编中，间接寻址方式是有别于intel汇编的。上例中的8（%si）就相当于intel汇编中的[si+8]。\n\n### 2，运算指令\n\n一些常见的命令：\n\n    add %r10,%r11 # r10 + r11，结果放到r11 \n    add $5,%r10 # 5 + r10，结果放到r10\n    div %r10 # rax 除以r10，商放到rax，余数放到rdx\n    inc %r10 # r10 加1\n    mul %r10 # 将rax乘以 r10, 将结果放到rax中，溢出部分放到rdx \n\n## 3，拷贝指令\n\n这些拷贝有从寄存器到寄存器、从寄存器到内存\n\n    mov %r10,%r11 #将r10寄存器的值赋值给r11 ；\n    mov $99,%r10 #将立即数99赋值给r10寄存器； \n    mov %r10,(%r11) # 将r10的值拷贝到r11寄存器中的数值指向的内存地址上； \n    mov (%r10),%r11 # 将r10中数值指向的内存地址上的内容拷贝到r11；push %r10 # 将r10的值放到栈上 ；\n    pop %r10 # 将栈顶的值pop到r10寄存器上。\n\n## 4，流程控制指令\n\nlabel（标号）程序控制语句\n\n    cmpb $GRUB_INVALID_DRIVE,%al\n        je 1f\n        movb %al,%dl\n    1:\n        pushw %dx\n\n上面就用到了标号，je 1f，前面的两个数进行比较，如果相等就跳转到1的位置。\n注意，1后面的f表示的是forward，即从je指令后继续往前走来寻找1这个标号。所以，如果程序中有好几个叫做1的标号，就要看是1f还是1b了，b代表backward，方向和f相反。CivilNet BBS里有这么一个例子可以更好的帮助我们理解：\n\n    1: cmp  $0,  (%si)  \n      je  1f        # 跳转到后面的1标示的地方，也就是第6行\n      movsb  \n      stosb  \n      jmp  1b       # 跳转到前面1表示的地方  ，也就是第1行\n    1: jmp  1b      # 跳转到前面1表示的地方，第6行，其实就是个死循环\n\n    cmp %r10,%r11   # 比较r10 和 r11，根据比较结果来设置CPU的状态寄存器，从而影响后面的jump语句；\n    cmp $99,%r11    # 比较99和r11，根据比较结果来设置CPU的状态寄存器，从而影响后面的jump语句；\n    jmp label       #跳转到label je label #如果相等，跳转到label jne label       # 如果不相等，跳转到label \n    jl label        # 如果小于，跳转到label \n    jg label        # 如果大于，跳转到label \n    call label      # 调用函数\n    ret             # 从函数调用返回\n    syscall         #系统调用 (32位模式下, 使用\"int $0x80\" 软中断)\n\n## AT&T 汇编指示符 Assembler Directive\n\n所有的汇编指示符都由句号（'.'）开头。命令名的其余是字母,通常使用小写\n\n### 1，.byte 表达式（expression_rs）\n\n.byte可不带参数或者带多个表达式参数，表达式之间由逗点分隔。每个表达式参数都被汇编成下一个字节。在stage1.s中，有这么一段代码：\n\n    after_BPB:\n    CLI\n    .byte 0x80,0xca\n\n那么编译器在编译时，就会在cli指令的下面接着放上0x80和0xca，因为每个表达式要占用1个字节，所以此处一共占用2个字节。\n\n### 2，.word 表达式\n\n这个表达式表示任意一节中的一个或多个表达式（同样用逗号分开），表达式占一个字（两个字节）。类似的还有.long。例：\n\n    .word 0x800\n\n### 3，.file 字符（string）\n\n.file 通告编译器我们准备开启一个新的逻辑文件。 string 是新文件名。\n\n    .file ”stage1.s”\n\n### 4，.text 小节（subsection）\n\n通知as编译器把后续语句汇编到编号为subsection的正文子段的末尾，subsection是一个纯粹的表达式。如果省略了参数subsection，则使用编号为0的子段。例：\n\n    .text\n\n### 5，.code16\n\n告诉编译器生成16位的指令\n\n### 6，.globl\n\n.globl使得连接程序（ld）能够看到symbol，如果gemfield在局部程序中定义了symbol，那么与这个局部程序链接的局部程序也能存取symbol，例：\n\n    .globl SYMBOL_NAME(idt) \n\n定义idt为全局符号。\n\n### 7，.fill repeat , size , value\n\n生成**size**个字节的**repeat**个副本。  \nrepeat, size 和value都必须是纯粹的表达式。  \nrepeat 可以是0或更大的值。\nsize 可以是0或更大的值, 但即使size大于8,也被视作8，以兼容其它的汇编器。\n\n例如，在linux初始化的过程中，对全局描述符表GDT进行设置的最后一句为：\n\n    .fill NR_CPUS*4,8,0\n\n\n## 编译和链接\n\nlinux下有两种方式，一种是使用汇编程序GAS和链接程序ld：\n\n    as filename.s –o filename.o\n    ld filename.o –o filename \n\n最终将源代码转换为目标文件.o再连接为可执行文件filename。另一种就是更上层的gcc（内部使用了as）：\n\n    gcc –o filename filename.S\n\n","source":"_posts/Linux-AT-T-汇编.md","raw":"---\ntitle: Linux AT&T 汇编\ndate: 2023-05-21 12:30:48\ntags: \n- Linux\n- AT&T\n- ASM\n---\n## 开始之前\n\n大名鼎鼎的**Hello World**\n\n```s\n.data \n  msg : .string \"Hello Word!\\n\"\n  len = . -msg\n\n.text\n.global _start \n\n_start :\n  movl $len,%edx  # len -> edx\n  movl $msg,%ecx  # msg -> ecx\n  movl $1,%ebx\n  movl $4,%eax    # 系统调用号\n  int $0x80       # 调用  \n\n  movl $0,%ebx    # 退出代码\n  movl $1,%eax\n  int $0x80\n```\n\n\n## 通用寄存器\n\n汇编就是在几个寄存器间倒来倒去\n\n寄存器有两种概念，逻辑上的和物理上的，分别是：\n\n* 架构相关寄存器（architectural register）\n* 物理寄存器（physical register）  \n  \n前者是指令集（ISA）提供给编译器可见的，相当于API接口规范，一共16个通用寄存器；后者是硬件上实际设计的，软件领域不直接接触。最新的CPU可能有上百个实际的物理寄存器。对软件开发人员来说，我们只需要关注逻辑上的通用寄存器。\n\n这16个逻辑上的通用寄存器如下所示：\n\n| 寄存器 | 约束         | 惯例                                        |\n| ------ | ------------ | ------------------------------------------- |\n| rax    | 否           | 系统调用时，调用号                          |\n|        |              | 函数返回值                                  |\n|        |              | 除法运算中，存放除数、以及运算结果的商      |\n|        |              | 乘法运算中，存放被乘数、以及运算结果        |\n| rbx    | 被调用者保存 | 在32位模式下，用来存放GOT的地址             |\n| rcx    | 否           | 函数调用时，第4个参数                       |\n|        |              | 有时用作counter                             |\n| rdx    | 否           | 函数调用时，第3个参数                       |\n|        |              | 除法运算中，存放运算结果的余数              |\n|        |              | 乘法运算中，存放运算结果溢出的部分          |\n| rbp    | 被调用者保存 | frame pointer，存放当前函数调用时栈的基地址 |\n| rsp    | 被调用者保存 | 时刻指向栈顶                                |\n| rdi    | 否           | 函数调用时，第1个参数                       |\n|        |              | rep movsb中的目的寄存器                     |\n| rsi    | 否           | 函数调用时，第2个参数                       |\n|        |              | rep movsb中的源寄存器                       |\n| r8     | 否           | 函数调用时，第5个参数                       |\n| r9     | 否           | 函数调用时，第6个参数                       |\n| r10    | 否           |                                             |\n| r11    | 否           |                                             |\n| r12    | 被调用者保存 |                                             |\n| r13    | 被调用者保存 |                                             |\n| r14    | 被调用者保存 |                                             |\n| r15    | 被调用者保存 |                                             |\n\n## 指令\n\n### 1. 前缀、操作数的方向、操作码的后缀\n\n关于前缀，AT&T 汇编中：\n\n    寄存器：“%”\n    立即数：“$”\n    十六进制数：“0x”\n\n\n在AT&T 语境中说到386的通用寄存器时，会这样描述：8个32-bit寄存器 %eax，%ebx，%ecx，%edx，%edi，%esi，%ebp，%esp。比如：在stage1.s中，有这么一个定义：\n\n    #define ABS(x) （x-_start+0x7c00）\n\n那么你就会知到0x7c00是个十六进制数（_start函数的入口地址就位于内存的0x7c00处）。而在设置int 0x13的0x42功能号时，它是这么说的：\n\n    movb $0x42,%ah\n\n这句告诉了我们一些不同之处：\n\n    首先，操作码的后缀l表示的是操作码的大小：\n    l是长整数32位，\n    movw是16位，\n    movb是8位；\n    \n    其次，立即数是用$前缀来表示的，就像$0x42；\n    再次，寄存器的名字是有%前缀的，像例子中的%ah；\n    最后，操作数的方向有点不一样，比如把立即数$0x42放 到寄存器%ah中，用的是movb $0x42,%ah，也即源操作数在前，目的操作数在后，这一点和intel汇编语法正好相反。\n\n对于内存单元操作数来说，在AT&T 中是把寄存器用（）括起来，而非[]。比如：\n\n    movl %ebx,8（%si）\n\n将ebx寄存器里的值放到内存地址是8（%si）的内存单元上。正好，这里同时遇到了另一个问题，就是在AT&T 汇编中，间接寻址方式是有别于intel汇编的。上例中的8（%si）就相当于intel汇编中的[si+8]。\n\n### 2，运算指令\n\n一些常见的命令：\n\n    add %r10,%r11 # r10 + r11，结果放到r11 \n    add $5,%r10 # 5 + r10，结果放到r10\n    div %r10 # rax 除以r10，商放到rax，余数放到rdx\n    inc %r10 # r10 加1\n    mul %r10 # 将rax乘以 r10, 将结果放到rax中，溢出部分放到rdx \n\n## 3，拷贝指令\n\n这些拷贝有从寄存器到寄存器、从寄存器到内存\n\n    mov %r10,%r11 #将r10寄存器的值赋值给r11 ；\n    mov $99,%r10 #将立即数99赋值给r10寄存器； \n    mov %r10,(%r11) # 将r10的值拷贝到r11寄存器中的数值指向的内存地址上； \n    mov (%r10),%r11 # 将r10中数值指向的内存地址上的内容拷贝到r11；push %r10 # 将r10的值放到栈上 ；\n    pop %r10 # 将栈顶的值pop到r10寄存器上。\n\n## 4，流程控制指令\n\nlabel（标号）程序控制语句\n\n    cmpb $GRUB_INVALID_DRIVE,%al\n        je 1f\n        movb %al,%dl\n    1:\n        pushw %dx\n\n上面就用到了标号，je 1f，前面的两个数进行比较，如果相等就跳转到1的位置。\n注意，1后面的f表示的是forward，即从je指令后继续往前走来寻找1这个标号。所以，如果程序中有好几个叫做1的标号，就要看是1f还是1b了，b代表backward，方向和f相反。CivilNet BBS里有这么一个例子可以更好的帮助我们理解：\n\n    1: cmp  $0,  (%si)  \n      je  1f        # 跳转到后面的1标示的地方，也就是第6行\n      movsb  \n      stosb  \n      jmp  1b       # 跳转到前面1表示的地方  ，也就是第1行\n    1: jmp  1b      # 跳转到前面1表示的地方，第6行，其实就是个死循环\n\n    cmp %r10,%r11   # 比较r10 和 r11，根据比较结果来设置CPU的状态寄存器，从而影响后面的jump语句；\n    cmp $99,%r11    # 比较99和r11，根据比较结果来设置CPU的状态寄存器，从而影响后面的jump语句；\n    jmp label       #跳转到label je label #如果相等，跳转到label jne label       # 如果不相等，跳转到label \n    jl label        # 如果小于，跳转到label \n    jg label        # 如果大于，跳转到label \n    call label      # 调用函数\n    ret             # 从函数调用返回\n    syscall         #系统调用 (32位模式下, 使用\"int $0x80\" 软中断)\n\n## AT&T 汇编指示符 Assembler Directive\n\n所有的汇编指示符都由句号（'.'）开头。命令名的其余是字母,通常使用小写\n\n### 1，.byte 表达式（expression_rs）\n\n.byte可不带参数或者带多个表达式参数，表达式之间由逗点分隔。每个表达式参数都被汇编成下一个字节。在stage1.s中，有这么一段代码：\n\n    after_BPB:\n    CLI\n    .byte 0x80,0xca\n\n那么编译器在编译时，就会在cli指令的下面接着放上0x80和0xca，因为每个表达式要占用1个字节，所以此处一共占用2个字节。\n\n### 2，.word 表达式\n\n这个表达式表示任意一节中的一个或多个表达式（同样用逗号分开），表达式占一个字（两个字节）。类似的还有.long。例：\n\n    .word 0x800\n\n### 3，.file 字符（string）\n\n.file 通告编译器我们准备开启一个新的逻辑文件。 string 是新文件名。\n\n    .file ”stage1.s”\n\n### 4，.text 小节（subsection）\n\n通知as编译器把后续语句汇编到编号为subsection的正文子段的末尾，subsection是一个纯粹的表达式。如果省略了参数subsection，则使用编号为0的子段。例：\n\n    .text\n\n### 5，.code16\n\n告诉编译器生成16位的指令\n\n### 6，.globl\n\n.globl使得连接程序（ld）能够看到symbol，如果gemfield在局部程序中定义了symbol，那么与这个局部程序链接的局部程序也能存取symbol，例：\n\n    .globl SYMBOL_NAME(idt) \n\n定义idt为全局符号。\n\n### 7，.fill repeat , size , value\n\n生成**size**个字节的**repeat**个副本。  \nrepeat, size 和value都必须是纯粹的表达式。  \nrepeat 可以是0或更大的值。\nsize 可以是0或更大的值, 但即使size大于8,也被视作8，以兼容其它的汇编器。\n\n例如，在linux初始化的过程中，对全局描述符表GDT进行设置的最后一句为：\n\n    .fill NR_CPUS*4,8,0\n\n\n## 编译和链接\n\nlinux下有两种方式，一种是使用汇编程序GAS和链接程序ld：\n\n    as filename.s –o filename.o\n    ld filename.o –o filename \n\n最终将源代码转换为目标文件.o再连接为可执行文件filename。另一种就是更上层的gcc（内部使用了as）：\n\n    gcc –o filename filename.S\n\n","slug":"Linux-AT-T-汇编","published":1,"updated":"2023-06-23T01:02:55.252Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5uh001nlv9e8atf357g","content":"<h2 id=\"开始之前\"><a href=\"#开始之前\" class=\"headerlink\" title=\"开始之前\"></a>开始之前</h2><p>大名鼎鼎的<strong>Hello World</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.data </span><br><span class=\"line\">  msg : .string &quot;Hello Word!\\n&quot;</span><br><span class=\"line\">  len = . -msg</span><br><span class=\"line\"></span><br><span class=\"line\">.text</span><br><span class=\"line\">.global _start </span><br><span class=\"line\"></span><br><span class=\"line\">_start :</span><br><span class=\"line\">  movl $len,%edx  # len -&gt; edx</span><br><span class=\"line\">  movl $msg,%ecx  # msg -&gt; ecx</span><br><span class=\"line\">  movl $1,%ebx</span><br><span class=\"line\">  movl $4,%eax    # 系统调用号</span><br><span class=\"line\">  int $0x80       # 调用  </span><br><span class=\"line\"></span><br><span class=\"line\">  movl $0,%ebx    # 退出代码</span><br><span class=\"line\">  movl $1,%eax</span><br><span class=\"line\">  int $0x80</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"通用寄存器\"><a href=\"#通用寄存器\" class=\"headerlink\" title=\"通用寄存器\"></a>通用寄存器</h2><p>汇编就是在几个寄存器间倒来倒去</p>\n<p>寄存器有两种概念，逻辑上的和物理上的，分别是：</p>\n<ul>\n<li>架构相关寄存器（architectural register）</li>\n<li>物理寄存器（physical register）</li>\n</ul>\n<p>前者是指令集（ISA）提供给编译器可见的，相当于API接口规范，一共16个通用寄存器；后者是硬件上实际设计的，软件领域不直接接触。最新的CPU可能有上百个实际的物理寄存器。对软件开发人员来说，我们只需要关注逻辑上的通用寄存器。</p>\n<p>这16个逻辑上的通用寄存器如下所示：</p>\n<table>\n<thead>\n<tr>\n<th>寄存器</th>\n<th>约束</th>\n<th>惯例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>rax</td>\n<td>否</td>\n<td>系统调用时，调用号</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>函数返回值</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>除法运算中，存放除数、以及运算结果的商</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>乘法运算中，存放被乘数、以及运算结果</td>\n</tr>\n<tr>\n<td>rbx</td>\n<td>被调用者保存</td>\n<td>在32位模式下，用来存放GOT的地址</td>\n</tr>\n<tr>\n<td>rcx</td>\n<td>否</td>\n<td>函数调用时，第4个参数</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>有时用作counter</td>\n</tr>\n<tr>\n<td>rdx</td>\n<td>否</td>\n<td>函数调用时，第3个参数</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>除法运算中，存放运算结果的余数</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>乘法运算中，存放运算结果溢出的部分</td>\n</tr>\n<tr>\n<td>rbp</td>\n<td>被调用者保存</td>\n<td>frame pointer，存放当前函数调用时栈的基地址</td>\n</tr>\n<tr>\n<td>rsp</td>\n<td>被调用者保存</td>\n<td>时刻指向栈顶</td>\n</tr>\n<tr>\n<td>rdi</td>\n<td>否</td>\n<td>函数调用时，第1个参数</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>rep movsb中的目的寄存器</td>\n</tr>\n<tr>\n<td>rsi</td>\n<td>否</td>\n<td>函数调用时，第2个参数</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>rep movsb中的源寄存器</td>\n</tr>\n<tr>\n<td>r8</td>\n<td>否</td>\n<td>函数调用时，第5个参数</td>\n</tr>\n<tr>\n<td>r9</td>\n<td>否</td>\n<td>函数调用时，第6个参数</td>\n</tr>\n<tr>\n<td>r10</td>\n<td>否</td>\n<td></td>\n</tr>\n<tr>\n<td>r11</td>\n<td>否</td>\n<td></td>\n</tr>\n<tr>\n<td>r12</td>\n<td>被调用者保存</td>\n<td></td>\n</tr>\n<tr>\n<td>r13</td>\n<td>被调用者保存</td>\n<td></td>\n</tr>\n<tr>\n<td>r14</td>\n<td>被调用者保存</td>\n<td></td>\n</tr>\n<tr>\n<td>r15</td>\n<td>被调用者保存</td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h2><h3 id=\"1-前缀、操作数的方向、操作码的后缀\"><a href=\"#1-前缀、操作数的方向、操作码的后缀\" class=\"headerlink\" title=\"1. 前缀、操作数的方向、操作码的后缀\"></a>1. 前缀、操作数的方向、操作码的后缀</h3><p>关于前缀，AT&amp;T 汇编中：</p>\n<pre><code>寄存器：“%”\n立即数：“$”\n十六进制数：“0x”\n</code></pre>\n<p>在AT&amp;T 语境中说到386的通用寄存器时，会这样描述：8个32-bit寄存器 %eax，%ebx，%ecx，%edx，%edi，%esi，%ebp，%esp。比如：在stage1.s中，有这么一个定义：</p>\n<pre><code>#define ABS(x) （x-_start+0x7c00）\n</code></pre>\n<p>那么你就会知到0x7c00是个十六进制数（_start函数的入口地址就位于内存的0x7c00处）。而在设置int 0x13的0x42功能号时，它是这么说的：</p>\n<pre><code>movb $0x42,%ah\n</code></pre>\n<p>这句告诉了我们一些不同之处：</p>\n<pre><code>首先，操作码的后缀l表示的是操作码的大小：\nl是长整数32位，\nmovw是16位，\nmovb是8位；\n\n其次，立即数是用$前缀来表示的，就像$0x42；\n再次，寄存器的名字是有%前缀的，像例子中的%ah；\n最后，操作数的方向有点不一样，比如把立即数$0x42放 到寄存器%ah中，用的是movb $0x42,%ah，也即源操作数在前，目的操作数在后，这一点和intel汇编语法正好相反。\n</code></pre>\n<p>对于内存单元操作数来说，在AT&amp;T 中是把寄存器用（）括起来，而非[]。比如：</p>\n<pre><code>movl %ebx,8（%si）\n</code></pre>\n<p>将ebx寄存器里的值放到内存地址是8（%si）的内存单元上。正好，这里同时遇到了另一个问题，就是在AT&amp;T 汇编中，间接寻址方式是有别于intel汇编的。上例中的8（%si）就相当于intel汇编中的[si+8]。</p>\n<h3 id=\"2，运算指令\"><a href=\"#2，运算指令\" class=\"headerlink\" title=\"2，运算指令\"></a>2，运算指令</h3><p>一些常见的命令：</p>\n<pre><code>add %r10,%r11 # r10 + r11，结果放到r11 \nadd $5,%r10 # 5 + r10，结果放到r10\ndiv %r10 # rax 除以r10，商放到rax，余数放到rdx\ninc %r10 # r10 加1\nmul %r10 # 将rax乘以 r10, 将结果放到rax中，溢出部分放到rdx \n</code></pre>\n<h2 id=\"3，拷贝指令\"><a href=\"#3，拷贝指令\" class=\"headerlink\" title=\"3，拷贝指令\"></a>3，拷贝指令</h2><p>这些拷贝有从寄存器到寄存器、从寄存器到内存</p>\n<pre><code>mov %r10,%r11 #将r10寄存器的值赋值给r11 ；\nmov $99,%r10 #将立即数99赋值给r10寄存器； \nmov %r10,(%r11) # 将r10的值拷贝到r11寄存器中的数值指向的内存地址上； \nmov (%r10),%r11 # 将r10中数值指向的内存地址上的内容拷贝到r11；push %r10 # 将r10的值放到栈上 ；\npop %r10 # 将栈顶的值pop到r10寄存器上。\n</code></pre>\n<h2 id=\"4，流程控制指令\"><a href=\"#4，流程控制指令\" class=\"headerlink\" title=\"4，流程控制指令\"></a>4，流程控制指令</h2><p>label（标号）程序控制语句</p>\n<pre><code>cmpb $GRUB_INVALID_DRIVE,%al\n    je 1f\n    movb %al,%dl\n1:\n    pushw %dx\n</code></pre>\n<p>上面就用到了标号，je 1f，前面的两个数进行比较，如果相等就跳转到1的位置。<br>注意，1后面的f表示的是forward，即从je指令后继续往前走来寻找1这个标号。所以，如果程序中有好几个叫做1的标号，就要看是1f还是1b了，b代表backward，方向和f相反。CivilNet BBS里有这么一个例子可以更好的帮助我们理解：</p>\n<pre><code>1: cmp  $0,  (%si)  \n  je  1f        # 跳转到后面的1标示的地方，也就是第6行\n  movsb  \n  stosb  \n  jmp  1b       # 跳转到前面1表示的地方  ，也就是第1行\n1: jmp  1b      # 跳转到前面1表示的地方，第6行，其实就是个死循环\n\ncmp %r10,%r11   # 比较r10 和 r11，根据比较结果来设置CPU的状态寄存器，从而影响后面的jump语句；\ncmp $99,%r11    # 比较99和r11，根据比较结果来设置CPU的状态寄存器，从而影响后面的jump语句；\njmp label       #跳转到label je label #如果相等，跳转到label jne label       # 如果不相等，跳转到label \njl label        # 如果小于，跳转到label \njg label        # 如果大于，跳转到label \ncall label      # 调用函数\nret             # 从函数调用返回\nsyscall         #系统调用 (32位模式下, 使用&quot;int $0x80&quot; 软中断)\n</code></pre>\n<h2 id=\"AT-T-汇编指示符-Assembler-Directive\"><a href=\"#AT-T-汇编指示符-Assembler-Directive\" class=\"headerlink\" title=\"AT&amp;T 汇编指示符 Assembler Directive\"></a>AT&amp;T 汇编指示符 Assembler Directive</h2><p>所有的汇编指示符都由句号（’.’）开头。命令名的其余是字母,通常使用小写</p>\n<h3 id=\"1，-byte-表达式（expression-rs）\"><a href=\"#1，-byte-表达式（expression-rs）\" class=\"headerlink\" title=\"1，.byte 表达式（expression_rs）\"></a>1，.byte 表达式（expression_rs）</h3><p>.byte可不带参数或者带多个表达式参数，表达式之间由逗点分隔。每个表达式参数都被汇编成下一个字节。在stage1.s中，有这么一段代码：</p>\n<pre><code>after_BPB:\nCLI\n.byte 0x80,0xca\n</code></pre>\n<p>那么编译器在编译时，就会在cli指令的下面接着放上0x80和0xca，因为每个表达式要占用1个字节，所以此处一共占用2个字节。</p>\n<h3 id=\"2，-word-表达式\"><a href=\"#2，-word-表达式\" class=\"headerlink\" title=\"2，.word 表达式\"></a>2，.word 表达式</h3><p>这个表达式表示任意一节中的一个或多个表达式（同样用逗号分开），表达式占一个字（两个字节）。类似的还有.long。例：</p>\n<pre><code>.word 0x800\n</code></pre>\n<h3 id=\"3，-file-字符（string）\"><a href=\"#3，-file-字符（string）\" class=\"headerlink\" title=\"3，.file 字符（string）\"></a>3，.file 字符（string）</h3><p>.file 通告编译器我们准备开启一个新的逻辑文件。 string 是新文件名。</p>\n<pre><code>.file ”stage1.s”\n</code></pre>\n<h3 id=\"4，-text-小节（subsection）\"><a href=\"#4，-text-小节（subsection）\" class=\"headerlink\" title=\"4，.text 小节（subsection）\"></a>4，.text 小节（subsection）</h3><p>通知as编译器把后续语句汇编到编号为subsection的正文子段的末尾，subsection是一个纯粹的表达式。如果省略了参数subsection，则使用编号为0的子段。例：</p>\n<pre><code>.text\n</code></pre>\n<h3 id=\"5，-code16\"><a href=\"#5，-code16\" class=\"headerlink\" title=\"5，.code16\"></a>5，.code16</h3><p>告诉编译器生成16位的指令</p>\n<h3 id=\"6，-globl\"><a href=\"#6，-globl\" class=\"headerlink\" title=\"6，.globl\"></a>6，.globl</h3><p>.globl使得连接程序（ld）能够看到symbol，如果gemfield在局部程序中定义了symbol，那么与这个局部程序链接的局部程序也能存取symbol，例：</p>\n<pre><code>.globl SYMBOL_NAME(idt) \n</code></pre>\n<p>定义idt为全局符号。</p>\n<h3 id=\"7，-fill-repeat-size-value\"><a href=\"#7，-fill-repeat-size-value\" class=\"headerlink\" title=\"7，.fill repeat , size , value\"></a>7，.fill repeat , size , value</h3><p>生成<strong>size</strong>个字节的<strong>repeat</strong>个副本。<br>repeat, size 和value都必须是纯粹的表达式。<br>repeat 可以是0或更大的值。<br>size 可以是0或更大的值, 但即使size大于8,也被视作8，以兼容其它的汇编器。</p>\n<p>例如，在linux初始化的过程中，对全局描述符表GDT进行设置的最后一句为：</p>\n<pre><code>.fill NR_CPUS*4,8,0\n</code></pre>\n<h2 id=\"编译和链接\"><a href=\"#编译和链接\" class=\"headerlink\" title=\"编译和链接\"></a>编译和链接</h2><p>linux下有两种方式，一种是使用汇编程序GAS和链接程序ld：</p>\n<pre><code>as filename.s –o filename.o\nld filename.o –o filename \n</code></pre>\n<p>最终将源代码转换为目标文件.o再连接为可执行文件filename。另一种就是更上层的gcc（内部使用了as）：</p>\n<pre><code>gcc –o filename filename.S\n</code></pre>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h2 id=\"开始之前\"><a href=\"#开始之前\" class=\"headerlink\" title=\"开始之前\"></a>开始之前</h2><p>大名鼎鼎的<strong>Hello World</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.data </span><br><span class=\"line\">  msg : .string &quot;Hello Word!\\n&quot;</span><br><span class=\"line\">  len = . -msg</span><br><span class=\"line\"></span><br><span class=\"line\">.text</span><br><span class=\"line\">.global _start </span><br><span class=\"line\"></span><br><span class=\"line\">_start :</span><br><span class=\"line\">  movl $len,%edx  # len -&gt; edx</span><br><span class=\"line\">  movl $msg,%ecx  # msg -&gt; ecx</span><br><span class=\"line\">  movl $1,%ebx</span><br><span class=\"line\">  movl $4,%eax    # 系统调用号</span><br><span class=\"line\">  int $0x80       # 调用  </span><br><span class=\"line\"></span><br><span class=\"line\">  movl $0,%ebx    # 退出代码</span><br><span class=\"line\">  movl $1,%eax</span><br><span class=\"line\">  int $0x80</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"通用寄存器\"><a href=\"#通用寄存器\" class=\"headerlink\" title=\"通用寄存器\"></a>通用寄存器</h2><p>汇编就是在几个寄存器间倒来倒去</p>\n<p>寄存器有两种概念，逻辑上的和物理上的，分别是：</p>\n<ul>\n<li>架构相关寄存器（architectural register）</li>\n<li>物理寄存器（physical register）</li>\n</ul>\n<p>前者是指令集（ISA）提供给编译器可见的，相当于API接口规范，一共16个通用寄存器；后者是硬件上实际设计的，软件领域不直接接触。最新的CPU可能有上百个实际的物理寄存器。对软件开发人员来说，我们只需要关注逻辑上的通用寄存器。</p>\n<p>这16个逻辑上的通用寄存器如下所示：</p>\n<table>\n<thead>\n<tr>\n<th>寄存器</th>\n<th>约束</th>\n<th>惯例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>rax</td>\n<td>否</td>\n<td>系统调用时，调用号</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>函数返回值</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>除法运算中，存放除数、以及运算结果的商</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>乘法运算中，存放被乘数、以及运算结果</td>\n</tr>\n<tr>\n<td>rbx</td>\n<td>被调用者保存</td>\n<td>在32位模式下，用来存放GOT的地址</td>\n</tr>\n<tr>\n<td>rcx</td>\n<td>否</td>\n<td>函数调用时，第4个参数</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>有时用作counter</td>\n</tr>\n<tr>\n<td>rdx</td>\n<td>否</td>\n<td>函数调用时，第3个参数</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>除法运算中，存放运算结果的余数</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>乘法运算中，存放运算结果溢出的部分</td>\n</tr>\n<tr>\n<td>rbp</td>\n<td>被调用者保存</td>\n<td>frame pointer，存放当前函数调用时栈的基地址</td>\n</tr>\n<tr>\n<td>rsp</td>\n<td>被调用者保存</td>\n<td>时刻指向栈顶</td>\n</tr>\n<tr>\n<td>rdi</td>\n<td>否</td>\n<td>函数调用时，第1个参数</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>rep movsb中的目的寄存器</td>\n</tr>\n<tr>\n<td>rsi</td>\n<td>否</td>\n<td>函数调用时，第2个参数</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>rep movsb中的源寄存器</td>\n</tr>\n<tr>\n<td>r8</td>\n<td>否</td>\n<td>函数调用时，第5个参数</td>\n</tr>\n<tr>\n<td>r9</td>\n<td>否</td>\n<td>函数调用时，第6个参数</td>\n</tr>\n<tr>\n<td>r10</td>\n<td>否</td>\n<td></td>\n</tr>\n<tr>\n<td>r11</td>\n<td>否</td>\n<td></td>\n</tr>\n<tr>\n<td>r12</td>\n<td>被调用者保存</td>\n<td></td>\n</tr>\n<tr>\n<td>r13</td>\n<td>被调用者保存</td>\n<td></td>\n</tr>\n<tr>\n<td>r14</td>\n<td>被调用者保存</td>\n<td></td>\n</tr>\n<tr>\n<td>r15</td>\n<td>被调用者保存</td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h2><h3 id=\"1-前缀、操作数的方向、操作码的后缀\"><a href=\"#1-前缀、操作数的方向、操作码的后缀\" class=\"headerlink\" title=\"1. 前缀、操作数的方向、操作码的后缀\"></a>1. 前缀、操作数的方向、操作码的后缀</h3><p>关于前缀，AT&amp;T 汇编中：</p>\n<pre><code>寄存器：“%”\n立即数：“$”\n十六进制数：“0x”\n</code></pre>\n<p>在AT&amp;T 语境中说到386的通用寄存器时，会这样描述：8个32-bit寄存器 %eax，%ebx，%ecx，%edx，%edi，%esi，%ebp，%esp。比如：在stage1.s中，有这么一个定义：</p>\n<pre><code>#define ABS(x) （x-_start+0x7c00）\n</code></pre>\n<p>那么你就会知到0x7c00是个十六进制数（_start函数的入口地址就位于内存的0x7c00处）。而在设置int 0x13的0x42功能号时，它是这么说的：</p>\n<pre><code>movb $0x42,%ah\n</code></pre>\n<p>这句告诉了我们一些不同之处：</p>\n<pre><code>首先，操作码的后缀l表示的是操作码的大小：\nl是长整数32位，\nmovw是16位，\nmovb是8位；\n\n其次，立即数是用$前缀来表示的，就像$0x42；\n再次，寄存器的名字是有%前缀的，像例子中的%ah；\n最后，操作数的方向有点不一样，比如把立即数$0x42放 到寄存器%ah中，用的是movb $0x42,%ah，也即源操作数在前，目的操作数在后，这一点和intel汇编语法正好相反。\n</code></pre>\n<p>对于内存单元操作数来说，在AT&amp;T 中是把寄存器用（）括起来，而非[]。比如：</p>\n<pre><code>movl %ebx,8（%si）\n</code></pre>\n<p>将ebx寄存器里的值放到内存地址是8（%si）的内存单元上。正好，这里同时遇到了另一个问题，就是在AT&amp;T 汇编中，间接寻址方式是有别于intel汇编的。上例中的8（%si）就相当于intel汇编中的[si+8]。</p>\n<h3 id=\"2，运算指令\"><a href=\"#2，运算指令\" class=\"headerlink\" title=\"2，运算指令\"></a>2，运算指令</h3><p>一些常见的命令：</p>\n<pre><code>add %r10,%r11 # r10 + r11，结果放到r11 \nadd $5,%r10 # 5 + r10，结果放到r10\ndiv %r10 # rax 除以r10，商放到rax，余数放到rdx\ninc %r10 # r10 加1\nmul %r10 # 将rax乘以 r10, 将结果放到rax中，溢出部分放到rdx \n</code></pre>\n<h2 id=\"3，拷贝指令\"><a href=\"#3，拷贝指令\" class=\"headerlink\" title=\"3，拷贝指令\"></a>3，拷贝指令</h2><p>这些拷贝有从寄存器到寄存器、从寄存器到内存</p>\n<pre><code>mov %r10,%r11 #将r10寄存器的值赋值给r11 ；\nmov $99,%r10 #将立即数99赋值给r10寄存器； \nmov %r10,(%r11) # 将r10的值拷贝到r11寄存器中的数值指向的内存地址上； \nmov (%r10),%r11 # 将r10中数值指向的内存地址上的内容拷贝到r11；push %r10 # 将r10的值放到栈上 ；\npop %r10 # 将栈顶的值pop到r10寄存器上。\n</code></pre>\n<h2 id=\"4，流程控制指令\"><a href=\"#4，流程控制指令\" class=\"headerlink\" title=\"4，流程控制指令\"></a>4，流程控制指令</h2><p>label（标号）程序控制语句</p>\n<pre><code>cmpb $GRUB_INVALID_DRIVE,%al\n    je 1f\n    movb %al,%dl\n1:\n    pushw %dx\n</code></pre>\n<p>上面就用到了标号，je 1f，前面的两个数进行比较，如果相等就跳转到1的位置。<br>注意，1后面的f表示的是forward，即从je指令后继续往前走来寻找1这个标号。所以，如果程序中有好几个叫做1的标号，就要看是1f还是1b了，b代表backward，方向和f相反。CivilNet BBS里有这么一个例子可以更好的帮助我们理解：</p>\n<pre><code>1: cmp  $0,  (%si)  \n  je  1f        # 跳转到后面的1标示的地方，也就是第6行\n  movsb  \n  stosb  \n  jmp  1b       # 跳转到前面1表示的地方  ，也就是第1行\n1: jmp  1b      # 跳转到前面1表示的地方，第6行，其实就是个死循环\n\ncmp %r10,%r11   # 比较r10 和 r11，根据比较结果来设置CPU的状态寄存器，从而影响后面的jump语句；\ncmp $99,%r11    # 比较99和r11，根据比较结果来设置CPU的状态寄存器，从而影响后面的jump语句；\njmp label       #跳转到label je label #如果相等，跳转到label jne label       # 如果不相等，跳转到label \njl label        # 如果小于，跳转到label \njg label        # 如果大于，跳转到label \ncall label      # 调用函数\nret             # 从函数调用返回\nsyscall         #系统调用 (32位模式下, 使用&quot;int $0x80&quot; 软中断)\n</code></pre>\n<h2 id=\"AT-T-汇编指示符-Assembler-Directive\"><a href=\"#AT-T-汇编指示符-Assembler-Directive\" class=\"headerlink\" title=\"AT&amp;T 汇编指示符 Assembler Directive\"></a>AT&amp;T 汇编指示符 Assembler Directive</h2><p>所有的汇编指示符都由句号（’.’）开头。命令名的其余是字母,通常使用小写</p>\n<h3 id=\"1，-byte-表达式（expression-rs）\"><a href=\"#1，-byte-表达式（expression-rs）\" class=\"headerlink\" title=\"1，.byte 表达式（expression_rs）\"></a>1，.byte 表达式（expression_rs）</h3><p>.byte可不带参数或者带多个表达式参数，表达式之间由逗点分隔。每个表达式参数都被汇编成下一个字节。在stage1.s中，有这么一段代码：</p>\n<pre><code>after_BPB:\nCLI\n.byte 0x80,0xca\n</code></pre>\n<p>那么编译器在编译时，就会在cli指令的下面接着放上0x80和0xca，因为每个表达式要占用1个字节，所以此处一共占用2个字节。</p>\n<h3 id=\"2，-word-表达式\"><a href=\"#2，-word-表达式\" class=\"headerlink\" title=\"2，.word 表达式\"></a>2，.word 表达式</h3><p>这个表达式表示任意一节中的一个或多个表达式（同样用逗号分开），表达式占一个字（两个字节）。类似的还有.long。例：</p>\n<pre><code>.word 0x800\n</code></pre>\n<h3 id=\"3，-file-字符（string）\"><a href=\"#3，-file-字符（string）\" class=\"headerlink\" title=\"3，.file 字符（string）\"></a>3，.file 字符（string）</h3><p>.file 通告编译器我们准备开启一个新的逻辑文件。 string 是新文件名。</p>\n<pre><code>.file ”stage1.s”\n</code></pre>\n<h3 id=\"4，-text-小节（subsection）\"><a href=\"#4，-text-小节（subsection）\" class=\"headerlink\" title=\"4，.text 小节（subsection）\"></a>4，.text 小节（subsection）</h3><p>通知as编译器把后续语句汇编到编号为subsection的正文子段的末尾，subsection是一个纯粹的表达式。如果省略了参数subsection，则使用编号为0的子段。例：</p>\n<pre><code>.text\n</code></pre>\n<h3 id=\"5，-code16\"><a href=\"#5，-code16\" class=\"headerlink\" title=\"5，.code16\"></a>5，.code16</h3><p>告诉编译器生成16位的指令</p>\n<h3 id=\"6，-globl\"><a href=\"#6，-globl\" class=\"headerlink\" title=\"6，.globl\"></a>6，.globl</h3><p>.globl使得连接程序（ld）能够看到symbol，如果gemfield在局部程序中定义了symbol，那么与这个局部程序链接的局部程序也能存取symbol，例：</p>\n<pre><code>.globl SYMBOL_NAME(idt) \n</code></pre>\n<p>定义idt为全局符号。</p>\n<h3 id=\"7，-fill-repeat-size-value\"><a href=\"#7，-fill-repeat-size-value\" class=\"headerlink\" title=\"7，.fill repeat , size , value\"></a>7，.fill repeat , size , value</h3><p>生成<strong>size</strong>个字节的<strong>repeat</strong>个副本。<br>repeat, size 和value都必须是纯粹的表达式。<br>repeat 可以是0或更大的值。<br>size 可以是0或更大的值, 但即使size大于8,也被视作8，以兼容其它的汇编器。</p>\n<p>例如，在linux初始化的过程中，对全局描述符表GDT进行设置的最后一句为：</p>\n<pre><code>.fill NR_CPUS*4,8,0\n</code></pre>\n<h2 id=\"编译和链接\"><a href=\"#编译和链接\" class=\"headerlink\" title=\"编译和链接\"></a>编译和链接</h2><p>linux下有两种方式，一种是使用汇编程序GAS和链接程序ld：</p>\n<pre><code>as filename.s –o filename.o\nld filename.o –o filename \n</code></pre>\n<p>最终将源代码转换为目标文件.o再连接为可执行文件filename。另一种就是更上层的gcc（内部使用了as）：</p>\n<pre><code>gcc –o filename filename.S\n</code></pre>\n"},{"title":"Linux User Group","date":"2023-03-24T13:33:00.000Z","_content":"# Linux User\n\nLinux 下用户和组管理\n\n## 4个文件\n\n1. /etc/passwd : 保存用户账户信息\n2. /etc/shadow : 用户账户密码 \n3. /etc/group ： 账户分组信息\n4. /etc/gshadow ：组口令、组管理员\n\n## 获取用户和组相关信息\n\n```bash\n# 当前用户的信息\nid\n\n# 当前登陆的用户名\nusers\n\n# 当前用户的组\ngroups\n\nwho/whoami\n\ncat /etc/passwd\n```\n\n## 用户管理\n\n###  添加用户\n\n1. useradd\n```bash\nuseradd <arg> username\n  -c comment\n  -d home-dir\n  -e expire-date\n  -g user-group-name\n  -G supplementary-group\n  -s shell-path\n  -u uid\n  -D username\n```\n\n2. adduser\n```\nadduser\n```\n\n### 修改用户\n\n1. usermod\n```\nusermod <arg> username\n  -l newname \n  -L lock  \n  -U unlock\n  -u uid\n  -G groups\n```\n\n2. passwd\n\n```\npasswd <arg> username\n  -S(tatus) \n  -l(ock)\n  -u(nlock)\n  -d(elete-passwd) \n  -e(xpire)\n```\n\n无参数即设置密码\n\n3. userdel\n\n```\nuserdel [-rf] username\n```\n\n-r 删除/etc/passwd, /etc/shadow, /etc/group, /etc/gshadow, 的记录，同时删除用户的主目录\n /var/spool/mail\n\n## 组管理\n\n1. groupadd 添加组\n\n\n```\ngroupadd <arg> groupname\n  -g gid\n  -p password\n  -U username,...\n  -r (Create a system group.)\n```\n\n2. groupmod 修改组\n\n```\ngroupmod <arg> groupname\n  -g gid\n  -n gname\n  -p passwd\n```\n\n3. groupdel 删除组\n\n```\ngroupdel [-f] groupname\n```\n\n4. gpasswd 增删用户到组\n\n```\ngpasswd <arg> username groupname\n  -a(dd)\n  -d(elete)\n  -A(dmin)\n  -M(embers) username,...\n```","source":"_posts/Linux-User.md","raw":"---\ntitle: Linux User Group\ndate: 2023-03-24 21:33:00\ntags: Linux\n---\n# Linux User\n\nLinux 下用户和组管理\n\n## 4个文件\n\n1. /etc/passwd : 保存用户账户信息\n2. /etc/shadow : 用户账户密码 \n3. /etc/group ： 账户分组信息\n4. /etc/gshadow ：组口令、组管理员\n\n## 获取用户和组相关信息\n\n```bash\n# 当前用户的信息\nid\n\n# 当前登陆的用户名\nusers\n\n# 当前用户的组\ngroups\n\nwho/whoami\n\ncat /etc/passwd\n```\n\n## 用户管理\n\n###  添加用户\n\n1. useradd\n```bash\nuseradd <arg> username\n  -c comment\n  -d home-dir\n  -e expire-date\n  -g user-group-name\n  -G supplementary-group\n  -s shell-path\n  -u uid\n  -D username\n```\n\n2. adduser\n```\nadduser\n```\n\n### 修改用户\n\n1. usermod\n```\nusermod <arg> username\n  -l newname \n  -L lock  \n  -U unlock\n  -u uid\n  -G groups\n```\n\n2. passwd\n\n```\npasswd <arg> username\n  -S(tatus) \n  -l(ock)\n  -u(nlock)\n  -d(elete-passwd) \n  -e(xpire)\n```\n\n无参数即设置密码\n\n3. userdel\n\n```\nuserdel [-rf] username\n```\n\n-r 删除/etc/passwd, /etc/shadow, /etc/group, /etc/gshadow, 的记录，同时删除用户的主目录\n /var/spool/mail\n\n## 组管理\n\n1. groupadd 添加组\n\n\n```\ngroupadd <arg> groupname\n  -g gid\n  -p password\n  -U username,...\n  -r (Create a system group.)\n```\n\n2. groupmod 修改组\n\n```\ngroupmod <arg> groupname\n  -g gid\n  -n gname\n  -p passwd\n```\n\n3. groupdel 删除组\n\n```\ngroupdel [-f] groupname\n```\n\n4. gpasswd 增删用户到组\n\n```\ngpasswd <arg> username groupname\n  -a(dd)\n  -d(elete)\n  -A(dmin)\n  -M(embers) username,...\n```","slug":"Linux-User","published":1,"updated":"2023-06-24T03:14:17.882Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5ui001plv9e9x5wba01","content":"<h1 id=\"Linux-User\"><a href=\"#Linux-User\" class=\"headerlink\" title=\"Linux User\"></a>Linux User</h1><p>Linux 下用户和组管理</p>\n<h2 id=\"4个文件\"><a href=\"#4个文件\" class=\"headerlink\" title=\"4个文件\"></a>4个文件</h2><ol>\n<li>&#x2F;etc&#x2F;passwd : 保存用户账户信息</li>\n<li>&#x2F;etc&#x2F;shadow : 用户账户密码 </li>\n<li>&#x2F;etc&#x2F;group ： 账户分组信息</li>\n<li>&#x2F;etc&#x2F;gshadow ：组口令、组管理员</li>\n</ol>\n<h2 id=\"获取用户和组相关信息\"><a href=\"#获取用户和组相关信息\" class=\"headerlink\" title=\"获取用户和组相关信息\"></a>获取用户和组相关信息</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 当前用户的信息</span></span><br><span class=\"line\"><span class=\"built_in\">id</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 当前登陆的用户名</span></span><br><span class=\"line\"><span class=\"built_in\">users</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 当前用户的组</span></span><br><span class=\"line\"><span class=\"built_in\">groups</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">who</span>/whoami</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cat</span> /etc/passwd</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"用户管理\"><a href=\"#用户管理\" class=\"headerlink\" title=\"用户管理\"></a>用户管理</h2><h3 id=\"添加用户\"><a href=\"#添加用户\" class=\"headerlink\" title=\"添加用户\"></a>添加用户</h3><ol>\n<li><p>useradd</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd &lt;arg&gt; username</span><br><span class=\"line\">  -c comment</span><br><span class=\"line\">  -d home-dir</span><br><span class=\"line\">  -e expire-date</span><br><span class=\"line\">  -g user-group-name</span><br><span class=\"line\">  -G supplementary-group</span><br><span class=\"line\">  -s shell-path</span><br><span class=\"line\">  -u uid</span><br><span class=\"line\">  -D username</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>adduser</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adduser</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"修改用户\"><a href=\"#修改用户\" class=\"headerlink\" title=\"修改用户\"></a>修改用户</h3><ol>\n<li><p>usermod</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">usermod &lt;arg&gt; username</span><br><span class=\"line\">  -l newname </span><br><span class=\"line\">  -L lock  </span><br><span class=\"line\">  -U unlock</span><br><span class=\"line\">  -u uid</span><br><span class=\"line\">  -G groups</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>passwd</p>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">passwd &lt;arg&gt; username</span><br><span class=\"line\">  -S(tatus) </span><br><span class=\"line\">  -l(ock)</span><br><span class=\"line\">  -u(nlock)</span><br><span class=\"line\">  -d(elete-passwd) </span><br><span class=\"line\">  -e(xpire)</span><br></pre></td></tr></table></figure>\n\n<p>无参数即设置密码</p>\n<ol start=\"3\">\n<li>userdel</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">userdel [-rf] username</span><br></pre></td></tr></table></figure>\n\n<p>-r 删除&#x2F;etc&#x2F;passwd, &#x2F;etc&#x2F;shadow, &#x2F;etc&#x2F;group, &#x2F;etc&#x2F;gshadow, 的记录，同时删除用户的主目录<br> &#x2F;var&#x2F;spool&#x2F;mail</p>\n<h2 id=\"组管理\"><a href=\"#组管理\" class=\"headerlink\" title=\"组管理\"></a>组管理</h2><ol>\n<li>groupadd 添加组</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupadd &lt;arg&gt; groupname</span><br><span class=\"line\">  -g gid</span><br><span class=\"line\">  -p password</span><br><span class=\"line\">  -U username,...</span><br><span class=\"line\">  -r (Create a system group.)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>groupmod 修改组</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupmod &lt;arg&gt; groupname</span><br><span class=\"line\">  -g gid</span><br><span class=\"line\">  -n gname</span><br><span class=\"line\">  -p passwd</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>groupdel 删除组</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupdel [-f] groupname</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>gpasswd 增删用户到组</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gpasswd &lt;arg&gt; username groupname</span><br><span class=\"line\">  -a(dd)</span><br><span class=\"line\">  -d(elete)</span><br><span class=\"line\">  -A(dmin)</span><br><span class=\"line\">  -M(embers) username,...</span><br></pre></td></tr></table></figure>","site":{"data":{}},"cover":false,"excerpt":"","more":"<h1 id=\"Linux-User\"><a href=\"#Linux-User\" class=\"headerlink\" title=\"Linux User\"></a>Linux User</h1><p>Linux 下用户和组管理</p>\n<h2 id=\"4个文件\"><a href=\"#4个文件\" class=\"headerlink\" title=\"4个文件\"></a>4个文件</h2><ol>\n<li>&#x2F;etc&#x2F;passwd : 保存用户账户信息</li>\n<li>&#x2F;etc&#x2F;shadow : 用户账户密码 </li>\n<li>&#x2F;etc&#x2F;group ： 账户分组信息</li>\n<li>&#x2F;etc&#x2F;gshadow ：组口令、组管理员</li>\n</ol>\n<h2 id=\"获取用户和组相关信息\"><a href=\"#获取用户和组相关信息\" class=\"headerlink\" title=\"获取用户和组相关信息\"></a>获取用户和组相关信息</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 当前用户的信息</span></span><br><span class=\"line\"><span class=\"built_in\">id</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 当前登陆的用户名</span></span><br><span class=\"line\"><span class=\"built_in\">users</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 当前用户的组</span></span><br><span class=\"line\"><span class=\"built_in\">groups</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">who</span>/whoami</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cat</span> /etc/passwd</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"用户管理\"><a href=\"#用户管理\" class=\"headerlink\" title=\"用户管理\"></a>用户管理</h2><h3 id=\"添加用户\"><a href=\"#添加用户\" class=\"headerlink\" title=\"添加用户\"></a>添加用户</h3><ol>\n<li><p>useradd</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd &lt;arg&gt; username</span><br><span class=\"line\">  -c comment</span><br><span class=\"line\">  -d home-dir</span><br><span class=\"line\">  -e expire-date</span><br><span class=\"line\">  -g user-group-name</span><br><span class=\"line\">  -G supplementary-group</span><br><span class=\"line\">  -s shell-path</span><br><span class=\"line\">  -u uid</span><br><span class=\"line\">  -D username</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>adduser</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adduser</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"修改用户\"><a href=\"#修改用户\" class=\"headerlink\" title=\"修改用户\"></a>修改用户</h3><ol>\n<li><p>usermod</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">usermod &lt;arg&gt; username</span><br><span class=\"line\">  -l newname </span><br><span class=\"line\">  -L lock  </span><br><span class=\"line\">  -U unlock</span><br><span class=\"line\">  -u uid</span><br><span class=\"line\">  -G groups</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>passwd</p>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">passwd &lt;arg&gt; username</span><br><span class=\"line\">  -S(tatus) </span><br><span class=\"line\">  -l(ock)</span><br><span class=\"line\">  -u(nlock)</span><br><span class=\"line\">  -d(elete-passwd) </span><br><span class=\"line\">  -e(xpire)</span><br></pre></td></tr></table></figure>\n\n<p>无参数即设置密码</p>\n<ol start=\"3\">\n<li>userdel</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">userdel [-rf] username</span><br></pre></td></tr></table></figure>\n\n<p>-r 删除&#x2F;etc&#x2F;passwd, &#x2F;etc&#x2F;shadow, &#x2F;etc&#x2F;group, &#x2F;etc&#x2F;gshadow, 的记录，同时删除用户的主目录<br> &#x2F;var&#x2F;spool&#x2F;mail</p>\n<h2 id=\"组管理\"><a href=\"#组管理\" class=\"headerlink\" title=\"组管理\"></a>组管理</h2><ol>\n<li>groupadd 添加组</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupadd &lt;arg&gt; groupname</span><br><span class=\"line\">  -g gid</span><br><span class=\"line\">  -p password</span><br><span class=\"line\">  -U username,...</span><br><span class=\"line\">  -r (Create a system group.)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>groupmod 修改组</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupmod &lt;arg&gt; groupname</span><br><span class=\"line\">  -g gid</span><br><span class=\"line\">  -n gname</span><br><span class=\"line\">  -p passwd</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>groupdel 删除组</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupdel [-f] groupname</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>gpasswd 增删用户到组</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gpasswd &lt;arg&gt; username groupname</span><br><span class=\"line\">  -a(dd)</span><br><span class=\"line\">  -d(elete)</span><br><span class=\"line\">  -A(dmin)</span><br><span class=\"line\">  -M(embers) username,...</span><br></pre></td></tr></table></figure>"},{"title":"vim 进阶","date":"2023-04-24T03:10:55.000Z","_content":"\n# vim 进阶\n\n## 开始之前\n\n此时的你已经熟悉vim的基本使用（打开、编辑、保存和退出），但仍然觉得vim用起来别扭。\n\n究其原因，我觉得是现在的我们已经习惯于使用鼠标操作（滑动、点击、长按选择）而vim则使用按键完成鼠标的工作。以至于我们看到一段文章无意识的想用鼠标选择，但是使用vim的我们不得不先动动脑子想想该按那几个按键。这种别扭应该只会存在于不熟悉vim按键的阶段。所谓进阶就是熟悉按键操作克服这种别捏。\n\n要熟悉按键，我们最先想到的也许是去记忆键位，但对于vim那并不是最快捷高效的方式。\n\nvim 的核心概念是**模式编辑**，即按键在不同的模式下作用不同。 你可以在普通模式下浏览文件，在插入模式下插入文本，在可视模式下选择行或块，在命令模式下执行命令等。\n\n和模式编辑紧密相连的概念是 **操作符** 和 **动作**。操作符 指的是开始某个行为， 例如：修改、删除或者选择文本，之后你要用一个 动作 来指定需要操作的文本区域。 例如，删除一个单词，执行 daw （ delete around word），删除3个单词，执行 daw （ delete 3 word）。基本上每个按键都是单词的缩写或者执行的次数，知道这些就能更好的理解按键。\n\n如果你能看见 vim 老司机操作，你会发现他们使用 vim 脚本语言就如同钢琴师弹钢琴一样。 复杂的操作只需要几个按键就能完成。他们甚至不用刻意去想，因为这已经成为肌肉记忆了。 这减少认识负荷并帮助人们专注于实际任务。\n\n\n## vim 键位\n\n大概看一眼即可\n\n### vim 键位\n\n![](2023-05-07-16-24-23.png)\n\n### 入门版\n\n![](entry1.png)\n\n### 进阶版\n\n![](advanced1.png)\n\n### 现代版\n\n![](morden1.png)\n\n### 文字版\n\n![](text1.png)\n\n\n## 宏\n\n你可以在 Vim 中录制一系列按键，并把他们存储到寄存器中。对于一些需要临时使用多次的一系列操作，把它们作为宏保存起来会显著地提升效率。对于一些复杂的操作，建议使用 Vim 脚本（vimscript）来实现。\n\n    首先，按下 q，然后按下你想要保存的寄存器，任何小写字母都可以。比如我们来把它保存到 q 这个寄存器中。按下 qq，你会发现命令行里已经显示了 \"recording @q\"。\n    如果你已经录制完成，那么只需要再按一次 q 就可以结束录制。\n    如果你想调用刚才录制的宏，只需要 [count]@q\n    如果你想调用上一次使用的宏，只需要 [count]@@","source":"_posts/Linux-Vim.md","raw":"---\ntitle: vim 进阶\ndate: 2023-04-24 11:10:55\ntags: \n- Linux\n- Vim\n---\n\n# vim 进阶\n\n## 开始之前\n\n此时的你已经熟悉vim的基本使用（打开、编辑、保存和退出），但仍然觉得vim用起来别扭。\n\n究其原因，我觉得是现在的我们已经习惯于使用鼠标操作（滑动、点击、长按选择）而vim则使用按键完成鼠标的工作。以至于我们看到一段文章无意识的想用鼠标选择，但是使用vim的我们不得不先动动脑子想想该按那几个按键。这种别扭应该只会存在于不熟悉vim按键的阶段。所谓进阶就是熟悉按键操作克服这种别捏。\n\n要熟悉按键，我们最先想到的也许是去记忆键位，但对于vim那并不是最快捷高效的方式。\n\nvim 的核心概念是**模式编辑**，即按键在不同的模式下作用不同。 你可以在普通模式下浏览文件，在插入模式下插入文本，在可视模式下选择行或块，在命令模式下执行命令等。\n\n和模式编辑紧密相连的概念是 **操作符** 和 **动作**。操作符 指的是开始某个行为， 例如：修改、删除或者选择文本，之后你要用一个 动作 来指定需要操作的文本区域。 例如，删除一个单词，执行 daw （ delete around word），删除3个单词，执行 daw （ delete 3 word）。基本上每个按键都是单词的缩写或者执行的次数，知道这些就能更好的理解按键。\n\n如果你能看见 vim 老司机操作，你会发现他们使用 vim 脚本语言就如同钢琴师弹钢琴一样。 复杂的操作只需要几个按键就能完成。他们甚至不用刻意去想，因为这已经成为肌肉记忆了。 这减少认识负荷并帮助人们专注于实际任务。\n\n\n## vim 键位\n\n大概看一眼即可\n\n### vim 键位\n\n![](2023-05-07-16-24-23.png)\n\n### 入门版\n\n![](entry1.png)\n\n### 进阶版\n\n![](advanced1.png)\n\n### 现代版\n\n![](morden1.png)\n\n### 文字版\n\n![](text1.png)\n\n\n## 宏\n\n你可以在 Vim 中录制一系列按键，并把他们存储到寄存器中。对于一些需要临时使用多次的一系列操作，把它们作为宏保存起来会显著地提升效率。对于一些复杂的操作，建议使用 Vim 脚本（vimscript）来实现。\n\n    首先，按下 q，然后按下你想要保存的寄存器，任何小写字母都可以。比如我们来把它保存到 q 这个寄存器中。按下 qq，你会发现命令行里已经显示了 \"recording @q\"。\n    如果你已经录制完成，那么只需要再按一次 q 就可以结束录制。\n    如果你想调用刚才录制的宏，只需要 [count]@q\n    如果你想调用上一次使用的宏，只需要 [count]@@","slug":"Linux-Vim","published":1,"updated":"2023-06-23T01:03:06.136Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5ui001qlv9e2oco9mvq","content":"<h1 id=\"vim-进阶\"><a href=\"#vim-进阶\" class=\"headerlink\" title=\"vim 进阶\"></a>vim 进阶</h1><h2 id=\"开始之前\"><a href=\"#开始之前\" class=\"headerlink\" title=\"开始之前\"></a>开始之前</h2><p>此时的你已经熟悉vim的基本使用（打开、编辑、保存和退出），但仍然觉得vim用起来别扭。</p>\n<p>究其原因，我觉得是现在的我们已经习惯于使用鼠标操作（滑动、点击、长按选择）而vim则使用按键完成鼠标的工作。以至于我们看到一段文章无意识的想用鼠标选择，但是使用vim的我们不得不先动动脑子想想该按那几个按键。这种别扭应该只会存在于不熟悉vim按键的阶段。所谓进阶就是熟悉按键操作克服这种别捏。</p>\n<p>要熟悉按键，我们最先想到的也许是去记忆键位，但对于vim那并不是最快捷高效的方式。</p>\n<p>vim 的核心概念是<strong>模式编辑</strong>，即按键在不同的模式下作用不同。 你可以在普通模式下浏览文件，在插入模式下插入文本，在可视模式下选择行或块，在命令模式下执行命令等。</p>\n<p>和模式编辑紧密相连的概念是 <strong>操作符</strong> 和 <strong>动作</strong>。操作符 指的是开始某个行为， 例如：修改、删除或者选择文本，之后你要用一个 动作 来指定需要操作的文本区域。 例如，删除一个单词，执行 daw （ delete around word），删除3个单词，执行 daw （ delete 3 word）。基本上每个按键都是单词的缩写或者执行的次数，知道这些就能更好的理解按键。</p>\n<p>如果你能看见 vim 老司机操作，你会发现他们使用 vim 脚本语言就如同钢琴师弹钢琴一样。 复杂的操作只需要几个按键就能完成。他们甚至不用刻意去想，因为这已经成为肌肉记忆了。 这减少认识负荷并帮助人们专注于实际任务。</p>\n<h2 id=\"vim-键位\"><a href=\"#vim-键位\" class=\"headerlink\" title=\"vim 键位\"></a>vim 键位</h2><p>大概看一眼即可</p>\n<h3 id=\"vim-键位-1\"><a href=\"#vim-键位-1\" class=\"headerlink\" title=\"vim 键位\"></a>vim 键位</h3><p><img src=\"/2023/04/24/Linux-Vim/2023-05-07-16-24-23.png\"></p>\n<h3 id=\"入门版\"><a href=\"#入门版\" class=\"headerlink\" title=\"入门版\"></a>入门版</h3><p><img src=\"/2023/04/24/Linux-Vim/entry1.png\"></p>\n<h3 id=\"进阶版\"><a href=\"#进阶版\" class=\"headerlink\" title=\"进阶版\"></a>进阶版</h3><p><img src=\"/2023/04/24/Linux-Vim/advanced1.png\"></p>\n<h3 id=\"现代版\"><a href=\"#现代版\" class=\"headerlink\" title=\"现代版\"></a>现代版</h3><p><img src=\"/2023/04/24/Linux-Vim/morden1.png\"></p>\n<h3 id=\"文字版\"><a href=\"#文字版\" class=\"headerlink\" title=\"文字版\"></a>文字版</h3><p><img src=\"/2023/04/24/Linux-Vim/text1.png\"></p>\n<h2 id=\"宏\"><a href=\"#宏\" class=\"headerlink\" title=\"宏\"></a>宏</h2><p>你可以在 Vim 中录制一系列按键，并把他们存储到寄存器中。对于一些需要临时使用多次的一系列操作，把它们作为宏保存起来会显著地提升效率。对于一些复杂的操作，建议使用 Vim 脚本（vimscript）来实现。</p>\n<pre><code>首先，按下 q，然后按下你想要保存的寄存器，任何小写字母都可以。比如我们来把它保存到 q 这个寄存器中。按下 qq，你会发现命令行里已经显示了 &quot;recording @q&quot;。\n如果你已经录制完成，那么只需要再按一次 q 就可以结束录制。\n如果你想调用刚才录制的宏，只需要 [count]@q\n如果你想调用上一次使用的宏，只需要 [count]@@\n</code></pre>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h1 id=\"vim-进阶\"><a href=\"#vim-进阶\" class=\"headerlink\" title=\"vim 进阶\"></a>vim 进阶</h1><h2 id=\"开始之前\"><a href=\"#开始之前\" class=\"headerlink\" title=\"开始之前\"></a>开始之前</h2><p>此时的你已经熟悉vim的基本使用（打开、编辑、保存和退出），但仍然觉得vim用起来别扭。</p>\n<p>究其原因，我觉得是现在的我们已经习惯于使用鼠标操作（滑动、点击、长按选择）而vim则使用按键完成鼠标的工作。以至于我们看到一段文章无意识的想用鼠标选择，但是使用vim的我们不得不先动动脑子想想该按那几个按键。这种别扭应该只会存在于不熟悉vim按键的阶段。所谓进阶就是熟悉按键操作克服这种别捏。</p>\n<p>要熟悉按键，我们最先想到的也许是去记忆键位，但对于vim那并不是最快捷高效的方式。</p>\n<p>vim 的核心概念是<strong>模式编辑</strong>，即按键在不同的模式下作用不同。 你可以在普通模式下浏览文件，在插入模式下插入文本，在可视模式下选择行或块，在命令模式下执行命令等。</p>\n<p>和模式编辑紧密相连的概念是 <strong>操作符</strong> 和 <strong>动作</strong>。操作符 指的是开始某个行为， 例如：修改、删除或者选择文本，之后你要用一个 动作 来指定需要操作的文本区域。 例如，删除一个单词，执行 daw （ delete around word），删除3个单词，执行 daw （ delete 3 word）。基本上每个按键都是单词的缩写或者执行的次数，知道这些就能更好的理解按键。</p>\n<p>如果你能看见 vim 老司机操作，你会发现他们使用 vim 脚本语言就如同钢琴师弹钢琴一样。 复杂的操作只需要几个按键就能完成。他们甚至不用刻意去想，因为这已经成为肌肉记忆了。 这减少认识负荷并帮助人们专注于实际任务。</p>\n<h2 id=\"vim-键位\"><a href=\"#vim-键位\" class=\"headerlink\" title=\"vim 键位\"></a>vim 键位</h2><p>大概看一眼即可</p>\n<h3 id=\"vim-键位-1\"><a href=\"#vim-键位-1\" class=\"headerlink\" title=\"vim 键位\"></a>vim 键位</h3><p><img src=\"/2023/04/24/Linux-Vim/2023-05-07-16-24-23.png\"></p>\n<h3 id=\"入门版\"><a href=\"#入门版\" class=\"headerlink\" title=\"入门版\"></a>入门版</h3><p><img src=\"/2023/04/24/Linux-Vim/entry1.png\"></p>\n<h3 id=\"进阶版\"><a href=\"#进阶版\" class=\"headerlink\" title=\"进阶版\"></a>进阶版</h3><p><img src=\"/2023/04/24/Linux-Vim/advanced1.png\"></p>\n<h3 id=\"现代版\"><a href=\"#现代版\" class=\"headerlink\" title=\"现代版\"></a>现代版</h3><p><img src=\"/2023/04/24/Linux-Vim/morden1.png\"></p>\n<h3 id=\"文字版\"><a href=\"#文字版\" class=\"headerlink\" title=\"文字版\"></a>文字版</h3><p><img src=\"/2023/04/24/Linux-Vim/text1.png\"></p>\n<h2 id=\"宏\"><a href=\"#宏\" class=\"headerlink\" title=\"宏\"></a>宏</h2><p>你可以在 Vim 中录制一系列按键，并把他们存储到寄存器中。对于一些需要临时使用多次的一系列操作，把它们作为宏保存起来会显著地提升效率。对于一些复杂的操作，建议使用 Vim 脚本（vimscript）来实现。</p>\n<pre><code>首先，按下 q，然后按下你想要保存的寄存器，任何小写字母都可以。比如我们来把它保存到 q 这个寄存器中。按下 qq，你会发现命令行里已经显示了 &quot;recording @q&quot;。\n如果你已经录制完成，那么只需要再按一次 q 就可以结束录制。\n如果你想调用刚才录制的宏，只需要 [count]@q\n如果你想调用上一次使用的宏，只需要 [count]@@\n</code></pre>\n"},{"title":"Linux 三剑客","date":"2023-05-31T23:07:51.000Z","cover":false,"_content":"\n## 正则表达式\n\n[菜鸟](https://www.runoob.com/regexp/regexp-metachar.html)\n\n[MDN](https://learn.microsoft.com/zh-cn/dotnet/standard/base-types/regular-expression-language-quick-reference)\n\n| re    | 含义                                                                               |\n| ----- | ---------------------------------------------------------------------------------- |\n| *     | 匹配前面的子表达式零次或多次                                                       |\n| .     | 匹配除换行符（\\n、\\r）之外的任何单个字符                                           |\n| ?     | 匹配前面的子表达式零次或一次                                                       |\n| +     | 匹配前面的子表达式一次或多次                                                       |\n| ^     | 匹配输入字符串的开始位置                                                           |\n| $     | 匹配输入字符串的结束位置                                                           |\n| []    | 匹配所包含的任意一个字符                                                           |\n| [^]   | 匹配未包含的任意字符                                                               |\n| \\\\    | 将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符 |\n| {n}   | n 是一个非负整数。匹配确定的 n 次                                                  |\n| {n,m} | m 和 n 均为非负整数，其中n <= m。匹配 [n, m] 次                                    |\n| x\\|y  | 匹配 x 或 y                                                                        |\n\n\n\n| 修饰符 | 含义                           |\n| ------ | ------------------------------ |\n| i      | ignore - 不区分大小写          |\n| g      | global - 全局匹配              |\n| m      | multi line - 多行匹配          |\n| s      | 特殊字符圆点 . 中包含换行符 \\n |\n## grep\n\n    grep [OPTION...] PATTERNS [FILE...]\n\n\n## awk\n\n[菜鸟](https://www.runoob.com/linux/linux-comm-awk.html)\n\n    awk — pattern scanning and processing language\n\n    awk '{[pattern] action}' {filenames} \n    \n    2 this is a test\n    3 Do you like awk\n    This's a test\n    10 There are orange,apple,mongo\n\n    awk '{print $1,$4}' log.txt\n    awk -F, '{print $1,$2}'   log.txt # 使用\",\"分割\n    awk -F[ ,] '{print $1,$2}'   log.txt # 使用多个分隔符.先使用空格分割，然后对分割结果再使用\",\"分割\n    awk 'BEGIN{}END{}' log.txt\n\n## sed\n\n    sed [option][action] filename\n    \n    -n 输出处理过的\n    -e 多条命令\n    -i 修改源文件\n\n    a 行后追加\n    c 行替换\n    i 行前插入\n    d 删除\n    p 打印\n    s 替换\n    n,m 行选择\n\n\n## 另外\n\n### cut\n\n    -f 列\n    -d 分隔符\n    -c 字符\n\n### sort \n\n    -f 忽略大小写\n    -n 数值\n    -r 反向\n    -t 分隔符(\\t)\n    -k 字符范围","source":"_posts/Linux-三剑客.md","raw":"---\ntitle: Linux 三剑客\ndate: 2023-06-01 07:07:51\ntags: Linux\ncover:\n---\n\n## 正则表达式\n\n[菜鸟](https://www.runoob.com/regexp/regexp-metachar.html)\n\n[MDN](https://learn.microsoft.com/zh-cn/dotnet/standard/base-types/regular-expression-language-quick-reference)\n\n| re    | 含义                                                                               |\n| ----- | ---------------------------------------------------------------------------------- |\n| *     | 匹配前面的子表达式零次或多次                                                       |\n| .     | 匹配除换行符（\\n、\\r）之外的任何单个字符                                           |\n| ?     | 匹配前面的子表达式零次或一次                                                       |\n| +     | 匹配前面的子表达式一次或多次                                                       |\n| ^     | 匹配输入字符串的开始位置                                                           |\n| $     | 匹配输入字符串的结束位置                                                           |\n| []    | 匹配所包含的任意一个字符                                                           |\n| [^]   | 匹配未包含的任意字符                                                               |\n| \\\\    | 将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符 |\n| {n}   | n 是一个非负整数。匹配确定的 n 次                                                  |\n| {n,m} | m 和 n 均为非负整数，其中n <= m。匹配 [n, m] 次                                    |\n| x\\|y  | 匹配 x 或 y                                                                        |\n\n\n\n| 修饰符 | 含义                           |\n| ------ | ------------------------------ |\n| i      | ignore - 不区分大小写          |\n| g      | global - 全局匹配              |\n| m      | multi line - 多行匹配          |\n| s      | 特殊字符圆点 . 中包含换行符 \\n |\n## grep\n\n    grep [OPTION...] PATTERNS [FILE...]\n\n\n## awk\n\n[菜鸟](https://www.runoob.com/linux/linux-comm-awk.html)\n\n    awk — pattern scanning and processing language\n\n    awk '{[pattern] action}' {filenames} \n    \n    2 this is a test\n    3 Do you like awk\n    This's a test\n    10 There are orange,apple,mongo\n\n    awk '{print $1,$4}' log.txt\n    awk -F, '{print $1,$2}'   log.txt # 使用\",\"分割\n    awk -F[ ,] '{print $1,$2}'   log.txt # 使用多个分隔符.先使用空格分割，然后对分割结果再使用\",\"分割\n    awk 'BEGIN{}END{}' log.txt\n\n## sed\n\n    sed [option][action] filename\n    \n    -n 输出处理过的\n    -e 多条命令\n    -i 修改源文件\n\n    a 行后追加\n    c 行替换\n    i 行前插入\n    d 删除\n    p 打印\n    s 替换\n    n,m 行选择\n\n\n## 另外\n\n### cut\n\n    -f 列\n    -d 分隔符\n    -c 字符\n\n### sort \n\n    -f 忽略大小写\n    -n 数值\n    -r 反向\n    -t 分隔符(\\t)\n    -k 字符范围","slug":"Linux-三剑客","published":1,"updated":"2023-06-24T08:48:48.544Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5uj001tlv9e8ngwer8d","content":"<h2 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h2><p><a href=\"https://www.runoob.com/regexp/regexp-metachar.html\">菜鸟</a></p>\n<p><a href=\"https://learn.microsoft.com/zh-cn/dotnet/standard/base-types/regular-expression-language-quick-reference\">MDN</a></p>\n<table>\n<thead>\n<tr>\n<th>re</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>*</td>\n<td>匹配前面的子表达式零次或多次</td>\n</tr>\n<tr>\n<td>.</td>\n<td>匹配除换行符（\\n、\\r）之外的任何单个字符</td>\n</tr>\n<tr>\n<td>?</td>\n<td>匹配前面的子表达式零次或一次</td>\n</tr>\n<tr>\n<td>+</td>\n<td>匹配前面的子表达式一次或多次</td>\n</tr>\n<tr>\n<td>^</td>\n<td>匹配输入字符串的开始位置</td>\n</tr>\n<tr>\n<td>$</td>\n<td>匹配输入字符串的结束位置</td>\n</tr>\n<tr>\n<td>[]</td>\n<td>匹配所包含的任意一个字符</td>\n</tr>\n<tr>\n<td>[^]</td>\n<td>匹配未包含的任意字符</td>\n</tr>\n<tr>\n<td>\\</td>\n<td>将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符</td>\n</tr>\n<tr>\n<td>{n}</td>\n<td>n 是一个非负整数。匹配确定的 n 次</td>\n</tr>\n<tr>\n<td>{n,m}</td>\n<td>m 和 n 均为非负整数，其中n &lt;&#x3D; m。匹配 [n, m] 次</td>\n</tr>\n<tr>\n<td>x|y</td>\n<td>匹配 x 或 y</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>修饰符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>i</td>\n<td>ignore - 不区分大小写</td>\n</tr>\n<tr>\n<td>g</td>\n<td>global - 全局匹配</td>\n</tr>\n<tr>\n<td>m</td>\n<td>multi line - 多行匹配</td>\n</tr>\n<tr>\n<td>s</td>\n<td>特殊字符圆点 . 中包含换行符 \\n</td>\n</tr>\n</tbody></table>\n<h2 id=\"grep\"><a href=\"#grep\" class=\"headerlink\" title=\"grep\"></a>grep</h2><pre><code>grep [OPTION...] PATTERNS [FILE...]\n</code></pre>\n<h2 id=\"awk\"><a href=\"#awk\" class=\"headerlink\" title=\"awk\"></a>awk</h2><p><a href=\"https://www.runoob.com/linux/linux-comm-awk.html\">菜鸟</a></p>\n<pre><code>awk — pattern scanning and processing language\n\nawk &#39;&#123;[pattern] action&#125;&#39; &#123;filenames&#125; \n\n2 this is a test\n3 Do you like awk\nThis&#39;s a test\n10 There are orange,apple,mongo\n\nawk &#39;&#123;print $1,$4&#125;&#39; log.txt\nawk -F, &#39;&#123;print $1,$2&#125;&#39;   log.txt # 使用&quot;,&quot;分割\nawk -F[ ,] &#39;&#123;print $1,$2&#125;&#39;   log.txt # 使用多个分隔符.先使用空格分割，然后对分割结果再使用&quot;,&quot;分割\nawk &#39;BEGIN&#123;&#125;END&#123;&#125;&#39; log.txt\n</code></pre>\n<h2 id=\"sed\"><a href=\"#sed\" class=\"headerlink\" title=\"sed\"></a>sed</h2><pre><code>sed [option][action] filename\n\n-n 输出处理过的\n-e 多条命令\n-i 修改源文件\n\na 行后追加\nc 行替换\ni 行前插入\nd 删除\np 打印\ns 替换\nn,m 行选择\n</code></pre>\n<h2 id=\"另外\"><a href=\"#另外\" class=\"headerlink\" title=\"另外\"></a>另外</h2><h3 id=\"cut\"><a href=\"#cut\" class=\"headerlink\" title=\"cut\"></a>cut</h3><pre><code>-f 列\n-d 分隔符\n-c 字符\n</code></pre>\n<h3 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"sort\"></a>sort</h3><pre><code>-f 忽略大小写\n-n 数值\n-r 反向\n-t 分隔符(\\t)\n-k 字符范围\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h2><p><a href=\"https://www.runoob.com/regexp/regexp-metachar.html\">菜鸟</a></p>\n<p><a href=\"https://learn.microsoft.com/zh-cn/dotnet/standard/base-types/regular-expression-language-quick-reference\">MDN</a></p>\n<table>\n<thead>\n<tr>\n<th>re</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>*</td>\n<td>匹配前面的子表达式零次或多次</td>\n</tr>\n<tr>\n<td>.</td>\n<td>匹配除换行符（\\n、\\r）之外的任何单个字符</td>\n</tr>\n<tr>\n<td>?</td>\n<td>匹配前面的子表达式零次或一次</td>\n</tr>\n<tr>\n<td>+</td>\n<td>匹配前面的子表达式一次或多次</td>\n</tr>\n<tr>\n<td>^</td>\n<td>匹配输入字符串的开始位置</td>\n</tr>\n<tr>\n<td>$</td>\n<td>匹配输入字符串的结束位置</td>\n</tr>\n<tr>\n<td>[]</td>\n<td>匹配所包含的任意一个字符</td>\n</tr>\n<tr>\n<td>[^]</td>\n<td>匹配未包含的任意字符</td>\n</tr>\n<tr>\n<td>\\</td>\n<td>将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符</td>\n</tr>\n<tr>\n<td>{n}</td>\n<td>n 是一个非负整数。匹配确定的 n 次</td>\n</tr>\n<tr>\n<td>{n,m}</td>\n<td>m 和 n 均为非负整数，其中n &lt;&#x3D; m。匹配 [n, m] 次</td>\n</tr>\n<tr>\n<td>x|y</td>\n<td>匹配 x 或 y</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>修饰符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>i</td>\n<td>ignore - 不区分大小写</td>\n</tr>\n<tr>\n<td>g</td>\n<td>global - 全局匹配</td>\n</tr>\n<tr>\n<td>m</td>\n<td>multi line - 多行匹配</td>\n</tr>\n<tr>\n<td>s</td>\n<td>特殊字符圆点 . 中包含换行符 \\n</td>\n</tr>\n</tbody></table>\n<h2 id=\"grep\"><a href=\"#grep\" class=\"headerlink\" title=\"grep\"></a>grep</h2><pre><code>grep [OPTION...] PATTERNS [FILE...]\n</code></pre>\n<h2 id=\"awk\"><a href=\"#awk\" class=\"headerlink\" title=\"awk\"></a>awk</h2><p><a href=\"https://www.runoob.com/linux/linux-comm-awk.html\">菜鸟</a></p>\n<pre><code>awk — pattern scanning and processing language\n\nawk &#39;&#123;[pattern] action&#125;&#39; &#123;filenames&#125; \n\n2 this is a test\n3 Do you like awk\nThis&#39;s a test\n10 There are orange,apple,mongo\n\nawk &#39;&#123;print $1,$4&#125;&#39; log.txt\nawk -F, &#39;&#123;print $1,$2&#125;&#39;   log.txt # 使用&quot;,&quot;分割\nawk -F[ ,] &#39;&#123;print $1,$2&#125;&#39;   log.txt # 使用多个分隔符.先使用空格分割，然后对分割结果再使用&quot;,&quot;分割\nawk &#39;BEGIN&#123;&#125;END&#123;&#125;&#39; log.txt\n</code></pre>\n<h2 id=\"sed\"><a href=\"#sed\" class=\"headerlink\" title=\"sed\"></a>sed</h2><pre><code>sed [option][action] filename\n\n-n 输出处理过的\n-e 多条命令\n-i 修改源文件\n\na 行后追加\nc 行替换\ni 行前插入\nd 删除\np 打印\ns 替换\nn,m 行选择\n</code></pre>\n<h2 id=\"另外\"><a href=\"#另外\" class=\"headerlink\" title=\"另外\"></a>另外</h2><h3 id=\"cut\"><a href=\"#cut\" class=\"headerlink\" title=\"cut\"></a>cut</h3><pre><code>-f 列\n-d 分隔符\n-c 字符\n</code></pre>\n<h3 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"sort\"></a>sort</h3><pre><code>-f 忽略大小写\n-n 数值\n-r 反向\n-t 分隔符(\\t)\n-k 字符范围\n</code></pre>\n"},{"title":"Linux 使用 Windows 字体","date":"2023-01-08T07:52:28.000Z","cover":false,"_content":"# Linux使用Windows字体\n\n## 复制Windows系统字体\n\nWindows系统里的字体目录为：C:\\Windows\\Fonts\n\n注意：该文件夹里有三种后缀的文件：.fon，.ttf，.ttc，我们只需要复制.ttf和.ttc后缀的文件\n\n```bash\n# 在/usr/share/fonts/下新建目录：win_fonts\nsudo mkdir /usr/share/fonts/win_fonts\n\n# 将Windows系统Fonts目录里的所有文件全部复制到Linux\nsudo cp /Path/to/Windows/Fonts/*.ttf /usr/share/fonts/win_fonts\nsudo cp /Path/to/Windows/Fonts/*.ttc /usr/share/fonts/win_fonts\n```\n\n## 生成字体的索引信息\n\n```bash\nsudo mkfontscale\nsudo mkfontdir\n```\n\n## 更新字体缓存\n```bash\nsudo fc-cache\n```\n","source":"_posts/Linux-使用-Windows-字体.md","raw":"---\ntitle: Linux 使用 Windows 字体\ndate: 2023-01-08 15:52:28\ntags: Linux\ncover:\n---\n# Linux使用Windows字体\n\n## 复制Windows系统字体\n\nWindows系统里的字体目录为：C:\\Windows\\Fonts\n\n注意：该文件夹里有三种后缀的文件：.fon，.ttf，.ttc，我们只需要复制.ttf和.ttc后缀的文件\n\n```bash\n# 在/usr/share/fonts/下新建目录：win_fonts\nsudo mkdir /usr/share/fonts/win_fonts\n\n# 将Windows系统Fonts目录里的所有文件全部复制到Linux\nsudo cp /Path/to/Windows/Fonts/*.ttf /usr/share/fonts/win_fonts\nsudo cp /Path/to/Windows/Fonts/*.ttc /usr/share/fonts/win_fonts\n```\n\n## 生成字体的索引信息\n\n```bash\nsudo mkfontscale\nsudo mkfontdir\n```\n\n## 更新字体缓存\n```bash\nsudo fc-cache\n```\n","slug":"Linux-使用-Windows-字体","published":1,"updated":"2023-06-08T07:56:06.688Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5uj001vlv9egdq74bi4","content":"<h1 id=\"Linux使用Windows字体\"><a href=\"#Linux使用Windows字体\" class=\"headerlink\" title=\"Linux使用Windows字体\"></a>Linux使用Windows字体</h1><h2 id=\"复制Windows系统字体\"><a href=\"#复制Windows系统字体\" class=\"headerlink\" title=\"复制Windows系统字体\"></a>复制Windows系统字体</h2><p>Windows系统里的字体目录为：C:\\Windows\\Fonts</p>\n<p>注意：该文件夹里有三种后缀的文件：.fon，.ttf，.ttc，我们只需要复制.ttf和.ttc后缀的文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在/usr/share/fonts/下新建目录：win_fonts</span></span><br><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> /usr/share/fonts/win_fonts</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将Windows系统Fonts目录里的所有文件全部复制到Linux</span></span><br><span class=\"line\">sudo <span class=\"built_in\">cp</span> /Path/to/Windows/Fonts/*.ttf /usr/share/fonts/win_fonts</span><br><span class=\"line\">sudo <span class=\"built_in\">cp</span> /Path/to/Windows/Fonts/*.ttc /usr/share/fonts/win_fonts</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"生成字体的索引信息\"><a href=\"#生成字体的索引信息\" class=\"headerlink\" title=\"生成字体的索引信息\"></a>生成字体的索引信息</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkfontscale</span><br><span class=\"line\">sudo mkfontdir</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"更新字体缓存\"><a href=\"#更新字体缓存\" class=\"headerlink\" title=\"更新字体缓存\"></a>更新字体缓存</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo fc-cache</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Linux使用Windows字体\"><a href=\"#Linux使用Windows字体\" class=\"headerlink\" title=\"Linux使用Windows字体\"></a>Linux使用Windows字体</h1><h2 id=\"复制Windows系统字体\"><a href=\"#复制Windows系统字体\" class=\"headerlink\" title=\"复制Windows系统字体\"></a>复制Windows系统字体</h2><p>Windows系统里的字体目录为：C:\\Windows\\Fonts</p>\n<p>注意：该文件夹里有三种后缀的文件：.fon，.ttf，.ttc，我们只需要复制.ttf和.ttc后缀的文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在/usr/share/fonts/下新建目录：win_fonts</span></span><br><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> /usr/share/fonts/win_fonts</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将Windows系统Fonts目录里的所有文件全部复制到Linux</span></span><br><span class=\"line\">sudo <span class=\"built_in\">cp</span> /Path/to/Windows/Fonts/*.ttf /usr/share/fonts/win_fonts</span><br><span class=\"line\">sudo <span class=\"built_in\">cp</span> /Path/to/Windows/Fonts/*.ttc /usr/share/fonts/win_fonts</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"生成字体的索引信息\"><a href=\"#生成字体的索引信息\" class=\"headerlink\" title=\"生成字体的索引信息\"></a>生成字体的索引信息</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkfontscale</span><br><span class=\"line\">sudo mkfontdir</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"更新字体缓存\"><a href=\"#更新字体缓存\" class=\"headerlink\" title=\"更新字体缓存\"></a>更新字体缓存</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo fc-cache</span><br></pre></td></tr></table></figure>\n"},{"title":"Linux 小技巧","date":"2023-06-12T09:49:23.000Z","cover":"2023/06/12/Linux-小技巧/2023-06-12-18-11-54.png","_content":"\n这篇记录一些我在学习和使用 Linux 过程中发现的小技巧,\n所谓技巧就是说不用它也可以,但是用了会更简单\n\n1. 有时候需要后面的表达式先执行,就可以用\n\n```bash\nexpress1 $(express2)\n```\n\n\\$(...)和\\${...}的区别:\n\n    $()：它表示命令替换操作符。在$()内部包含一个命令，它会执行该命令并将其输出作为字符串返回。例如，$(date)会执行date命令并将当前日期和时间的字符串表示形式作为字符串返回。这个字符串可以被赋值给一个变量，或者被传递给其它命令进行进一步处理。\n\n    ${}：它表示变量替换操作符。在${}内部指定一个变量名，它会将该变量的值替换为该字符串。例如，${HOME}会将HOME环境变量的值替换为一个字符串，该字符串代表当前用户的主目录路径。这个字符串也可以被赋值给一个变量，或者被传递给其它命令进行进一步处理。\n\n2. 计算\n\n```bash\n$((express))\n```\n![](2023-06-12-18-11-54.png)","source":"_posts/Linux-小技巧.md","raw":"---\ntitle: Linux 小技巧\ndate: 2023-06-12 17:49:23\ntags: Linux\ncover: 2023-06-12-18-11-54.png\n---\n\n这篇记录一些我在学习和使用 Linux 过程中发现的小技巧,\n所谓技巧就是说不用它也可以,但是用了会更简单\n\n1. 有时候需要后面的表达式先执行,就可以用\n\n```bash\nexpress1 $(express2)\n```\n\n\\$(...)和\\${...}的区别:\n\n    $()：它表示命令替换操作符。在$()内部包含一个命令，它会执行该命令并将其输出作为字符串返回。例如，$(date)会执行date命令并将当前日期和时间的字符串表示形式作为字符串返回。这个字符串可以被赋值给一个变量，或者被传递给其它命令进行进一步处理。\n\n    ${}：它表示变量替换操作符。在${}内部指定一个变量名，它会将该变量的值替换为该字符串。例如，${HOME}会将HOME环境变量的值替换为一个字符串，该字符串代表当前用户的主目录路径。这个字符串也可以被赋值给一个变量，或者被传递给其它命令进行进一步处理。\n\n2. 计算\n\n```bash\n$((express))\n```\n![](2023-06-12-18-11-54.png)","slug":"Linux-小技巧","published":1,"updated":"2023-06-23T01:03:14.947Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5uk001ylv9efaf9hbw5","content":"<p>这篇记录一些我在学习和使用 Linux 过程中发现的小技巧,<br>所谓技巧就是说不用它也可以,但是用了会更简单</p>\n<ol>\n<li>有时候需要后面的表达式先执行,就可以用</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">express1 $(express2)</span><br></pre></td></tr></table></figure>\n\n<p>$(…)和${…}的区别:</p>\n<pre><code>$()：它表示命令替换操作符。在$()内部包含一个命令，它会执行该命令并将其输出作为字符串返回。例如，$(date)会执行date命令并将当前日期和时间的字符串表示形式作为字符串返回。这个字符串可以被赋值给一个变量，或者被传递给其它命令进行进一步处理。\n\n$&#123;&#125;：它表示变量替换操作符。在$&#123;&#125;内部指定一个变量名，它会将该变量的值替换为该字符串。例如，$&#123;HOME&#125;会将HOME环境变量的值替换为一个字符串，该字符串代表当前用户的主目录路径。这个字符串也可以被赋值给一个变量，或者被传递给其它命令进行进一步处理。\n</code></pre>\n<ol start=\"2\">\n<li>计算</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$((express))</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2023/06/12/Linux-%E5%B0%8F%E6%8A%80%E5%B7%A7/2023-06-12-18-11-54.png\"></p>\n","site":{"data":{}},"cover_type":"img","excerpt":"","more":"<p>这篇记录一些我在学习和使用 Linux 过程中发现的小技巧,<br>所谓技巧就是说不用它也可以,但是用了会更简单</p>\n<ol>\n<li>有时候需要后面的表达式先执行,就可以用</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">express1 $(express2)</span><br></pre></td></tr></table></figure>\n\n<p>$(…)和${…}的区别:</p>\n<pre><code>$()：它表示命令替换操作符。在$()内部包含一个命令，它会执行该命令并将其输出作为字符串返回。例如，$(date)会执行date命令并将当前日期和时间的字符串表示形式作为字符串返回。这个字符串可以被赋值给一个变量，或者被传递给其它命令进行进一步处理。\n\n$&#123;&#125;：它表示变量替换操作符。在$&#123;&#125;内部指定一个变量名，它会将该变量的值替换为该字符串。例如，$&#123;HOME&#125;会将HOME环境变量的值替换为一个字符串，该字符串代表当前用户的主目录路径。这个字符串也可以被赋值给一个变量，或者被传递给其它命令进行进一步处理。\n</code></pre>\n<ol start=\"2\">\n<li>计算</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$((express))</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2023/06/12/Linux-%E5%B0%8F%E6%8A%80%E5%B7%A7/2023-06-12-18-11-54.png\"></p>\n"},{"title":"Linux 复习","date":"2023-06-12T10:13:33.000Z","cover":false,"_content":"\n1. 选择题(15分)\n\n新建文件 : touch mkdir\ncat echo vim\nrm mv\n\n\n2. 简答题(16分)\n\n[yum 本地源配置]()\n\n手动添加用户,系统变化的6个地方:\n\n    /etc/passwd\n    /etc/shadow\n    /etc/gpasswd\n    /etc/gshadow\n    /home/..\n    /var/spool/mail\n\n3. 操作题(48分)\n\n权限 字母数字\n\nchmod\n\ncron\n\ncut sed awk\n\nsu -  sudo su 描述\n\n改变用户名,组名\nusermod \n\n硬链接,软链接,如何建立,作用\n\n打包,压缩\n\n增删改查\n\n    touch\\mkdir\n    rm -rf\n    vi\n    find\\grep\n\n别名 alias\n\n4. Shell 编程(16分)\n\n```bash\n#!/bin/bash\n# \n# 输入用户名,数量,密码 \n# 创建对应数量的用户并设置初始密码\n# \n\n# 提醒读入\nread -p \"input username\" name\nread -p \"input number of user\" num\nread -p \"input passwd of them\" pswd\n\n# 三个输入都不为空\nif [ ! -z \"$name\" -a ! -z \"$num\" -a ! -z \"$pswd\" ];then\n  # 除去数字字符\n  y=$(echo $num | sed 's/[0-9]//g')\n  echo \"y:[$y]\"\n  # 判断结果是否为空,即num是否全由数字构成\n  if [ -z \"$y\" ];then\n    # 创建 num 个用户\n    for((i=1;i<=${num};i++));do \n      /usr/bin/useradd $name$i > /dev/null\n      echo $pswd |/usr/bin/passwd --stdin $name$i & 2> /dev/null\n      # echo ${name}${i}:${pswd} | chpasswd # 我的系统不能执行上一句,用这句替代\n    done\n  fi \nfi \n```\n\n执行结果\n\n![](2023-06-12-19-25-43.png)\n\n![](2023-06-12-19-25-52.png)\n\n\n```bash\n#!/bin/bash\n#\n# 输入用户名,数量,密码 \n# 创建对应数量的用户并设置初始密码\n# 下次登陆时修改密码 \n#\n\nread -p \"input username: \" name\nread -p \"input number of user: \" num\nread -p \"input passwd of them: \" pswd\n\nn=1\n# n<=num\nwhile [ $n -le $num ];do \n  # ${name}${n} 用户名和后面的序号的连接\n  # -e 设置密码过期时间\n  /usr/bin/useradd ${name}${n} -e 0\n\n  # 设置密码\n  # echo $pswd |/usr/bin/passwd --stdin $name$n  \n  echo ${name}${n}:${pswd} | chpasswd # 我的系统不能执行上一句,用这句替\n\n  # 变量自增\n  n=$(($n+1))\n  # n=`expr $n + 1`\ndone\n```\n\n\n```bash\n# 或者\nfor((n=1;n<=${num};n++));do\n  /usr/bin/useradd ${name}${n}\n  echo $pswd |/usr/bin/passwd --stdin $name$n\ndone\n```","source":"_posts/Linux-期末复习.md","raw":"---\ntitle: Linux 复习\ndate: 2023-06-12 18:13:33\ntags:\ncover:\n---\n\n1. 选择题(15分)\n\n新建文件 : touch mkdir\ncat echo vim\nrm mv\n\n\n2. 简答题(16分)\n\n[yum 本地源配置]()\n\n手动添加用户,系统变化的6个地方:\n\n    /etc/passwd\n    /etc/shadow\n    /etc/gpasswd\n    /etc/gshadow\n    /home/..\n    /var/spool/mail\n\n3. 操作题(48分)\n\n权限 字母数字\n\nchmod\n\ncron\n\ncut sed awk\n\nsu -  sudo su 描述\n\n改变用户名,组名\nusermod \n\n硬链接,软链接,如何建立,作用\n\n打包,压缩\n\n增删改查\n\n    touch\\mkdir\n    rm -rf\n    vi\n    find\\grep\n\n别名 alias\n\n4. Shell 编程(16分)\n\n```bash\n#!/bin/bash\n# \n# 输入用户名,数量,密码 \n# 创建对应数量的用户并设置初始密码\n# \n\n# 提醒读入\nread -p \"input username\" name\nread -p \"input number of user\" num\nread -p \"input passwd of them\" pswd\n\n# 三个输入都不为空\nif [ ! -z \"$name\" -a ! -z \"$num\" -a ! -z \"$pswd\" ];then\n  # 除去数字字符\n  y=$(echo $num | sed 's/[0-9]//g')\n  echo \"y:[$y]\"\n  # 判断结果是否为空,即num是否全由数字构成\n  if [ -z \"$y\" ];then\n    # 创建 num 个用户\n    for((i=1;i<=${num};i++));do \n      /usr/bin/useradd $name$i > /dev/null\n      echo $pswd |/usr/bin/passwd --stdin $name$i & 2> /dev/null\n      # echo ${name}${i}:${pswd} | chpasswd # 我的系统不能执行上一句,用这句替代\n    done\n  fi \nfi \n```\n\n执行结果\n\n![](2023-06-12-19-25-43.png)\n\n![](2023-06-12-19-25-52.png)\n\n\n```bash\n#!/bin/bash\n#\n# 输入用户名,数量,密码 \n# 创建对应数量的用户并设置初始密码\n# 下次登陆时修改密码 \n#\n\nread -p \"input username: \" name\nread -p \"input number of user: \" num\nread -p \"input passwd of them: \" pswd\n\nn=1\n# n<=num\nwhile [ $n -le $num ];do \n  # ${name}${n} 用户名和后面的序号的连接\n  # -e 设置密码过期时间\n  /usr/bin/useradd ${name}${n} -e 0\n\n  # 设置密码\n  # echo $pswd |/usr/bin/passwd --stdin $name$n  \n  echo ${name}${n}:${pswd} | chpasswd # 我的系统不能执行上一句,用这句替\n\n  # 变量自增\n  n=$(($n+1))\n  # n=`expr $n + 1`\ndone\n```\n\n\n```bash\n# 或者\nfor((n=1;n<=${num};n++));do\n  /usr/bin/useradd ${name}${n}\n  echo $pswd |/usr/bin/passwd --stdin $name$n\ndone\n```","slug":"Linux-期末复习","published":1,"updated":"2023-06-24T08:34:06.480Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5ul0020lv9e68lnb1zm","content":"<ol>\n<li>选择题(15分)</li>\n</ol>\n<p>新建文件 : touch mkdir<br>cat echo vim<br>rm mv</p>\n<ol start=\"2\">\n<li>简答题(16分)</li>\n</ol>\n<p><a href=\"\">yum 本地源配置</a></p>\n<p>手动添加用户,系统变化的6个地方:</p>\n<pre><code>/etc/passwd\n/etc/shadow\n/etc/gpasswd\n/etc/gshadow\n/home/..\n/var/spool/mail\n</code></pre>\n<ol start=\"3\">\n<li>操作题(48分)</li>\n</ol>\n<p>权限 字母数字</p>\n<p>chmod</p>\n<p>cron</p>\n<p>cut sed awk</p>\n<p>su -  sudo su 描述</p>\n<p>改变用户名,组名<br>usermod </p>\n<p>硬链接,软链接,如何建立,作用</p>\n<p>打包,压缩</p>\n<p>增删改查</p>\n<pre><code>touch\\mkdir\nrm -rf\nvi\nfind\\grep\n</code></pre>\n<p>别名 alias</p>\n<ol start=\"4\">\n<li>Shell 编程(16分)</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\"># </span></span><br><span class=\"line\"><span class=\"comment\"># 输入用户名,数量,密码 </span></span><br><span class=\"line\"><span class=\"comment\"># 创建对应数量的用户并设置初始密码</span></span><br><span class=\"line\"><span class=\"comment\"># </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提醒读入</span></span><br><span class=\"line\"><span class=\"built_in\">read</span> -p <span class=\"string\">&quot;input username&quot;</span> name</span><br><span class=\"line\"><span class=\"built_in\">read</span> -p <span class=\"string\">&quot;input number of user&quot;</span> num</span><br><span class=\"line\"><span class=\"built_in\">read</span> -p <span class=\"string\">&quot;input passwd of them&quot;</span> pswd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 三个输入都不为空</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ ! -z <span class=\"string\">&quot;<span class=\"variable\">$name</span>&quot;</span> -a ! -z <span class=\"string\">&quot;<span class=\"variable\">$num</span>&quot;</span> -a ! -z <span class=\"string\">&quot;<span class=\"variable\">$pswd</span>&quot;</span> ];<span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"comment\"># 除去数字字符</span></span><br><span class=\"line\">  y=$(<span class=\"built_in\">echo</span> <span class=\"variable\">$num</span> | sed <span class=\"string\">&#x27;s/[0-9]//g&#x27;</span>)</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&quot;y:[<span class=\"variable\">$y</span>]&quot;</span></span><br><span class=\"line\">  <span class=\"comment\"># 判断结果是否为空,即num是否全由数字构成</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> [ -z <span class=\"string\">&quot;<span class=\"variable\">$y</span>&quot;</span> ];<span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"comment\"># 创建 num 个用户</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>((i=<span class=\"number\">1</span>;i&lt;=<span class=\"variable\">$&#123;num&#125;</span>;i++));<span class=\"keyword\">do</span> </span><br><span class=\"line\">      /usr/bin/useradd $name<span class=\"variable\">$i</span> &gt; /dev/null</span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"variable\">$pswd</span> |/usr/bin/passwd --stdin $name<span class=\"variable\">$i</span> &amp; 2&gt; /dev/null</span><br><span class=\"line\">      <span class=\"comment\"># echo $&#123;name&#125;$&#123;i&#125;:$&#123;pswd&#125; | chpasswd # 我的系统不能执行上一句,用这句替代</span></span><br><span class=\"line\">    <span class=\"keyword\">done</span></span><br><span class=\"line\">  <span class=\"keyword\">fi</span> </span><br><span class=\"line\"><span class=\"keyword\">fi</span> </span><br></pre></td></tr></table></figure>\n\n<p>执行结果</p>\n<p><img src=\"/2023/06/12/Linux-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/2023-06-12-19-25-43.png\"></p>\n<p><img src=\"/2023/06/12/Linux-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/2023-06-12-19-25-52.png\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 输入用户名,数量,密码 </span></span><br><span class=\"line\"><span class=\"comment\"># 创建对应数量的用户并设置初始密码</span></span><br><span class=\"line\"><span class=\"comment\"># 下次登陆时修改密码 </span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">read</span> -p <span class=\"string\">&quot;input username: &quot;</span> name</span><br><span class=\"line\"><span class=\"built_in\">read</span> -p <span class=\"string\">&quot;input number of user: &quot;</span> num</span><br><span class=\"line\"><span class=\"built_in\">read</span> -p <span class=\"string\">&quot;input passwd of them: &quot;</span> pswd</span><br><span class=\"line\"></span><br><span class=\"line\">n=1</span><br><span class=\"line\"><span class=\"comment\"># n&lt;=num</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> [ <span class=\"variable\">$n</span> -le <span class=\"variable\">$num</span> ];<span class=\"keyword\">do</span> </span><br><span class=\"line\">  <span class=\"comment\"># $&#123;name&#125;$&#123;n&#125; 用户名和后面的序号的连接</span></span><br><span class=\"line\">  <span class=\"comment\"># -e 设置密码过期时间</span></span><br><span class=\"line\">  /usr/bin/useradd <span class=\"variable\">$&#123;name&#125;</span><span class=\"variable\">$&#123;n&#125;</span> -e 0</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 设置密码</span></span><br><span class=\"line\">  <span class=\"comment\"># echo $pswd |/usr/bin/passwd --stdin $name$n  </span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;name&#125;</span><span class=\"variable\">$&#123;n&#125;</span>:<span class=\"variable\">$&#123;pswd&#125;</span> | chpasswd <span class=\"comment\"># 我的系统不能执行上一句,用这句替</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 变量自增</span></span><br><span class=\"line\">  n=$((<span class=\"variable\">$n</span>+<span class=\"number\">1</span>))</span><br><span class=\"line\">  <span class=\"comment\"># n=`expr $n + 1`</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>((n=<span class=\"number\">1</span>;n&lt;=<span class=\"variable\">$&#123;num&#125;</span>;n++));<span class=\"keyword\">do</span></span><br><span class=\"line\">  /usr/bin/useradd <span class=\"variable\">$&#123;name&#125;</span><span class=\"variable\">$&#123;n&#125;</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"variable\">$pswd</span> |/usr/bin/passwd --stdin $name<span class=\"variable\">$n</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>选择题(15分)</li>\n</ol>\n<p>新建文件 : touch mkdir<br>cat echo vim<br>rm mv</p>\n<ol start=\"2\">\n<li>简答题(16分)</li>\n</ol>\n<p><a href=\"\">yum 本地源配置</a></p>\n<p>手动添加用户,系统变化的6个地方:</p>\n<pre><code>/etc/passwd\n/etc/shadow\n/etc/gpasswd\n/etc/gshadow\n/home/..\n/var/spool/mail\n</code></pre>\n<ol start=\"3\">\n<li>操作题(48分)</li>\n</ol>\n<p>权限 字母数字</p>\n<p>chmod</p>\n<p>cron</p>\n<p>cut sed awk</p>\n<p>su -  sudo su 描述</p>\n<p>改变用户名,组名<br>usermod </p>\n<p>硬链接,软链接,如何建立,作用</p>\n<p>打包,压缩</p>\n<p>增删改查</p>\n<pre><code>touch\\mkdir\nrm -rf\nvi\nfind\\grep\n</code></pre>\n<p>别名 alias</p>\n<ol start=\"4\">\n<li>Shell 编程(16分)</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\"># </span></span><br><span class=\"line\"><span class=\"comment\"># 输入用户名,数量,密码 </span></span><br><span class=\"line\"><span class=\"comment\"># 创建对应数量的用户并设置初始密码</span></span><br><span class=\"line\"><span class=\"comment\"># </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提醒读入</span></span><br><span class=\"line\"><span class=\"built_in\">read</span> -p <span class=\"string\">&quot;input username&quot;</span> name</span><br><span class=\"line\"><span class=\"built_in\">read</span> -p <span class=\"string\">&quot;input number of user&quot;</span> num</span><br><span class=\"line\"><span class=\"built_in\">read</span> -p <span class=\"string\">&quot;input passwd of them&quot;</span> pswd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 三个输入都不为空</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ ! -z <span class=\"string\">&quot;<span class=\"variable\">$name</span>&quot;</span> -a ! -z <span class=\"string\">&quot;<span class=\"variable\">$num</span>&quot;</span> -a ! -z <span class=\"string\">&quot;<span class=\"variable\">$pswd</span>&quot;</span> ];<span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"comment\"># 除去数字字符</span></span><br><span class=\"line\">  y=$(<span class=\"built_in\">echo</span> <span class=\"variable\">$num</span> | sed <span class=\"string\">&#x27;s/[0-9]//g&#x27;</span>)</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&quot;y:[<span class=\"variable\">$y</span>]&quot;</span></span><br><span class=\"line\">  <span class=\"comment\"># 判断结果是否为空,即num是否全由数字构成</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> [ -z <span class=\"string\">&quot;<span class=\"variable\">$y</span>&quot;</span> ];<span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"comment\"># 创建 num 个用户</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>((i=<span class=\"number\">1</span>;i&lt;=<span class=\"variable\">$&#123;num&#125;</span>;i++));<span class=\"keyword\">do</span> </span><br><span class=\"line\">      /usr/bin/useradd $name<span class=\"variable\">$i</span> &gt; /dev/null</span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"variable\">$pswd</span> |/usr/bin/passwd --stdin $name<span class=\"variable\">$i</span> &amp; 2&gt; /dev/null</span><br><span class=\"line\">      <span class=\"comment\"># echo $&#123;name&#125;$&#123;i&#125;:$&#123;pswd&#125; | chpasswd # 我的系统不能执行上一句,用这句替代</span></span><br><span class=\"line\">    <span class=\"keyword\">done</span></span><br><span class=\"line\">  <span class=\"keyword\">fi</span> </span><br><span class=\"line\"><span class=\"keyword\">fi</span> </span><br></pre></td></tr></table></figure>\n\n<p>执行结果</p>\n<p><img src=\"/2023/06/12/Linux-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/2023-06-12-19-25-43.png\"></p>\n<p><img src=\"/2023/06/12/Linux-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/2023-06-12-19-25-52.png\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 输入用户名,数量,密码 </span></span><br><span class=\"line\"><span class=\"comment\"># 创建对应数量的用户并设置初始密码</span></span><br><span class=\"line\"><span class=\"comment\"># 下次登陆时修改密码 </span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">read</span> -p <span class=\"string\">&quot;input username: &quot;</span> name</span><br><span class=\"line\"><span class=\"built_in\">read</span> -p <span class=\"string\">&quot;input number of user: &quot;</span> num</span><br><span class=\"line\"><span class=\"built_in\">read</span> -p <span class=\"string\">&quot;input passwd of them: &quot;</span> pswd</span><br><span class=\"line\"></span><br><span class=\"line\">n=1</span><br><span class=\"line\"><span class=\"comment\"># n&lt;=num</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> [ <span class=\"variable\">$n</span> -le <span class=\"variable\">$num</span> ];<span class=\"keyword\">do</span> </span><br><span class=\"line\">  <span class=\"comment\"># $&#123;name&#125;$&#123;n&#125; 用户名和后面的序号的连接</span></span><br><span class=\"line\">  <span class=\"comment\"># -e 设置密码过期时间</span></span><br><span class=\"line\">  /usr/bin/useradd <span class=\"variable\">$&#123;name&#125;</span><span class=\"variable\">$&#123;n&#125;</span> -e 0</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 设置密码</span></span><br><span class=\"line\">  <span class=\"comment\"># echo $pswd |/usr/bin/passwd --stdin $name$n  </span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;name&#125;</span><span class=\"variable\">$&#123;n&#125;</span>:<span class=\"variable\">$&#123;pswd&#125;</span> | chpasswd <span class=\"comment\"># 我的系统不能执行上一句,用这句替</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 变量自增</span></span><br><span class=\"line\">  n=$((<span class=\"variable\">$n</span>+<span class=\"number\">1</span>))</span><br><span class=\"line\">  <span class=\"comment\"># n=`expr $n + 1`</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>((n=<span class=\"number\">1</span>;n&lt;=<span class=\"variable\">$&#123;num&#125;</span>;n++));<span class=\"keyword\">do</span></span><br><span class=\"line\">  /usr/bin/useradd <span class=\"variable\">$&#123;name&#125;</span><span class=\"variable\">$&#123;n&#125;</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"variable\">$pswd</span> |/usr/bin/passwd --stdin $name<span class=\"variable\">$n</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>"},{"title":"Linux 权限","date":"2023-05-08T08:29:16.000Z","_content":"\n# Linux \n\n## 普通权限\n\n### 三种角色：\n**u(user,owner)**\n**g(roup)**\n**o(ther)**\n\n### 三种权限:\n**r(ead)**\n**w(rite)**\n**(e)x(ecute)**\n\n\n| privilege   | file     | directary        |\n| ----------- | -------- | ---------------- |\n| r(ead)      | 读取内容 | 列出文件         |\n|             | cat      | ls               |\n| w(rite)     | 修改内容 | 增删文件         |\n|             | vi       | rm、touch、mkdir |\n| (e)x(ecute) | 执行     | 可进入           |\n|             | sh       | cd               |\n\n### 三种动作：\n```\n+ (add)\n- (remove)\n= (set)\n```\n\neg.\n\nu+rw \n角色：所有者，动作：添加，权限：读和写\n\n## 八(二)进制方式：\n\n|     | binary | octal |\n| --- | ------ | ----- |\n| r-- | 100    | 4     |\n| -w- | 010    | 2     |\n| --x | 001    | 1     |\n\neg.  \n\nrwxr-xr-x 755  \nrwxrwxrwx 777\n\n## 命令\n\n1. 更改文件权限\n\n```bash\nchmod [ugoa][+-=][rwx] file\n# eg.\nchmod u+rx a.txt\n\nchomd [octal] file\n# eg.\nchmod 755 a.txt\n```\n-R(ecursive) 递归修改权限\n\n2. 更改文件所有者\n```bash\nchown [owner[:[group]]] filename\n\n# eg.\nchown root a.txt\nchown root: a.txt\nchown root:wheel a.txt\n\n```\n\n1. 更改文件所属组\n```bash\nchgrp group filename\n\n# eg.\nchgrp wheel a.txt\n```\n\n## 附加权限\n\n| privilege | octal | file               | directary                                |\n| --------- | ----- | ------------------ | ---------------------------------------- |\n| (s)uid    | 4000  | 继承所有者权限     |                                          |\n| (s)gid    | 2000  | 继承所有者组权限   | 该目录下创建的所有文件(目录)属于目录属组 |\n| s(t)icky  | 1000  | 程序完成后保存副本 | 只有目录所有者或root才能删除目录         |\n\n当可执行文件设置suid/sgid权限时，任何用户执行改文件时都会获得文件所有者、组账号的对应身份  \n\ns suid (4)  \ng sgid (2)   \n\nt sticky (1) 唯root或owner可移动、删除  \n\neg.\n\nchmod +t file  \nchmod 1755 file\n\n![](2023-05-21-13-15-56.png)\n\n![](2023-05-21-13-19-41.png)\n## umask\n\n```bash\numask\n```\n\n创建文件时的默认权限\n\n  文件权限 = 0666 - umask\n\n  目录权限 = 0777 - umask\n\n可见文件比目录多了0111，即执行的权限\nwhy？安全也\n\n\n## 文件属性\n\nlsattr 列出属性\n\n![](2023-05-21-13-40-02.png)\n\n\nchattr\n\n```bash\nchattr [-RV][-v<版本编号>][{+|-|=}<属性>][文件or目录...]\n```\n\n    a：让文件或目录仅供附加用途。\n    b：不更新文件或目录的最后存取时间。\n    c：将文件或目录压缩后存放。\n    d：将文件或目录排除在dump操作之外。\n    i：不得任意更动文件或目录。\n    s：保密性删除文件或目录。\n    S：即时更新文件或目录。\n    u：预防意外删除。\n\n![](2023-05-21-13-45-20.png)","source":"_posts/Linux-权限.md","raw":"---\ntitle: Linux 权限\ndate: 2023-05-08 16:29:16\ntags: Linux\n---\n\n# Linux \n\n## 普通权限\n\n### 三种角色：\n**u(user,owner)**\n**g(roup)**\n**o(ther)**\n\n### 三种权限:\n**r(ead)**\n**w(rite)**\n**(e)x(ecute)**\n\n\n| privilege   | file     | directary        |\n| ----------- | -------- | ---------------- |\n| r(ead)      | 读取内容 | 列出文件         |\n|             | cat      | ls               |\n| w(rite)     | 修改内容 | 增删文件         |\n|             | vi       | rm、touch、mkdir |\n| (e)x(ecute) | 执行     | 可进入           |\n|             | sh       | cd               |\n\n### 三种动作：\n```\n+ (add)\n- (remove)\n= (set)\n```\n\neg.\n\nu+rw \n角色：所有者，动作：添加，权限：读和写\n\n## 八(二)进制方式：\n\n|     | binary | octal |\n| --- | ------ | ----- |\n| r-- | 100    | 4     |\n| -w- | 010    | 2     |\n| --x | 001    | 1     |\n\neg.  \n\nrwxr-xr-x 755  \nrwxrwxrwx 777\n\n## 命令\n\n1. 更改文件权限\n\n```bash\nchmod [ugoa][+-=][rwx] file\n# eg.\nchmod u+rx a.txt\n\nchomd [octal] file\n# eg.\nchmod 755 a.txt\n```\n-R(ecursive) 递归修改权限\n\n2. 更改文件所有者\n```bash\nchown [owner[:[group]]] filename\n\n# eg.\nchown root a.txt\nchown root: a.txt\nchown root:wheel a.txt\n\n```\n\n1. 更改文件所属组\n```bash\nchgrp group filename\n\n# eg.\nchgrp wheel a.txt\n```\n\n## 附加权限\n\n| privilege | octal | file               | directary                                |\n| --------- | ----- | ------------------ | ---------------------------------------- |\n| (s)uid    | 4000  | 继承所有者权限     |                                          |\n| (s)gid    | 2000  | 继承所有者组权限   | 该目录下创建的所有文件(目录)属于目录属组 |\n| s(t)icky  | 1000  | 程序完成后保存副本 | 只有目录所有者或root才能删除目录         |\n\n当可执行文件设置suid/sgid权限时，任何用户执行改文件时都会获得文件所有者、组账号的对应身份  \n\ns suid (4)  \ng sgid (2)   \n\nt sticky (1) 唯root或owner可移动、删除  \n\neg.\n\nchmod +t file  \nchmod 1755 file\n\n![](2023-05-21-13-15-56.png)\n\n![](2023-05-21-13-19-41.png)\n## umask\n\n```bash\numask\n```\n\n创建文件时的默认权限\n\n  文件权限 = 0666 - umask\n\n  目录权限 = 0777 - umask\n\n可见文件比目录多了0111，即执行的权限\nwhy？安全也\n\n\n## 文件属性\n\nlsattr 列出属性\n\n![](2023-05-21-13-40-02.png)\n\n\nchattr\n\n```bash\nchattr [-RV][-v<版本编号>][{+|-|=}<属性>][文件or目录...]\n```\n\n    a：让文件或目录仅供附加用途。\n    b：不更新文件或目录的最后存取时间。\n    c：将文件或目录压缩后存放。\n    d：将文件或目录排除在dump操作之外。\n    i：不得任意更动文件或目录。\n    s：保密性删除文件或目录。\n    S：即时更新文件或目录。\n    u：预防意外删除。\n\n![](2023-05-21-13-45-20.png)","slug":"Linux-权限","published":1,"updated":"2023-05-21T05:46:35.338Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5ul0023lv9edxge0ku7","content":"<h1 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h1><h2 id=\"普通权限\"><a href=\"#普通权限\" class=\"headerlink\" title=\"普通权限\"></a>普通权限</h2><h3 id=\"三种角色：\"><a href=\"#三种角色：\" class=\"headerlink\" title=\"三种角色：\"></a>三种角色：</h3><p><strong>u(user,owner)</strong><br><strong>g(roup)</strong><br><strong>o(ther)</strong></p>\n<h3 id=\"三种权限\"><a href=\"#三种权限\" class=\"headerlink\" title=\"三种权限:\"></a>三种权限:</h3><p><strong>r(ead)</strong><br><strong>w(rite)</strong><br><strong>(e)x(ecute)</strong></p>\n<table>\n<thead>\n<tr>\n<th>privilege</th>\n<th>file</th>\n<th>directary</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>r(ead)</td>\n<td>读取内容</td>\n<td>列出文件</td>\n</tr>\n<tr>\n<td></td>\n<td>cat</td>\n<td>ls</td>\n</tr>\n<tr>\n<td>w(rite)</td>\n<td>修改内容</td>\n<td>增删文件</td>\n</tr>\n<tr>\n<td></td>\n<td>vi</td>\n<td>rm、touch、mkdir</td>\n</tr>\n<tr>\n<td>(e)x(ecute)</td>\n<td>执行</td>\n<td>可进入</td>\n</tr>\n<tr>\n<td></td>\n<td>sh</td>\n<td>cd</td>\n</tr>\n</tbody></table>\n<h3 id=\"三种动作：\"><a href=\"#三种动作：\" class=\"headerlink\" title=\"三种动作：\"></a>三种动作：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (add)</span><br><span class=\"line\">- (remove)</span><br><span class=\"line\">= (set)</span><br></pre></td></tr></table></figure>\n\n<p>eg.</p>\n<p>u+rw<br>角色：所有者，动作：添加，权限：读和写</p>\n<h2 id=\"八-二-进制方式：\"><a href=\"#八-二-进制方式：\" class=\"headerlink\" title=\"八(二)进制方式：\"></a>八(二)进制方式：</h2><table>\n<thead>\n<tr>\n<th></th>\n<th>binary</th>\n<th>octal</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>r–</td>\n<td>100</td>\n<td>4</td>\n</tr>\n<tr>\n<td>-w-</td>\n<td>010</td>\n<td>2</td>\n</tr>\n<tr>\n<td>–x</td>\n<td>001</td>\n<td>1</td>\n</tr>\n</tbody></table>\n<p>eg.  </p>\n<p>rwxr-xr-x 755<br>rwxrwxrwx 777</p>\n<h2 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h2><ol>\n<li>更改文件权限</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> [ugoa][+-=][rwx] file</span><br><span class=\"line\"><span class=\"comment\"># eg.</span></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> u+rx a.txt</span><br><span class=\"line\"></span><br><span class=\"line\">chomd [octal] file</span><br><span class=\"line\"><span class=\"comment\"># eg.</span></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 755 a.txt</span><br></pre></td></tr></table></figure>\n<p>-R(ecursive) 递归修改权限</p>\n<ol start=\"2\">\n<li><p>更改文件所有者</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chown</span> [owner[:[group]]] filename</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># eg.</span></span><br><span class=\"line\"><span class=\"built_in\">chown</span> root a.txt</span><br><span class=\"line\"><span class=\"built_in\">chown</span> root: a.txt</span><br><span class=\"line\"><span class=\"built_in\">chown</span> root:wheel a.txt</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更改文件所属组</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chgrp</span> group filename</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># eg.</span></span><br><span class=\"line\"><span class=\"built_in\">chgrp</span> wheel a.txt</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"附加权限\"><a href=\"#附加权限\" class=\"headerlink\" title=\"附加权限\"></a>附加权限</h2><table>\n<thead>\n<tr>\n<th>privilege</th>\n<th>octal</th>\n<th>file</th>\n<th>directary</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>(s)uid</td>\n<td>4000</td>\n<td>继承所有者权限</td>\n<td></td>\n</tr>\n<tr>\n<td>(s)gid</td>\n<td>2000</td>\n<td>继承所有者组权限</td>\n<td>该目录下创建的所有文件(目录)属于目录属组</td>\n</tr>\n<tr>\n<td>s(t)icky</td>\n<td>1000</td>\n<td>程序完成后保存副本</td>\n<td>只有目录所有者或root才能删除目录</td>\n</tr>\n</tbody></table>\n<p>当可执行文件设置suid&#x2F;sgid权限时，任何用户执行改文件时都会获得文件所有者、组账号的对应身份  </p>\n<p>s suid (4)<br>g sgid (2)   </p>\n<p>t sticky (1) 唯root或owner可移动、删除  </p>\n<p>eg.</p>\n<p>chmod +t file<br>chmod 1755 file</p>\n<p><img src=\"/2023/05/08/Linux-%E6%9D%83%E9%99%90/2023-05-21-13-15-56.png\"></p>\n<p><img src=\"/2023/05/08/Linux-%E6%9D%83%E9%99%90/2023-05-21-13-19-41.png\"></p>\n<h2 id=\"umask\"><a href=\"#umask\" class=\"headerlink\" title=\"umask\"></a>umask</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">umask</span></span><br></pre></td></tr></table></figure>\n\n<p>创建文件时的默认权限</p>\n<p>  文件权限 &#x3D; 0666 - umask</p>\n<p>  目录权限 &#x3D; 0777 - umask</p>\n<p>可见文件比目录多了0111，即执行的权限<br>why？安全也</p>\n<h2 id=\"文件属性\"><a href=\"#文件属性\" class=\"headerlink\" title=\"文件属性\"></a>文件属性</h2><p>lsattr 列出属性</p>\n<p><img src=\"/2023/05/08/Linux-%E6%9D%83%E9%99%90/2023-05-21-13-40-02.png\"></p>\n<p>chattr</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chattr [-RV][-v&lt;版本编号&gt;][&#123;+|-|=&#125;&lt;属性&gt;][文件or目录...]</span><br></pre></td></tr></table></figure>\n\n<pre><code>a：让文件或目录仅供附加用途。\nb：不更新文件或目录的最后存取时间。\nc：将文件或目录压缩后存放。\nd：将文件或目录排除在dump操作之外。\ni：不得任意更动文件或目录。\ns：保密性删除文件或目录。\nS：即时更新文件或目录。\nu：预防意外删除。\n</code></pre>\n<p><img src=\"/2023/05/08/Linux-%E6%9D%83%E9%99%90/2023-05-21-13-45-20.png\"></p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h1 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h1><h2 id=\"普通权限\"><a href=\"#普通权限\" class=\"headerlink\" title=\"普通权限\"></a>普通权限</h2><h3 id=\"三种角色：\"><a href=\"#三种角色：\" class=\"headerlink\" title=\"三种角色：\"></a>三种角色：</h3><p><strong>u(user,owner)</strong><br><strong>g(roup)</strong><br><strong>o(ther)</strong></p>\n<h3 id=\"三种权限\"><a href=\"#三种权限\" class=\"headerlink\" title=\"三种权限:\"></a>三种权限:</h3><p><strong>r(ead)</strong><br><strong>w(rite)</strong><br><strong>(e)x(ecute)</strong></p>\n<table>\n<thead>\n<tr>\n<th>privilege</th>\n<th>file</th>\n<th>directary</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>r(ead)</td>\n<td>读取内容</td>\n<td>列出文件</td>\n</tr>\n<tr>\n<td></td>\n<td>cat</td>\n<td>ls</td>\n</tr>\n<tr>\n<td>w(rite)</td>\n<td>修改内容</td>\n<td>增删文件</td>\n</tr>\n<tr>\n<td></td>\n<td>vi</td>\n<td>rm、touch、mkdir</td>\n</tr>\n<tr>\n<td>(e)x(ecute)</td>\n<td>执行</td>\n<td>可进入</td>\n</tr>\n<tr>\n<td></td>\n<td>sh</td>\n<td>cd</td>\n</tr>\n</tbody></table>\n<h3 id=\"三种动作：\"><a href=\"#三种动作：\" class=\"headerlink\" title=\"三种动作：\"></a>三种动作：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (add)</span><br><span class=\"line\">- (remove)</span><br><span class=\"line\">= (set)</span><br></pre></td></tr></table></figure>\n\n<p>eg.</p>\n<p>u+rw<br>角色：所有者，动作：添加，权限：读和写</p>\n<h2 id=\"八-二-进制方式：\"><a href=\"#八-二-进制方式：\" class=\"headerlink\" title=\"八(二)进制方式：\"></a>八(二)进制方式：</h2><table>\n<thead>\n<tr>\n<th></th>\n<th>binary</th>\n<th>octal</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>r–</td>\n<td>100</td>\n<td>4</td>\n</tr>\n<tr>\n<td>-w-</td>\n<td>010</td>\n<td>2</td>\n</tr>\n<tr>\n<td>–x</td>\n<td>001</td>\n<td>1</td>\n</tr>\n</tbody></table>\n<p>eg.  </p>\n<p>rwxr-xr-x 755<br>rwxrwxrwx 777</p>\n<h2 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h2><ol>\n<li>更改文件权限</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> [ugoa][+-=][rwx] file</span><br><span class=\"line\"><span class=\"comment\"># eg.</span></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> u+rx a.txt</span><br><span class=\"line\"></span><br><span class=\"line\">chomd [octal] file</span><br><span class=\"line\"><span class=\"comment\"># eg.</span></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 755 a.txt</span><br></pre></td></tr></table></figure>\n<p>-R(ecursive) 递归修改权限</p>\n<ol start=\"2\">\n<li><p>更改文件所有者</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chown</span> [owner[:[group]]] filename</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># eg.</span></span><br><span class=\"line\"><span class=\"built_in\">chown</span> root a.txt</span><br><span class=\"line\"><span class=\"built_in\">chown</span> root: a.txt</span><br><span class=\"line\"><span class=\"built_in\">chown</span> root:wheel a.txt</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更改文件所属组</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chgrp</span> group filename</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># eg.</span></span><br><span class=\"line\"><span class=\"built_in\">chgrp</span> wheel a.txt</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"附加权限\"><a href=\"#附加权限\" class=\"headerlink\" title=\"附加权限\"></a>附加权限</h2><table>\n<thead>\n<tr>\n<th>privilege</th>\n<th>octal</th>\n<th>file</th>\n<th>directary</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>(s)uid</td>\n<td>4000</td>\n<td>继承所有者权限</td>\n<td></td>\n</tr>\n<tr>\n<td>(s)gid</td>\n<td>2000</td>\n<td>继承所有者组权限</td>\n<td>该目录下创建的所有文件(目录)属于目录属组</td>\n</tr>\n<tr>\n<td>s(t)icky</td>\n<td>1000</td>\n<td>程序完成后保存副本</td>\n<td>只有目录所有者或root才能删除目录</td>\n</tr>\n</tbody></table>\n<p>当可执行文件设置suid&#x2F;sgid权限时，任何用户执行改文件时都会获得文件所有者、组账号的对应身份  </p>\n<p>s suid (4)<br>g sgid (2)   </p>\n<p>t sticky (1) 唯root或owner可移动、删除  </p>\n<p>eg.</p>\n<p>chmod +t file<br>chmod 1755 file</p>\n<p><img src=\"/2023/05/08/Linux-%E6%9D%83%E9%99%90/2023-05-21-13-15-56.png\"></p>\n<p><img src=\"/2023/05/08/Linux-%E6%9D%83%E9%99%90/2023-05-21-13-19-41.png\"></p>\n<h2 id=\"umask\"><a href=\"#umask\" class=\"headerlink\" title=\"umask\"></a>umask</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">umask</span></span><br></pre></td></tr></table></figure>\n\n<p>创建文件时的默认权限</p>\n<p>  文件权限 &#x3D; 0666 - umask</p>\n<p>  目录权限 &#x3D; 0777 - umask</p>\n<p>可见文件比目录多了0111，即执行的权限<br>why？安全也</p>\n<h2 id=\"文件属性\"><a href=\"#文件属性\" class=\"headerlink\" title=\"文件属性\"></a>文件属性</h2><p>lsattr 列出属性</p>\n<p><img src=\"/2023/05/08/Linux-%E6%9D%83%E9%99%90/2023-05-21-13-40-02.png\"></p>\n<p>chattr</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chattr [-RV][-v&lt;版本编号&gt;][&#123;+|-|=&#125;&lt;属性&gt;][文件or目录...]</span><br></pre></td></tr></table></figure>\n\n<pre><code>a：让文件或目录仅供附加用途。\nb：不更新文件或目录的最后存取时间。\nc：将文件或目录压缩后存放。\nd：将文件或目录排除在dump操作之外。\ni：不得任意更动文件或目录。\ns：保密性删除文件或目录。\nS：即时更新文件或目录。\nu：预防意外删除。\n</code></pre>\n<p><img src=\"/2023/05/08/Linux-%E6%9D%83%E9%99%90/2023-05-21-13-45-20.png\"></p>\n"},{"title":"Linux 环境变量","date":"2022-09-24T07:52:31.000Z","_content":"# LINUX 环境变量\n\n## 查看\n\n用户级别环境变量定义文件：\n\n  ~/.bashrc\n  ~/.profile\n  ~/.bash_profile\n\n系统级别环境变量定义文件：\n\n  /etc/bashrc\n  /etc/profile\n  /etc/bash_profile\n  /etc/environment\n\n```bash\nexport     # 命令显示当前系统定义的所有环境变量\n\necho $PATH # 命令输出当前的PATH环境变量的值\n```\n\n其中PATH变量定义了运行命令的查找路径，以冒号:分割\n使用export定义的时候可加双引号也可不加\n\n## 添加\n\n### 1. export PATH\n\n使用export命令直接修改PATH的值\n\n```bash\nexport PATH=/home/uusama/mysql/bin:$PATH\n\nexport PATH=$PATH:/home/uusama/mysql/bin\n```\n\n注意事项：\n\n生效时间：立即生效\n生效期限：当前终端有效，窗口关闭后无效\n生效范围：仅对当前用户有效\n配置的环境变量中不要忘了加上原来的配置，即$PATH部分，避免覆盖原来配置\n\n### 2. vim ~/.bashrc\n\n通过修改用户目录下的~/.bashrc文件进行配置：\n\n```bash\nvim ~/.bashrc\n\n# 在最后一行加上\nexport PATH=$PATH:/home/uusama/mysql/bin\n```\n\n注意事项：\n\n生效时间：使用相同的用户打开新的终端时生效，或者手动source ~/.bashrc生效\n生效期限：永久有效\n生效范围：仅对当前用户有效\n如果有后续的环境变量加载文件覆盖了PATH定义，则可能不生效\n\n### 3. vim ~/.bash_profile\n\n和修改~/.bashrc文件类似，也是要在文件最后加上新的路径即可：\n\n```bash\nvim ~/.bash_profile\n\n# 在最后一行加上\nexport PATH=$PATH:/home/uusama/mysql/bin\n```\n\n注意事项：\n\n生效时间：使用相同的用户打开新的终端时生效，或者手动source ~/.bash_profile生效\n生效期限：永久有效\n生效范围：仅对当前用户有效\n如果没有~/.bash_profile文件，则可以编辑~/.profile文件或者新建一个\n\n### 4. vim /etc/bashrc\n\n该方法是修改系统配置，需要管理员权限（如root）或者对该文件的写入权限：\n\n```bash\nsudo vim /etc/bashrc\n\n# 在最后一行加上\nexport PATH=$PATH:/home/uusama/mysql/bin\n```\n\n注意事项：\n\n生效时间：新开终端生效，或者手动source /etc/bashrc生效\n生效期限：永久有效\n生效范围：对所有用户有效\n\n### 5. vim /etc/profile\n\n该方法修改系统配置，需要管理员权限或者对该文件的写入权限，和vim /etc/bashrc类似：\n\n```bash\nsudo vim /etc/profile\n\n# 在最后一行加上\nexport PATH=$PATH:/home/uusama/mysql/bin\n```\n\n注意事项：\n\n生效时间：新开终端生效，或者手动source /etc/profile生效\n生效期限：永久有效\n生效范围：对所有用户有效\n\n### 6. vim /etc/environment\n\n该方法是修改系统环境配置文件，需要管理员权限或者对该文件的写入权限：\n\n```bash\nsudo vim /etc/environment\n\n# 在最后一行加上\nexport PATH=$PATH:/home/uusama/mysql/bin\n```\n\n注意事项：\n\n生效时间：新开终端生效，或者手动source /etc/environment生效\n生效期限：永久有效\n生效范围：对所有用户有效\n\n","source":"_posts/Linux-环境变量.md","raw":"---\ntitle: Linux 环境变量\ndate: 2022-09-24 15:52:31\ntags: Linux\n---\n# LINUX 环境变量\n\n## 查看\n\n用户级别环境变量定义文件：\n\n  ~/.bashrc\n  ~/.profile\n  ~/.bash_profile\n\n系统级别环境变量定义文件：\n\n  /etc/bashrc\n  /etc/profile\n  /etc/bash_profile\n  /etc/environment\n\n```bash\nexport     # 命令显示当前系统定义的所有环境变量\n\necho $PATH # 命令输出当前的PATH环境变量的值\n```\n\n其中PATH变量定义了运行命令的查找路径，以冒号:分割\n使用export定义的时候可加双引号也可不加\n\n## 添加\n\n### 1. export PATH\n\n使用export命令直接修改PATH的值\n\n```bash\nexport PATH=/home/uusama/mysql/bin:$PATH\n\nexport PATH=$PATH:/home/uusama/mysql/bin\n```\n\n注意事项：\n\n生效时间：立即生效\n生效期限：当前终端有效，窗口关闭后无效\n生效范围：仅对当前用户有效\n配置的环境变量中不要忘了加上原来的配置，即$PATH部分，避免覆盖原来配置\n\n### 2. vim ~/.bashrc\n\n通过修改用户目录下的~/.bashrc文件进行配置：\n\n```bash\nvim ~/.bashrc\n\n# 在最后一行加上\nexport PATH=$PATH:/home/uusama/mysql/bin\n```\n\n注意事项：\n\n生效时间：使用相同的用户打开新的终端时生效，或者手动source ~/.bashrc生效\n生效期限：永久有效\n生效范围：仅对当前用户有效\n如果有后续的环境变量加载文件覆盖了PATH定义，则可能不生效\n\n### 3. vim ~/.bash_profile\n\n和修改~/.bashrc文件类似，也是要在文件最后加上新的路径即可：\n\n```bash\nvim ~/.bash_profile\n\n# 在最后一行加上\nexport PATH=$PATH:/home/uusama/mysql/bin\n```\n\n注意事项：\n\n生效时间：使用相同的用户打开新的终端时生效，或者手动source ~/.bash_profile生效\n生效期限：永久有效\n生效范围：仅对当前用户有效\n如果没有~/.bash_profile文件，则可以编辑~/.profile文件或者新建一个\n\n### 4. vim /etc/bashrc\n\n该方法是修改系统配置，需要管理员权限（如root）或者对该文件的写入权限：\n\n```bash\nsudo vim /etc/bashrc\n\n# 在最后一行加上\nexport PATH=$PATH:/home/uusama/mysql/bin\n```\n\n注意事项：\n\n生效时间：新开终端生效，或者手动source /etc/bashrc生效\n生效期限：永久有效\n生效范围：对所有用户有效\n\n### 5. vim /etc/profile\n\n该方法修改系统配置，需要管理员权限或者对该文件的写入权限，和vim /etc/bashrc类似：\n\n```bash\nsudo vim /etc/profile\n\n# 在最后一行加上\nexport PATH=$PATH:/home/uusama/mysql/bin\n```\n\n注意事项：\n\n生效时间：新开终端生效，或者手动source /etc/profile生效\n生效期限：永久有效\n生效范围：对所有用户有效\n\n### 6. vim /etc/environment\n\n该方法是修改系统环境配置文件，需要管理员权限或者对该文件的写入权限：\n\n```bash\nsudo vim /etc/environment\n\n# 在最后一行加上\nexport PATH=$PATH:/home/uusama/mysql/bin\n```\n\n注意事项：\n\n生效时间：新开终端生效，或者手动source /etc/environment生效\n生效期限：永久有效\n生效范围：对所有用户有效\n\n","slug":"Linux-环境变量","published":1,"updated":"2023-05-07T08:15:26.011Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5um0025lv9e4p1eeb22","content":"<h1 id=\"LINUX-环境变量\"><a href=\"#LINUX-环境变量\" class=\"headerlink\" title=\"LINUX 环境变量\"></a>LINUX 环境变量</h1><h2 id=\"查看\"><a href=\"#查看\" class=\"headerlink\" title=\"查看\"></a>查看</h2><p>用户级别环境变量定义文件：</p>\n<p>  ~&#x2F;.bashrc<br>  ~&#x2F;.profile<br>  ~&#x2F;.bash_profile</p>\n<p>系统级别环境变量定义文件：</p>\n<p>  &#x2F;etc&#x2F;bashrc<br>  &#x2F;etc&#x2F;profile<br>  &#x2F;etc&#x2F;bash_profile<br>  &#x2F;etc&#x2F;environment</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span>     <span class=\"comment\"># 命令显示当前系统定义的所有环境变量</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$PATH</span> <span class=\"comment\"># 命令输出当前的PATH环境变量的值</span></span><br></pre></td></tr></table></figure>\n\n<p>其中PATH变量定义了运行命令的查找路径，以冒号:分割<br>使用export定义的时候可加双引号也可不加</p>\n<h2 id=\"添加\"><a href=\"#添加\" class=\"headerlink\" title=\"添加\"></a>添加</h2><h3 id=\"1-export-PATH\"><a href=\"#1-export-PATH\" class=\"headerlink\" title=\"1. export PATH\"></a>1. export PATH</h3><p>使用export命令直接修改PATH的值</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> PATH=/home/uusama/mysql/bin:<span class=\"variable\">$PATH</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/home/uusama/mysql/bin</span><br></pre></td></tr></table></figure>\n\n<p>注意事项：</p>\n<p>生效时间：立即生效<br>生效期限：当前终端有效，窗口关闭后无效<br>生效范围：仅对当前用户有效<br>配置的环境变量中不要忘了加上原来的配置，即$PATH部分，避免覆盖原来配置</p>\n<h3 id=\"2-vim-bashrc\"><a href=\"#2-vim-bashrc\" class=\"headerlink\" title=\"2. vim ~&#x2F;.bashrc\"></a>2. vim ~&#x2F;.bashrc</h3><p>通过修改用户目录下的~&#x2F;.bashrc文件进行配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.bashrc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在最后一行加上</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/home/uusama/mysql/bin</span><br></pre></td></tr></table></figure>\n\n<p>注意事项：</p>\n<p>生效时间：使用相同的用户打开新的终端时生效，或者手动source ~&#x2F;.bashrc生效<br>生效期限：永久有效<br>生效范围：仅对当前用户有效<br>如果有后续的环境变量加载文件覆盖了PATH定义，则可能不生效</p>\n<h3 id=\"3-vim-bash-profile\"><a href=\"#3-vim-bash-profile\" class=\"headerlink\" title=\"3. vim ~&#x2F;.bash_profile\"></a>3. vim ~&#x2F;.bash_profile</h3><p>和修改~&#x2F;.bashrc文件类似，也是要在文件最后加上新的路径即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.bash_profile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在最后一行加上</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/home/uusama/mysql/bin</span><br></pre></td></tr></table></figure>\n\n<p>注意事项：</p>\n<p>生效时间：使用相同的用户打开新的终端时生效，或者手动source <del>&#x2F;.bash_profile生效<br>生效期限：永久有效<br>生效范围：仅对当前用户有效<br>如果没有</del>&#x2F;.bash_profile文件，则可以编辑~&#x2F;.profile文件或者新建一个</p>\n<h3 id=\"4-vim-etc-bashrc\"><a href=\"#4-vim-etc-bashrc\" class=\"headerlink\" title=\"4. vim &#x2F;etc&#x2F;bashrc\"></a>4. vim &#x2F;etc&#x2F;bashrc</h3><p>该方法是修改系统配置，需要管理员权限（如root）或者对该文件的写入权限：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/bashrc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在最后一行加上</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/home/uusama/mysql/bin</span><br></pre></td></tr></table></figure>\n\n<p>注意事项：</p>\n<p>生效时间：新开终端生效，或者手动source &#x2F;etc&#x2F;bashrc生效<br>生效期限：永久有效<br>生效范围：对所有用户有效</p>\n<h3 id=\"5-vim-etc-profile\"><a href=\"#5-vim-etc-profile\" class=\"headerlink\" title=\"5. vim &#x2F;etc&#x2F;profile\"></a>5. vim &#x2F;etc&#x2F;profile</h3><p>该方法修改系统配置，需要管理员权限或者对该文件的写入权限，和vim &#x2F;etc&#x2F;bashrc类似：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在最后一行加上</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/home/uusama/mysql/bin</span><br></pre></td></tr></table></figure>\n\n<p>注意事项：</p>\n<p>生效时间：新开终端生效，或者手动source &#x2F;etc&#x2F;profile生效<br>生效期限：永久有效<br>生效范围：对所有用户有效</p>\n<h3 id=\"6-vim-etc-environment\"><a href=\"#6-vim-etc-environment\" class=\"headerlink\" title=\"6. vim &#x2F;etc&#x2F;environment\"></a>6. vim &#x2F;etc&#x2F;environment</h3><p>该方法是修改系统环境配置文件，需要管理员权限或者对该文件的写入权限：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/environment</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在最后一行加上</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/home/uusama/mysql/bin</span><br></pre></td></tr></table></figure>\n\n<p>注意事项：</p>\n<p>生效时间：新开终端生效，或者手动source &#x2F;etc&#x2F;environment生效<br>生效期限：永久有效<br>生效范围：对所有用户有效</p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h1 id=\"LINUX-环境变量\"><a href=\"#LINUX-环境变量\" class=\"headerlink\" title=\"LINUX 环境变量\"></a>LINUX 环境变量</h1><h2 id=\"查看\"><a href=\"#查看\" class=\"headerlink\" title=\"查看\"></a>查看</h2><p>用户级别环境变量定义文件：</p>\n<p>  ~&#x2F;.bashrc<br>  ~&#x2F;.profile<br>  ~&#x2F;.bash_profile</p>\n<p>系统级别环境变量定义文件：</p>\n<p>  &#x2F;etc&#x2F;bashrc<br>  &#x2F;etc&#x2F;profile<br>  &#x2F;etc&#x2F;bash_profile<br>  &#x2F;etc&#x2F;environment</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span>     <span class=\"comment\"># 命令显示当前系统定义的所有环境变量</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$PATH</span> <span class=\"comment\"># 命令输出当前的PATH环境变量的值</span></span><br></pre></td></tr></table></figure>\n\n<p>其中PATH变量定义了运行命令的查找路径，以冒号:分割<br>使用export定义的时候可加双引号也可不加</p>\n<h2 id=\"添加\"><a href=\"#添加\" class=\"headerlink\" title=\"添加\"></a>添加</h2><h3 id=\"1-export-PATH\"><a href=\"#1-export-PATH\" class=\"headerlink\" title=\"1. export PATH\"></a>1. export PATH</h3><p>使用export命令直接修改PATH的值</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> PATH=/home/uusama/mysql/bin:<span class=\"variable\">$PATH</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/home/uusama/mysql/bin</span><br></pre></td></tr></table></figure>\n\n<p>注意事项：</p>\n<p>生效时间：立即生效<br>生效期限：当前终端有效，窗口关闭后无效<br>生效范围：仅对当前用户有效<br>配置的环境变量中不要忘了加上原来的配置，即$PATH部分，避免覆盖原来配置</p>\n<h3 id=\"2-vim-bashrc\"><a href=\"#2-vim-bashrc\" class=\"headerlink\" title=\"2. vim ~&#x2F;.bashrc\"></a>2. vim ~&#x2F;.bashrc</h3><p>通过修改用户目录下的~&#x2F;.bashrc文件进行配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.bashrc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在最后一行加上</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/home/uusama/mysql/bin</span><br></pre></td></tr></table></figure>\n\n<p>注意事项：</p>\n<p>生效时间：使用相同的用户打开新的终端时生效，或者手动source ~&#x2F;.bashrc生效<br>生效期限：永久有效<br>生效范围：仅对当前用户有效<br>如果有后续的环境变量加载文件覆盖了PATH定义，则可能不生效</p>\n<h3 id=\"3-vim-bash-profile\"><a href=\"#3-vim-bash-profile\" class=\"headerlink\" title=\"3. vim ~&#x2F;.bash_profile\"></a>3. vim ~&#x2F;.bash_profile</h3><p>和修改~&#x2F;.bashrc文件类似，也是要在文件最后加上新的路径即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.bash_profile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在最后一行加上</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/home/uusama/mysql/bin</span><br></pre></td></tr></table></figure>\n\n<p>注意事项：</p>\n<p>生效时间：使用相同的用户打开新的终端时生效，或者手动source <del>&#x2F;.bash_profile生效<br>生效期限：永久有效<br>生效范围：仅对当前用户有效<br>如果没有</del>&#x2F;.bash_profile文件，则可以编辑~&#x2F;.profile文件或者新建一个</p>\n<h3 id=\"4-vim-etc-bashrc\"><a href=\"#4-vim-etc-bashrc\" class=\"headerlink\" title=\"4. vim &#x2F;etc&#x2F;bashrc\"></a>4. vim &#x2F;etc&#x2F;bashrc</h3><p>该方法是修改系统配置，需要管理员权限（如root）或者对该文件的写入权限：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/bashrc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在最后一行加上</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/home/uusama/mysql/bin</span><br></pre></td></tr></table></figure>\n\n<p>注意事项：</p>\n<p>生效时间：新开终端生效，或者手动source &#x2F;etc&#x2F;bashrc生效<br>生效期限：永久有效<br>生效范围：对所有用户有效</p>\n<h3 id=\"5-vim-etc-profile\"><a href=\"#5-vim-etc-profile\" class=\"headerlink\" title=\"5. vim &#x2F;etc&#x2F;profile\"></a>5. vim &#x2F;etc&#x2F;profile</h3><p>该方法修改系统配置，需要管理员权限或者对该文件的写入权限，和vim &#x2F;etc&#x2F;bashrc类似：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在最后一行加上</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/home/uusama/mysql/bin</span><br></pre></td></tr></table></figure>\n\n<p>注意事项：</p>\n<p>生效时间：新开终端生效，或者手动source &#x2F;etc&#x2F;profile生效<br>生效期限：永久有效<br>生效范围：对所有用户有效</p>\n<h3 id=\"6-vim-etc-environment\"><a href=\"#6-vim-etc-environment\" class=\"headerlink\" title=\"6. vim &#x2F;etc&#x2F;environment\"></a>6. vim &#x2F;etc&#x2F;environment</h3><p>该方法是修改系统环境配置文件，需要管理员权限或者对该文件的写入权限：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/environment</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在最后一行加上</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/home/uusama/mysql/bin</span><br></pre></td></tr></table></figure>\n\n<p>注意事项：</p>\n<p>生效时间：新开终端生效，或者手动source &#x2F;etc&#x2F;environment生效<br>生效期限：永久有效<br>生效范围：对所有用户有效</p>\n"},{"title":"Linux 系统管理","date":"2023-05-22T08:47:12.000Z","_content":"\n# Linux 系统管理\n\n## PS 查看进程状态\n\n```bash\nps [options]\nps aux |grep <name>\nps ef\n\nps -u <username> \n```\n\nOptions:\n\n    -A,-e,a     Select all processes.  Identical to -e.\n    -a     Select all processes except both session leaders and processes not associated with a terminal.\n    -d     Select all processes except session leaders.\n    g      Really all, even session leaders.  \n    -N,--deselect     Select all processes except those that fulfill the specified conditions (negates the selection).  \n    T,t      Select all processes associated with this terminal.  \n    r      Restrict the selection to only running processes.\n    x      list all processes owned by you and others.\n\n结果：\n\n\n    USER: 进程拥有者\n    PID: pid\n    %CPU: 占用的 CPU 使用率\n    %MEM: 占用的内存使用率\n    VSZ: 占用的虚拟内存大小\n    RSS: 占用的内存大小\n    TTY: 终端的次要装置号码 (minor device number of tty)\n\n    STAT: 该进程的状态:\n        D: 无法中断的休眠状态 (通常 IO 的进程)\n        R: 正在执行中\n        S: 静止状态\n        T: 暂停执行\n        Z: 不存在但暂时无法消除\n        W: 没有足够的内存分页可分配\n        <: 高优先序的进程\n        N: 低优先序的进程\n        L: 有内存分页分配并锁在内存内 (实时系统或捱A I/O)\n    START: 进程开始时间\n    TIME: 执行的时间\n    COMMAND:所执行的指令\n\n## free 查看内存状态\n\n```bash\nfree\n```\n## sleep 命令延迟执行\n\n```bash\nsleep time; cmd\n```\n\n## kill 杀死进程\n\n```bash\nkill [-<signal>] pid\n\n\npgrep [options] pattern\npgrep -u root sshd # list the processes called sshd AND owned by root\n\npkill [options] pattern # send the specified signal to each process \n\npwait [options] pattern # wait for each process instead of listing them on stdout\n```\n## renice (alter priority of running processes)\n\n    -n, --priority priority\n    -g, --pgrp\n    -p, --pid\n    -u, --user\n\nchange the priority of the processes with PIDs 987 and 32, plus all processes owned by the users daemon and root:\n\n       renice +1 987 -u daemon root -p 32\n\n## top 显示进程实时状态\n\ntop  \nh 查看帮助  \nman top 查看man page  \n\n一些指标\n\n    %CPU  --  CPU Usage\n    %MEM  --  Memory Usage (RES)\n    CODE  --  Code Size (KiB)\n    COMMAND  --  Command Name or Command Line\n    DATA  --  Data + Stack Size (KiB)\n    Flags  --  Task Flags\n    NI  --  Nice Value\n    NU  --  Last known NUMA node\n    P  --  Last used CPU (SMP)\n    PGRP  --  Process Group Id\n    PR  --  Priority\n    RES  --  Resident Memory Size (KiB)\n    SHR  --  Shared Memory Size (KiB)\n    SID  --  Session Id\n    SUID  --  Saved User Id\n    SWAP  --  Swapped Size (KiB)\n    TGID  --  Thread Group Id\n    TIME  --  CPU Time\n    TIME+  --  CPU Time, hundredths\n    USED  --  Memory in Use (KiB)\n\n    S  --  Process Status\n        The status of the task which can be one of:\n            D = uninterruptible sleep\n            I = idle\n            R = running\n            S = sleeping\n            T = stopped by job control signal\n            t = stopped by debugger during trace\n            Z = zombie\n\n    us, user    : time running un-niced user processes\n    sy, system  : time running kernel processes\n    ni, nice    : time running niced user processes\n    id, idle    : time spent in the kernel idle handler\n    wa, IO-wait : time waiting for I/O completion\n    hi : time spent servicing hardware interrupts\n    si : time spent servicing software interrupts\n    st : time stolen from this vm by the hypervisor\n\nhtop\n\nbtop++\n\n## 前后台切换\n\n```\n            ctrl+z ->             bg ->\nForeground ----------- Stopped ---------- Background &\n                  <----- fg  -------                     \n```\n \njobs 查看挂起到后台的进程\n\n## systemctl 服务管理\n\n```bash\n# 修改服务状态\nsystemctl {status\n            |start\n            |stop\n            |restart\n            |reload\n            |enable\n            |disable\n            |kill\n            } <name[.service]>\n\n# 修改系统状态\nsystemctl { reboot # 重启系统\n|poweroff # 关闭系统，切断电源\n|halt # CPU停止工作\n|suspend # 暂停系统(待机)\n|hibernate # 让系统进入冬眠状态\n|hybrid-sleep # 让系统进入交互式休眠状态\n|rescue # 启动进入救援状态（单用户状态）\n}    \n```\n\n```bash\nsystemctl enable clamd@scan.service\n# 等同于\nln -s '/usr/lib/systemd/system/clamd@scan.service' '/etc/systemd/system/multi-user.target.wants/clamd@scan.service'\n```\n\nUnit(系统资源):\n\n    Service unit：系统服务\n    Target unit：多个 Unit 构成的一个组\n    Device Unit：硬件设备\n    Mount Unit：文件系统的挂载点\n    Automount Unit：自动挂载点\n    Path Unit：文件或路径\n    Scope Unit：不是由 Systemd 启动的外部进程\n    Slice Unit：进程组\n    Snapshot Unit：Systemd 快照，可以切回某个快照\n    Socket Unit：进程间通信的 socket\n    Swap Unit：swap 文件\n    Timer Unit：定时器\n\n```bash\n# 列出正在运行的 Unit\nsystemctl list-units\n\n# 列出所有Unit，包括没有找到配置文件的或者启动失败的\nsystemctl list-units --all\n\n# 列出所有没有运行的 Unit\nsystemctl list-units --all --state=inactive\n\n# 列出所有加载失败的 Unit\nsystemctl list-units --failed\n\n# 列出所有正在运行的、类型为 service 的 Unit\nsystemctl list-units --type=service\n\n\n# 显示系统状态\nsystemctl status\n\n# 显示单个 Unit 的状态\nsysystemctl status bluetooth.service\n\n# 显示远程主机的某个 Unit 的状态\nsystemctl -H root@rhel7.example.com status httpd.service\n\n# 显示某个 Unit 是否正在运行\nsystemctl is-active application.service\n\n# 显示某个 Unit 是否处于启动失败状态\nsystemctl is-failed application.service\n\n# 显示某个 Unit 服务是否建立了启动链接\nsystemctl is-enabled application.service\n```\n\n\n配置文件的格式\n\n    systemctl cat atd.service\n\n        [Unit]\n        Description=ATD daemon\n\n        [Service]\n        Type=forking\n        ExecStart=/usr/bin/atd\n\n        [Install]\n        WantedBy=multi-user.target\n\nTarget : 一个 Unit 组，包含许多相关的 Unit\n```bash\n# 查看当前系统的所有 Target\nsystemctl list-unit-files --type=target\n\n# 查看一个 Target 包含的所有 Unit\nsystemctl list-dependencies multi-user.target\n\n# 查看启动时的默认 Target\nsystemctl get-default\n\n# 设置启动时的默认 Target\nsudo systemctl set-default multi-user.target\n\n# 切换 Target 时，默认不关闭前一个 Target 启动的进程，\n# systemctl isolate 命令改变这种行为，\n# 关闭前一个 Target 里面所有不属于后一个 Target 的进程\nsudo systemctl isolate multi-user.target\n```\n\n日志\n```bash\n# 查看所有日志（默认情况下 ，只保存本次启动的日志）\nsudo journalctl\n\n# 查看内核日志（不显示应用日志）\nsudo journalctl -k\n\n# 查看系统本次启动的日志\nsudo journalctl -b\nsudo journalctl -b -0\n\n# 查看上一次启动的日志（需更改设置）\nsudo journalctl -b -1\n\n# 查看指定时间的日志\nsudo journalctl --since=\"2012-10-30 18:17:16\"\nsudo journalctl --since \"20 min ago\"\nsudo journalctl --since yesterday\nsudo journalctl --since \"2015-01-10\" --until \"2015-01-11 03:00\"\nsudo journalctl --since 09:00 --until \"1 hour ago\"\n\n# 显示尾部的最新10行日志\nsudo journalctl -n\n\n# 显示尾部指定行数的日志\nsudo journalctl -n 20\n\n# 实时滚动显示最新日志\nsudo journalctl -f\n\n# 查看指定服务的日志\nsudo journalctl /usr/lib/systemd/systemd\n\n# 查看指定进程的日志\nsudo journalctl _PID=1\n\n# 查看某个路径的脚本的日志\nsudo journalctl /usr/bin/bash\n\n# 查看指定用户的日志\nsudo journalctl _UID=33 --since today\n\n# 查看某个 Unit 的日志\nsudo journalctl -u nginx.service\nsudo journalctl -u nginx.service --since today\n\n# 实时滚动显示某个 Unit 的最新日志\nsudo journalctl -u nginx.service -f\n\n# 合并显示多个 Unit 的日志\njournalctl -u nginx.service -u php-fpm.service --since today\n\n# 查看指定优先级（及其以上级别）的日志，共有8级\n# 0: emerg\n# 1: alert\n# 2: crit\n# 3: err\n# 4: warning\n# 5: notice\n# 6: info\n# 7: debug\nsudo journalctl -p err -b\n\n# 日志默认分页输出，--no-pager 改为正常的标准输出\nsudo journalctl --no-pager\n\n# 以 JSON 格式（单行）输出\nsudo journalctl -b -u nginx.service -o json\n\n# 以 JSON 格式（多行）输出，可读性更好\nsudo journalctl -b -u nginx.serviceqq\n -o json-pretty\n\n# 显示日志占据的硬盘空间\nsudo journalctl --disk-usage\n\n# 指定日志文件占据的最大空间\nsudo journalctl --vacuum-size=1G\n\n# 指定日志文件保存多久\nsudo journalctl --vacuum-time=1years\n\n```\n\n## 其他系统管理命令\n\nsystemd-analyze命令用于查看启动耗时\n\n```bash\nsystemd-analyze # 查看启动耗时                                                                                      \nsystemd-analyze { blame # 查看每个服务的启动耗时\n|critical-chain # 显示瀑布状的启动过程流\n|critical-chain atd.service # 显示指定服务的启动流\n}\n```\n\nhostnamectl命令用于查看当前主机的信息\n```bash\n# 显示当前主机的信息\nhostnamectl\n# 设置主机名\nsudo hostnamectl set-hostname rhel7\n```\n\nlocalectl命令用于查看本地化设置\n```bash\n# 查看本地化设置\nlocalectl\n\n# 设置本地化参数\nlocalectl set-locale LANG=en_GB.utf8\nlocalectl set-keymap en_GB\n\n```\n\ntimedatectl命令用于查看当前时区设置\n```bash\n# 查看当前时区设置\ntimedatectl\n\n# 显示所有可用的时区\ntimedatectl list-timezones                                                                                   \n\n# 设置当前时区\ntimedatectl set-timezone America/New_York\ntimedatectl set-time YYYY-MM-DD\ntimedatectl set-time HH:MM:SS\n\n```\n\nloginctl命令用于查看当前登录的用户\n```bash\n# 列出当前session\nloginctl list-sessions\n# 列出当前登录用户\nloginctl list-users\n# 列出显示指定用户的信息\nloginctl show-user ruanyf\n```","source":"_posts/Linux-系统管理.md","raw":"---\ntitle: Linux 系统管理\ndate: 2023-05-22 16:47:12\ntags: Linux\n---\n\n# Linux 系统管理\n\n## PS 查看进程状态\n\n```bash\nps [options]\nps aux |grep <name>\nps ef\n\nps -u <username> \n```\n\nOptions:\n\n    -A,-e,a     Select all processes.  Identical to -e.\n    -a     Select all processes except both session leaders and processes not associated with a terminal.\n    -d     Select all processes except session leaders.\n    g      Really all, even session leaders.  \n    -N,--deselect     Select all processes except those that fulfill the specified conditions (negates the selection).  \n    T,t      Select all processes associated with this terminal.  \n    r      Restrict the selection to only running processes.\n    x      list all processes owned by you and others.\n\n结果：\n\n\n    USER: 进程拥有者\n    PID: pid\n    %CPU: 占用的 CPU 使用率\n    %MEM: 占用的内存使用率\n    VSZ: 占用的虚拟内存大小\n    RSS: 占用的内存大小\n    TTY: 终端的次要装置号码 (minor device number of tty)\n\n    STAT: 该进程的状态:\n        D: 无法中断的休眠状态 (通常 IO 的进程)\n        R: 正在执行中\n        S: 静止状态\n        T: 暂停执行\n        Z: 不存在但暂时无法消除\n        W: 没有足够的内存分页可分配\n        <: 高优先序的进程\n        N: 低优先序的进程\n        L: 有内存分页分配并锁在内存内 (实时系统或捱A I/O)\n    START: 进程开始时间\n    TIME: 执行的时间\n    COMMAND:所执行的指令\n\n## free 查看内存状态\n\n```bash\nfree\n```\n## sleep 命令延迟执行\n\n```bash\nsleep time; cmd\n```\n\n## kill 杀死进程\n\n```bash\nkill [-<signal>] pid\n\n\npgrep [options] pattern\npgrep -u root sshd # list the processes called sshd AND owned by root\n\npkill [options] pattern # send the specified signal to each process \n\npwait [options] pattern # wait for each process instead of listing them on stdout\n```\n## renice (alter priority of running processes)\n\n    -n, --priority priority\n    -g, --pgrp\n    -p, --pid\n    -u, --user\n\nchange the priority of the processes with PIDs 987 and 32, plus all processes owned by the users daemon and root:\n\n       renice +1 987 -u daemon root -p 32\n\n## top 显示进程实时状态\n\ntop  \nh 查看帮助  \nman top 查看man page  \n\n一些指标\n\n    %CPU  --  CPU Usage\n    %MEM  --  Memory Usage (RES)\n    CODE  --  Code Size (KiB)\n    COMMAND  --  Command Name or Command Line\n    DATA  --  Data + Stack Size (KiB)\n    Flags  --  Task Flags\n    NI  --  Nice Value\n    NU  --  Last known NUMA node\n    P  --  Last used CPU (SMP)\n    PGRP  --  Process Group Id\n    PR  --  Priority\n    RES  --  Resident Memory Size (KiB)\n    SHR  --  Shared Memory Size (KiB)\n    SID  --  Session Id\n    SUID  --  Saved User Id\n    SWAP  --  Swapped Size (KiB)\n    TGID  --  Thread Group Id\n    TIME  --  CPU Time\n    TIME+  --  CPU Time, hundredths\n    USED  --  Memory in Use (KiB)\n\n    S  --  Process Status\n        The status of the task which can be one of:\n            D = uninterruptible sleep\n            I = idle\n            R = running\n            S = sleeping\n            T = stopped by job control signal\n            t = stopped by debugger during trace\n            Z = zombie\n\n    us, user    : time running un-niced user processes\n    sy, system  : time running kernel processes\n    ni, nice    : time running niced user processes\n    id, idle    : time spent in the kernel idle handler\n    wa, IO-wait : time waiting for I/O completion\n    hi : time spent servicing hardware interrupts\n    si : time spent servicing software interrupts\n    st : time stolen from this vm by the hypervisor\n\nhtop\n\nbtop++\n\n## 前后台切换\n\n```\n            ctrl+z ->             bg ->\nForeground ----------- Stopped ---------- Background &\n                  <----- fg  -------                     \n```\n \njobs 查看挂起到后台的进程\n\n## systemctl 服务管理\n\n```bash\n# 修改服务状态\nsystemctl {status\n            |start\n            |stop\n            |restart\n            |reload\n            |enable\n            |disable\n            |kill\n            } <name[.service]>\n\n# 修改系统状态\nsystemctl { reboot # 重启系统\n|poweroff # 关闭系统，切断电源\n|halt # CPU停止工作\n|suspend # 暂停系统(待机)\n|hibernate # 让系统进入冬眠状态\n|hybrid-sleep # 让系统进入交互式休眠状态\n|rescue # 启动进入救援状态（单用户状态）\n}    \n```\n\n```bash\nsystemctl enable clamd@scan.service\n# 等同于\nln -s '/usr/lib/systemd/system/clamd@scan.service' '/etc/systemd/system/multi-user.target.wants/clamd@scan.service'\n```\n\nUnit(系统资源):\n\n    Service unit：系统服务\n    Target unit：多个 Unit 构成的一个组\n    Device Unit：硬件设备\n    Mount Unit：文件系统的挂载点\n    Automount Unit：自动挂载点\n    Path Unit：文件或路径\n    Scope Unit：不是由 Systemd 启动的外部进程\n    Slice Unit：进程组\n    Snapshot Unit：Systemd 快照，可以切回某个快照\n    Socket Unit：进程间通信的 socket\n    Swap Unit：swap 文件\n    Timer Unit：定时器\n\n```bash\n# 列出正在运行的 Unit\nsystemctl list-units\n\n# 列出所有Unit，包括没有找到配置文件的或者启动失败的\nsystemctl list-units --all\n\n# 列出所有没有运行的 Unit\nsystemctl list-units --all --state=inactive\n\n# 列出所有加载失败的 Unit\nsystemctl list-units --failed\n\n# 列出所有正在运行的、类型为 service 的 Unit\nsystemctl list-units --type=service\n\n\n# 显示系统状态\nsystemctl status\n\n# 显示单个 Unit 的状态\nsysystemctl status bluetooth.service\n\n# 显示远程主机的某个 Unit 的状态\nsystemctl -H root@rhel7.example.com status httpd.service\n\n# 显示某个 Unit 是否正在运行\nsystemctl is-active application.service\n\n# 显示某个 Unit 是否处于启动失败状态\nsystemctl is-failed application.service\n\n# 显示某个 Unit 服务是否建立了启动链接\nsystemctl is-enabled application.service\n```\n\n\n配置文件的格式\n\n    systemctl cat atd.service\n\n        [Unit]\n        Description=ATD daemon\n\n        [Service]\n        Type=forking\n        ExecStart=/usr/bin/atd\n\n        [Install]\n        WantedBy=multi-user.target\n\nTarget : 一个 Unit 组，包含许多相关的 Unit\n```bash\n# 查看当前系统的所有 Target\nsystemctl list-unit-files --type=target\n\n# 查看一个 Target 包含的所有 Unit\nsystemctl list-dependencies multi-user.target\n\n# 查看启动时的默认 Target\nsystemctl get-default\n\n# 设置启动时的默认 Target\nsudo systemctl set-default multi-user.target\n\n# 切换 Target 时，默认不关闭前一个 Target 启动的进程，\n# systemctl isolate 命令改变这种行为，\n# 关闭前一个 Target 里面所有不属于后一个 Target 的进程\nsudo systemctl isolate multi-user.target\n```\n\n日志\n```bash\n# 查看所有日志（默认情况下 ，只保存本次启动的日志）\nsudo journalctl\n\n# 查看内核日志（不显示应用日志）\nsudo journalctl -k\n\n# 查看系统本次启动的日志\nsudo journalctl -b\nsudo journalctl -b -0\n\n# 查看上一次启动的日志（需更改设置）\nsudo journalctl -b -1\n\n# 查看指定时间的日志\nsudo journalctl --since=\"2012-10-30 18:17:16\"\nsudo journalctl --since \"20 min ago\"\nsudo journalctl --since yesterday\nsudo journalctl --since \"2015-01-10\" --until \"2015-01-11 03:00\"\nsudo journalctl --since 09:00 --until \"1 hour ago\"\n\n# 显示尾部的最新10行日志\nsudo journalctl -n\n\n# 显示尾部指定行数的日志\nsudo journalctl -n 20\n\n# 实时滚动显示最新日志\nsudo journalctl -f\n\n# 查看指定服务的日志\nsudo journalctl /usr/lib/systemd/systemd\n\n# 查看指定进程的日志\nsudo journalctl _PID=1\n\n# 查看某个路径的脚本的日志\nsudo journalctl /usr/bin/bash\n\n# 查看指定用户的日志\nsudo journalctl _UID=33 --since today\n\n# 查看某个 Unit 的日志\nsudo journalctl -u nginx.service\nsudo journalctl -u nginx.service --since today\n\n# 实时滚动显示某个 Unit 的最新日志\nsudo journalctl -u nginx.service -f\n\n# 合并显示多个 Unit 的日志\njournalctl -u nginx.service -u php-fpm.service --since today\n\n# 查看指定优先级（及其以上级别）的日志，共有8级\n# 0: emerg\n# 1: alert\n# 2: crit\n# 3: err\n# 4: warning\n# 5: notice\n# 6: info\n# 7: debug\nsudo journalctl -p err -b\n\n# 日志默认分页输出，--no-pager 改为正常的标准输出\nsudo journalctl --no-pager\n\n# 以 JSON 格式（单行）输出\nsudo journalctl -b -u nginx.service -o json\n\n# 以 JSON 格式（多行）输出，可读性更好\nsudo journalctl -b -u nginx.serviceqq\n -o json-pretty\n\n# 显示日志占据的硬盘空间\nsudo journalctl --disk-usage\n\n# 指定日志文件占据的最大空间\nsudo journalctl --vacuum-size=1G\n\n# 指定日志文件保存多久\nsudo journalctl --vacuum-time=1years\n\n```\n\n## 其他系统管理命令\n\nsystemd-analyze命令用于查看启动耗时\n\n```bash\nsystemd-analyze # 查看启动耗时                                                                                      \nsystemd-analyze { blame # 查看每个服务的启动耗时\n|critical-chain # 显示瀑布状的启动过程流\n|critical-chain atd.service # 显示指定服务的启动流\n}\n```\n\nhostnamectl命令用于查看当前主机的信息\n```bash\n# 显示当前主机的信息\nhostnamectl\n# 设置主机名\nsudo hostnamectl set-hostname rhel7\n```\n\nlocalectl命令用于查看本地化设置\n```bash\n# 查看本地化设置\nlocalectl\n\n# 设置本地化参数\nlocalectl set-locale LANG=en_GB.utf8\nlocalectl set-keymap en_GB\n\n```\n\ntimedatectl命令用于查看当前时区设置\n```bash\n# 查看当前时区设置\ntimedatectl\n\n# 显示所有可用的时区\ntimedatectl list-timezones                                                                                   \n\n# 设置当前时区\ntimedatectl set-timezone America/New_York\ntimedatectl set-time YYYY-MM-DD\ntimedatectl set-time HH:MM:SS\n\n```\n\nloginctl命令用于查看当前登录的用户\n```bash\n# 列出当前session\nloginctl list-sessions\n# 列出当前登录用户\nloginctl list-users\n# 列出显示指定用户的信息\nloginctl show-user ruanyf\n```","slug":"Linux-系统管理","published":1,"updated":"2023-05-29T00:28:19.766Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5um0028lv9e65at2quh","content":"<h1 id=\"Linux-系统管理\"><a href=\"#Linux-系统管理\" class=\"headerlink\" title=\"Linux 系统管理\"></a>Linux 系统管理</h1><h2 id=\"PS-查看进程状态\"><a href=\"#PS-查看进程状态\" class=\"headerlink\" title=\"PS 查看进程状态\"></a>PS 查看进程状态</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps [options]</span><br><span class=\"line\">ps aux |grep &lt;name&gt;</span><br><span class=\"line\">ps ef</span><br><span class=\"line\"></span><br><span class=\"line\">ps -u &lt;username&gt; </span><br></pre></td></tr></table></figure>\n\n<p>Options:</p>\n<pre><code>-A,-e,a     Select all processes.  Identical to -e.\n-a     Select all processes except both session leaders and processes not associated with a terminal.\n-d     Select all processes except session leaders.\ng      Really all, even session leaders.  \n-N,--deselect     Select all processes except those that fulfill the specified conditions (negates the selection).  \nT,t      Select all processes associated with this terminal.  \nr      Restrict the selection to only running processes.\nx      list all processes owned by you and others.\n</code></pre>\n<p>结果：</p>\n<pre><code>USER: 进程拥有者\nPID: pid\n%CPU: 占用的 CPU 使用率\n%MEM: 占用的内存使用率\nVSZ: 占用的虚拟内存大小\nRSS: 占用的内存大小\nTTY: 终端的次要装置号码 (minor device number of tty)\n\nSTAT: 该进程的状态:\n    D: 无法中断的休眠状态 (通常 IO 的进程)\n    R: 正在执行中\n    S: 静止状态\n    T: 暂停执行\n    Z: 不存在但暂时无法消除\n    W: 没有足够的内存分页可分配\n    &lt;: 高优先序的进程\n    N: 低优先序的进程\n    L: 有内存分页分配并锁在内存内 (实时系统或捱A I/O)\nSTART: 进程开始时间\nTIME: 执行的时间\nCOMMAND:所执行的指令\n</code></pre>\n<h2 id=\"free-查看内存状态\"><a href=\"#free-查看内存状态\" class=\"headerlink\" title=\"free 查看内存状态\"></a>free 查看内存状态</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">free</span><br></pre></td></tr></table></figure>\n<h2 id=\"sleep-命令延迟执行\"><a href=\"#sleep-命令延迟执行\" class=\"headerlink\" title=\"sleep 命令延迟执行\"></a>sleep 命令延迟执行</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sleep</span> time; cmd</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"kill-杀死进程\"><a href=\"#kill-杀死进程\" class=\"headerlink\" title=\"kill 杀死进程\"></a>kill 杀死进程</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">kill</span> [-&lt;signal&gt;] pid</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">pgrep [options] pattern</span><br><span class=\"line\">pgrep -u root sshd <span class=\"comment\"># list the processes called sshd AND owned by root</span></span><br><span class=\"line\"></span><br><span class=\"line\">pkill [options] pattern <span class=\"comment\"># send the specified signal to each process </span></span><br><span class=\"line\"></span><br><span class=\"line\">pwait [options] pattern <span class=\"comment\"># wait for each process instead of listing them on stdout</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"renice-alter-priority-of-running-processes\"><a href=\"#renice-alter-priority-of-running-processes\" class=\"headerlink\" title=\"renice (alter priority of running processes)\"></a>renice (alter priority of running processes)</h2><pre><code>-n, --priority priority\n-g, --pgrp\n-p, --pid\n-u, --user\n</code></pre>\n<p>change the priority of the processes with PIDs 987 and 32, plus all processes owned by the users daemon and root:</p>\n<pre><code>   renice +1 987 -u daemon root -p 32\n</code></pre>\n<h2 id=\"top-显示进程实时状态\"><a href=\"#top-显示进程实时状态\" class=\"headerlink\" title=\"top 显示进程实时状态\"></a>top 显示进程实时状态</h2><p>top<br>h 查看帮助<br>man top 查看man page  </p>\n<p>一些指标</p>\n<pre><code>%CPU  --  CPU Usage\n%MEM  --  Memory Usage (RES)\nCODE  --  Code Size (KiB)\nCOMMAND  --  Command Name or Command Line\nDATA  --  Data + Stack Size (KiB)\nFlags  --  Task Flags\nNI  --  Nice Value\nNU  --  Last known NUMA node\nP  --  Last used CPU (SMP)\nPGRP  --  Process Group Id\nPR  --  Priority\nRES  --  Resident Memory Size (KiB)\nSHR  --  Shared Memory Size (KiB)\nSID  --  Session Id\nSUID  --  Saved User Id\nSWAP  --  Swapped Size (KiB)\nTGID  --  Thread Group Id\nTIME  --  CPU Time\nTIME+  --  CPU Time, hundredths\nUSED  --  Memory in Use (KiB)\n\nS  --  Process Status\n    The status of the task which can be one of:\n        D = uninterruptible sleep\n        I = idle\n        R = running\n        S = sleeping\n        T = stopped by job control signal\n        t = stopped by debugger during trace\n        Z = zombie\n\nus, user    : time running un-niced user processes\nsy, system  : time running kernel processes\nni, nice    : time running niced user processes\nid, idle    : time spent in the kernel idle handler\nwa, IO-wait : time waiting for I/O completion\nhi : time spent servicing hardware interrupts\nsi : time spent servicing software interrupts\nst : time stolen from this vm by the hypervisor\n</code></pre>\n<p>htop</p>\n<p>btop++</p>\n<h2 id=\"前后台切换\"><a href=\"#前后台切换\" class=\"headerlink\" title=\"前后台切换\"></a>前后台切换</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">            ctrl+z -&gt;             bg -&gt;</span><br><span class=\"line\">Foreground ----------- Stopped ---------- Background &amp;</span><br><span class=\"line\">                  &lt;----- fg  -------                     </span><br></pre></td></tr></table></figure>\n<p>jobs 查看挂起到后台的进程</p>\n<h2 id=\"systemctl-服务管理\"><a href=\"#systemctl-服务管理\" class=\"headerlink\" title=\"systemctl 服务管理\"></a>systemctl 服务管理</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 修改服务状态</span></span><br><span class=\"line\">systemctl &#123;status</span><br><span class=\"line\">            |start</span><br><span class=\"line\">            |stop</span><br><span class=\"line\">            |restart</span><br><span class=\"line\">            |reload</span><br><span class=\"line\">            |<span class=\"built_in\">enable</span></span><br><span class=\"line\">            |<span class=\"built_in\">disable</span></span><br><span class=\"line\">            |<span class=\"built_in\">kill</span></span><br><span class=\"line\">            &#125; &lt;name[.service]&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改系统状态</span></span><br><span class=\"line\">systemctl &#123; reboot <span class=\"comment\"># 重启系统</span></span><br><span class=\"line\">|poweroff <span class=\"comment\"># 关闭系统，切断电源</span></span><br><span class=\"line\">|halt <span class=\"comment\"># CPU停止工作</span></span><br><span class=\"line\">|<span class=\"built_in\">suspend</span> <span class=\"comment\"># 暂停系统(待机)</span></span><br><span class=\"line\">|hibernate <span class=\"comment\"># 让系统进入冬眠状态</span></span><br><span class=\"line\">|hybrid-sleep <span class=\"comment\"># 让系统进入交互式休眠状态</span></span><br><span class=\"line\">|rescue <span class=\"comment\"># 启动进入救援状态（单用户状态）</span></span><br><span class=\"line\">&#125;    </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">enable</span> clamd@scan.service</span><br><span class=\"line\"><span class=\"comment\"># 等同于</span></span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s <span class=\"string\">&#x27;/usr/lib/systemd/system/clamd@scan.service&#x27;</span> <span class=\"string\">&#x27;/etc/systemd/system/multi-user.target.wants/clamd@scan.service&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>Unit(系统资源):</p>\n<pre><code>Service unit：系统服务\nTarget unit：多个 Unit 构成的一个组\nDevice Unit：硬件设备\nMount Unit：文件系统的挂载点\nAutomount Unit：自动挂载点\nPath Unit：文件或路径\nScope Unit：不是由 Systemd 启动的外部进程\nSlice Unit：进程组\nSnapshot Unit：Systemd 快照，可以切回某个快照\nSocket Unit：进程间通信的 socket\nSwap Unit：swap 文件\nTimer Unit：定时器\n</code></pre>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出正在运行的 Unit</span></span><br><span class=\"line\">systemctl list-units</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出所有Unit，包括没有找到配置文件的或者启动失败的</span></span><br><span class=\"line\">systemctl list-units --all</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出所有没有运行的 Unit</span></span><br><span class=\"line\">systemctl list-units --all --state=inactive</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出所有加载失败的 Unit</span></span><br><span class=\"line\">systemctl list-units --failed</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出所有正在运行的、类型为 service 的 Unit</span></span><br><span class=\"line\">systemctl list-units --<span class=\"built_in\">type</span>=service</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示系统状态</span></span><br><span class=\"line\">systemctl status</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示单个 Unit 的状态</span></span><br><span class=\"line\">sysystemctl status bluetooth.service</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示远程主机的某个 Unit 的状态</span></span><br><span class=\"line\">systemctl -H root@rhel7.example.com status httpd.service</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某个 Unit 是否正在运行</span></span><br><span class=\"line\">systemctl is-active application.service</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某个 Unit 是否处于启动失败状态</span></span><br><span class=\"line\">systemctl is-failed application.service</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某个 Unit 服务是否建立了启动链接</span></span><br><span class=\"line\">systemctl is-enabled application.service</span><br></pre></td></tr></table></figure>\n\n\n<p>配置文件的格式</p>\n<pre><code>systemctl cat atd.service\n\n    [Unit]\n    Description=ATD daemon\n\n    [Service]\n    Type=forking\n    ExecStart=/usr/bin/atd\n\n    [Install]\n    WantedBy=multi-user.target\n</code></pre>\n<p>Target : 一个 Unit 组，包含许多相关的 Unit</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看当前系统的所有 Target</span></span><br><span class=\"line\">systemctl list-unit-files --<span class=\"built_in\">type</span>=target</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看一个 Target 包含的所有 Unit</span></span><br><span class=\"line\">systemctl list-dependencies multi-user.target</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看启动时的默认 Target</span></span><br><span class=\"line\">systemctl get-default</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置启动时的默认 Target</span></span><br><span class=\"line\">sudo systemctl set-default multi-user.target</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换 Target 时，默认不关闭前一个 Target 启动的进程，</span></span><br><span class=\"line\"><span class=\"comment\"># systemctl isolate 命令改变这种行为，</span></span><br><span class=\"line\"><span class=\"comment\"># 关闭前一个 Target 里面所有不属于后一个 Target 的进程</span></span><br><span class=\"line\">sudo systemctl isolate multi-user.target</span><br></pre></td></tr></table></figure>\n\n<p>日志</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看所有日志（默认情况下 ，只保存本次启动的日志）</span></span><br><span class=\"line\">sudo journalctl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看内核日志（不显示应用日志）</span></span><br><span class=\"line\">sudo journalctl -k</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看系统本次启动的日志</span></span><br><span class=\"line\">sudo journalctl -b</span><br><span class=\"line\">sudo journalctl -b -0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看上一次启动的日志（需更改设置）</span></span><br><span class=\"line\">sudo journalctl -b -1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看指定时间的日志</span></span><br><span class=\"line\">sudo journalctl --since=<span class=\"string\">&quot;2012-10-30 18:17:16&quot;</span></span><br><span class=\"line\">sudo journalctl --since <span class=\"string\">&quot;20 min ago&quot;</span></span><br><span class=\"line\">sudo journalctl --since yesterday</span><br><span class=\"line\">sudo journalctl --since <span class=\"string\">&quot;2015-01-10&quot;</span> --<span class=\"keyword\">until</span> <span class=\"string\">&quot;2015-01-11 03:00&quot;</span></span><br><span class=\"line\">sudo journalctl --since 09:00 --<span class=\"keyword\">until</span> <span class=\"string\">&quot;1 hour ago&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示尾部的最新10行日志</span></span><br><span class=\"line\">sudo journalctl -n</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示尾部指定行数的日志</span></span><br><span class=\"line\">sudo journalctl -n 20</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 实时滚动显示最新日志</span></span><br><span class=\"line\">sudo journalctl -f</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看指定服务的日志</span></span><br><span class=\"line\">sudo journalctl /usr/lib/systemd/systemd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看指定进程的日志</span></span><br><span class=\"line\">sudo journalctl _PID=1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看某个路径的脚本的日志</span></span><br><span class=\"line\">sudo journalctl /usr/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看指定用户的日志</span></span><br><span class=\"line\">sudo journalctl _UID=33 --since today</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看某个 Unit 的日志</span></span><br><span class=\"line\">sudo journalctl -u nginx.service</span><br><span class=\"line\">sudo journalctl -u nginx.service --since today</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 实时滚动显示某个 Unit 的最新日志</span></span><br><span class=\"line\">sudo journalctl -u nginx.service -f</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 合并显示多个 Unit 的日志</span></span><br><span class=\"line\">journalctl -u nginx.service -u php-fpm.service --since today</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看指定优先级（及其以上级别）的日志，共有8级</span></span><br><span class=\"line\"><span class=\"comment\"># 0: emerg</span></span><br><span class=\"line\"><span class=\"comment\"># 1: alert</span></span><br><span class=\"line\"><span class=\"comment\"># 2: crit</span></span><br><span class=\"line\"><span class=\"comment\"># 3: err</span></span><br><span class=\"line\"><span class=\"comment\"># 4: warning</span></span><br><span class=\"line\"><span class=\"comment\"># 5: notice</span></span><br><span class=\"line\"><span class=\"comment\"># 6: info</span></span><br><span class=\"line\"><span class=\"comment\"># 7: debug</span></span><br><span class=\"line\">sudo journalctl -p err -b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 日志默认分页输出，--no-pager 改为正常的标准输出</span></span><br><span class=\"line\">sudo journalctl --no-pager</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 以 JSON 格式（单行）输出</span></span><br><span class=\"line\">sudo journalctl -b -u nginx.service -o json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 以 JSON 格式（多行）输出，可读性更好</span></span><br><span class=\"line\">sudo journalctl -b -u nginx.serviceqq</span><br><span class=\"line\"> -o json-pretty</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示日志占据的硬盘空间</span></span><br><span class=\"line\">sudo journalctl --disk-usage</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定日志文件占据的最大空间</span></span><br><span class=\"line\">sudo journalctl --vacuum-size=1G</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定日志文件保存多久</span></span><br><span class=\"line\">sudo journalctl --vacuum-time=1years</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"其他系统管理命令\"><a href=\"#其他系统管理命令\" class=\"headerlink\" title=\"其他系统管理命令\"></a>其他系统管理命令</h2><p>systemd-analyze命令用于查看启动耗时</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemd-analyze <span class=\"comment\"># 查看启动耗时                                                                                      </span></span><br><span class=\"line\">systemd-analyze &#123; blame <span class=\"comment\"># 查看每个服务的启动耗时</span></span><br><span class=\"line\">|critical-chain <span class=\"comment\"># 显示瀑布状的启动过程流</span></span><br><span class=\"line\">|critical-chain atd.service <span class=\"comment\"># 显示指定服务的启动流</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>hostnamectl命令用于查看当前主机的信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示当前主机的信息</span></span><br><span class=\"line\">hostnamectl</span><br><span class=\"line\"><span class=\"comment\"># 设置主机名</span></span><br><span class=\"line\">sudo hostnamectl set-hostname rhel7</span><br></pre></td></tr></table></figure>\n\n<p>localectl命令用于查看本地化设置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看本地化设置</span></span><br><span class=\"line\">localectl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置本地化参数</span></span><br><span class=\"line\">localectl set-locale LANG=en_GB.utf8</span><br><span class=\"line\">localectl set-keymap en_GB</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>timedatectl命令用于查看当前时区设置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看当前时区设置</span></span><br><span class=\"line\">timedatectl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示所有可用的时区</span></span><br><span class=\"line\">timedatectl list-timezones                                                                                   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置当前时区</span></span><br><span class=\"line\">timedatectl set-timezone America/New_York</span><br><span class=\"line\">timedatectl set-time YYYY-MM-DD</span><br><span class=\"line\">timedatectl set-time HH:MM:SS</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>loginctl命令用于查看当前登录的用户</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出当前session</span></span><br><span class=\"line\">loginctl list-sessions</span><br><span class=\"line\"><span class=\"comment\"># 列出当前登录用户</span></span><br><span class=\"line\">loginctl list-users</span><br><span class=\"line\"><span class=\"comment\"># 列出显示指定用户的信息</span></span><br><span class=\"line\">loginctl show-user ruanyf</span><br></pre></td></tr></table></figure>","site":{"data":{}},"cover":false,"excerpt":"","more":"<h1 id=\"Linux-系统管理\"><a href=\"#Linux-系统管理\" class=\"headerlink\" title=\"Linux 系统管理\"></a>Linux 系统管理</h1><h2 id=\"PS-查看进程状态\"><a href=\"#PS-查看进程状态\" class=\"headerlink\" title=\"PS 查看进程状态\"></a>PS 查看进程状态</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps [options]</span><br><span class=\"line\">ps aux |grep &lt;name&gt;</span><br><span class=\"line\">ps ef</span><br><span class=\"line\"></span><br><span class=\"line\">ps -u &lt;username&gt; </span><br></pre></td></tr></table></figure>\n\n<p>Options:</p>\n<pre><code>-A,-e,a     Select all processes.  Identical to -e.\n-a     Select all processes except both session leaders and processes not associated with a terminal.\n-d     Select all processes except session leaders.\ng      Really all, even session leaders.  \n-N,--deselect     Select all processes except those that fulfill the specified conditions (negates the selection).  \nT,t      Select all processes associated with this terminal.  \nr      Restrict the selection to only running processes.\nx      list all processes owned by you and others.\n</code></pre>\n<p>结果：</p>\n<pre><code>USER: 进程拥有者\nPID: pid\n%CPU: 占用的 CPU 使用率\n%MEM: 占用的内存使用率\nVSZ: 占用的虚拟内存大小\nRSS: 占用的内存大小\nTTY: 终端的次要装置号码 (minor device number of tty)\n\nSTAT: 该进程的状态:\n    D: 无法中断的休眠状态 (通常 IO 的进程)\n    R: 正在执行中\n    S: 静止状态\n    T: 暂停执行\n    Z: 不存在但暂时无法消除\n    W: 没有足够的内存分页可分配\n    &lt;: 高优先序的进程\n    N: 低优先序的进程\n    L: 有内存分页分配并锁在内存内 (实时系统或捱A I/O)\nSTART: 进程开始时间\nTIME: 执行的时间\nCOMMAND:所执行的指令\n</code></pre>\n<h2 id=\"free-查看内存状态\"><a href=\"#free-查看内存状态\" class=\"headerlink\" title=\"free 查看内存状态\"></a>free 查看内存状态</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">free</span><br></pre></td></tr></table></figure>\n<h2 id=\"sleep-命令延迟执行\"><a href=\"#sleep-命令延迟执行\" class=\"headerlink\" title=\"sleep 命令延迟执行\"></a>sleep 命令延迟执行</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sleep</span> time; cmd</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"kill-杀死进程\"><a href=\"#kill-杀死进程\" class=\"headerlink\" title=\"kill 杀死进程\"></a>kill 杀死进程</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">kill</span> [-&lt;signal&gt;] pid</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">pgrep [options] pattern</span><br><span class=\"line\">pgrep -u root sshd <span class=\"comment\"># list the processes called sshd AND owned by root</span></span><br><span class=\"line\"></span><br><span class=\"line\">pkill [options] pattern <span class=\"comment\"># send the specified signal to each process </span></span><br><span class=\"line\"></span><br><span class=\"line\">pwait [options] pattern <span class=\"comment\"># wait for each process instead of listing them on stdout</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"renice-alter-priority-of-running-processes\"><a href=\"#renice-alter-priority-of-running-processes\" class=\"headerlink\" title=\"renice (alter priority of running processes)\"></a>renice (alter priority of running processes)</h2><pre><code>-n, --priority priority\n-g, --pgrp\n-p, --pid\n-u, --user\n</code></pre>\n<p>change the priority of the processes with PIDs 987 and 32, plus all processes owned by the users daemon and root:</p>\n<pre><code>   renice +1 987 -u daemon root -p 32\n</code></pre>\n<h2 id=\"top-显示进程实时状态\"><a href=\"#top-显示进程实时状态\" class=\"headerlink\" title=\"top 显示进程实时状态\"></a>top 显示进程实时状态</h2><p>top<br>h 查看帮助<br>man top 查看man page  </p>\n<p>一些指标</p>\n<pre><code>%CPU  --  CPU Usage\n%MEM  --  Memory Usage (RES)\nCODE  --  Code Size (KiB)\nCOMMAND  --  Command Name or Command Line\nDATA  --  Data + Stack Size (KiB)\nFlags  --  Task Flags\nNI  --  Nice Value\nNU  --  Last known NUMA node\nP  --  Last used CPU (SMP)\nPGRP  --  Process Group Id\nPR  --  Priority\nRES  --  Resident Memory Size (KiB)\nSHR  --  Shared Memory Size (KiB)\nSID  --  Session Id\nSUID  --  Saved User Id\nSWAP  --  Swapped Size (KiB)\nTGID  --  Thread Group Id\nTIME  --  CPU Time\nTIME+  --  CPU Time, hundredths\nUSED  --  Memory in Use (KiB)\n\nS  --  Process Status\n    The status of the task which can be one of:\n        D = uninterruptible sleep\n        I = idle\n        R = running\n        S = sleeping\n        T = stopped by job control signal\n        t = stopped by debugger during trace\n        Z = zombie\n\nus, user    : time running un-niced user processes\nsy, system  : time running kernel processes\nni, nice    : time running niced user processes\nid, idle    : time spent in the kernel idle handler\nwa, IO-wait : time waiting for I/O completion\nhi : time spent servicing hardware interrupts\nsi : time spent servicing software interrupts\nst : time stolen from this vm by the hypervisor\n</code></pre>\n<p>htop</p>\n<p>btop++</p>\n<h2 id=\"前后台切换\"><a href=\"#前后台切换\" class=\"headerlink\" title=\"前后台切换\"></a>前后台切换</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">            ctrl+z -&gt;             bg -&gt;</span><br><span class=\"line\">Foreground ----------- Stopped ---------- Background &amp;</span><br><span class=\"line\">                  &lt;----- fg  -------                     </span><br></pre></td></tr></table></figure>\n<p>jobs 查看挂起到后台的进程</p>\n<h2 id=\"systemctl-服务管理\"><a href=\"#systemctl-服务管理\" class=\"headerlink\" title=\"systemctl 服务管理\"></a>systemctl 服务管理</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 修改服务状态</span></span><br><span class=\"line\">systemctl &#123;status</span><br><span class=\"line\">            |start</span><br><span class=\"line\">            |stop</span><br><span class=\"line\">            |restart</span><br><span class=\"line\">            |reload</span><br><span class=\"line\">            |<span class=\"built_in\">enable</span></span><br><span class=\"line\">            |<span class=\"built_in\">disable</span></span><br><span class=\"line\">            |<span class=\"built_in\">kill</span></span><br><span class=\"line\">            &#125; &lt;name[.service]&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改系统状态</span></span><br><span class=\"line\">systemctl &#123; reboot <span class=\"comment\"># 重启系统</span></span><br><span class=\"line\">|poweroff <span class=\"comment\"># 关闭系统，切断电源</span></span><br><span class=\"line\">|halt <span class=\"comment\"># CPU停止工作</span></span><br><span class=\"line\">|<span class=\"built_in\">suspend</span> <span class=\"comment\"># 暂停系统(待机)</span></span><br><span class=\"line\">|hibernate <span class=\"comment\"># 让系统进入冬眠状态</span></span><br><span class=\"line\">|hybrid-sleep <span class=\"comment\"># 让系统进入交互式休眠状态</span></span><br><span class=\"line\">|rescue <span class=\"comment\"># 启动进入救援状态（单用户状态）</span></span><br><span class=\"line\">&#125;    </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">enable</span> clamd@scan.service</span><br><span class=\"line\"><span class=\"comment\"># 等同于</span></span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s <span class=\"string\">&#x27;/usr/lib/systemd/system/clamd@scan.service&#x27;</span> <span class=\"string\">&#x27;/etc/systemd/system/multi-user.target.wants/clamd@scan.service&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>Unit(系统资源):</p>\n<pre><code>Service unit：系统服务\nTarget unit：多个 Unit 构成的一个组\nDevice Unit：硬件设备\nMount Unit：文件系统的挂载点\nAutomount Unit：自动挂载点\nPath Unit：文件或路径\nScope Unit：不是由 Systemd 启动的外部进程\nSlice Unit：进程组\nSnapshot Unit：Systemd 快照，可以切回某个快照\nSocket Unit：进程间通信的 socket\nSwap Unit：swap 文件\nTimer Unit：定时器\n</code></pre>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出正在运行的 Unit</span></span><br><span class=\"line\">systemctl list-units</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出所有Unit，包括没有找到配置文件的或者启动失败的</span></span><br><span class=\"line\">systemctl list-units --all</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出所有没有运行的 Unit</span></span><br><span class=\"line\">systemctl list-units --all --state=inactive</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出所有加载失败的 Unit</span></span><br><span class=\"line\">systemctl list-units --failed</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出所有正在运行的、类型为 service 的 Unit</span></span><br><span class=\"line\">systemctl list-units --<span class=\"built_in\">type</span>=service</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示系统状态</span></span><br><span class=\"line\">systemctl status</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示单个 Unit 的状态</span></span><br><span class=\"line\">sysystemctl status bluetooth.service</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示远程主机的某个 Unit 的状态</span></span><br><span class=\"line\">systemctl -H root@rhel7.example.com status httpd.service</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某个 Unit 是否正在运行</span></span><br><span class=\"line\">systemctl is-active application.service</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某个 Unit 是否处于启动失败状态</span></span><br><span class=\"line\">systemctl is-failed application.service</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某个 Unit 服务是否建立了启动链接</span></span><br><span class=\"line\">systemctl is-enabled application.service</span><br></pre></td></tr></table></figure>\n\n\n<p>配置文件的格式</p>\n<pre><code>systemctl cat atd.service\n\n    [Unit]\n    Description=ATD daemon\n\n    [Service]\n    Type=forking\n    ExecStart=/usr/bin/atd\n\n    [Install]\n    WantedBy=multi-user.target\n</code></pre>\n<p>Target : 一个 Unit 组，包含许多相关的 Unit</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看当前系统的所有 Target</span></span><br><span class=\"line\">systemctl list-unit-files --<span class=\"built_in\">type</span>=target</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看一个 Target 包含的所有 Unit</span></span><br><span class=\"line\">systemctl list-dependencies multi-user.target</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看启动时的默认 Target</span></span><br><span class=\"line\">systemctl get-default</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置启动时的默认 Target</span></span><br><span class=\"line\">sudo systemctl set-default multi-user.target</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换 Target 时，默认不关闭前一个 Target 启动的进程，</span></span><br><span class=\"line\"><span class=\"comment\"># systemctl isolate 命令改变这种行为，</span></span><br><span class=\"line\"><span class=\"comment\"># 关闭前一个 Target 里面所有不属于后一个 Target 的进程</span></span><br><span class=\"line\">sudo systemctl isolate multi-user.target</span><br></pre></td></tr></table></figure>\n\n<p>日志</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看所有日志（默认情况下 ，只保存本次启动的日志）</span></span><br><span class=\"line\">sudo journalctl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看内核日志（不显示应用日志）</span></span><br><span class=\"line\">sudo journalctl -k</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看系统本次启动的日志</span></span><br><span class=\"line\">sudo journalctl -b</span><br><span class=\"line\">sudo journalctl -b -0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看上一次启动的日志（需更改设置）</span></span><br><span class=\"line\">sudo journalctl -b -1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看指定时间的日志</span></span><br><span class=\"line\">sudo journalctl --since=<span class=\"string\">&quot;2012-10-30 18:17:16&quot;</span></span><br><span class=\"line\">sudo journalctl --since <span class=\"string\">&quot;20 min ago&quot;</span></span><br><span class=\"line\">sudo journalctl --since yesterday</span><br><span class=\"line\">sudo journalctl --since <span class=\"string\">&quot;2015-01-10&quot;</span> --<span class=\"keyword\">until</span> <span class=\"string\">&quot;2015-01-11 03:00&quot;</span></span><br><span class=\"line\">sudo journalctl --since 09:00 --<span class=\"keyword\">until</span> <span class=\"string\">&quot;1 hour ago&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示尾部的最新10行日志</span></span><br><span class=\"line\">sudo journalctl -n</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示尾部指定行数的日志</span></span><br><span class=\"line\">sudo journalctl -n 20</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 实时滚动显示最新日志</span></span><br><span class=\"line\">sudo journalctl -f</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看指定服务的日志</span></span><br><span class=\"line\">sudo journalctl /usr/lib/systemd/systemd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看指定进程的日志</span></span><br><span class=\"line\">sudo journalctl _PID=1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看某个路径的脚本的日志</span></span><br><span class=\"line\">sudo journalctl /usr/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看指定用户的日志</span></span><br><span class=\"line\">sudo journalctl _UID=33 --since today</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看某个 Unit 的日志</span></span><br><span class=\"line\">sudo journalctl -u nginx.service</span><br><span class=\"line\">sudo journalctl -u nginx.service --since today</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 实时滚动显示某个 Unit 的最新日志</span></span><br><span class=\"line\">sudo journalctl -u nginx.service -f</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 合并显示多个 Unit 的日志</span></span><br><span class=\"line\">journalctl -u nginx.service -u php-fpm.service --since today</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看指定优先级（及其以上级别）的日志，共有8级</span></span><br><span class=\"line\"><span class=\"comment\"># 0: emerg</span></span><br><span class=\"line\"><span class=\"comment\"># 1: alert</span></span><br><span class=\"line\"><span class=\"comment\"># 2: crit</span></span><br><span class=\"line\"><span class=\"comment\"># 3: err</span></span><br><span class=\"line\"><span class=\"comment\"># 4: warning</span></span><br><span class=\"line\"><span class=\"comment\"># 5: notice</span></span><br><span class=\"line\"><span class=\"comment\"># 6: info</span></span><br><span class=\"line\"><span class=\"comment\"># 7: debug</span></span><br><span class=\"line\">sudo journalctl -p err -b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 日志默认分页输出，--no-pager 改为正常的标准输出</span></span><br><span class=\"line\">sudo journalctl --no-pager</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 以 JSON 格式（单行）输出</span></span><br><span class=\"line\">sudo journalctl -b -u nginx.service -o json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 以 JSON 格式（多行）输出，可读性更好</span></span><br><span class=\"line\">sudo journalctl -b -u nginx.serviceqq</span><br><span class=\"line\"> -o json-pretty</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示日志占据的硬盘空间</span></span><br><span class=\"line\">sudo journalctl --disk-usage</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定日志文件占据的最大空间</span></span><br><span class=\"line\">sudo journalctl --vacuum-size=1G</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定日志文件保存多久</span></span><br><span class=\"line\">sudo journalctl --vacuum-time=1years</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"其他系统管理命令\"><a href=\"#其他系统管理命令\" class=\"headerlink\" title=\"其他系统管理命令\"></a>其他系统管理命令</h2><p>systemd-analyze命令用于查看启动耗时</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemd-analyze <span class=\"comment\"># 查看启动耗时                                                                                      </span></span><br><span class=\"line\">systemd-analyze &#123; blame <span class=\"comment\"># 查看每个服务的启动耗时</span></span><br><span class=\"line\">|critical-chain <span class=\"comment\"># 显示瀑布状的启动过程流</span></span><br><span class=\"line\">|critical-chain atd.service <span class=\"comment\"># 显示指定服务的启动流</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>hostnamectl命令用于查看当前主机的信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示当前主机的信息</span></span><br><span class=\"line\">hostnamectl</span><br><span class=\"line\"><span class=\"comment\"># 设置主机名</span></span><br><span class=\"line\">sudo hostnamectl set-hostname rhel7</span><br></pre></td></tr></table></figure>\n\n<p>localectl命令用于查看本地化设置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看本地化设置</span></span><br><span class=\"line\">localectl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置本地化参数</span></span><br><span class=\"line\">localectl set-locale LANG=en_GB.utf8</span><br><span class=\"line\">localectl set-keymap en_GB</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>timedatectl命令用于查看当前时区设置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看当前时区设置</span></span><br><span class=\"line\">timedatectl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示所有可用的时区</span></span><br><span class=\"line\">timedatectl list-timezones                                                                                   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置当前时区</span></span><br><span class=\"line\">timedatectl set-timezone America/New_York</span><br><span class=\"line\">timedatectl set-time YYYY-MM-DD</span><br><span class=\"line\">timedatectl set-time HH:MM:SS</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>loginctl命令用于查看当前登录的用户</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出当前session</span></span><br><span class=\"line\">loginctl list-sessions</span><br><span class=\"line\"><span class=\"comment\"># 列出当前登录用户</span></span><br><span class=\"line\">loginctl list-users</span><br><span class=\"line\"><span class=\"comment\"># 列出显示指定用户的信息</span></span><br><span class=\"line\">loginctl show-user ruanyf</span><br></pre></td></tr></table></figure>"},{"title":"Linux 计划任务","date":"2022-09-24T08:44:33.000Z","_content":"\n# 计划任务\n\n定时任务: cron\n\n一次性计划任务: at\n\n<!-- more -->\n## Cron \n\n### 安装、启动\n\nUbuntu\n\n```bash\n# 安装\napt-get install cron\n\n# 启动\nservice cron start\n\n# 重启\nservice cron restart\n\n# 停止\nservice cron stop\n\n# 检查状态\nservice cron status\n\n# 查询cron可用的命令\nservice cron\n\n# 检查Cronta工具是否安装\ncrontab -l\n```\n\nArchlinux\n\n```bash\n# 安装\nsudo pacman -S cronie\n\n# 启动\nsystemctl start cronie.service\n\n# 重启\nsystemctl restart cronie.service\n\n# 停止\nsystemctl stop cronie.service\n\n# 检查状态\nsystemctl status cronie.service\n```\n\n### 2. 配置、使用\n\n都是一样的\n\nUsage:\n\n    crontab [options] file\n    crontab [options]\n    crontab -n [hostname]\n\nOptions:\n\n    -u <user>  define user\n    -e         edit user's crontab\n    -l         list user's crontab\n    -r         delete user's crontab\n    -i         prompt before deleting\n    -n <host>  set host in cluster to run users' crontabs\n    -c         get host in cluster to run users' crontabs\n    -T <file>  test a crontab file syntax\n    -V         print version and exit\n    -x <mask>  enable debugging\n\n\n| field        | allowed values                       |\n| ------------ | ------------------------------------ |\n| minute       | 0-59                                 |\n| hour         | 0-23                                 |\n| day of month | 1-31                                 |\n| month        | 1-12 (or names, see below)           |\n| day of week  | 0-7 (0 or 7 is Sunday, or use names) |\n\n    *    *    *    *    *\n    -    -    -    -    -\n    |    |    |    |    |\n    |    |    |    |    +----- 星期中星期几 (0 - 6) (星期天 为0)\n    |    |    |    +---------- 月份 (1 - 12) \n    |    |    +--------------- 一个月中的第几天 (1 - 31)\n    |    +-------------------- 小时 (0 - 23)\n    +------------------------- 分钟 (0 - 59)\n\n    *：表示取值范围中的每一个数字\n    -：做连续区间表达式的，要想表示1~7，则可以写成：1-7\n    /：表示每多少个，例如：想每10分钟一次，则可以在分的位置写：*/10\n    ,：表示多个取值，比如想在1点，2点6点执行，则可以在时的位置写：1,2,6\n\n| nicknames | time and date fields               |\n| --------- | ---------------------------------- |\n| @reboot   | Run once after reboot.             |\n| @yearly   | Run once a year, ie.  \"0 0 1 1 *\". |\n| @annually | Run once a year, ie.  \"0 0 1 1 *\". |\n| @monthly  | Run once a month, ie. \"0 0 1 * *\". |\n| @weekly   | Run once a week, ie.  \"0 0 * * 0\". |\n| @daily    | Run once a day, ie.   \"0 0 * * *\". |\n| @hourly   | Run once an hour, ie. \"0 * * * *\". |\n\n编辑\n```bash\ncrontab -e\n```\n\n文件\n\n* /etc/crontab      main system crontab file.   \n* /var/spool/cron/  a directory for storing crontabs defined by users. \n* /etc/cron.d/      a directory for storing system crontabs.\n* /etc/cron.allow 允许使用的用户 \n* /etc/cron.deny  拒绝使用的用户\n  \n\n## at 在将来某个时刻执行\n\n安装\n\n    sudo pacman -S at  \n    systemctl start atd.service\n\n创建at作业\n\n    at <time><increment>\n    <command>\n    ctrl+d\n\ntime\n\n    midnight  Indicates the time 12:00 am (00:00).\n    noon      Indicates the time 12:00 pm.\n    now       Indicates  the current day and time. \n    today     Indicates the current day.\n    tomorrow  Indicates the day following the current day.\nincrement    \n\n    + N minutes, hours, days, weeks, months, years\n\neg.\n\n    at now +1 minute\n    date >> a.txt\n    ctrl+d\n\n![](2023-05-22-17-07-46.png)\n\n一分钟后\n\n![](2023-05-22-17-08-24.png)\n\n显示作业\n\n    at -l\n![](2023-05-22-17-11-14.png)\n\n删除\n\n    at -d <id>\n![](2023-05-22-17-11-34.png)","source":"_posts/Linux-计划任务.md","raw":"---\ntitle: Linux 计划任务\ndate: 2022-09-24 16:44:33\ntags: Linux\n---\n\n# 计划任务\n\n定时任务: cron\n\n一次性计划任务: at\n\n<!-- more -->\n## Cron \n\n### 安装、启动\n\nUbuntu\n\n```bash\n# 安装\napt-get install cron\n\n# 启动\nservice cron start\n\n# 重启\nservice cron restart\n\n# 停止\nservice cron stop\n\n# 检查状态\nservice cron status\n\n# 查询cron可用的命令\nservice cron\n\n# 检查Cronta工具是否安装\ncrontab -l\n```\n\nArchlinux\n\n```bash\n# 安装\nsudo pacman -S cronie\n\n# 启动\nsystemctl start cronie.service\n\n# 重启\nsystemctl restart cronie.service\n\n# 停止\nsystemctl stop cronie.service\n\n# 检查状态\nsystemctl status cronie.service\n```\n\n### 2. 配置、使用\n\n都是一样的\n\nUsage:\n\n    crontab [options] file\n    crontab [options]\n    crontab -n [hostname]\n\nOptions:\n\n    -u <user>  define user\n    -e         edit user's crontab\n    -l         list user's crontab\n    -r         delete user's crontab\n    -i         prompt before deleting\n    -n <host>  set host in cluster to run users' crontabs\n    -c         get host in cluster to run users' crontabs\n    -T <file>  test a crontab file syntax\n    -V         print version and exit\n    -x <mask>  enable debugging\n\n\n| field        | allowed values                       |\n| ------------ | ------------------------------------ |\n| minute       | 0-59                                 |\n| hour         | 0-23                                 |\n| day of month | 1-31                                 |\n| month        | 1-12 (or names, see below)           |\n| day of week  | 0-7 (0 or 7 is Sunday, or use names) |\n\n    *    *    *    *    *\n    -    -    -    -    -\n    |    |    |    |    |\n    |    |    |    |    +----- 星期中星期几 (0 - 6) (星期天 为0)\n    |    |    |    +---------- 月份 (1 - 12) \n    |    |    +--------------- 一个月中的第几天 (1 - 31)\n    |    +-------------------- 小时 (0 - 23)\n    +------------------------- 分钟 (0 - 59)\n\n    *：表示取值范围中的每一个数字\n    -：做连续区间表达式的，要想表示1~7，则可以写成：1-7\n    /：表示每多少个，例如：想每10分钟一次，则可以在分的位置写：*/10\n    ,：表示多个取值，比如想在1点，2点6点执行，则可以在时的位置写：1,2,6\n\n| nicknames | time and date fields               |\n| --------- | ---------------------------------- |\n| @reboot   | Run once after reboot.             |\n| @yearly   | Run once a year, ie.  \"0 0 1 1 *\". |\n| @annually | Run once a year, ie.  \"0 0 1 1 *\". |\n| @monthly  | Run once a month, ie. \"0 0 1 * *\". |\n| @weekly   | Run once a week, ie.  \"0 0 * * 0\". |\n| @daily    | Run once a day, ie.   \"0 0 * * *\". |\n| @hourly   | Run once an hour, ie. \"0 * * * *\". |\n\n编辑\n```bash\ncrontab -e\n```\n\n文件\n\n* /etc/crontab      main system crontab file.   \n* /var/spool/cron/  a directory for storing crontabs defined by users. \n* /etc/cron.d/      a directory for storing system crontabs.\n* /etc/cron.allow 允许使用的用户 \n* /etc/cron.deny  拒绝使用的用户\n  \n\n## at 在将来某个时刻执行\n\n安装\n\n    sudo pacman -S at  \n    systemctl start atd.service\n\n创建at作业\n\n    at <time><increment>\n    <command>\n    ctrl+d\n\ntime\n\n    midnight  Indicates the time 12:00 am (00:00).\n    noon      Indicates the time 12:00 pm.\n    now       Indicates  the current day and time. \n    today     Indicates the current day.\n    tomorrow  Indicates the day following the current day.\nincrement    \n\n    + N minutes, hours, days, weeks, months, years\n\neg.\n\n    at now +1 minute\n    date >> a.txt\n    ctrl+d\n\n![](2023-05-22-17-07-46.png)\n\n一分钟后\n\n![](2023-05-22-17-08-24.png)\n\n显示作业\n\n    at -l\n![](2023-05-22-17-11-14.png)\n\n删除\n\n    at -d <id>\n![](2023-05-22-17-11-34.png)","slug":"Linux-计划任务","published":1,"updated":"2023-05-22T09:54:04.249Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5un002alv9edr7idrfv","content":"<h1 id=\"计划任务\"><a href=\"#计划任务\" class=\"headerlink\" title=\"计划任务\"></a>计划任务</h1><p>定时任务: cron</p>\n<p>一次性计划任务: at</p>\n<span id=\"more\"></span>\n<h2 id=\"Cron\"><a href=\"#Cron\" class=\"headerlink\" title=\"Cron\"></a>Cron</h2><h3 id=\"安装、启动\"><a href=\"#安装、启动\" class=\"headerlink\" title=\"安装、启动\"></a>安装、启动</h3><p>Ubuntu</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">apt-get install cron</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动</span></span><br><span class=\"line\">service cron start</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启</span></span><br><span class=\"line\">service cron restart</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止</span></span><br><span class=\"line\">service cron stop</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查状态</span></span><br><span class=\"line\">service cron status</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查询cron可用的命令</span></span><br><span class=\"line\">service cron</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查Cronta工具是否安装</span></span><br><span class=\"line\">crontab -l</span><br></pre></td></tr></table></figure>\n\n<p>Archlinux</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">sudo pacman -S cronie</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动</span></span><br><span class=\"line\">systemctl start cronie.service</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启</span></span><br><span class=\"line\">systemctl restart cronie.service</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止</span></span><br><span class=\"line\">systemctl stop cronie.service</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查状态</span></span><br><span class=\"line\">systemctl status cronie.service</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-配置、使用\"><a href=\"#2-配置、使用\" class=\"headerlink\" title=\"2. 配置、使用\"></a>2. 配置、使用</h3><p>都是一样的</p>\n<p>Usage:</p>\n<pre><code>crontab [options] file\ncrontab [options]\ncrontab -n [hostname]\n</code></pre>\n<p>Options:</p>\n<pre><code>-u &lt;user&gt;  define user\n-e         edit user&#39;s crontab\n-l         list user&#39;s crontab\n-r         delete user&#39;s crontab\n-i         prompt before deleting\n-n &lt;host&gt;  set host in cluster to run users&#39; crontabs\n-c         get host in cluster to run users&#39; crontabs\n-T &lt;file&gt;  test a crontab file syntax\n-V         print version and exit\n-x &lt;mask&gt;  enable debugging\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>field</th>\n<th>allowed values</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>minute</td>\n<td>0-59</td>\n</tr>\n<tr>\n<td>hour</td>\n<td>0-23</td>\n</tr>\n<tr>\n<td>day of month</td>\n<td>1-31</td>\n</tr>\n<tr>\n<td>month</td>\n<td>1-12 (or names, see below)</td>\n</tr>\n<tr>\n<td>day of week</td>\n<td>0-7 (0 or 7 is Sunday, or use names)</td>\n</tr>\n</tbody></table>\n<pre><code>*    *    *    *    *\n-    -    -    -    -\n|    |    |    |    |\n|    |    |    |    +----- 星期中星期几 (0 - 6) (星期天 为0)\n|    |    |    +---------- 月份 (1 - 12) \n|    |    +--------------- 一个月中的第几天 (1 - 31)\n|    +-------------------- 小时 (0 - 23)\n+------------------------- 分钟 (0 - 59)\n\n*：表示取值范围中的每一个数字\n-：做连续区间表达式的，要想表示1~7，则可以写成：1-7\n/：表示每多少个，例如：想每10分钟一次，则可以在分的位置写：*/10\n,：表示多个取值，比如想在1点，2点6点执行，则可以在时的位置写：1,2,6\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>nicknames</th>\n<th>time and date fields</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>@reboot</td>\n<td>Run once after reboot.</td>\n</tr>\n<tr>\n<td>@yearly</td>\n<td>Run once a year, ie.  “0 0 1 1 *”.</td>\n</tr>\n<tr>\n<td>@annually</td>\n<td>Run once a year, ie.  “0 0 1 1 *”.</td>\n</tr>\n<tr>\n<td>@monthly</td>\n<td>Run once a month, ie. “0 0 1 * *”.</td>\n</tr>\n<tr>\n<td>@weekly</td>\n<td>Run once a week, ie.  “0 0 * * 0”.</td>\n</tr>\n<tr>\n<td>@daily</td>\n<td>Run once a day, ie.   “0 0 * * *”.</td>\n</tr>\n<tr>\n<td>@hourly</td>\n<td>Run once an hour, ie. “0 * * * *”.</td>\n</tr>\n</tbody></table>\n<p>编辑</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab -e</span><br></pre></td></tr></table></figure>\n\n<p>文件</p>\n<ul>\n<li>&#x2F;etc&#x2F;crontab      main system crontab file.   </li>\n<li>&#x2F;var&#x2F;spool&#x2F;cron&#x2F;  a directory for storing crontabs defined by users. </li>\n<li>&#x2F;etc&#x2F;cron.d&#x2F;      a directory for storing system crontabs.</li>\n<li>&#x2F;etc&#x2F;cron.allow 允许使用的用户 </li>\n<li>&#x2F;etc&#x2F;cron.deny  拒绝使用的用户</li>\n</ul>\n<h2 id=\"at-在将来某个时刻执行\"><a href=\"#at-在将来某个时刻执行\" class=\"headerlink\" title=\"at 在将来某个时刻执行\"></a>at 在将来某个时刻执行</h2><p>安装</p>\n<pre><code>sudo pacman -S at  \nsystemctl start atd.service\n</code></pre>\n<p>创建at作业</p>\n<pre><code>at &lt;time&gt;&lt;increment&gt;\n&lt;command&gt;\nctrl+d\n</code></pre>\n<p>time</p>\n<pre><code>midnight  Indicates the time 12:00 am (00:00).\nnoon      Indicates the time 12:00 pm.\nnow       Indicates  the current day and time. \ntoday     Indicates the current day.\ntomorrow  Indicates the day following the current day.\n</code></pre>\n<p>increment    </p>\n<pre><code>+ N minutes, hours, days, weeks, months, years\n</code></pre>\n<p>eg.</p>\n<pre><code>at now +1 minute\ndate &gt;&gt; a.txt\nctrl+d\n</code></pre>\n<p><img src=\"/2022/09/24/Linux-%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1/2023-05-22-17-07-46.png\"></p>\n<p>一分钟后</p>\n<p><img src=\"/2022/09/24/Linux-%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1/2023-05-22-17-08-24.png\"></p>\n<p>显示作业</p>\n<pre><code>at -l\n</code></pre>\n<p><img src=\"/2022/09/24/Linux-%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1/2023-05-22-17-11-14.png\"></p>\n<p>删除</p>\n<pre><code>at -d &lt;id&gt;\n</code></pre>\n<p><img src=\"/2022/09/24/Linux-%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1/2023-05-22-17-11-34.png\"></p>\n","site":{"data":{}},"cover":false,"excerpt":"<h1 id=\"计划任务\"><a href=\"#计划任务\" class=\"headerlink\" title=\"计划任务\"></a>计划任务</h1><p>定时任务: cron</p>\n<p>一次性计划任务: at</p>","more":"<h2 id=\"Cron\"><a href=\"#Cron\" class=\"headerlink\" title=\"Cron\"></a>Cron</h2><h3 id=\"安装、启动\"><a href=\"#安装、启动\" class=\"headerlink\" title=\"安装、启动\"></a>安装、启动</h3><p>Ubuntu</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">apt-get install cron</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动</span></span><br><span class=\"line\">service cron start</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启</span></span><br><span class=\"line\">service cron restart</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止</span></span><br><span class=\"line\">service cron stop</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查状态</span></span><br><span class=\"line\">service cron status</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查询cron可用的命令</span></span><br><span class=\"line\">service cron</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查Cronta工具是否安装</span></span><br><span class=\"line\">crontab -l</span><br></pre></td></tr></table></figure>\n\n<p>Archlinux</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">sudo pacman -S cronie</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动</span></span><br><span class=\"line\">systemctl start cronie.service</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启</span></span><br><span class=\"line\">systemctl restart cronie.service</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止</span></span><br><span class=\"line\">systemctl stop cronie.service</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查状态</span></span><br><span class=\"line\">systemctl status cronie.service</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-配置、使用\"><a href=\"#2-配置、使用\" class=\"headerlink\" title=\"2. 配置、使用\"></a>2. 配置、使用</h3><p>都是一样的</p>\n<p>Usage:</p>\n<pre><code>crontab [options] file\ncrontab [options]\ncrontab -n [hostname]\n</code></pre>\n<p>Options:</p>\n<pre><code>-u &lt;user&gt;  define user\n-e         edit user&#39;s crontab\n-l         list user&#39;s crontab\n-r         delete user&#39;s crontab\n-i         prompt before deleting\n-n &lt;host&gt;  set host in cluster to run users&#39; crontabs\n-c         get host in cluster to run users&#39; crontabs\n-T &lt;file&gt;  test a crontab file syntax\n-V         print version and exit\n-x &lt;mask&gt;  enable debugging\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>field</th>\n<th>allowed values</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>minute</td>\n<td>0-59</td>\n</tr>\n<tr>\n<td>hour</td>\n<td>0-23</td>\n</tr>\n<tr>\n<td>day of month</td>\n<td>1-31</td>\n</tr>\n<tr>\n<td>month</td>\n<td>1-12 (or names, see below)</td>\n</tr>\n<tr>\n<td>day of week</td>\n<td>0-7 (0 or 7 is Sunday, or use names)</td>\n</tr>\n</tbody></table>\n<pre><code>*    *    *    *    *\n-    -    -    -    -\n|    |    |    |    |\n|    |    |    |    +----- 星期中星期几 (0 - 6) (星期天 为0)\n|    |    |    +---------- 月份 (1 - 12) \n|    |    +--------------- 一个月中的第几天 (1 - 31)\n|    +-------------------- 小时 (0 - 23)\n+------------------------- 分钟 (0 - 59)\n\n*：表示取值范围中的每一个数字\n-：做连续区间表达式的，要想表示1~7，则可以写成：1-7\n/：表示每多少个，例如：想每10分钟一次，则可以在分的位置写：*/10\n,：表示多个取值，比如想在1点，2点6点执行，则可以在时的位置写：1,2,6\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>nicknames</th>\n<th>time and date fields</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>@reboot</td>\n<td>Run once after reboot.</td>\n</tr>\n<tr>\n<td>@yearly</td>\n<td>Run once a year, ie.  “0 0 1 1 *”.</td>\n</tr>\n<tr>\n<td>@annually</td>\n<td>Run once a year, ie.  “0 0 1 1 *”.</td>\n</tr>\n<tr>\n<td>@monthly</td>\n<td>Run once a month, ie. “0 0 1 * *”.</td>\n</tr>\n<tr>\n<td>@weekly</td>\n<td>Run once a week, ie.  “0 0 * * 0”.</td>\n</tr>\n<tr>\n<td>@daily</td>\n<td>Run once a day, ie.   “0 0 * * *”.</td>\n</tr>\n<tr>\n<td>@hourly</td>\n<td>Run once an hour, ie. “0 * * * *”.</td>\n</tr>\n</tbody></table>\n<p>编辑</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab -e</span><br></pre></td></tr></table></figure>\n\n<p>文件</p>\n<ul>\n<li>&#x2F;etc&#x2F;crontab      main system crontab file.   </li>\n<li>&#x2F;var&#x2F;spool&#x2F;cron&#x2F;  a directory for storing crontabs defined by users. </li>\n<li>&#x2F;etc&#x2F;cron.d&#x2F;      a directory for storing system crontabs.</li>\n<li>&#x2F;etc&#x2F;cron.allow 允许使用的用户 </li>\n<li>&#x2F;etc&#x2F;cron.deny  拒绝使用的用户</li>\n</ul>\n<h2 id=\"at-在将来某个时刻执行\"><a href=\"#at-在将来某个时刻执行\" class=\"headerlink\" title=\"at 在将来某个时刻执行\"></a>at 在将来某个时刻执行</h2><p>安装</p>\n<pre><code>sudo pacman -S at  \nsystemctl start atd.service\n</code></pre>\n<p>创建at作业</p>\n<pre><code>at &lt;time&gt;&lt;increment&gt;\n&lt;command&gt;\nctrl+d\n</code></pre>\n<p>time</p>\n<pre><code>midnight  Indicates the time 12:00 am (00:00).\nnoon      Indicates the time 12:00 pm.\nnow       Indicates  the current day and time. \ntoday     Indicates the current day.\ntomorrow  Indicates the day following the current day.\n</code></pre>\n<p>increment    </p>\n<pre><code>+ N minutes, hours, days, weeks, months, years\n</code></pre>\n<p>eg.</p>\n<pre><code>at now +1 minute\ndate &gt;&gt; a.txt\nctrl+d\n</code></pre>\n<p><img src=\"/2022/09/24/Linux-%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1/2023-05-22-17-07-46.png\"></p>\n<p>一分钟后</p>\n<p><img src=\"/2022/09/24/Linux-%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1/2023-05-22-17-08-24.png\"></p>\n<p>显示作业</p>\n<pre><code>at -l\n</code></pre>\n<p><img src=\"/2022/09/24/Linux-%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1/2023-05-22-17-11-14.png\"></p>\n<p>删除</p>\n<pre><code>at -d &lt;id&gt;\n</code></pre>\n<p><img src=\"/2022/09/24/Linux-%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1/2023-05-22-17-11-34.png\"></p>"},{"title":"Love Story App","date":"2023-12-07T02:42:14.000Z","cover":false,"_content":"\n# Love Story App\n\n## 需求\n\n{% markmap 400px %}\n# 核心功能\n## 甜言蜜语(聊天)\n## 心情日记(日记)\n## 心动相册\n## 查看距离\n\n{% endmarkmap %}\n\n{% markmap 400px %}\n# 辅助功能\n## 登陆\n## 注册\n## 关联用户\n\n{% endmarkmap %}","source":"_posts/Love-Story-App.md","raw":"---\ntitle: Love Story App\ntags: \n- App\n- Android\ndate: 2023-12-07 10:42:14\ncover:\n---\n\n# Love Story App\n\n## 需求\n\n{% markmap 400px %}\n# 核心功能\n## 甜言蜜语(聊天)\n## 心情日记(日记)\n## 心动相册\n## 查看距离\n\n{% endmarkmap %}\n\n{% markmap 400px %}\n# 辅助功能\n## 登陆\n## 注册\n## 关联用户\n\n{% endmarkmap %}","slug":"Love-Story-App","published":1,"updated":"2023-12-07T03:06:23.188Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5un002dlv9eb9zb9uop","content":"<h1 id=\"Love-Story-App\"><a href=\"#Love-Story-App\" class=\"headerlink\" title=\"Love Story App\"></a>Love Story App</h1><h2 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h2>\n<div class=\"markmap-container\" style=\"height:400px\">\n  <svg data=\"{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;核心功能&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;甜言蜜语(聊天)&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;心情日记(日记)&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;心动相册&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;查看距离&quot;}]}\"></svg>\n</div>\n\n\n\n<div class=\"markmap-container\" style=\"height:400px\">\n  <svg data=\"{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;辅助功能&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;登陆&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;注册&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;关联用户&quot;}]}\"></svg>\n</div>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Love-Story-App\"><a href=\"#Love-Story-App\" class=\"headerlink\" title=\"Love Story App\"></a>Love Story App</h1><h2 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h2>\n<div class=\"markmap-container\" style=\"height:400px\">\n  <svg data=\"{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;核心功能&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;甜言蜜语(聊天)&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;心情日记(日记)&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;心动相册&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;查看距离&quot;}]}\"></svg>\n</div>\n\n\n\n<div class=\"markmap-container\" style=\"height:400px\">\n  <svg data=\"{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;辅助功能&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;登陆&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;注册&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;关联用户&quot;}]}\"></svg>\n</div>\n"},{"title":"MongoDB 安装和使用","date":"2023-06-10T12:25:49.000Z","cover":"2023/06/10/MongoDB/2023-06-10-21-22-01.png","_content":"\n# MongoDB 安装和使用\n\n\n## 使用 Docker 安装\n\n### Pull the MongoDB Docker Image\n\n```bash\ndocker pull mongo\n```\n\n### Run the Image as a Container\n\n```bash\nmkdir -p ~/.mongodb/db\ndocker run --name mongo -d -p 27017:27017 --privileged=true \\\n -e MONGO_INITDB_ROOT_USERNAME=root \\\n -e MONGO_INITDB_ROOT_PASSWORD=021009 \\\n -v ~/.mongodb/db:/data/db mongo \n```\n\n### Connect to the MongoDB Deployment with mongosh\n\nOpen an interactive container instance of mongo and connect to the deployment with mongosh.\n\n```bash\ndocker exec -it mongo mongosh\n```\n\n![](2023-06-10-20-54-19.png)\n\n\n## mongo 体系结构\n\n\n| SQL术语/概念 | MongoDB术语/概念 | 解释/说明                           |\n| ------------ | ---------------- | ----------------------------------- |\n| database     | database         | 数据库                              |\n| table        | collection       | 数据库表/集合                       |\n| row          | document         | 数据记录行/文档                     |\n| column       | field            | 数据字段/域                         |\n| index        | index            | 索引                                |\n| table        | joins            | 表连接,MongoDB不支持                |\n| primary key  | primary key      | 主键,MongoDB自动将_id字段设置为主键 |\n\n\n## 数据库(Database)\n\n\"show dbs\" 命令可以显示所有数据的列表。\n![](2023-06-10-21-02-13.png)\n\n执行 \"db\" 命令可以显示当前数据库对象或集合。\n![](2023-06-10-21-02-34.png)\n\n运行\"use\"命令，可以连接到一个指定的数据库。\n![](2023-06-10-21-02-58.png)\n\n有一些数据库名是保留的，可以直接访问这些有特殊作用的数据库。\n\n    admin： 从权限的角度来看，这是\"root\"数据库。要是将一个用户添加到这个数据库，这个用户自动继承所有数据库的权限。一些特定的服务器端命令也只能从这个数据库运行，比如列出所有的数据库或者关闭服务器。\n    local: 这个数据永远不会被复制，可以用来存储限于本地单台服务器的任意集合\n    config: 当Mongo用于分片设置时，config数据库在内部使用，用于保存分片的相关信息。\n\n## 集合(Collection)\n\n集合就是 MongoDB 文档组，类似于 RDBMS 中的表\n\n集合存在于数据库中，集合没有固定的结构，这意味着你在对集合可以插入不同格式和类型的数据，但通常情况下我们插入集合的数据都会有一定的关联性。\n\n比如，我们可以将以下不同数据结构的文档插入到集合中：\n\n    {\"site\":\"www.baidu.com\"}\n    {\"site\":\"www.google.com\",\"name\":\"Google\"}\n    {\"site\":\"www.quanwei.fun\",\"name\":\"quanwei\",\"age\":20}\n\n## 文档(Document)\n\n文档是一组键值(key-value)对(即 BSON)。MongoDB 的文档不需要设置相同的字段，并且相同的字段不需要相同的数据类型，这与关系型数据库有很大的区别，也是 MongoDB 非常突出的特点。\n\n一个简单的文档例子如下：\n\n    { \"name\":\"quanwei\"}\n\n\n    文档中的键/值对是有序的。\n    文档中的值不仅可以是在双引号里面的字符串，还可以是其他几种数据类型（甚至可以是整个嵌入的文档)。\n    MongoDB区分类型和大小写。\n    MongoDB的文档不能有重复的键。\n    文档的键是字符串。除了少数例外情况，键可以使用任意UTF-8字符。\n\n    键不能含有\\0 (空字符)。这个字符用来表示键的结尾。\n    .和$有特别的意义，只有在特定环境下才能使用。\n    以下划线\"_\"开头的键是保留的(不是严格要求的)。\n\n## MongoDB 数据类型\n\n| 数据类型           | 描述                                             |\n| ------------------ | ------------------------------------------------ |\n| String             | 字符串。UTF-8                                    |\n| Integer            | 整型数值。分为 32 位或 64 位。                   |\n| Boolean            | 布尔值。                                         |\n| Double             | 双精度浮点值。                                   |\n| Min/Max keys       | 将一个值与 BSON元素的最低值和最高值相对比。      |\n| Array              | 数组或列表 键                                    |\n| Timestamp          | 时间戳。                                         |\n| Object             | 用于内嵌文档。                                   |\n| Null               | 用于创建空值。                                   |\n| Symbol             | 符号。该一般用于采用特殊符号类型的语言           |\n| Date               | 日期时间。用 UNIX 时间格式来存储当前日期或时间。 |\n| Object ID          | 对象 ID。用于创建文档的 ID。                     |\n| Binary Data        | 二进制数据。                                     |\n| Code               | 代码类型。用于在文档中存储 JavaScript 代码。     |\n| Regular expression | 正则表达式类型。用于存储正则表达式。             |\n\n## \"DDL\"\n\n创建数据库：\n```bash\nuse <DATABASE_NAME>\n```\n有则切换，无则创建\n\n删除数据库：\n```bash\ndb.dropDatabase()\n```\n\n创建集合：\n```bash\ndb.createCollection(name, options)\n```\n\n删除集合:\n```bash\ndb.<collection_name>.drop()\n```\n\n## \"DML\"\n\n### 插入文档\n\n```sql\ndb.<COLLECTION_NAME>.insert(document)\n\ndb.collection.insertOne() \n\ndb.collection.insertMany()\n```\n\n### 更新已存在的文档：\n```sql\ndb.collection.update(\n   <query>,\n   <update>,\n   {\n     upsert: <boolean>,\n     multi: <boolean>,\n     writeConcern: <document>\n   }\n)\n```\n    query : update的查询条件，类似sql update查询内where后面的。\n    update : update的对象和一些更新的操作符（如$,$inc...）等，也可以理解为sql update查询内set后面的\n    upsert : 可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。\n    multi : 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。\n    writeConcern :可选，抛出异常的级别。\n\n### 替换已有文档\n_id 主键存在就更新，不存在就插入：\n```sql\ndb.collection.save(\n   <document>,\n   {\n     writeConcern: <document>\n   }\n)\n```\n\n\n### 删除文档:\n\n```sql\ndb.collection.remove(\n   <query>,\n   {\n     justOne: <boolean>,\n     writeConcern: <document>\n   }\n)\n```\n\n    query :（可选）删除的文档的条件。\n    justOne : （可选）如果设为 true 或 1，则只删除一个文档，如果不设置该参数，或使用默认值 false，则删除所有匹配条件的文档。\n    writeConcern :（可选）抛出异常的级别。\n\n### 查询数据：\n\n```bash\ndb.collection.find(query, projection)\n```\n    query ：可选，使用查询操作符指定查询条件\n    projection ：可选，使用投影操作符指定返回的键。查询时返回文档中所有键值， 只需省略该参数即可（默认省略）。\n\n\n## 用户\n```js\ndb.createUser({\n  user:\"quanwei\",\n  pwd:\"021009\",\n  customData:{\n      name:'唐权威',\n      email:'1076451802@qq.com'\n  },\n  roles:[\n      {\n        \"role\":\"readWrite\",\n        \"db\":\"final\"\n      }\n  ] \n  })\n```\nuse admin\ndb.auth(\"quanwei\",\"021009\")\ndb.auth(\"root\",\"021009\")\nshow users","source":"_posts/MongoDB.md","raw":"---\ntitle: MongoDB 安装和使用\ndate: 2023-06-10 20:25:49\ntags: \n- Database\n- Docker\ncover: 2023-06-10-21-22-01.png\n---\n\n# MongoDB 安装和使用\n\n\n## 使用 Docker 安装\n\n### Pull the MongoDB Docker Image\n\n```bash\ndocker pull mongo\n```\n\n### Run the Image as a Container\n\n```bash\nmkdir -p ~/.mongodb/db\ndocker run --name mongo -d -p 27017:27017 --privileged=true \\\n -e MONGO_INITDB_ROOT_USERNAME=root \\\n -e MONGO_INITDB_ROOT_PASSWORD=021009 \\\n -v ~/.mongodb/db:/data/db mongo \n```\n\n### Connect to the MongoDB Deployment with mongosh\n\nOpen an interactive container instance of mongo and connect to the deployment with mongosh.\n\n```bash\ndocker exec -it mongo mongosh\n```\n\n![](2023-06-10-20-54-19.png)\n\n\n## mongo 体系结构\n\n\n| SQL术语/概念 | MongoDB术语/概念 | 解释/说明                           |\n| ------------ | ---------------- | ----------------------------------- |\n| database     | database         | 数据库                              |\n| table        | collection       | 数据库表/集合                       |\n| row          | document         | 数据记录行/文档                     |\n| column       | field            | 数据字段/域                         |\n| index        | index            | 索引                                |\n| table        | joins            | 表连接,MongoDB不支持                |\n| primary key  | primary key      | 主键,MongoDB自动将_id字段设置为主键 |\n\n\n## 数据库(Database)\n\n\"show dbs\" 命令可以显示所有数据的列表。\n![](2023-06-10-21-02-13.png)\n\n执行 \"db\" 命令可以显示当前数据库对象或集合。\n![](2023-06-10-21-02-34.png)\n\n运行\"use\"命令，可以连接到一个指定的数据库。\n![](2023-06-10-21-02-58.png)\n\n有一些数据库名是保留的，可以直接访问这些有特殊作用的数据库。\n\n    admin： 从权限的角度来看，这是\"root\"数据库。要是将一个用户添加到这个数据库，这个用户自动继承所有数据库的权限。一些特定的服务器端命令也只能从这个数据库运行，比如列出所有的数据库或者关闭服务器。\n    local: 这个数据永远不会被复制，可以用来存储限于本地单台服务器的任意集合\n    config: 当Mongo用于分片设置时，config数据库在内部使用，用于保存分片的相关信息。\n\n## 集合(Collection)\n\n集合就是 MongoDB 文档组，类似于 RDBMS 中的表\n\n集合存在于数据库中，集合没有固定的结构，这意味着你在对集合可以插入不同格式和类型的数据，但通常情况下我们插入集合的数据都会有一定的关联性。\n\n比如，我们可以将以下不同数据结构的文档插入到集合中：\n\n    {\"site\":\"www.baidu.com\"}\n    {\"site\":\"www.google.com\",\"name\":\"Google\"}\n    {\"site\":\"www.quanwei.fun\",\"name\":\"quanwei\",\"age\":20}\n\n## 文档(Document)\n\n文档是一组键值(key-value)对(即 BSON)。MongoDB 的文档不需要设置相同的字段，并且相同的字段不需要相同的数据类型，这与关系型数据库有很大的区别，也是 MongoDB 非常突出的特点。\n\n一个简单的文档例子如下：\n\n    { \"name\":\"quanwei\"}\n\n\n    文档中的键/值对是有序的。\n    文档中的值不仅可以是在双引号里面的字符串，还可以是其他几种数据类型（甚至可以是整个嵌入的文档)。\n    MongoDB区分类型和大小写。\n    MongoDB的文档不能有重复的键。\n    文档的键是字符串。除了少数例外情况，键可以使用任意UTF-8字符。\n\n    键不能含有\\0 (空字符)。这个字符用来表示键的结尾。\n    .和$有特别的意义，只有在特定环境下才能使用。\n    以下划线\"_\"开头的键是保留的(不是严格要求的)。\n\n## MongoDB 数据类型\n\n| 数据类型           | 描述                                             |\n| ------------------ | ------------------------------------------------ |\n| String             | 字符串。UTF-8                                    |\n| Integer            | 整型数值。分为 32 位或 64 位。                   |\n| Boolean            | 布尔值。                                         |\n| Double             | 双精度浮点值。                                   |\n| Min/Max keys       | 将一个值与 BSON元素的最低值和最高值相对比。      |\n| Array              | 数组或列表 键                                    |\n| Timestamp          | 时间戳。                                         |\n| Object             | 用于内嵌文档。                                   |\n| Null               | 用于创建空值。                                   |\n| Symbol             | 符号。该一般用于采用特殊符号类型的语言           |\n| Date               | 日期时间。用 UNIX 时间格式来存储当前日期或时间。 |\n| Object ID          | 对象 ID。用于创建文档的 ID。                     |\n| Binary Data        | 二进制数据。                                     |\n| Code               | 代码类型。用于在文档中存储 JavaScript 代码。     |\n| Regular expression | 正则表达式类型。用于存储正则表达式。             |\n\n## \"DDL\"\n\n创建数据库：\n```bash\nuse <DATABASE_NAME>\n```\n有则切换，无则创建\n\n删除数据库：\n```bash\ndb.dropDatabase()\n```\n\n创建集合：\n```bash\ndb.createCollection(name, options)\n```\n\n删除集合:\n```bash\ndb.<collection_name>.drop()\n```\n\n## \"DML\"\n\n### 插入文档\n\n```sql\ndb.<COLLECTION_NAME>.insert(document)\n\ndb.collection.insertOne() \n\ndb.collection.insertMany()\n```\n\n### 更新已存在的文档：\n```sql\ndb.collection.update(\n   <query>,\n   <update>,\n   {\n     upsert: <boolean>,\n     multi: <boolean>,\n     writeConcern: <document>\n   }\n)\n```\n    query : update的查询条件，类似sql update查询内where后面的。\n    update : update的对象和一些更新的操作符（如$,$inc...）等，也可以理解为sql update查询内set后面的\n    upsert : 可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。\n    multi : 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。\n    writeConcern :可选，抛出异常的级别。\n\n### 替换已有文档\n_id 主键存在就更新，不存在就插入：\n```sql\ndb.collection.save(\n   <document>,\n   {\n     writeConcern: <document>\n   }\n)\n```\n\n\n### 删除文档:\n\n```sql\ndb.collection.remove(\n   <query>,\n   {\n     justOne: <boolean>,\n     writeConcern: <document>\n   }\n)\n```\n\n    query :（可选）删除的文档的条件。\n    justOne : （可选）如果设为 true 或 1，则只删除一个文档，如果不设置该参数，或使用默认值 false，则删除所有匹配条件的文档。\n    writeConcern :（可选）抛出异常的级别。\n\n### 查询数据：\n\n```bash\ndb.collection.find(query, projection)\n```\n    query ：可选，使用查询操作符指定查询条件\n    projection ：可选，使用投影操作符指定返回的键。查询时返回文档中所有键值， 只需省略该参数即可（默认省略）。\n\n\n## 用户\n```js\ndb.createUser({\n  user:\"quanwei\",\n  pwd:\"021009\",\n  customData:{\n      name:'唐权威',\n      email:'1076451802@qq.com'\n  },\n  roles:[\n      {\n        \"role\":\"readWrite\",\n        \"db\":\"final\"\n      }\n  ] \n  })\n```\nuse admin\ndb.auth(\"quanwei\",\"021009\")\ndb.auth(\"root\",\"021009\")\nshow users","slug":"MongoDB","published":1,"updated":"2023-07-10T07:06:05.994Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5uo002flv9ehn8idiji","content":"<h1 id=\"MongoDB-安装和使用\"><a href=\"#MongoDB-安装和使用\" class=\"headerlink\" title=\"MongoDB 安装和使用\"></a>MongoDB 安装和使用</h1><h2 id=\"使用-Docker-安装\"><a href=\"#使用-Docker-安装\" class=\"headerlink\" title=\"使用 Docker 安装\"></a>使用 Docker 安装</h2><h3 id=\"Pull-the-MongoDB-Docker-Image\"><a href=\"#Pull-the-MongoDB-Docker-Image\" class=\"headerlink\" title=\"Pull the MongoDB Docker Image\"></a>Pull the MongoDB Docker Image</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mongo</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Run-the-Image-as-a-Container\"><a href=\"#Run-the-Image-as-a-Container\" class=\"headerlink\" title=\"Run the Image as a Container\"></a>Run the Image as a Container</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p ~/.mongodb/db</span><br><span class=\"line\">docker run --name mongo -d -p 27017:27017 --privileged=<span class=\"literal\">true</span> \\</span><br><span class=\"line\"> -e MONGO_INITDB_ROOT_USERNAME=root \\</span><br><span class=\"line\"> -e MONGO_INITDB_ROOT_PASSWORD=021009 \\</span><br><span class=\"line\"> -v ~/.mongodb/db:/data/db mongo </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Connect-to-the-MongoDB-Deployment-with-mongosh\"><a href=\"#Connect-to-the-MongoDB-Deployment-with-mongosh\" class=\"headerlink\" title=\"Connect to the MongoDB Deployment with mongosh\"></a>Connect to the MongoDB Deployment with mongosh</h3><p>Open an interactive container instance of mongo and connect to the deployment with mongosh.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it mongo mongosh</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/06/10/MongoDB/2023-06-10-20-54-19.png\"></p>\n<h2 id=\"mongo-体系结构\"><a href=\"#mongo-体系结构\" class=\"headerlink\" title=\"mongo 体系结构\"></a>mongo 体系结构</h2><table>\n<thead>\n<tr>\n<th>SQL术语&#x2F;概念</th>\n<th>MongoDB术语&#x2F;概念</th>\n<th>解释&#x2F;说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>database</td>\n<td>database</td>\n<td>数据库</td>\n</tr>\n<tr>\n<td>table</td>\n<td>collection</td>\n<td>数据库表&#x2F;集合</td>\n</tr>\n<tr>\n<td>row</td>\n<td>document</td>\n<td>数据记录行&#x2F;文档</td>\n</tr>\n<tr>\n<td>column</td>\n<td>field</td>\n<td>数据字段&#x2F;域</td>\n</tr>\n<tr>\n<td>index</td>\n<td>index</td>\n<td>索引</td>\n</tr>\n<tr>\n<td>table</td>\n<td>joins</td>\n<td>表连接,MongoDB不支持</td>\n</tr>\n<tr>\n<td>primary key</td>\n<td>primary key</td>\n<td>主键,MongoDB自动将_id字段设置为主键</td>\n</tr>\n</tbody></table>\n<h2 id=\"数据库-Database\"><a href=\"#数据库-Database\" class=\"headerlink\" title=\"数据库(Database)\"></a>数据库(Database)</h2><p>“show dbs” 命令可以显示所有数据的列表。<br><img src=\"/2023/06/10/MongoDB/2023-06-10-21-02-13.png\"></p>\n<p>执行 “db” 命令可以显示当前数据库对象或集合。<br><img src=\"/2023/06/10/MongoDB/2023-06-10-21-02-34.png\"></p>\n<p>运行”use”命令，可以连接到一个指定的数据库。<br><img src=\"/2023/06/10/MongoDB/2023-06-10-21-02-58.png\"></p>\n<p>有一些数据库名是保留的，可以直接访问这些有特殊作用的数据库。</p>\n<pre><code>admin： 从权限的角度来看，这是&quot;root&quot;数据库。要是将一个用户添加到这个数据库，这个用户自动继承所有数据库的权限。一些特定的服务器端命令也只能从这个数据库运行，比如列出所有的数据库或者关闭服务器。\nlocal: 这个数据永远不会被复制，可以用来存储限于本地单台服务器的任意集合\nconfig: 当Mongo用于分片设置时，config数据库在内部使用，用于保存分片的相关信息。\n</code></pre>\n<h2 id=\"集合-Collection\"><a href=\"#集合-Collection\" class=\"headerlink\" title=\"集合(Collection)\"></a>集合(Collection)</h2><p>集合就是 MongoDB 文档组，类似于 RDBMS 中的表</p>\n<p>集合存在于数据库中，集合没有固定的结构，这意味着你在对集合可以插入不同格式和类型的数据，但通常情况下我们插入集合的数据都会有一定的关联性。</p>\n<p>比如，我们可以将以下不同数据结构的文档插入到集合中：</p>\n<pre><code>&#123;&quot;site&quot;:&quot;www.baidu.com&quot;&#125;\n&#123;&quot;site&quot;:&quot;www.google.com&quot;,&quot;name&quot;:&quot;Google&quot;&#125;\n&#123;&quot;site&quot;:&quot;www.quanwei.fun&quot;,&quot;name&quot;:&quot;quanwei&quot;,&quot;age&quot;:20&#125;\n</code></pre>\n<h2 id=\"文档-Document\"><a href=\"#文档-Document\" class=\"headerlink\" title=\"文档(Document)\"></a>文档(Document)</h2><p>文档是一组键值(key-value)对(即 BSON)。MongoDB 的文档不需要设置相同的字段，并且相同的字段不需要相同的数据类型，这与关系型数据库有很大的区别，也是 MongoDB 非常突出的特点。</p>\n<p>一个简单的文档例子如下：</p>\n<pre><code>&#123; &quot;name&quot;:&quot;quanwei&quot;&#125;\n\n\n文档中的键/值对是有序的。\n文档中的值不仅可以是在双引号里面的字符串，还可以是其他几种数据类型（甚至可以是整个嵌入的文档)。\nMongoDB区分类型和大小写。\nMongoDB的文档不能有重复的键。\n文档的键是字符串。除了少数例外情况，键可以使用任意UTF-8字符。\n\n键不能含有\\0 (空字符)。这个字符用来表示键的结尾。\n.和$有特别的意义，只有在特定环境下才能使用。\n以下划线&quot;_&quot;开头的键是保留的(不是严格要求的)。\n</code></pre>\n<h2 id=\"MongoDB-数据类型\"><a href=\"#MongoDB-数据类型\" class=\"headerlink\" title=\"MongoDB 数据类型\"></a>MongoDB 数据类型</h2><table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>String</td>\n<td>字符串。UTF-8</td>\n</tr>\n<tr>\n<td>Integer</td>\n<td>整型数值。分为 32 位或 64 位。</td>\n</tr>\n<tr>\n<td>Boolean</td>\n<td>布尔值。</td>\n</tr>\n<tr>\n<td>Double</td>\n<td>双精度浮点值。</td>\n</tr>\n<tr>\n<td>Min&#x2F;Max keys</td>\n<td>将一个值与 BSON元素的最低值和最高值相对比。</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>数组或列表 键</td>\n</tr>\n<tr>\n<td>Timestamp</td>\n<td>时间戳。</td>\n</tr>\n<tr>\n<td>Object</td>\n<td>用于内嵌文档。</td>\n</tr>\n<tr>\n<td>Null</td>\n<td>用于创建空值。</td>\n</tr>\n<tr>\n<td>Symbol</td>\n<td>符号。该一般用于采用特殊符号类型的语言</td>\n</tr>\n<tr>\n<td>Date</td>\n<td>日期时间。用 UNIX 时间格式来存储当前日期或时间。</td>\n</tr>\n<tr>\n<td>Object ID</td>\n<td>对象 ID。用于创建文档的 ID。</td>\n</tr>\n<tr>\n<td>Binary Data</td>\n<td>二进制数据。</td>\n</tr>\n<tr>\n<td>Code</td>\n<td>代码类型。用于在文档中存储 JavaScript 代码。</td>\n</tr>\n<tr>\n<td>Regular expression</td>\n<td>正则表达式类型。用于存储正则表达式。</td>\n</tr>\n</tbody></table>\n<h2 id=\"“DDL”\"><a href=\"#“DDL”\" class=\"headerlink\" title=\"“DDL”\"></a>“DDL”</h2><p>创建数据库：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use &lt;DATABASE_NAME&gt;</span><br></pre></td></tr></table></figure>\n<p>有则切换，无则创建</p>\n<p>删除数据库：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.dropDatabase()</span><br></pre></td></tr></table></figure>\n\n<p>创建集合：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.createCollection(name, options)</span><br></pre></td></tr></table></figure>\n\n<p>删除集合:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.&lt;collection_name&gt;.drop()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"“DML”\"><a href=\"#“DML”\" class=\"headerlink\" title=\"“DML”\"></a>“DML”</h2><h3 id=\"插入文档\"><a href=\"#插入文档\" class=\"headerlink\" title=\"插入文档\"></a>插入文档</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.<span class=\"operator\">&lt;</span>COLLECTION_NAME<span class=\"operator\">&gt;</span>.<span class=\"keyword\">insert</span>(document)</span><br><span class=\"line\"></span><br><span class=\"line\">db.collection.insertOne() </span><br><span class=\"line\"></span><br><span class=\"line\">db.collection.insertMany()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"更新已存在的文档：\"><a href=\"#更新已存在的文档：\" class=\"headerlink\" title=\"更新已存在的文档：\"></a>更新已存在的文档：</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.collection.update(</span><br><span class=\"line\">   <span class=\"operator\">&lt;</span>query<span class=\"operator\">&gt;</span>,</span><br><span class=\"line\">   <span class=\"operator\">&lt;</span><span class=\"keyword\">update</span><span class=\"operator\">&gt;</span>,</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">     upsert: <span class=\"operator\">&lt;</span><span class=\"type\">boolean</span><span class=\"operator\">&gt;</span>,</span><br><span class=\"line\">     multi: <span class=\"operator\">&lt;</span><span class=\"type\">boolean</span><span class=\"operator\">&gt;</span>,</span><br><span class=\"line\">     writeConcern: <span class=\"operator\">&lt;</span>document<span class=\"operator\">&gt;</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<pre><code>query : update的查询条件，类似sql update查询内where后面的。\nupdate : update的对象和一些更新的操作符（如$,$inc...）等，也可以理解为sql update查询内set后面的\nupsert : 可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。\nmulti : 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。\nwriteConcern :可选，抛出异常的级别。\n</code></pre>\n<h3 id=\"替换已有文档\"><a href=\"#替换已有文档\" class=\"headerlink\" title=\"替换已有文档\"></a>替换已有文档</h3><p>_id 主键存在就更新，不存在就插入：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.collection.save(</span><br><span class=\"line\">   <span class=\"operator\">&lt;</span>document<span class=\"operator\">&gt;</span>,</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">     writeConcern: <span class=\"operator\">&lt;</span>document<span class=\"operator\">&gt;</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"删除文档\"><a href=\"#删除文档\" class=\"headerlink\" title=\"删除文档:\"></a>删除文档:</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.collection.remove(</span><br><span class=\"line\">   <span class=\"operator\">&lt;</span>query<span class=\"operator\">&gt;</span>,</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">     justOne: <span class=\"operator\">&lt;</span><span class=\"type\">boolean</span><span class=\"operator\">&gt;</span>,</span><br><span class=\"line\">     writeConcern: <span class=\"operator\">&lt;</span>document<span class=\"operator\">&gt;</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<pre><code>query :（可选）删除的文档的条件。\njustOne : （可选）如果设为 true 或 1，则只删除一个文档，如果不设置该参数，或使用默认值 false，则删除所有匹配条件的文档。\nwriteConcern :（可选）抛出异常的级别。\n</code></pre>\n<h3 id=\"查询数据：\"><a href=\"#查询数据：\" class=\"headerlink\" title=\"查询数据：\"></a>查询数据：</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.collection.find(query, projection)</span><br></pre></td></tr></table></figure>\n<pre><code>query ：可选，使用查询操作符指定查询条件\nprojection ：可选，使用投影操作符指定返回的键。查询时返回文档中所有键值， 只需省略该参数即可（默认省略）。\n</code></pre>\n<h2 id=\"用户\"><a href=\"#用户\" class=\"headerlink\" title=\"用户\"></a>用户</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.<span class=\"title function_\">createUser</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">user</span>:<span class=\"string\">&quot;quanwei&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">pwd</span>:<span class=\"string\">&quot;021009&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">customData</span>:&#123;</span><br><span class=\"line\">      <span class=\"attr\">name</span>:<span class=\"string\">&#x27;唐权威&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">email</span>:<span class=\"string\">&#x27;1076451802@qq.com&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">roles</span>:[</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;role&quot;</span>:<span class=\"string\">&quot;readWrite&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;db&quot;</span>:<span class=\"string\">&quot;final&quot;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  ] </span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n<p>use admin<br>db.auth(“quanwei”,”021009”)<br>db.auth(“root”,”021009”)<br>show users</p>\n","site":{"data":{}},"cover_type":"img","excerpt":"","more":"<h1 id=\"MongoDB-安装和使用\"><a href=\"#MongoDB-安装和使用\" class=\"headerlink\" title=\"MongoDB 安装和使用\"></a>MongoDB 安装和使用</h1><h2 id=\"使用-Docker-安装\"><a href=\"#使用-Docker-安装\" class=\"headerlink\" title=\"使用 Docker 安装\"></a>使用 Docker 安装</h2><h3 id=\"Pull-the-MongoDB-Docker-Image\"><a href=\"#Pull-the-MongoDB-Docker-Image\" class=\"headerlink\" title=\"Pull the MongoDB Docker Image\"></a>Pull the MongoDB Docker Image</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mongo</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Run-the-Image-as-a-Container\"><a href=\"#Run-the-Image-as-a-Container\" class=\"headerlink\" title=\"Run the Image as a Container\"></a>Run the Image as a Container</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p ~/.mongodb/db</span><br><span class=\"line\">docker run --name mongo -d -p 27017:27017 --privileged=<span class=\"literal\">true</span> \\</span><br><span class=\"line\"> -e MONGO_INITDB_ROOT_USERNAME=root \\</span><br><span class=\"line\"> -e MONGO_INITDB_ROOT_PASSWORD=021009 \\</span><br><span class=\"line\"> -v ~/.mongodb/db:/data/db mongo </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Connect-to-the-MongoDB-Deployment-with-mongosh\"><a href=\"#Connect-to-the-MongoDB-Deployment-with-mongosh\" class=\"headerlink\" title=\"Connect to the MongoDB Deployment with mongosh\"></a>Connect to the MongoDB Deployment with mongosh</h3><p>Open an interactive container instance of mongo and connect to the deployment with mongosh.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it mongo mongosh</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/06/10/MongoDB/2023-06-10-20-54-19.png\"></p>\n<h2 id=\"mongo-体系结构\"><a href=\"#mongo-体系结构\" class=\"headerlink\" title=\"mongo 体系结构\"></a>mongo 体系结构</h2><table>\n<thead>\n<tr>\n<th>SQL术语&#x2F;概念</th>\n<th>MongoDB术语&#x2F;概念</th>\n<th>解释&#x2F;说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>database</td>\n<td>database</td>\n<td>数据库</td>\n</tr>\n<tr>\n<td>table</td>\n<td>collection</td>\n<td>数据库表&#x2F;集合</td>\n</tr>\n<tr>\n<td>row</td>\n<td>document</td>\n<td>数据记录行&#x2F;文档</td>\n</tr>\n<tr>\n<td>column</td>\n<td>field</td>\n<td>数据字段&#x2F;域</td>\n</tr>\n<tr>\n<td>index</td>\n<td>index</td>\n<td>索引</td>\n</tr>\n<tr>\n<td>table</td>\n<td>joins</td>\n<td>表连接,MongoDB不支持</td>\n</tr>\n<tr>\n<td>primary key</td>\n<td>primary key</td>\n<td>主键,MongoDB自动将_id字段设置为主键</td>\n</tr>\n</tbody></table>\n<h2 id=\"数据库-Database\"><a href=\"#数据库-Database\" class=\"headerlink\" title=\"数据库(Database)\"></a>数据库(Database)</h2><p>“show dbs” 命令可以显示所有数据的列表。<br><img src=\"/2023/06/10/MongoDB/2023-06-10-21-02-13.png\"></p>\n<p>执行 “db” 命令可以显示当前数据库对象或集合。<br><img src=\"/2023/06/10/MongoDB/2023-06-10-21-02-34.png\"></p>\n<p>运行”use”命令，可以连接到一个指定的数据库。<br><img src=\"/2023/06/10/MongoDB/2023-06-10-21-02-58.png\"></p>\n<p>有一些数据库名是保留的，可以直接访问这些有特殊作用的数据库。</p>\n<pre><code>admin： 从权限的角度来看，这是&quot;root&quot;数据库。要是将一个用户添加到这个数据库，这个用户自动继承所有数据库的权限。一些特定的服务器端命令也只能从这个数据库运行，比如列出所有的数据库或者关闭服务器。\nlocal: 这个数据永远不会被复制，可以用来存储限于本地单台服务器的任意集合\nconfig: 当Mongo用于分片设置时，config数据库在内部使用，用于保存分片的相关信息。\n</code></pre>\n<h2 id=\"集合-Collection\"><a href=\"#集合-Collection\" class=\"headerlink\" title=\"集合(Collection)\"></a>集合(Collection)</h2><p>集合就是 MongoDB 文档组，类似于 RDBMS 中的表</p>\n<p>集合存在于数据库中，集合没有固定的结构，这意味着你在对集合可以插入不同格式和类型的数据，但通常情况下我们插入集合的数据都会有一定的关联性。</p>\n<p>比如，我们可以将以下不同数据结构的文档插入到集合中：</p>\n<pre><code>&#123;&quot;site&quot;:&quot;www.baidu.com&quot;&#125;\n&#123;&quot;site&quot;:&quot;www.google.com&quot;,&quot;name&quot;:&quot;Google&quot;&#125;\n&#123;&quot;site&quot;:&quot;www.quanwei.fun&quot;,&quot;name&quot;:&quot;quanwei&quot;,&quot;age&quot;:20&#125;\n</code></pre>\n<h2 id=\"文档-Document\"><a href=\"#文档-Document\" class=\"headerlink\" title=\"文档(Document)\"></a>文档(Document)</h2><p>文档是一组键值(key-value)对(即 BSON)。MongoDB 的文档不需要设置相同的字段，并且相同的字段不需要相同的数据类型，这与关系型数据库有很大的区别，也是 MongoDB 非常突出的特点。</p>\n<p>一个简单的文档例子如下：</p>\n<pre><code>&#123; &quot;name&quot;:&quot;quanwei&quot;&#125;\n\n\n文档中的键/值对是有序的。\n文档中的值不仅可以是在双引号里面的字符串，还可以是其他几种数据类型（甚至可以是整个嵌入的文档)。\nMongoDB区分类型和大小写。\nMongoDB的文档不能有重复的键。\n文档的键是字符串。除了少数例外情况，键可以使用任意UTF-8字符。\n\n键不能含有\\0 (空字符)。这个字符用来表示键的结尾。\n.和$有特别的意义，只有在特定环境下才能使用。\n以下划线&quot;_&quot;开头的键是保留的(不是严格要求的)。\n</code></pre>\n<h2 id=\"MongoDB-数据类型\"><a href=\"#MongoDB-数据类型\" class=\"headerlink\" title=\"MongoDB 数据类型\"></a>MongoDB 数据类型</h2><table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>String</td>\n<td>字符串。UTF-8</td>\n</tr>\n<tr>\n<td>Integer</td>\n<td>整型数值。分为 32 位或 64 位。</td>\n</tr>\n<tr>\n<td>Boolean</td>\n<td>布尔值。</td>\n</tr>\n<tr>\n<td>Double</td>\n<td>双精度浮点值。</td>\n</tr>\n<tr>\n<td>Min&#x2F;Max keys</td>\n<td>将一个值与 BSON元素的最低值和最高值相对比。</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>数组或列表 键</td>\n</tr>\n<tr>\n<td>Timestamp</td>\n<td>时间戳。</td>\n</tr>\n<tr>\n<td>Object</td>\n<td>用于内嵌文档。</td>\n</tr>\n<tr>\n<td>Null</td>\n<td>用于创建空值。</td>\n</tr>\n<tr>\n<td>Symbol</td>\n<td>符号。该一般用于采用特殊符号类型的语言</td>\n</tr>\n<tr>\n<td>Date</td>\n<td>日期时间。用 UNIX 时间格式来存储当前日期或时间。</td>\n</tr>\n<tr>\n<td>Object ID</td>\n<td>对象 ID。用于创建文档的 ID。</td>\n</tr>\n<tr>\n<td>Binary Data</td>\n<td>二进制数据。</td>\n</tr>\n<tr>\n<td>Code</td>\n<td>代码类型。用于在文档中存储 JavaScript 代码。</td>\n</tr>\n<tr>\n<td>Regular expression</td>\n<td>正则表达式类型。用于存储正则表达式。</td>\n</tr>\n</tbody></table>\n<h2 id=\"“DDL”\"><a href=\"#“DDL”\" class=\"headerlink\" title=\"“DDL”\"></a>“DDL”</h2><p>创建数据库：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use &lt;DATABASE_NAME&gt;</span><br></pre></td></tr></table></figure>\n<p>有则切换，无则创建</p>\n<p>删除数据库：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.dropDatabase()</span><br></pre></td></tr></table></figure>\n\n<p>创建集合：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.createCollection(name, options)</span><br></pre></td></tr></table></figure>\n\n<p>删除集合:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.&lt;collection_name&gt;.drop()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"“DML”\"><a href=\"#“DML”\" class=\"headerlink\" title=\"“DML”\"></a>“DML”</h2><h3 id=\"插入文档\"><a href=\"#插入文档\" class=\"headerlink\" title=\"插入文档\"></a>插入文档</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.<span class=\"operator\">&lt;</span>COLLECTION_NAME<span class=\"operator\">&gt;</span>.<span class=\"keyword\">insert</span>(document)</span><br><span class=\"line\"></span><br><span class=\"line\">db.collection.insertOne() </span><br><span class=\"line\"></span><br><span class=\"line\">db.collection.insertMany()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"更新已存在的文档：\"><a href=\"#更新已存在的文档：\" class=\"headerlink\" title=\"更新已存在的文档：\"></a>更新已存在的文档：</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.collection.update(</span><br><span class=\"line\">   <span class=\"operator\">&lt;</span>query<span class=\"operator\">&gt;</span>,</span><br><span class=\"line\">   <span class=\"operator\">&lt;</span><span class=\"keyword\">update</span><span class=\"operator\">&gt;</span>,</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">     upsert: <span class=\"operator\">&lt;</span><span class=\"type\">boolean</span><span class=\"operator\">&gt;</span>,</span><br><span class=\"line\">     multi: <span class=\"operator\">&lt;</span><span class=\"type\">boolean</span><span class=\"operator\">&gt;</span>,</span><br><span class=\"line\">     writeConcern: <span class=\"operator\">&lt;</span>document<span class=\"operator\">&gt;</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<pre><code>query : update的查询条件，类似sql update查询内where后面的。\nupdate : update的对象和一些更新的操作符（如$,$inc...）等，也可以理解为sql update查询内set后面的\nupsert : 可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。\nmulti : 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。\nwriteConcern :可选，抛出异常的级别。\n</code></pre>\n<h3 id=\"替换已有文档\"><a href=\"#替换已有文档\" class=\"headerlink\" title=\"替换已有文档\"></a>替换已有文档</h3><p>_id 主键存在就更新，不存在就插入：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.collection.save(</span><br><span class=\"line\">   <span class=\"operator\">&lt;</span>document<span class=\"operator\">&gt;</span>,</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">     writeConcern: <span class=\"operator\">&lt;</span>document<span class=\"operator\">&gt;</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"删除文档\"><a href=\"#删除文档\" class=\"headerlink\" title=\"删除文档:\"></a>删除文档:</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.collection.remove(</span><br><span class=\"line\">   <span class=\"operator\">&lt;</span>query<span class=\"operator\">&gt;</span>,</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">     justOne: <span class=\"operator\">&lt;</span><span class=\"type\">boolean</span><span class=\"operator\">&gt;</span>,</span><br><span class=\"line\">     writeConcern: <span class=\"operator\">&lt;</span>document<span class=\"operator\">&gt;</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<pre><code>query :（可选）删除的文档的条件。\njustOne : （可选）如果设为 true 或 1，则只删除一个文档，如果不设置该参数，或使用默认值 false，则删除所有匹配条件的文档。\nwriteConcern :（可选）抛出异常的级别。\n</code></pre>\n<h3 id=\"查询数据：\"><a href=\"#查询数据：\" class=\"headerlink\" title=\"查询数据：\"></a>查询数据：</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.collection.find(query, projection)</span><br></pre></td></tr></table></figure>\n<pre><code>query ：可选，使用查询操作符指定查询条件\nprojection ：可选，使用投影操作符指定返回的键。查询时返回文档中所有键值， 只需省略该参数即可（默认省略）。\n</code></pre>\n<h2 id=\"用户\"><a href=\"#用户\" class=\"headerlink\" title=\"用户\"></a>用户</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.<span class=\"title function_\">createUser</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">user</span>:<span class=\"string\">&quot;quanwei&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">pwd</span>:<span class=\"string\">&quot;021009&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">customData</span>:&#123;</span><br><span class=\"line\">      <span class=\"attr\">name</span>:<span class=\"string\">&#x27;唐权威&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">email</span>:<span class=\"string\">&#x27;1076451802@qq.com&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">roles</span>:[</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;role&quot;</span>:<span class=\"string\">&quot;readWrite&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;db&quot;</span>:<span class=\"string\">&quot;final&quot;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  ] </span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n<p>use admin<br>db.auth(“quanwei”,”021009”)<br>db.auth(“root”,”021009”)<br>show users</p>\n"},{"title":"Neo4j","date":"2023-12-28T13:48:35.000Z","cover":false,"_content":"\n# Neo4j\n\nNeo4j 是一个高性能的NoSQL图形数据库，它使用图形结构来存储数据，\n并支持通过Cypher查询语言进行数据查询。\n\nNeo4j特别适合处理复杂的关系数据，如社交网络、推荐系统、知识图谱等。\n\n它提供了一种灵活且强大的数据模型，可以轻松地表示实体和它们之间的关系。\n\n### 主要特点\n\n1. **图形数据模型**：Neo4j使用`节点（Node）`、`关系（Relationship）`和`属性（Property）`来表示数据，这种模型非常适合表示实体之间的关系。\n2. **Cypher查询语言**：Cypher是一种声明式查询语言，用于在Neo4j中检索数据。它易于学习，并且支持强大的模式匹配。\n3. **高性能**：Neo4j能够提供快速的数据读写操作，支持大规模的数据集和复杂的查询。\n4. **可扩展性**：Neo4j支持水平扩展，可以通过增加更多的服务器来提高性能和存储能力。\n5. **集成和连接器**：Neo4j提供了多种连接器，可以轻松地与其他系统和数据库集成。\n6. **开发者友好**：Neo4j有丰富的文档、社区支持和开发工具，如Neo4j Bloom、Neo4j Browser等。\n\n### 安装和设置\n\n```bash\ndocker volume create neo4j_data\n```\n\n```bash\ndocker run \\\n    --name neo4j \\\n    --restart always \\\n    --publish=7474:7474 --publish=7687:7687 \\\n    --env NEO4J_AUTH=neo4j/your_password \\\n    --volume=neo4j_data:/data \\\n    neo4j:5.15.0\n```\n\n### 数据库操作示例\n\n1. **创建数据库**：在Neo4j Browser中，执行以下命令创建一个新的数据库。\n   ```bash\n   CREATE DATABASE mydatabase;\n   ```\n2. **切换数据库**：切换到刚刚创建的数据库。\n   ```bash\n   USE DATABASE mydatabase;\n   ```\n3. **创建节点和关系**：使用Cypher创建节点和关系。\n   ```bash\n   CREATE (n:Person {name: 'Alice'})-[:KNOWS]->(m:Person {name: 'Bob'});\n   ```\n4. **查询数据**：使用Cypher查询数据。\n   ```bash\n   MATCH (p:Person)-[:KNOWS]->(friend:Person) WHERE p.name = 'Alice' RETURN friend.name;\n   ```\n5. **关闭数据库**：在完成操作后，关闭数据库连接。\n   ```bash\n   DROP DATABASE mydatabase;\n   ```\n\n### 学习资源\n\n- **官方文档**：Neo4j的官方文档（https://neo4j.com/docs/）提供了详细的指南和教程，可以帮助你更好地了解和使用这个数据库。\n\n### 图数据模型\n\n### 节点（Node）\n节点是图形数据模型中的基本实体，它代表一个特定的对象或概念。\n\n在Neo4j中，节点通常由一个唯一的标识符（ID）和一个或多个标签（Label）组成。\n\n标签用于分类节点，并且可以包含关键字和描述性信息。\n\n例如，在一个社交网络中，每个用户可以是一个节点，节点可能有“Person”标签。\n\n### 关系（Relationship）\n\n关系表示节点之间的连接。\n\n在Neo4j中，关系由两个节点之间的有向边（Edge）表示，并且可以有方向（箭头表示）。\n\n关系也可以有标签，用于描述两个节点之间的特定关系。\n\n例如，在社交网络中，用户之间的“朋友”关系可以用一个有向边表示，从一个人指向另一个人。\n\n### 属性（Property）\n\n属性是附加在节点或关系上的键值对，用于存储节点的额外信息。\n\n属性可以用于存储任何类型的数据，如字符串、数字、日期等。\n\n例如，一个用户的节点可能有“姓名”、“年龄”和“电子邮件”等属性。\n\n### 示例\n\n假设我们正在构建一个社交网络的图形数据库，其中包含用户和他们之间的朋友关系。以下是这个网络的一些图形数据模型元素：\n- **节点**：\n  - 用户1（ID: 1，标签： Person，属性： 姓名： Alice，年龄： 30）\n  - 用户2（ID: 2，标签： Person，属性： 姓名： Bob，年龄： 25）\n- **关系**：\n  - 用户1与用户2之间的“朋友”关系（从用户1指向用户2）\n- **属性**：\n  - 用户1的属性：姓名： Alice，年龄： 30\n  - 用户2的属性：姓名： Bob，年龄： 25\n\n#### 创建节点和关系\n\n首先，我们需要创建两个节点（用户1和用户2）以及它们之间的“朋友”关系。\n```bash\nCREATE (user1:Person {name: 'Alice', age: 30})-[:FRIEND]->(user2:Person {name: 'Bob', age: 25});\n```\n这个Cypher命令创建了一个从用户1到用户2的“朋友”关系，并给两个用户节点添加了姓名和年龄属性。\n\n#### 查询节点和关系\n\n一旦节点和关系被创建，我们就可以使用Cypher来查询它们。例如，我们可以查询Alice的所有朋友：\n```bash\nMATCH (a:Person)-[:FRIEND]->(friend:Person) WHERE a.name = 'Alice' RETURN friend.name;\n```\n这个查询将返回所有与Alice有“朋友”关系的用户名称。\n\n#### 查询节点的属性\n\n我们也可以查询节点的属性。例如，查询Alice的年龄：\n```bash\nMATCH (a:Person) WHERE a.name = 'Alice' RETURN a.age;\n```\n这个查询将返回Alice的年龄。\n\n#### 查询关系的属性\n\n如果关系有属性，我们也可以查询它们。例如，如果我们给“朋友”关系添加了一个属性“since”，表示两个用户成为朋友的时间：\n```bash\nMATCH (a:Person)-[r:FRIEND]->(friend:Person) WHERE a.name = 'Alice' RETURN r.since;\n```\n这个查询将返回Alice和她的朋友之间的“since”属性值。\n\n#### 更新节点和关系的属性\n\n如果我们想要更新节点的属性，可以使用`SET`关键字。例如，更新Alice的年龄：\n```bash\nMATCH (a:Person) WHERE a.name = 'Alice' SET a.age = 31;\n```\n这个命令将Alice的年龄更新为31岁。\n\n## Cypher\n\nCypher 是 Neo4j 图形数据库的查询语言，它是一种声明式、事务性的查询语言，专门用于在图形数据库中检索数据。\n\nCypher 的语法类似于 SQL，但是它被设计用来利用图形数据的结构化查询，特别是针对节点、关系和属性的操作。\n\n### Cypher 基础语法\n\n- **点（Node）**：使用圆括号 `()` 来表示节点，可以包含标签和属性。\n- **关系（Relationship）**：使用中划线 `--` 或 `---` 来表示节点之间的关系，可以包含关系类型和方向。\n- **属性（Property）**：使用冒号 `:` 来表示节点或关系的属性。\n- **WHERE 子句**：用于过滤查询结果，类似于 SQL 中的 WHERE 子句。\n- **RETURN 子句**：用于返回查询结果中感兴趣的列，类似于 SQL 中的 SELECT 子句。\n- **ORDER BY 子句**：用于对查询结果进行排序。\n- **LIMIT/OFFSET 子句**：用于限制查询结果的行数或跳过特定的行数。\n\n### 示例查询\n\n以下是一些基本的 Cypher 查询示例：\n\n1. **查找所有具有特定标签的节点**：\n   ```plaintext\n   MATCH (n) WHERE n:Person RETURN n.name;\n   ```\n2. **查找两个节点之间的特定关系**：\n   ```plaintext\n   MATCH (p:Person)-[:FRIEND]->(friend:Person) WHERE p.name = 'Alice' RETURN friend.name;\n   ```\n3. **查找节点的所有邻居**：\n   ```plaintext\n   MATCH (p:Person)-[:FRIEND]->(friend) RETURN p.name, friend.name;\n   ```\n4. **更新节点的属性**：\n   ```plaintext\n   MATCH (p:Person) WHERE p.name = 'Alice' SET p.age = 31;\n   ```\n5. **删除节点和关系**：\n   ```plaintext\n   MATCH (p:Person) WHERE p.name = 'Alice' DELETE p;\n   ```","source":"_posts/Neo4j.md","raw":"---\ntitle: Neo4j\ntags: Neo4j\ndate: 2023-12-28 21:48:35\ncover:\n---\n\n# Neo4j\n\nNeo4j 是一个高性能的NoSQL图形数据库，它使用图形结构来存储数据，\n并支持通过Cypher查询语言进行数据查询。\n\nNeo4j特别适合处理复杂的关系数据，如社交网络、推荐系统、知识图谱等。\n\n它提供了一种灵活且强大的数据模型，可以轻松地表示实体和它们之间的关系。\n\n### 主要特点\n\n1. **图形数据模型**：Neo4j使用`节点（Node）`、`关系（Relationship）`和`属性（Property）`来表示数据，这种模型非常适合表示实体之间的关系。\n2. **Cypher查询语言**：Cypher是一种声明式查询语言，用于在Neo4j中检索数据。它易于学习，并且支持强大的模式匹配。\n3. **高性能**：Neo4j能够提供快速的数据读写操作，支持大规模的数据集和复杂的查询。\n4. **可扩展性**：Neo4j支持水平扩展，可以通过增加更多的服务器来提高性能和存储能力。\n5. **集成和连接器**：Neo4j提供了多种连接器，可以轻松地与其他系统和数据库集成。\n6. **开发者友好**：Neo4j有丰富的文档、社区支持和开发工具，如Neo4j Bloom、Neo4j Browser等。\n\n### 安装和设置\n\n```bash\ndocker volume create neo4j_data\n```\n\n```bash\ndocker run \\\n    --name neo4j \\\n    --restart always \\\n    --publish=7474:7474 --publish=7687:7687 \\\n    --env NEO4J_AUTH=neo4j/your_password \\\n    --volume=neo4j_data:/data \\\n    neo4j:5.15.0\n```\n\n### 数据库操作示例\n\n1. **创建数据库**：在Neo4j Browser中，执行以下命令创建一个新的数据库。\n   ```bash\n   CREATE DATABASE mydatabase;\n   ```\n2. **切换数据库**：切换到刚刚创建的数据库。\n   ```bash\n   USE DATABASE mydatabase;\n   ```\n3. **创建节点和关系**：使用Cypher创建节点和关系。\n   ```bash\n   CREATE (n:Person {name: 'Alice'})-[:KNOWS]->(m:Person {name: 'Bob'});\n   ```\n4. **查询数据**：使用Cypher查询数据。\n   ```bash\n   MATCH (p:Person)-[:KNOWS]->(friend:Person) WHERE p.name = 'Alice' RETURN friend.name;\n   ```\n5. **关闭数据库**：在完成操作后，关闭数据库连接。\n   ```bash\n   DROP DATABASE mydatabase;\n   ```\n\n### 学习资源\n\n- **官方文档**：Neo4j的官方文档（https://neo4j.com/docs/）提供了详细的指南和教程，可以帮助你更好地了解和使用这个数据库。\n\n### 图数据模型\n\n### 节点（Node）\n节点是图形数据模型中的基本实体，它代表一个特定的对象或概念。\n\n在Neo4j中，节点通常由一个唯一的标识符（ID）和一个或多个标签（Label）组成。\n\n标签用于分类节点，并且可以包含关键字和描述性信息。\n\n例如，在一个社交网络中，每个用户可以是一个节点，节点可能有“Person”标签。\n\n### 关系（Relationship）\n\n关系表示节点之间的连接。\n\n在Neo4j中，关系由两个节点之间的有向边（Edge）表示，并且可以有方向（箭头表示）。\n\n关系也可以有标签，用于描述两个节点之间的特定关系。\n\n例如，在社交网络中，用户之间的“朋友”关系可以用一个有向边表示，从一个人指向另一个人。\n\n### 属性（Property）\n\n属性是附加在节点或关系上的键值对，用于存储节点的额外信息。\n\n属性可以用于存储任何类型的数据，如字符串、数字、日期等。\n\n例如，一个用户的节点可能有“姓名”、“年龄”和“电子邮件”等属性。\n\n### 示例\n\n假设我们正在构建一个社交网络的图形数据库，其中包含用户和他们之间的朋友关系。以下是这个网络的一些图形数据模型元素：\n- **节点**：\n  - 用户1（ID: 1，标签： Person，属性： 姓名： Alice，年龄： 30）\n  - 用户2（ID: 2，标签： Person，属性： 姓名： Bob，年龄： 25）\n- **关系**：\n  - 用户1与用户2之间的“朋友”关系（从用户1指向用户2）\n- **属性**：\n  - 用户1的属性：姓名： Alice，年龄： 30\n  - 用户2的属性：姓名： Bob，年龄： 25\n\n#### 创建节点和关系\n\n首先，我们需要创建两个节点（用户1和用户2）以及它们之间的“朋友”关系。\n```bash\nCREATE (user1:Person {name: 'Alice', age: 30})-[:FRIEND]->(user2:Person {name: 'Bob', age: 25});\n```\n这个Cypher命令创建了一个从用户1到用户2的“朋友”关系，并给两个用户节点添加了姓名和年龄属性。\n\n#### 查询节点和关系\n\n一旦节点和关系被创建，我们就可以使用Cypher来查询它们。例如，我们可以查询Alice的所有朋友：\n```bash\nMATCH (a:Person)-[:FRIEND]->(friend:Person) WHERE a.name = 'Alice' RETURN friend.name;\n```\n这个查询将返回所有与Alice有“朋友”关系的用户名称。\n\n#### 查询节点的属性\n\n我们也可以查询节点的属性。例如，查询Alice的年龄：\n```bash\nMATCH (a:Person) WHERE a.name = 'Alice' RETURN a.age;\n```\n这个查询将返回Alice的年龄。\n\n#### 查询关系的属性\n\n如果关系有属性，我们也可以查询它们。例如，如果我们给“朋友”关系添加了一个属性“since”，表示两个用户成为朋友的时间：\n```bash\nMATCH (a:Person)-[r:FRIEND]->(friend:Person) WHERE a.name = 'Alice' RETURN r.since;\n```\n这个查询将返回Alice和她的朋友之间的“since”属性值。\n\n#### 更新节点和关系的属性\n\n如果我们想要更新节点的属性，可以使用`SET`关键字。例如，更新Alice的年龄：\n```bash\nMATCH (a:Person) WHERE a.name = 'Alice' SET a.age = 31;\n```\n这个命令将Alice的年龄更新为31岁。\n\n## Cypher\n\nCypher 是 Neo4j 图形数据库的查询语言，它是一种声明式、事务性的查询语言，专门用于在图形数据库中检索数据。\n\nCypher 的语法类似于 SQL，但是它被设计用来利用图形数据的结构化查询，特别是针对节点、关系和属性的操作。\n\n### Cypher 基础语法\n\n- **点（Node）**：使用圆括号 `()` 来表示节点，可以包含标签和属性。\n- **关系（Relationship）**：使用中划线 `--` 或 `---` 来表示节点之间的关系，可以包含关系类型和方向。\n- **属性（Property）**：使用冒号 `:` 来表示节点或关系的属性。\n- **WHERE 子句**：用于过滤查询结果，类似于 SQL 中的 WHERE 子句。\n- **RETURN 子句**：用于返回查询结果中感兴趣的列，类似于 SQL 中的 SELECT 子句。\n- **ORDER BY 子句**：用于对查询结果进行排序。\n- **LIMIT/OFFSET 子句**：用于限制查询结果的行数或跳过特定的行数。\n\n### 示例查询\n\n以下是一些基本的 Cypher 查询示例：\n\n1. **查找所有具有特定标签的节点**：\n   ```plaintext\n   MATCH (n) WHERE n:Person RETURN n.name;\n   ```\n2. **查找两个节点之间的特定关系**：\n   ```plaintext\n   MATCH (p:Person)-[:FRIEND]->(friend:Person) WHERE p.name = 'Alice' RETURN friend.name;\n   ```\n3. **查找节点的所有邻居**：\n   ```plaintext\n   MATCH (p:Person)-[:FRIEND]->(friend) RETURN p.name, friend.name;\n   ```\n4. **更新节点的属性**：\n   ```plaintext\n   MATCH (p:Person) WHERE p.name = 'Alice' SET p.age = 31;\n   ```\n5. **删除节点和关系**：\n   ```plaintext\n   MATCH (p:Person) WHERE p.name = 'Alice' DELETE p;\n   ```","slug":"Neo4j","published":1,"updated":"2023-12-28T14:04:10.315Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5uo002ilv9e4f883wve","content":"<h1 id=\"Neo4j\"><a href=\"#Neo4j\" class=\"headerlink\" title=\"Neo4j\"></a>Neo4j</h1><p>Neo4j 是一个高性能的NoSQL图形数据库，它使用图形结构来存储数据，<br>并支持通过Cypher查询语言进行数据查询。</p>\n<p>Neo4j特别适合处理复杂的关系数据，如社交网络、推荐系统、知识图谱等。</p>\n<p>它提供了一种灵活且强大的数据模型，可以轻松地表示实体和它们之间的关系。</p>\n<h3 id=\"主要特点\"><a href=\"#主要特点\" class=\"headerlink\" title=\"主要特点\"></a>主要特点</h3><ol>\n<li><strong>图形数据模型</strong>：Neo4j使用<code>节点（Node）</code>、<code>关系（Relationship）</code>和<code>属性（Property）</code>来表示数据，这种模型非常适合表示实体之间的关系。</li>\n<li><strong>Cypher查询语言</strong>：Cypher是一种声明式查询语言，用于在Neo4j中检索数据。它易于学习，并且支持强大的模式匹配。</li>\n<li><strong>高性能</strong>：Neo4j能够提供快速的数据读写操作，支持大规模的数据集和复杂的查询。</li>\n<li><strong>可扩展性</strong>：Neo4j支持水平扩展，可以通过增加更多的服务器来提高性能和存储能力。</li>\n<li><strong>集成和连接器</strong>：Neo4j提供了多种连接器，可以轻松地与其他系统和数据库集成。</li>\n<li><strong>开发者友好</strong>：Neo4j有丰富的文档、社区支持和开发工具，如Neo4j Bloom、Neo4j Browser等。</li>\n</ol>\n<h3 id=\"安装和设置\"><a href=\"#安装和设置\" class=\"headerlink\" title=\"安装和设置\"></a>安装和设置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume create neo4j_data</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run \\</span><br><span class=\"line\">    --name neo4j \\</span><br><span class=\"line\">    --restart always \\</span><br><span class=\"line\">    --publish=7474:7474 --publish=7687:7687 \\</span><br><span class=\"line\">    --<span class=\"built_in\">env</span> NEO4J_AUTH=neo4j/your_password \\</span><br><span class=\"line\">    --volume=neo4j_data:/data \\</span><br><span class=\"line\">    neo4j:5.15.0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数据库操作示例\"><a href=\"#数据库操作示例\" class=\"headerlink\" title=\"数据库操作示例\"></a>数据库操作示例</h3><ol>\n<li><strong>创建数据库</strong>：在Neo4j Browser中，执行以下命令创建一个新的数据库。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE DATABASE mydatabase;</span><br></pre></td></tr></table></figure></li>\n<li><strong>切换数据库</strong>：切换到刚刚创建的数据库。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">USE DATABASE mydatabase;</span><br></pre></td></tr></table></figure></li>\n<li><strong>创建节点和关系</strong>：使用Cypher创建节点和关系。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE (n:Person &#123;name: <span class=\"string\">&#x27;Alice&#x27;</span>&#125;)-[:KNOWS]-&gt;(m:Person &#123;name: <span class=\"string\">&#x27;Bob&#x27;</span>&#125;);</span><br></pre></td></tr></table></figure></li>\n<li><strong>查询数据</strong>：使用Cypher查询数据。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MATCH (p:Person)-[:KNOWS]-&gt;(friend:Person) WHERE p.name = <span class=\"string\">&#x27;Alice&#x27;</span> RETURN friend.name;</span><br></pre></td></tr></table></figure></li>\n<li><strong>关闭数据库</strong>：在完成操作后，关闭数据库连接。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DROP DATABASE mydatabase;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"学习资源\"><a href=\"#学习资源\" class=\"headerlink\" title=\"学习资源\"></a>学习资源</h3><ul>\n<li><strong>官方文档</strong>：Neo4j的官方文档（<a href=\"https://neo4j.com/docs/%EF%BC%89%E6%8F%90%E4%BE%9B%E4%BA%86%E8%AF%A6%E7%BB%86%E7%9A%84%E6%8C%87%E5%8D%97%E5%92%8C%E6%95%99%E7%A8%8B%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%B8%AE%E5%8A%A9%E4%BD%A0%E6%9B%B4%E5%A5%BD%E5%9C%B0%E4%BA%86%E8%A7%A3%E5%92%8C%E4%BD%BF%E7%94%A8%E8%BF%99%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93%E3%80%82\">https://neo4j.com/docs/）提供了详细的指南和教程，可以帮助你更好地了解和使用这个数据库。</a></li>\n</ul>\n<h3 id=\"图数据模型\"><a href=\"#图数据模型\" class=\"headerlink\" title=\"图数据模型\"></a>图数据模型</h3><h3 id=\"节点（Node）\"><a href=\"#节点（Node）\" class=\"headerlink\" title=\"节点（Node）\"></a>节点（Node）</h3><p>节点是图形数据模型中的基本实体，它代表一个特定的对象或概念。</p>\n<p>在Neo4j中，节点通常由一个唯一的标识符（ID）和一个或多个标签（Label）组成。</p>\n<p>标签用于分类节点，并且可以包含关键字和描述性信息。</p>\n<p>例如，在一个社交网络中，每个用户可以是一个节点，节点可能有“Person”标签。</p>\n<h3 id=\"关系（Relationship）\"><a href=\"#关系（Relationship）\" class=\"headerlink\" title=\"关系（Relationship）\"></a>关系（Relationship）</h3><p>关系表示节点之间的连接。</p>\n<p>在Neo4j中，关系由两个节点之间的有向边（Edge）表示，并且可以有方向（箭头表示）。</p>\n<p>关系也可以有标签，用于描述两个节点之间的特定关系。</p>\n<p>例如，在社交网络中，用户之间的“朋友”关系可以用一个有向边表示，从一个人指向另一个人。</p>\n<h3 id=\"属性（Property）\"><a href=\"#属性（Property）\" class=\"headerlink\" title=\"属性（Property）\"></a>属性（Property）</h3><p>属性是附加在节点或关系上的键值对，用于存储节点的额外信息。</p>\n<p>属性可以用于存储任何类型的数据，如字符串、数字、日期等。</p>\n<p>例如，一个用户的节点可能有“姓名”、“年龄”和“电子邮件”等属性。</p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>假设我们正在构建一个社交网络的图形数据库，其中包含用户和他们之间的朋友关系。以下是这个网络的一些图形数据模型元素：</p>\n<ul>\n<li><strong>节点</strong>：<ul>\n<li>用户1（ID: 1，标签： Person，属性： 姓名： Alice，年龄： 30）</li>\n<li>用户2（ID: 2，标签： Person，属性： 姓名： Bob，年龄： 25）</li>\n</ul>\n</li>\n<li><strong>关系</strong>：<ul>\n<li>用户1与用户2之间的“朋友”关系（从用户1指向用户2）</li>\n</ul>\n</li>\n<li><strong>属性</strong>：<ul>\n<li>用户1的属性：姓名： Alice，年龄： 30</li>\n<li>用户2的属性：姓名： Bob，年龄： 25</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"创建节点和关系\"><a href=\"#创建节点和关系\" class=\"headerlink\" title=\"创建节点和关系\"></a>创建节点和关系</h4><p>首先，我们需要创建两个节点（用户1和用户2）以及它们之间的“朋友”关系。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE (user1:Person &#123;name: <span class=\"string\">&#x27;Alice&#x27;</span>, age: 30&#125;)-[:FRIEND]-&gt;(user2:Person &#123;name: <span class=\"string\">&#x27;Bob&#x27;</span>, age: 25&#125;);</span><br></pre></td></tr></table></figure>\n<p>这个Cypher命令创建了一个从用户1到用户2的“朋友”关系，并给两个用户节点添加了姓名和年龄属性。</p>\n<h4 id=\"查询节点和关系\"><a href=\"#查询节点和关系\" class=\"headerlink\" title=\"查询节点和关系\"></a>查询节点和关系</h4><p>一旦节点和关系被创建，我们就可以使用Cypher来查询它们。例如，我们可以查询Alice的所有朋友：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MATCH (a:Person)-[:FRIEND]-&gt;(friend:Person) WHERE a.name = <span class=\"string\">&#x27;Alice&#x27;</span> RETURN friend.name;</span><br></pre></td></tr></table></figure>\n<p>这个查询将返回所有与Alice有“朋友”关系的用户名称。</p>\n<h4 id=\"查询节点的属性\"><a href=\"#查询节点的属性\" class=\"headerlink\" title=\"查询节点的属性\"></a>查询节点的属性</h4><p>我们也可以查询节点的属性。例如，查询Alice的年龄：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MATCH (a:Person) WHERE a.name = <span class=\"string\">&#x27;Alice&#x27;</span> RETURN a.age;</span><br></pre></td></tr></table></figure>\n<p>这个查询将返回Alice的年龄。</p>\n<h4 id=\"查询关系的属性\"><a href=\"#查询关系的属性\" class=\"headerlink\" title=\"查询关系的属性\"></a>查询关系的属性</h4><p>如果关系有属性，我们也可以查询它们。例如，如果我们给“朋友”关系添加了一个属性“since”，表示两个用户成为朋友的时间：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MATCH (a:Person)-[r:FRIEND]-&gt;(friend:Person) WHERE a.name = <span class=\"string\">&#x27;Alice&#x27;</span> RETURN r.since;</span><br></pre></td></tr></table></figure>\n<p>这个查询将返回Alice和她的朋友之间的“since”属性值。</p>\n<h4 id=\"更新节点和关系的属性\"><a href=\"#更新节点和关系的属性\" class=\"headerlink\" title=\"更新节点和关系的属性\"></a>更新节点和关系的属性</h4><p>如果我们想要更新节点的属性，可以使用<code>SET</code>关键字。例如，更新Alice的年龄：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MATCH (a:Person) WHERE a.name = <span class=\"string\">&#x27;Alice&#x27;</span> SET a.age = 31;</span><br></pre></td></tr></table></figure>\n<p>这个命令将Alice的年龄更新为31岁。</p>\n<h2 id=\"Cypher\"><a href=\"#Cypher\" class=\"headerlink\" title=\"Cypher\"></a>Cypher</h2><p>Cypher 是 Neo4j 图形数据库的查询语言，它是一种声明式、事务性的查询语言，专门用于在图形数据库中检索数据。</p>\n<p>Cypher 的语法类似于 SQL，但是它被设计用来利用图形数据的结构化查询，特别是针对节点、关系和属性的操作。</p>\n<h3 id=\"Cypher-基础语法\"><a href=\"#Cypher-基础语法\" class=\"headerlink\" title=\"Cypher 基础语法\"></a>Cypher 基础语法</h3><ul>\n<li><strong>点（Node）</strong>：使用圆括号 <code>()</code> 来表示节点，可以包含标签和属性。</li>\n<li><strong>关系（Relationship）</strong>：使用中划线 <code>--</code> 或 <code>---</code> 来表示节点之间的关系，可以包含关系类型和方向。</li>\n<li><strong>属性（Property）</strong>：使用冒号 <code>:</code> 来表示节点或关系的属性。</li>\n<li><strong>WHERE 子句</strong>：用于过滤查询结果，类似于 SQL 中的 WHERE 子句。</li>\n<li><strong>RETURN 子句</strong>：用于返回查询结果中感兴趣的列，类似于 SQL 中的 SELECT 子句。</li>\n<li><strong>ORDER BY 子句</strong>：用于对查询结果进行排序。</li>\n<li><strong>LIMIT&#x2F;OFFSET 子句</strong>：用于限制查询结果的行数或跳过特定的行数。</li>\n</ul>\n<h3 id=\"示例查询\"><a href=\"#示例查询\" class=\"headerlink\" title=\"示例查询\"></a>示例查询</h3><p>以下是一些基本的 Cypher 查询示例：</p>\n<ol>\n<li><strong>查找所有具有特定标签的节点</strong>：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MATCH (n) WHERE n:Person RETURN n.name;</span><br></pre></td></tr></table></figure></li>\n<li><strong>查找两个节点之间的特定关系</strong>：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MATCH (p:Person)-[:FRIEND]-&gt;(friend:Person) WHERE p.name = &#x27;Alice&#x27; RETURN friend.name;</span><br></pre></td></tr></table></figure></li>\n<li><strong>查找节点的所有邻居</strong>：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MATCH (p:Person)-[:FRIEND]-&gt;(friend) RETURN p.name, friend.name;</span><br></pre></td></tr></table></figure></li>\n<li><strong>更新节点的属性</strong>：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MATCH (p:Person) WHERE p.name = &#x27;Alice&#x27; SET p.age = 31;</span><br></pre></td></tr></table></figure></li>\n<li><strong>删除节点和关系</strong>：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MATCH (p:Person) WHERE p.name = &#x27;Alice&#x27; DELETE p;</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Neo4j\"><a href=\"#Neo4j\" class=\"headerlink\" title=\"Neo4j\"></a>Neo4j</h1><p>Neo4j 是一个高性能的NoSQL图形数据库，它使用图形结构来存储数据，<br>并支持通过Cypher查询语言进行数据查询。</p>\n<p>Neo4j特别适合处理复杂的关系数据，如社交网络、推荐系统、知识图谱等。</p>\n<p>它提供了一种灵活且强大的数据模型，可以轻松地表示实体和它们之间的关系。</p>\n<h3 id=\"主要特点\"><a href=\"#主要特点\" class=\"headerlink\" title=\"主要特点\"></a>主要特点</h3><ol>\n<li><strong>图形数据模型</strong>：Neo4j使用<code>节点（Node）</code>、<code>关系（Relationship）</code>和<code>属性（Property）</code>来表示数据，这种模型非常适合表示实体之间的关系。</li>\n<li><strong>Cypher查询语言</strong>：Cypher是一种声明式查询语言，用于在Neo4j中检索数据。它易于学习，并且支持强大的模式匹配。</li>\n<li><strong>高性能</strong>：Neo4j能够提供快速的数据读写操作，支持大规模的数据集和复杂的查询。</li>\n<li><strong>可扩展性</strong>：Neo4j支持水平扩展，可以通过增加更多的服务器来提高性能和存储能力。</li>\n<li><strong>集成和连接器</strong>：Neo4j提供了多种连接器，可以轻松地与其他系统和数据库集成。</li>\n<li><strong>开发者友好</strong>：Neo4j有丰富的文档、社区支持和开发工具，如Neo4j Bloom、Neo4j Browser等。</li>\n</ol>\n<h3 id=\"安装和设置\"><a href=\"#安装和设置\" class=\"headerlink\" title=\"安装和设置\"></a>安装和设置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume create neo4j_data</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run \\</span><br><span class=\"line\">    --name neo4j \\</span><br><span class=\"line\">    --restart always \\</span><br><span class=\"line\">    --publish=7474:7474 --publish=7687:7687 \\</span><br><span class=\"line\">    --<span class=\"built_in\">env</span> NEO4J_AUTH=neo4j/your_password \\</span><br><span class=\"line\">    --volume=neo4j_data:/data \\</span><br><span class=\"line\">    neo4j:5.15.0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数据库操作示例\"><a href=\"#数据库操作示例\" class=\"headerlink\" title=\"数据库操作示例\"></a>数据库操作示例</h3><ol>\n<li><strong>创建数据库</strong>：在Neo4j Browser中，执行以下命令创建一个新的数据库。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE DATABASE mydatabase;</span><br></pre></td></tr></table></figure></li>\n<li><strong>切换数据库</strong>：切换到刚刚创建的数据库。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">USE DATABASE mydatabase;</span><br></pre></td></tr></table></figure></li>\n<li><strong>创建节点和关系</strong>：使用Cypher创建节点和关系。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE (n:Person &#123;name: <span class=\"string\">&#x27;Alice&#x27;</span>&#125;)-[:KNOWS]-&gt;(m:Person &#123;name: <span class=\"string\">&#x27;Bob&#x27;</span>&#125;);</span><br></pre></td></tr></table></figure></li>\n<li><strong>查询数据</strong>：使用Cypher查询数据。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MATCH (p:Person)-[:KNOWS]-&gt;(friend:Person) WHERE p.name = <span class=\"string\">&#x27;Alice&#x27;</span> RETURN friend.name;</span><br></pre></td></tr></table></figure></li>\n<li><strong>关闭数据库</strong>：在完成操作后，关闭数据库连接。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DROP DATABASE mydatabase;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"学习资源\"><a href=\"#学习资源\" class=\"headerlink\" title=\"学习资源\"></a>学习资源</h3><ul>\n<li><strong>官方文档</strong>：Neo4j的官方文档（<a href=\"https://neo4j.com/docs/%EF%BC%89%E6%8F%90%E4%BE%9B%E4%BA%86%E8%AF%A6%E7%BB%86%E7%9A%84%E6%8C%87%E5%8D%97%E5%92%8C%E6%95%99%E7%A8%8B%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%B8%AE%E5%8A%A9%E4%BD%A0%E6%9B%B4%E5%A5%BD%E5%9C%B0%E4%BA%86%E8%A7%A3%E5%92%8C%E4%BD%BF%E7%94%A8%E8%BF%99%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93%E3%80%82\">https://neo4j.com/docs/）提供了详细的指南和教程，可以帮助你更好地了解和使用这个数据库。</a></li>\n</ul>\n<h3 id=\"图数据模型\"><a href=\"#图数据模型\" class=\"headerlink\" title=\"图数据模型\"></a>图数据模型</h3><h3 id=\"节点（Node）\"><a href=\"#节点（Node）\" class=\"headerlink\" title=\"节点（Node）\"></a>节点（Node）</h3><p>节点是图形数据模型中的基本实体，它代表一个特定的对象或概念。</p>\n<p>在Neo4j中，节点通常由一个唯一的标识符（ID）和一个或多个标签（Label）组成。</p>\n<p>标签用于分类节点，并且可以包含关键字和描述性信息。</p>\n<p>例如，在一个社交网络中，每个用户可以是一个节点，节点可能有“Person”标签。</p>\n<h3 id=\"关系（Relationship）\"><a href=\"#关系（Relationship）\" class=\"headerlink\" title=\"关系（Relationship）\"></a>关系（Relationship）</h3><p>关系表示节点之间的连接。</p>\n<p>在Neo4j中，关系由两个节点之间的有向边（Edge）表示，并且可以有方向（箭头表示）。</p>\n<p>关系也可以有标签，用于描述两个节点之间的特定关系。</p>\n<p>例如，在社交网络中，用户之间的“朋友”关系可以用一个有向边表示，从一个人指向另一个人。</p>\n<h3 id=\"属性（Property）\"><a href=\"#属性（Property）\" class=\"headerlink\" title=\"属性（Property）\"></a>属性（Property）</h3><p>属性是附加在节点或关系上的键值对，用于存储节点的额外信息。</p>\n<p>属性可以用于存储任何类型的数据，如字符串、数字、日期等。</p>\n<p>例如，一个用户的节点可能有“姓名”、“年龄”和“电子邮件”等属性。</p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>假设我们正在构建一个社交网络的图形数据库，其中包含用户和他们之间的朋友关系。以下是这个网络的一些图形数据模型元素：</p>\n<ul>\n<li><strong>节点</strong>：<ul>\n<li>用户1（ID: 1，标签： Person，属性： 姓名： Alice，年龄： 30）</li>\n<li>用户2（ID: 2，标签： Person，属性： 姓名： Bob，年龄： 25）</li>\n</ul>\n</li>\n<li><strong>关系</strong>：<ul>\n<li>用户1与用户2之间的“朋友”关系（从用户1指向用户2）</li>\n</ul>\n</li>\n<li><strong>属性</strong>：<ul>\n<li>用户1的属性：姓名： Alice，年龄： 30</li>\n<li>用户2的属性：姓名： Bob，年龄： 25</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"创建节点和关系\"><a href=\"#创建节点和关系\" class=\"headerlink\" title=\"创建节点和关系\"></a>创建节点和关系</h4><p>首先，我们需要创建两个节点（用户1和用户2）以及它们之间的“朋友”关系。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE (user1:Person &#123;name: <span class=\"string\">&#x27;Alice&#x27;</span>, age: 30&#125;)-[:FRIEND]-&gt;(user2:Person &#123;name: <span class=\"string\">&#x27;Bob&#x27;</span>, age: 25&#125;);</span><br></pre></td></tr></table></figure>\n<p>这个Cypher命令创建了一个从用户1到用户2的“朋友”关系，并给两个用户节点添加了姓名和年龄属性。</p>\n<h4 id=\"查询节点和关系\"><a href=\"#查询节点和关系\" class=\"headerlink\" title=\"查询节点和关系\"></a>查询节点和关系</h4><p>一旦节点和关系被创建，我们就可以使用Cypher来查询它们。例如，我们可以查询Alice的所有朋友：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MATCH (a:Person)-[:FRIEND]-&gt;(friend:Person) WHERE a.name = <span class=\"string\">&#x27;Alice&#x27;</span> RETURN friend.name;</span><br></pre></td></tr></table></figure>\n<p>这个查询将返回所有与Alice有“朋友”关系的用户名称。</p>\n<h4 id=\"查询节点的属性\"><a href=\"#查询节点的属性\" class=\"headerlink\" title=\"查询节点的属性\"></a>查询节点的属性</h4><p>我们也可以查询节点的属性。例如，查询Alice的年龄：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MATCH (a:Person) WHERE a.name = <span class=\"string\">&#x27;Alice&#x27;</span> RETURN a.age;</span><br></pre></td></tr></table></figure>\n<p>这个查询将返回Alice的年龄。</p>\n<h4 id=\"查询关系的属性\"><a href=\"#查询关系的属性\" class=\"headerlink\" title=\"查询关系的属性\"></a>查询关系的属性</h4><p>如果关系有属性，我们也可以查询它们。例如，如果我们给“朋友”关系添加了一个属性“since”，表示两个用户成为朋友的时间：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MATCH (a:Person)-[r:FRIEND]-&gt;(friend:Person) WHERE a.name = <span class=\"string\">&#x27;Alice&#x27;</span> RETURN r.since;</span><br></pre></td></tr></table></figure>\n<p>这个查询将返回Alice和她的朋友之间的“since”属性值。</p>\n<h4 id=\"更新节点和关系的属性\"><a href=\"#更新节点和关系的属性\" class=\"headerlink\" title=\"更新节点和关系的属性\"></a>更新节点和关系的属性</h4><p>如果我们想要更新节点的属性，可以使用<code>SET</code>关键字。例如，更新Alice的年龄：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MATCH (a:Person) WHERE a.name = <span class=\"string\">&#x27;Alice&#x27;</span> SET a.age = 31;</span><br></pre></td></tr></table></figure>\n<p>这个命令将Alice的年龄更新为31岁。</p>\n<h2 id=\"Cypher\"><a href=\"#Cypher\" class=\"headerlink\" title=\"Cypher\"></a>Cypher</h2><p>Cypher 是 Neo4j 图形数据库的查询语言，它是一种声明式、事务性的查询语言，专门用于在图形数据库中检索数据。</p>\n<p>Cypher 的语法类似于 SQL，但是它被设计用来利用图形数据的结构化查询，特别是针对节点、关系和属性的操作。</p>\n<h3 id=\"Cypher-基础语法\"><a href=\"#Cypher-基础语法\" class=\"headerlink\" title=\"Cypher 基础语法\"></a>Cypher 基础语法</h3><ul>\n<li><strong>点（Node）</strong>：使用圆括号 <code>()</code> 来表示节点，可以包含标签和属性。</li>\n<li><strong>关系（Relationship）</strong>：使用中划线 <code>--</code> 或 <code>---</code> 来表示节点之间的关系，可以包含关系类型和方向。</li>\n<li><strong>属性（Property）</strong>：使用冒号 <code>:</code> 来表示节点或关系的属性。</li>\n<li><strong>WHERE 子句</strong>：用于过滤查询结果，类似于 SQL 中的 WHERE 子句。</li>\n<li><strong>RETURN 子句</strong>：用于返回查询结果中感兴趣的列，类似于 SQL 中的 SELECT 子句。</li>\n<li><strong>ORDER BY 子句</strong>：用于对查询结果进行排序。</li>\n<li><strong>LIMIT&#x2F;OFFSET 子句</strong>：用于限制查询结果的行数或跳过特定的行数。</li>\n</ul>\n<h3 id=\"示例查询\"><a href=\"#示例查询\" class=\"headerlink\" title=\"示例查询\"></a>示例查询</h3><p>以下是一些基本的 Cypher 查询示例：</p>\n<ol>\n<li><strong>查找所有具有特定标签的节点</strong>：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MATCH (n) WHERE n:Person RETURN n.name;</span><br></pre></td></tr></table></figure></li>\n<li><strong>查找两个节点之间的特定关系</strong>：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MATCH (p:Person)-[:FRIEND]-&gt;(friend:Person) WHERE p.name = &#x27;Alice&#x27; RETURN friend.name;</span><br></pre></td></tr></table></figure></li>\n<li><strong>查找节点的所有邻居</strong>：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MATCH (p:Person)-[:FRIEND]-&gt;(friend) RETURN p.name, friend.name;</span><br></pre></td></tr></table></figure></li>\n<li><strong>更新节点的属性</strong>：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MATCH (p:Person) WHERE p.name = &#x27;Alice&#x27; SET p.age = 31;</span><br></pre></td></tr></table></figure></li>\n<li><strong>删除节点和关系</strong>：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MATCH (p:Person) WHERE p.name = &#x27;Alice&#x27; DELETE p;</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"Netty 框架入门","date":"2023-05-18T10:40:24.000Z","_content":"\n## 优势\n\n1. 统一API,多模型\n2. 自带编解码器\n3. 多通信协议\n4. 高吞吐、低延迟、低资源消耗、少内存复制\n5. 安全\n\n## 核心组件\n\n### Channel\n\nChannel 接口是 Netty 对网络操作抽象类，它除了包括基本的 I/O 操作，如 bind()、connect()、read()、write() 等\n\n### EventLoop\n\nEventLoop 定义了 Netty 的核心抽象，用于处理连接的生命周期中所发生的事件\n\n主要作用是负责监听网络事件并调用事件处理器进行相关 I/O 操作的处理。\n\n### ChannelFuture\n\nNetty 是异步非阻塞的，所有的 I/O 操作都为异步的。\n\n我们不能立刻得到操作是否执行成功。\n可以通过 ChannelFuture 接口的 addListener() 方法注册一个 ChannelFutureListener，\n当操作执行成功或者失败时，监听就会自动触发返回结果。\n\n另外，我们还可以通过 ChannelFuture 接口的 sync()方法让异步的操作变成同步的\n\n### ChannelHandler \n\n```java\nb.group(eventLoopGroup)\n  .handler(new ChannelInitializer<SocketChannel>() {\n    @Override\n    protected void initChannel(SocketChannel ch) {\n      ch.pipeline().addLast(new NettyKryoDecoder(kryoSerializer, RpcResponse.class));\n      ch.pipeline().addLast(new NettyKryoEncoder(kryoSerializer, RpcRequest.class));\n      ch.pipeline().addLast(new KryoClientHandler());\n    }\n  });\n```\n\nChannelHandler 是消息的具体处理器。他负责处理读写操作、客户端连接等事情。\n\n### ChannelPipeline\n\nChannelPipeline 为 ChannelHandler 的链，提供了一个容器并定义了用于沿着链传播入站和出站事件流的 API 。\n\n当 Channel 被创建时，它会被自动地分配到它专属的ChannelPipeline。  \n我们可以在 ChannelPipeline 上通过 addLast() 方法添加一个或者多个ChannelHandler ，\n因为一个数据或者事件可能会被多个 Handler 处理。当一个 ChannelHandler 处理完之后就将数据交给下一个 ChannelHandler 。\n\n### EventLoopGroup\n\nEventLoopGroup 包含多个 EventLoop（每一个 EventLoop 通常内部包含一个线程），\nEventLoop 的主要作用实际就是负责监听网络事件并调用事件处理器进行相关 I/O 操作的处理。\n并且 EventLoop 处理的 I/O 事件都将在它专有的 Thread 上被处理，即 Thread 和 EventLoop 属于 1 : 1 的关系，从而保证线程安全。\nBoss EventloopGroup 用于接收连接，\nWorker EventloopGroup 用于具体的处理（消息的读写以及其他逻辑处理）。\n当客户端通过 connect 方法连接服务端时，bossGroup 处理客户端连接请求。\n当客户端处理完成后，会将这个连接提交给 workerGroup 来处理，然后 workerGroup 负责处理其 IO 相关操作。\n\n### Bootstrap \n\n客户端的启动引导类/辅助类，具体使用方法如下： \n\n```java\n// [1]. 创建一个 NioEventLoopGroup 对象实例\nEventLoopGroup group = new NioEventLoopGroup();\ntry {\n  // [2]. 创建客户端启动引导/辅助类：Bootstrap\n  Bootstrap b = new Bootstrap();\n  // [3]. 指定线程组\n  b.group(group)\n    // [4]. 指定 I/O 模型\n    .channel(NioSocketChannel.class)\n    .handler(new ChannelInitializer<SocketChannel>() {\n        @Override\n        public void initChannel(SocketChannel ch) throws Exception {\n            ChannelPipeline cp = ch.pipeline();\n            // [5]. 自定义消息的业务处理逻辑\n            cp.addLast(new HelloClientHandler(message));\n        }\n    });\n  // [6].尝试建立连接 connect\n  ChannelFuture f = b.connect(host, port).sync();\n  // [7].等待连接关闭（阻塞，直到Channel关闭）\n  f.channel().closeFuture().sync();\n} finally {\n  // [8]. 优雅关闭相关线程组资源\n  group.shutdownGracefully();\n}\n```\n### ServerBootstrap \n\n服务端的启动引导类/辅助类，具体使用方法如下：       \n\n```java\n// [1] bossGroup 用于接收连接，workerGroup 用于具体的处理\nEventLoopGroup bossGroup = new NioEventLoopGroup(1);\nEventLoopGroup workerGroup = new NioEventLoopGroup();\ntry {\n  //[2] 创建服务端启动引导/辅助类：ServerBootstrap\n  ServerBootstrap b = new ServerBootstrap();\n  //[3] 给引导类配置两大线程组,确定了线程模型\n  b.group(bossGroup, workerGroup).\n    // (非必备)打印日志\n    .handler(new LoggingHandler(LogLevel.INFO))\n    // [4] 指定 IO 模型\n    .channel(NioServerSocketChannel.class)\n    .childHandler(new ChannelInitializer<SocketChannel>() {\n      @Override\n      public void initChannel(SocketChannel ch) {\n          ChannelPipeline p = ch.pipeline();\n          // [5] 可以自定义客户端消息的业务处理逻辑\n          p.addLast(new HelloServerHandler());\n      }\n    });\n  // [6] 绑定端口,调用 sync 方法阻塞知道绑定完成\n  ChannelFuture f = b.bind(port).sync();\n  // [7] 阻塞到服务器Channel关闭(closeFuture()方法获取Channel的CloseFuture对象调用其sync()方法)\n  f.channel().closeFuture().sync();\n} finally {\n  // [8] 优雅关闭相关线程组资源\n  bossGroup.shutdownGracefully();\n  workerGroup.shutdownGracefully();\n}\n```\n\nBootstrap 通常使用 **connet()** 方法连接到远程的主机和端口，作为一个 Netty TCP 协议通信中的客户端。  \n另外，Bootstrap 也可以通过 **bind()** 方法绑定本地的一个端口，作为 UDP 协议通信中的一端。  \nServerBootstrap通常使用 **bind()** 方法绑定本地的端口上，然后等待客户端的连接。  \nBootstrap 只需要配置一个线程组 (EventLoopGroup) ,  \nServerBootstrap需要配置两个线程组 (EventLoopGroup)，一个用于接收连接，一个用于具体的处理。  \n\n```java\nChannelFuture f = b.connect(host, port).addListener(future -> {\n  if (future.isSuccess()) {\n    System.out.println(\"连接成功!\");\n  } else {\n    System.err.println(\"连接失败!\");\n  }\n}).sync();\n```\n\n## Reactor 模型\n\nClient\nAcceptor 负责监听客户端的连接\nReactor\nSelector\nDispatcher\n\n\n## TCP 粘包/拆包\n\n### what\nTCP 粘包/拆包 就是你基于 TCP 发送数据的时候，出现了多个字符串“粘”在了一起或者一个字符串被“拆”开的问题\n\n### how\n\n使用 Netty 自带的解码器\n\n1. LineBasedFrameDecoder : 发送端发送数据包的时候，每个数据包之间以换行符作为分隔  \n2. DelimiterBasedFrameDecoder : 可以自定义分隔符解码器  \n3. FixedLengthFrameDecoder: 固定长度解码器，它能够按照指定的长度对消息进行相应的拆包\n\n自定义序列化编解码器在 Java 中自带的有实现 Serializable 接口来实现序列化，但由于它性能、安全性等原因一般情况下是不会被使用到的。\n通常情况下，我们使用 Protostuff、Hessian2、json 序列方式比较多\n","source":"_posts/Netty-框架入门.md","raw":"---\ntitle: Netty 框架入门\ndate: 2023-05-18 18:40:24\ntags: \n- Java\n- Netty\n---\n\n## 优势\n\n1. 统一API,多模型\n2. 自带编解码器\n3. 多通信协议\n4. 高吞吐、低延迟、低资源消耗、少内存复制\n5. 安全\n\n## 核心组件\n\n### Channel\n\nChannel 接口是 Netty 对网络操作抽象类，它除了包括基本的 I/O 操作，如 bind()、connect()、read()、write() 等\n\n### EventLoop\n\nEventLoop 定义了 Netty 的核心抽象，用于处理连接的生命周期中所发生的事件\n\n主要作用是负责监听网络事件并调用事件处理器进行相关 I/O 操作的处理。\n\n### ChannelFuture\n\nNetty 是异步非阻塞的，所有的 I/O 操作都为异步的。\n\n我们不能立刻得到操作是否执行成功。\n可以通过 ChannelFuture 接口的 addListener() 方法注册一个 ChannelFutureListener，\n当操作执行成功或者失败时，监听就会自动触发返回结果。\n\n另外，我们还可以通过 ChannelFuture 接口的 sync()方法让异步的操作变成同步的\n\n### ChannelHandler \n\n```java\nb.group(eventLoopGroup)\n  .handler(new ChannelInitializer<SocketChannel>() {\n    @Override\n    protected void initChannel(SocketChannel ch) {\n      ch.pipeline().addLast(new NettyKryoDecoder(kryoSerializer, RpcResponse.class));\n      ch.pipeline().addLast(new NettyKryoEncoder(kryoSerializer, RpcRequest.class));\n      ch.pipeline().addLast(new KryoClientHandler());\n    }\n  });\n```\n\nChannelHandler 是消息的具体处理器。他负责处理读写操作、客户端连接等事情。\n\n### ChannelPipeline\n\nChannelPipeline 为 ChannelHandler 的链，提供了一个容器并定义了用于沿着链传播入站和出站事件流的 API 。\n\n当 Channel 被创建时，它会被自动地分配到它专属的ChannelPipeline。  \n我们可以在 ChannelPipeline 上通过 addLast() 方法添加一个或者多个ChannelHandler ，\n因为一个数据或者事件可能会被多个 Handler 处理。当一个 ChannelHandler 处理完之后就将数据交给下一个 ChannelHandler 。\n\n### EventLoopGroup\n\nEventLoopGroup 包含多个 EventLoop（每一个 EventLoop 通常内部包含一个线程），\nEventLoop 的主要作用实际就是负责监听网络事件并调用事件处理器进行相关 I/O 操作的处理。\n并且 EventLoop 处理的 I/O 事件都将在它专有的 Thread 上被处理，即 Thread 和 EventLoop 属于 1 : 1 的关系，从而保证线程安全。\nBoss EventloopGroup 用于接收连接，\nWorker EventloopGroup 用于具体的处理（消息的读写以及其他逻辑处理）。\n当客户端通过 connect 方法连接服务端时，bossGroup 处理客户端连接请求。\n当客户端处理完成后，会将这个连接提交给 workerGroup 来处理，然后 workerGroup 负责处理其 IO 相关操作。\n\n### Bootstrap \n\n客户端的启动引导类/辅助类，具体使用方法如下： \n\n```java\n// [1]. 创建一个 NioEventLoopGroup 对象实例\nEventLoopGroup group = new NioEventLoopGroup();\ntry {\n  // [2]. 创建客户端启动引导/辅助类：Bootstrap\n  Bootstrap b = new Bootstrap();\n  // [3]. 指定线程组\n  b.group(group)\n    // [4]. 指定 I/O 模型\n    .channel(NioSocketChannel.class)\n    .handler(new ChannelInitializer<SocketChannel>() {\n        @Override\n        public void initChannel(SocketChannel ch) throws Exception {\n            ChannelPipeline cp = ch.pipeline();\n            // [5]. 自定义消息的业务处理逻辑\n            cp.addLast(new HelloClientHandler(message));\n        }\n    });\n  // [6].尝试建立连接 connect\n  ChannelFuture f = b.connect(host, port).sync();\n  // [7].等待连接关闭（阻塞，直到Channel关闭）\n  f.channel().closeFuture().sync();\n} finally {\n  // [8]. 优雅关闭相关线程组资源\n  group.shutdownGracefully();\n}\n```\n### ServerBootstrap \n\n服务端的启动引导类/辅助类，具体使用方法如下：       \n\n```java\n// [1] bossGroup 用于接收连接，workerGroup 用于具体的处理\nEventLoopGroup bossGroup = new NioEventLoopGroup(1);\nEventLoopGroup workerGroup = new NioEventLoopGroup();\ntry {\n  //[2] 创建服务端启动引导/辅助类：ServerBootstrap\n  ServerBootstrap b = new ServerBootstrap();\n  //[3] 给引导类配置两大线程组,确定了线程模型\n  b.group(bossGroup, workerGroup).\n    // (非必备)打印日志\n    .handler(new LoggingHandler(LogLevel.INFO))\n    // [4] 指定 IO 模型\n    .channel(NioServerSocketChannel.class)\n    .childHandler(new ChannelInitializer<SocketChannel>() {\n      @Override\n      public void initChannel(SocketChannel ch) {\n          ChannelPipeline p = ch.pipeline();\n          // [5] 可以自定义客户端消息的业务处理逻辑\n          p.addLast(new HelloServerHandler());\n      }\n    });\n  // [6] 绑定端口,调用 sync 方法阻塞知道绑定完成\n  ChannelFuture f = b.bind(port).sync();\n  // [7] 阻塞到服务器Channel关闭(closeFuture()方法获取Channel的CloseFuture对象调用其sync()方法)\n  f.channel().closeFuture().sync();\n} finally {\n  // [8] 优雅关闭相关线程组资源\n  bossGroup.shutdownGracefully();\n  workerGroup.shutdownGracefully();\n}\n```\n\nBootstrap 通常使用 **connet()** 方法连接到远程的主机和端口，作为一个 Netty TCP 协议通信中的客户端。  \n另外，Bootstrap 也可以通过 **bind()** 方法绑定本地的一个端口，作为 UDP 协议通信中的一端。  \nServerBootstrap通常使用 **bind()** 方法绑定本地的端口上，然后等待客户端的连接。  \nBootstrap 只需要配置一个线程组 (EventLoopGroup) ,  \nServerBootstrap需要配置两个线程组 (EventLoopGroup)，一个用于接收连接，一个用于具体的处理。  \n\n```java\nChannelFuture f = b.connect(host, port).addListener(future -> {\n  if (future.isSuccess()) {\n    System.out.println(\"连接成功!\");\n  } else {\n    System.err.println(\"连接失败!\");\n  }\n}).sync();\n```\n\n## Reactor 模型\n\nClient\nAcceptor 负责监听客户端的连接\nReactor\nSelector\nDispatcher\n\n\n## TCP 粘包/拆包\n\n### what\nTCP 粘包/拆包 就是你基于 TCP 发送数据的时候，出现了多个字符串“粘”在了一起或者一个字符串被“拆”开的问题\n\n### how\n\n使用 Netty 自带的解码器\n\n1. LineBasedFrameDecoder : 发送端发送数据包的时候，每个数据包之间以换行符作为分隔  \n2. DelimiterBasedFrameDecoder : 可以自定义分隔符解码器  \n3. FixedLengthFrameDecoder: 固定长度解码器，它能够按照指定的长度对消息进行相应的拆包\n\n自定义序列化编解码器在 Java 中自带的有实现 Serializable 接口来实现序列化，但由于它性能、安全性等原因一般情况下是不会被使用到的。\n通常情况下，我们使用 Protostuff、Hessian2、json 序列方式比较多\n","slug":"Netty-框架入门","published":1,"updated":"2023-06-23T01:03:59.681Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5uo002klv9e17rb1qci","content":"<h2 id=\"优势\"><a href=\"#优势\" class=\"headerlink\" title=\"优势\"></a>优势</h2><ol>\n<li>统一API,多模型</li>\n<li>自带编解码器</li>\n<li>多通信协议</li>\n<li>高吞吐、低延迟、低资源消耗、少内存复制</li>\n<li>安全</li>\n</ol>\n<h2 id=\"核心组件\"><a href=\"#核心组件\" class=\"headerlink\" title=\"核心组件\"></a>核心组件</h2><h3 id=\"Channel\"><a href=\"#Channel\" class=\"headerlink\" title=\"Channel\"></a>Channel</h3><p>Channel 接口是 Netty 对网络操作抽象类，它除了包括基本的 I&#x2F;O 操作，如 bind()、connect()、read()、write() 等</p>\n<h3 id=\"EventLoop\"><a href=\"#EventLoop\" class=\"headerlink\" title=\"EventLoop\"></a>EventLoop</h3><p>EventLoop 定义了 Netty 的核心抽象，用于处理连接的生命周期中所发生的事件</p>\n<p>主要作用是负责监听网络事件并调用事件处理器进行相关 I&#x2F;O 操作的处理。</p>\n<h3 id=\"ChannelFuture\"><a href=\"#ChannelFuture\" class=\"headerlink\" title=\"ChannelFuture\"></a>ChannelFuture</h3><p>Netty 是异步非阻塞的，所有的 I&#x2F;O 操作都为异步的。</p>\n<p>我们不能立刻得到操作是否执行成功。<br>可以通过 ChannelFuture 接口的 addListener() 方法注册一个 ChannelFutureListener，<br>当操作执行成功或者失败时，监听就会自动触发返回结果。</p>\n<p>另外，我们还可以通过 ChannelFuture 接口的 sync()方法让异步的操作变成同步的</p>\n<h3 id=\"ChannelHandler\"><a href=\"#ChannelHandler\" class=\"headerlink\" title=\"ChannelHandler\"></a>ChannelHandler</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b.group(eventLoopGroup)</span><br><span class=\"line\">  .handler(<span class=\"keyword\">new</span> <span class=\"title class_\">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">initChannel</span><span class=\"params\">(SocketChannel ch)</span> &#123;</span><br><span class=\"line\">      ch.pipeline().addLast(<span class=\"keyword\">new</span> <span class=\"title class_\">NettyKryoDecoder</span>(kryoSerializer, RpcResponse.class));</span><br><span class=\"line\">      ch.pipeline().addLast(<span class=\"keyword\">new</span> <span class=\"title class_\">NettyKryoEncoder</span>(kryoSerializer, RpcRequest.class));</span><br><span class=\"line\">      ch.pipeline().addLast(<span class=\"keyword\">new</span> <span class=\"title class_\">KryoClientHandler</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>ChannelHandler 是消息的具体处理器。他负责处理读写操作、客户端连接等事情。</p>\n<h3 id=\"ChannelPipeline\"><a href=\"#ChannelPipeline\" class=\"headerlink\" title=\"ChannelPipeline\"></a>ChannelPipeline</h3><p>ChannelPipeline 为 ChannelHandler 的链，提供了一个容器并定义了用于沿着链传播入站和出站事件流的 API 。</p>\n<p>当 Channel 被创建时，它会被自动地分配到它专属的ChannelPipeline。<br>我们可以在 ChannelPipeline 上通过 addLast() 方法添加一个或者多个ChannelHandler ，<br>因为一个数据或者事件可能会被多个 Handler 处理。当一个 ChannelHandler 处理完之后就将数据交给下一个 ChannelHandler 。</p>\n<h3 id=\"EventLoopGroup\"><a href=\"#EventLoopGroup\" class=\"headerlink\" title=\"EventLoopGroup\"></a>EventLoopGroup</h3><p>EventLoopGroup 包含多个 EventLoop（每一个 EventLoop 通常内部包含一个线程），<br>EventLoop 的主要作用实际就是负责监听网络事件并调用事件处理器进行相关 I&#x2F;O 操作的处理。<br>并且 EventLoop 处理的 I&#x2F;O 事件都将在它专有的 Thread 上被处理，即 Thread 和 EventLoop 属于 1 : 1 的关系，从而保证线程安全。<br>Boss EventloopGroup 用于接收连接，<br>Worker EventloopGroup 用于具体的处理（消息的读写以及其他逻辑处理）。<br>当客户端通过 connect 方法连接服务端时，bossGroup 处理客户端连接请求。<br>当客户端处理完成后，会将这个连接提交给 workerGroup 来处理，然后 workerGroup 负责处理其 IO 相关操作。</p>\n<h3 id=\"Bootstrap\"><a href=\"#Bootstrap\" class=\"headerlink\" title=\"Bootstrap\"></a>Bootstrap</h3><p>客户端的启动引导类&#x2F;辅助类，具体使用方法如下： </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// [1]. 创建一个 NioEventLoopGroup 对象实例</span></span><br><span class=\"line\"><span class=\"type\">EventLoopGroup</span> <span class=\"variable\">group</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NioEventLoopGroup</span>();</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// [2]. 创建客户端启动引导/辅助类：Bootstrap</span></span><br><span class=\"line\">  <span class=\"type\">Bootstrap</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Bootstrap</span>();</span><br><span class=\"line\">  <span class=\"comment\">// [3]. 指定线程组</span></span><br><span class=\"line\">  b.group(group)</span><br><span class=\"line\">    <span class=\"comment\">// [4]. 指定 I/O 模型</span></span><br><span class=\"line\">    .channel(NioSocketChannel.class)</span><br><span class=\"line\">    .handler(<span class=\"keyword\">new</span> <span class=\"title class_\">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">initChannel</span><span class=\"params\">(SocketChannel ch)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">            <span class=\"type\">ChannelPipeline</span> <span class=\"variable\">cp</span> <span class=\"operator\">=</span> ch.pipeline();</span><br><span class=\"line\">            <span class=\"comment\">// [5]. 自定义消息的业务处理逻辑</span></span><br><span class=\"line\">            cp.addLast(<span class=\"keyword\">new</span> <span class=\"title class_\">HelloClientHandler</span>(message));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  <span class=\"comment\">// [6].尝试建立连接 connect</span></span><br><span class=\"line\">  <span class=\"type\">ChannelFuture</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> b.connect(host, port).sync();</span><br><span class=\"line\">  <span class=\"comment\">// [7].等待连接关闭（阻塞，直到Channel关闭）</span></span><br><span class=\"line\">  f.channel().closeFuture().sync();</span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// [8]. 优雅关闭相关线程组资源</span></span><br><span class=\"line\">  group.shutdownGracefully();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ServerBootstrap\"><a href=\"#ServerBootstrap\" class=\"headerlink\" title=\"ServerBootstrap\"></a>ServerBootstrap</h3><p>服务端的启动引导类&#x2F;辅助类，具体使用方法如下：       </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// [1] bossGroup 用于接收连接，workerGroup 用于具体的处理</span></span><br><span class=\"line\"><span class=\"type\">EventLoopGroup</span> <span class=\"variable\">bossGroup</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NioEventLoopGroup</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"type\">EventLoopGroup</span> <span class=\"variable\">workerGroup</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NioEventLoopGroup</span>();</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//[2] 创建服务端启动引导/辅助类：ServerBootstrap</span></span><br><span class=\"line\">  <span class=\"type\">ServerBootstrap</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ServerBootstrap</span>();</span><br><span class=\"line\">  <span class=\"comment\">//[3] 给引导类配置两大线程组,确定了线程模型</span></span><br><span class=\"line\">  b.group(bossGroup, workerGroup).</span><br><span class=\"line\">    <span class=\"comment\">// (非必备)打印日志</span></span><br><span class=\"line\">    .handler(<span class=\"keyword\">new</span> <span class=\"title class_\">LoggingHandler</span>(LogLevel.INFO))</span><br><span class=\"line\">    <span class=\"comment\">// [4] 指定 IO 模型</span></span><br><span class=\"line\">    .channel(NioServerSocketChannel.class)</span><br><span class=\"line\">    .childHandler(<span class=\"keyword\">new</span> <span class=\"title class_\">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;</span><br><span class=\"line\">      <span class=\"meta\">@Override</span></span><br><span class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">initChannel</span><span class=\"params\">(SocketChannel ch)</span> &#123;</span><br><span class=\"line\">          <span class=\"type\">ChannelPipeline</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> ch.pipeline();</span><br><span class=\"line\">          <span class=\"comment\">// [5] 可以自定义客户端消息的业务处理逻辑</span></span><br><span class=\"line\">          p.addLast(<span class=\"keyword\">new</span> <span class=\"title class_\">HelloServerHandler</span>());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  <span class=\"comment\">// [6] 绑定端口,调用 sync 方法阻塞知道绑定完成</span></span><br><span class=\"line\">  <span class=\"type\">ChannelFuture</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> b.bind(port).sync();</span><br><span class=\"line\">  <span class=\"comment\">// [7] 阻塞到服务器Channel关闭(closeFuture()方法获取Channel的CloseFuture对象调用其sync()方法)</span></span><br><span class=\"line\">  f.channel().closeFuture().sync();</span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// [8] 优雅关闭相关线程组资源</span></span><br><span class=\"line\">  bossGroup.shutdownGracefully();</span><br><span class=\"line\">  workerGroup.shutdownGracefully();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Bootstrap 通常使用 <strong>connet()</strong> 方法连接到远程的主机和端口，作为一个 Netty TCP 协议通信中的客户端。<br>另外，Bootstrap 也可以通过 <strong>bind()</strong> 方法绑定本地的一个端口，作为 UDP 协议通信中的一端。<br>ServerBootstrap通常使用 <strong>bind()</strong> 方法绑定本地的端口上，然后等待客户端的连接。<br>Bootstrap 只需要配置一个线程组 (EventLoopGroup) ,<br>ServerBootstrap需要配置两个线程组 (EventLoopGroup)，一个用于接收连接，一个用于具体的处理。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ChannelFuture</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> b.connect(host, port).addListener(future -&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (future.isSuccess()) &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;连接成功!&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    System.err.println(<span class=\"string\">&quot;连接失败!&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;).sync();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Reactor-模型\"><a href=\"#Reactor-模型\" class=\"headerlink\" title=\"Reactor 模型\"></a>Reactor 模型</h2><p>Client<br>Acceptor 负责监听客户端的连接<br>Reactor<br>Selector<br>Dispatcher</p>\n<h2 id=\"TCP-粘包-拆包\"><a href=\"#TCP-粘包-拆包\" class=\"headerlink\" title=\"TCP 粘包&#x2F;拆包\"></a>TCP 粘包&#x2F;拆包</h2><h3 id=\"what\"><a href=\"#what\" class=\"headerlink\" title=\"what\"></a>what</h3><p>TCP 粘包&#x2F;拆包 就是你基于 TCP 发送数据的时候，出现了多个字符串“粘”在了一起或者一个字符串被“拆”开的问题</p>\n<h3 id=\"how\"><a href=\"#how\" class=\"headerlink\" title=\"how\"></a>how</h3><p>使用 Netty 自带的解码器</p>\n<ol>\n<li>LineBasedFrameDecoder : 发送端发送数据包的时候，每个数据包之间以换行符作为分隔  </li>\n<li>DelimiterBasedFrameDecoder : 可以自定义分隔符解码器  </li>\n<li>FixedLengthFrameDecoder: 固定长度解码器，它能够按照指定的长度对消息进行相应的拆包</li>\n</ol>\n<p>自定义序列化编解码器在 Java 中自带的有实现 Serializable 接口来实现序列化，但由于它性能、安全性等原因一般情况下是不会被使用到的。<br>通常情况下，我们使用 Protostuff、Hessian2、json 序列方式比较多</p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h2 id=\"优势\"><a href=\"#优势\" class=\"headerlink\" title=\"优势\"></a>优势</h2><ol>\n<li>统一API,多模型</li>\n<li>自带编解码器</li>\n<li>多通信协议</li>\n<li>高吞吐、低延迟、低资源消耗、少内存复制</li>\n<li>安全</li>\n</ol>\n<h2 id=\"核心组件\"><a href=\"#核心组件\" class=\"headerlink\" title=\"核心组件\"></a>核心组件</h2><h3 id=\"Channel\"><a href=\"#Channel\" class=\"headerlink\" title=\"Channel\"></a>Channel</h3><p>Channel 接口是 Netty 对网络操作抽象类，它除了包括基本的 I&#x2F;O 操作，如 bind()、connect()、read()、write() 等</p>\n<h3 id=\"EventLoop\"><a href=\"#EventLoop\" class=\"headerlink\" title=\"EventLoop\"></a>EventLoop</h3><p>EventLoop 定义了 Netty 的核心抽象，用于处理连接的生命周期中所发生的事件</p>\n<p>主要作用是负责监听网络事件并调用事件处理器进行相关 I&#x2F;O 操作的处理。</p>\n<h3 id=\"ChannelFuture\"><a href=\"#ChannelFuture\" class=\"headerlink\" title=\"ChannelFuture\"></a>ChannelFuture</h3><p>Netty 是异步非阻塞的，所有的 I&#x2F;O 操作都为异步的。</p>\n<p>我们不能立刻得到操作是否执行成功。<br>可以通过 ChannelFuture 接口的 addListener() 方法注册一个 ChannelFutureListener，<br>当操作执行成功或者失败时，监听就会自动触发返回结果。</p>\n<p>另外，我们还可以通过 ChannelFuture 接口的 sync()方法让异步的操作变成同步的</p>\n<h3 id=\"ChannelHandler\"><a href=\"#ChannelHandler\" class=\"headerlink\" title=\"ChannelHandler\"></a>ChannelHandler</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b.group(eventLoopGroup)</span><br><span class=\"line\">  .handler(<span class=\"keyword\">new</span> <span class=\"title class_\">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">initChannel</span><span class=\"params\">(SocketChannel ch)</span> &#123;</span><br><span class=\"line\">      ch.pipeline().addLast(<span class=\"keyword\">new</span> <span class=\"title class_\">NettyKryoDecoder</span>(kryoSerializer, RpcResponse.class));</span><br><span class=\"line\">      ch.pipeline().addLast(<span class=\"keyword\">new</span> <span class=\"title class_\">NettyKryoEncoder</span>(kryoSerializer, RpcRequest.class));</span><br><span class=\"line\">      ch.pipeline().addLast(<span class=\"keyword\">new</span> <span class=\"title class_\">KryoClientHandler</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>ChannelHandler 是消息的具体处理器。他负责处理读写操作、客户端连接等事情。</p>\n<h3 id=\"ChannelPipeline\"><a href=\"#ChannelPipeline\" class=\"headerlink\" title=\"ChannelPipeline\"></a>ChannelPipeline</h3><p>ChannelPipeline 为 ChannelHandler 的链，提供了一个容器并定义了用于沿着链传播入站和出站事件流的 API 。</p>\n<p>当 Channel 被创建时，它会被自动地分配到它专属的ChannelPipeline。<br>我们可以在 ChannelPipeline 上通过 addLast() 方法添加一个或者多个ChannelHandler ，<br>因为一个数据或者事件可能会被多个 Handler 处理。当一个 ChannelHandler 处理完之后就将数据交给下一个 ChannelHandler 。</p>\n<h3 id=\"EventLoopGroup\"><a href=\"#EventLoopGroup\" class=\"headerlink\" title=\"EventLoopGroup\"></a>EventLoopGroup</h3><p>EventLoopGroup 包含多个 EventLoop（每一个 EventLoop 通常内部包含一个线程），<br>EventLoop 的主要作用实际就是负责监听网络事件并调用事件处理器进行相关 I&#x2F;O 操作的处理。<br>并且 EventLoop 处理的 I&#x2F;O 事件都将在它专有的 Thread 上被处理，即 Thread 和 EventLoop 属于 1 : 1 的关系，从而保证线程安全。<br>Boss EventloopGroup 用于接收连接，<br>Worker EventloopGroup 用于具体的处理（消息的读写以及其他逻辑处理）。<br>当客户端通过 connect 方法连接服务端时，bossGroup 处理客户端连接请求。<br>当客户端处理完成后，会将这个连接提交给 workerGroup 来处理，然后 workerGroup 负责处理其 IO 相关操作。</p>\n<h3 id=\"Bootstrap\"><a href=\"#Bootstrap\" class=\"headerlink\" title=\"Bootstrap\"></a>Bootstrap</h3><p>客户端的启动引导类&#x2F;辅助类，具体使用方法如下： </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// [1]. 创建一个 NioEventLoopGroup 对象实例</span></span><br><span class=\"line\"><span class=\"type\">EventLoopGroup</span> <span class=\"variable\">group</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NioEventLoopGroup</span>();</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// [2]. 创建客户端启动引导/辅助类：Bootstrap</span></span><br><span class=\"line\">  <span class=\"type\">Bootstrap</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Bootstrap</span>();</span><br><span class=\"line\">  <span class=\"comment\">// [3]. 指定线程组</span></span><br><span class=\"line\">  b.group(group)</span><br><span class=\"line\">    <span class=\"comment\">// [4]. 指定 I/O 模型</span></span><br><span class=\"line\">    .channel(NioSocketChannel.class)</span><br><span class=\"line\">    .handler(<span class=\"keyword\">new</span> <span class=\"title class_\">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">initChannel</span><span class=\"params\">(SocketChannel ch)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">            <span class=\"type\">ChannelPipeline</span> <span class=\"variable\">cp</span> <span class=\"operator\">=</span> ch.pipeline();</span><br><span class=\"line\">            <span class=\"comment\">// [5]. 自定义消息的业务处理逻辑</span></span><br><span class=\"line\">            cp.addLast(<span class=\"keyword\">new</span> <span class=\"title class_\">HelloClientHandler</span>(message));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  <span class=\"comment\">// [6].尝试建立连接 connect</span></span><br><span class=\"line\">  <span class=\"type\">ChannelFuture</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> b.connect(host, port).sync();</span><br><span class=\"line\">  <span class=\"comment\">// [7].等待连接关闭（阻塞，直到Channel关闭）</span></span><br><span class=\"line\">  f.channel().closeFuture().sync();</span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// [8]. 优雅关闭相关线程组资源</span></span><br><span class=\"line\">  group.shutdownGracefully();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ServerBootstrap\"><a href=\"#ServerBootstrap\" class=\"headerlink\" title=\"ServerBootstrap\"></a>ServerBootstrap</h3><p>服务端的启动引导类&#x2F;辅助类，具体使用方法如下：       </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// [1] bossGroup 用于接收连接，workerGroup 用于具体的处理</span></span><br><span class=\"line\"><span class=\"type\">EventLoopGroup</span> <span class=\"variable\">bossGroup</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NioEventLoopGroup</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"type\">EventLoopGroup</span> <span class=\"variable\">workerGroup</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NioEventLoopGroup</span>();</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//[2] 创建服务端启动引导/辅助类：ServerBootstrap</span></span><br><span class=\"line\">  <span class=\"type\">ServerBootstrap</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ServerBootstrap</span>();</span><br><span class=\"line\">  <span class=\"comment\">//[3] 给引导类配置两大线程组,确定了线程模型</span></span><br><span class=\"line\">  b.group(bossGroup, workerGroup).</span><br><span class=\"line\">    <span class=\"comment\">// (非必备)打印日志</span></span><br><span class=\"line\">    .handler(<span class=\"keyword\">new</span> <span class=\"title class_\">LoggingHandler</span>(LogLevel.INFO))</span><br><span class=\"line\">    <span class=\"comment\">// [4] 指定 IO 模型</span></span><br><span class=\"line\">    .channel(NioServerSocketChannel.class)</span><br><span class=\"line\">    .childHandler(<span class=\"keyword\">new</span> <span class=\"title class_\">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;</span><br><span class=\"line\">      <span class=\"meta\">@Override</span></span><br><span class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">initChannel</span><span class=\"params\">(SocketChannel ch)</span> &#123;</span><br><span class=\"line\">          <span class=\"type\">ChannelPipeline</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> ch.pipeline();</span><br><span class=\"line\">          <span class=\"comment\">// [5] 可以自定义客户端消息的业务处理逻辑</span></span><br><span class=\"line\">          p.addLast(<span class=\"keyword\">new</span> <span class=\"title class_\">HelloServerHandler</span>());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  <span class=\"comment\">// [6] 绑定端口,调用 sync 方法阻塞知道绑定完成</span></span><br><span class=\"line\">  <span class=\"type\">ChannelFuture</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> b.bind(port).sync();</span><br><span class=\"line\">  <span class=\"comment\">// [7] 阻塞到服务器Channel关闭(closeFuture()方法获取Channel的CloseFuture对象调用其sync()方法)</span></span><br><span class=\"line\">  f.channel().closeFuture().sync();</span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// [8] 优雅关闭相关线程组资源</span></span><br><span class=\"line\">  bossGroup.shutdownGracefully();</span><br><span class=\"line\">  workerGroup.shutdownGracefully();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Bootstrap 通常使用 <strong>connet()</strong> 方法连接到远程的主机和端口，作为一个 Netty TCP 协议通信中的客户端。<br>另外，Bootstrap 也可以通过 <strong>bind()</strong> 方法绑定本地的一个端口，作为 UDP 协议通信中的一端。<br>ServerBootstrap通常使用 <strong>bind()</strong> 方法绑定本地的端口上，然后等待客户端的连接。<br>Bootstrap 只需要配置一个线程组 (EventLoopGroup) ,<br>ServerBootstrap需要配置两个线程组 (EventLoopGroup)，一个用于接收连接，一个用于具体的处理。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ChannelFuture</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> b.connect(host, port).addListener(future -&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (future.isSuccess()) &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;连接成功!&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    System.err.println(<span class=\"string\">&quot;连接失败!&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;).sync();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Reactor-模型\"><a href=\"#Reactor-模型\" class=\"headerlink\" title=\"Reactor 模型\"></a>Reactor 模型</h2><p>Client<br>Acceptor 负责监听客户端的连接<br>Reactor<br>Selector<br>Dispatcher</p>\n<h2 id=\"TCP-粘包-拆包\"><a href=\"#TCP-粘包-拆包\" class=\"headerlink\" title=\"TCP 粘包&#x2F;拆包\"></a>TCP 粘包&#x2F;拆包</h2><h3 id=\"what\"><a href=\"#what\" class=\"headerlink\" title=\"what\"></a>what</h3><p>TCP 粘包&#x2F;拆包 就是你基于 TCP 发送数据的时候，出现了多个字符串“粘”在了一起或者一个字符串被“拆”开的问题</p>\n<h3 id=\"how\"><a href=\"#how\" class=\"headerlink\" title=\"how\"></a>how</h3><p>使用 Netty 自带的解码器</p>\n<ol>\n<li>LineBasedFrameDecoder : 发送端发送数据包的时候，每个数据包之间以换行符作为分隔  </li>\n<li>DelimiterBasedFrameDecoder : 可以自定义分隔符解码器  </li>\n<li>FixedLengthFrameDecoder: 固定长度解码器，它能够按照指定的长度对消息进行相应的拆包</li>\n</ol>\n<p>自定义序列化编解码器在 Java 中自带的有实现 Serializable 接口来实现序列化，但由于它性能、安全性等原因一般情况下是不会被使用到的。<br>通常情况下，我们使用 Protostuff、Hessian2、json 序列方式比较多</p>\n"},{"title":"PL/SQL 函数","date":"2023-04-26T05:04:12.000Z","_content":"# 掌握函数的创建、修改及删除\n\n## 函数创建的语法格式：\n\nCreate [or replace] function <function_name>\n(<参数1> [方式1]<数据类型1>,<参数2> [方式2]<数据类型2>…)\nReturn<数据类型> is|as\nPl/sql程序体 \n\n――其中必须有一个return语句\n\n注：通常函数只有in类型的参数\n\n例1：\n```sql\nSET SERVEROUTPUT ON FORMAT WRAPPED\n\nCREATE OR REPLACE FUNCTION DEPT_NUM (\n  IN_DEPT IN SCOTT.EMP.DEPTNO%TYPE\n) RETURN NUMBER AS\n  OUT_NUM NUMBER;\nBEGIN\n  SELECT\n    COUNT(*) INTO OUT_NUM\n  FROM\n    SCOTT.EMP\n  WHERE\n    SCOTT.EMP.DEPTNO=IN_DEPT;\n  RETURN(OUT_NUM);\nEND DEPT_NUM;\n```\n\n## 函数的调用\n\n```sql\nDECLARE\n  DEPTNUM NUMBER;\nBEGIN\n  DEPTNUM:=DEPT_NUM(20);\n  DBMS_OUTPUT.PUT_LINE('THE NUMBER OF DEPT 20 IS '\n    ||TO_CHAR(DEPTNUM));\nEND;\n```\n\n## 函数的删除:\n\n同存储过程\n\n```sql\nDROP FUNCTION DEPT_NUM;\n```","source":"_posts/ORACLE-PLSQL-函数.md","raw":"---\ntitle: PL/SQL 函数\ndate: 2023-04-26 13:04:12\ntags: \n- Database\n- Oracle\n- PL/SQL\n---\n# 掌握函数的创建、修改及删除\n\n## 函数创建的语法格式：\n\nCreate [or replace] function <function_name>\n(<参数1> [方式1]<数据类型1>,<参数2> [方式2]<数据类型2>…)\nReturn<数据类型> is|as\nPl/sql程序体 \n\n――其中必须有一个return语句\n\n注：通常函数只有in类型的参数\n\n例1：\n```sql\nSET SERVEROUTPUT ON FORMAT WRAPPED\n\nCREATE OR REPLACE FUNCTION DEPT_NUM (\n  IN_DEPT IN SCOTT.EMP.DEPTNO%TYPE\n) RETURN NUMBER AS\n  OUT_NUM NUMBER;\nBEGIN\n  SELECT\n    COUNT(*) INTO OUT_NUM\n  FROM\n    SCOTT.EMP\n  WHERE\n    SCOTT.EMP.DEPTNO=IN_DEPT;\n  RETURN(OUT_NUM);\nEND DEPT_NUM;\n```\n\n## 函数的调用\n\n```sql\nDECLARE\n  DEPTNUM NUMBER;\nBEGIN\n  DEPTNUM:=DEPT_NUM(20);\n  DBMS_OUTPUT.PUT_LINE('THE NUMBER OF DEPT 20 IS '\n    ||TO_CHAR(DEPTNUM));\nEND;\n```\n\n## 函数的删除:\n\n同存储过程\n\n```sql\nDROP FUNCTION DEPT_NUM;\n```","slug":"ORACLE-PLSQL-函数","published":1,"updated":"2023-06-23T01:04:52.138Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5up002nlv9e9oxs3f53","content":"<h1 id=\"掌握函数的创建、修改及删除\"><a href=\"#掌握函数的创建、修改及删除\" class=\"headerlink\" title=\"掌握函数的创建、修改及删除\"></a>掌握函数的创建、修改及删除</h1><h2 id=\"函数创建的语法格式：\"><a href=\"#函数创建的语法格式：\" class=\"headerlink\" title=\"函数创建的语法格式：\"></a>函数创建的语法格式：</h2><p>Create [or replace] function <function_name><br>(&lt;参数1&gt; [方式1]&lt;数据类型1&gt;,&lt;参数2&gt; [方式2]&lt;数据类型2&gt;…)<br>Return&lt;数据类型&gt; is|as<br>Pl&#x2F;sql程序体 </p>\n<p>――其中必须有一个return语句</p>\n<p>注：通常函数只有in类型的参数</p>\n<p>例1：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SET</span> SERVEROUTPUT <span class=\"keyword\">ON</span> FORMAT WRAPPED</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">OR</span> REPLACE <span class=\"keyword\">FUNCTION</span> DEPT_NUM (</span><br><span class=\"line\">  IN_DEPT <span class=\"keyword\">IN</span> SCOTT.EMP.DEPTNO<span class=\"operator\">%</span>TYPE</span><br><span class=\"line\">) <span class=\"keyword\">RETURN</span> NUMBER <span class=\"keyword\">AS</span></span><br><span class=\"line\">  OUT_NUM NUMBER;</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">    <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">INTO</span> OUT_NUM</span><br><span class=\"line\">  <span class=\"keyword\">FROM</span></span><br><span class=\"line\">    SCOTT.EMP</span><br><span class=\"line\">  <span class=\"keyword\">WHERE</span></span><br><span class=\"line\">    SCOTT.EMP.DEPTNO<span class=\"operator\">=</span>IN_DEPT;</span><br><span class=\"line\">  <span class=\"keyword\">RETURN</span>(OUT_NUM);</span><br><span class=\"line\"><span class=\"keyword\">END</span> DEPT_NUM;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数的调用\"><a href=\"#函数的调用\" class=\"headerlink\" title=\"函数的调用\"></a>函数的调用</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DECLARE</span></span><br><span class=\"line\">  DEPTNUM NUMBER;</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  DEPTNUM:<span class=\"operator\">=</span>DEPT_NUM(<span class=\"number\">20</span>);</span><br><span class=\"line\">  DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;THE NUMBER OF DEPT 20 IS &#x27;</span></span><br><span class=\"line\">    <span class=\"operator\">||</span>TO_CHAR(DEPTNUM));</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数的删除\"><a href=\"#函数的删除\" class=\"headerlink\" title=\"函数的删除:\"></a>函数的删除:</h2><p>同存储过程</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">FUNCTION</span> DEPT_NUM;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"cover":false,"excerpt":"","more":"<h1 id=\"掌握函数的创建、修改及删除\"><a href=\"#掌握函数的创建、修改及删除\" class=\"headerlink\" title=\"掌握函数的创建、修改及删除\"></a>掌握函数的创建、修改及删除</h1><h2 id=\"函数创建的语法格式：\"><a href=\"#函数创建的语法格式：\" class=\"headerlink\" title=\"函数创建的语法格式：\"></a>函数创建的语法格式：</h2><p>Create [or replace] function <function_name><br>(&lt;参数1&gt; [方式1]&lt;数据类型1&gt;,&lt;参数2&gt; [方式2]&lt;数据类型2&gt;…)<br>Return&lt;数据类型&gt; is|as<br>Pl&#x2F;sql程序体 </p>\n<p>――其中必须有一个return语句</p>\n<p>注：通常函数只有in类型的参数</p>\n<p>例1：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SET</span> SERVEROUTPUT <span class=\"keyword\">ON</span> FORMAT WRAPPED</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">OR</span> REPLACE <span class=\"keyword\">FUNCTION</span> DEPT_NUM (</span><br><span class=\"line\">  IN_DEPT <span class=\"keyword\">IN</span> SCOTT.EMP.DEPTNO<span class=\"operator\">%</span>TYPE</span><br><span class=\"line\">) <span class=\"keyword\">RETURN</span> NUMBER <span class=\"keyword\">AS</span></span><br><span class=\"line\">  OUT_NUM NUMBER;</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">    <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">INTO</span> OUT_NUM</span><br><span class=\"line\">  <span class=\"keyword\">FROM</span></span><br><span class=\"line\">    SCOTT.EMP</span><br><span class=\"line\">  <span class=\"keyword\">WHERE</span></span><br><span class=\"line\">    SCOTT.EMP.DEPTNO<span class=\"operator\">=</span>IN_DEPT;</span><br><span class=\"line\">  <span class=\"keyword\">RETURN</span>(OUT_NUM);</span><br><span class=\"line\"><span class=\"keyword\">END</span> DEPT_NUM;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数的调用\"><a href=\"#函数的调用\" class=\"headerlink\" title=\"函数的调用\"></a>函数的调用</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DECLARE</span></span><br><span class=\"line\">  DEPTNUM NUMBER;</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  DEPTNUM:<span class=\"operator\">=</span>DEPT_NUM(<span class=\"number\">20</span>);</span><br><span class=\"line\">  DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;THE NUMBER OF DEPT 20 IS &#x27;</span></span><br><span class=\"line\">    <span class=\"operator\">||</span>TO_CHAR(DEPTNUM));</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数的删除\"><a href=\"#函数的删除\" class=\"headerlink\" title=\"函数的删除:\"></a>函数的删除:</h2><p>同存储过程</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">FUNCTION</span> DEPT_NUM;</span><br></pre></td></tr></table></figure>"},{"title":"PL/SQL 包","date":"2023-05-01T05:04:12.000Z","_content":"\n## 包的创建及使用\n\n包类似于面向对象中的类，是数据库中的一个实体，其中包含一系列公共常量、变量、数据类型、游标、过程以及函数的定义。\n\n## 创建包\n\n包由包的描述部分和包体两部分组成，包描述部分相当于一个包头，他对包的所有部件进行一个简单的声明，这些部件可以被外界应用程序访问，包描述部分格式如下：\n```sql\nCREATE PACKAGE <包名> IS\n  变量、常量及数据类型的定义； 游标定义头部； 函数、过程的说明；\nEND<包名>； \n```\n\n### 包头部分：\n\n```sql\nCREATE PACKAGE MY_PACKAGE IS DEPT_NUM NUMBER;\n --Cursor manager_cur;\n FUNCTION F_DEPT_NUM(\n  IN_DEPTNO IN SCOTT.EMP.DEPTNO%TYPE\n) RETURN NUMBER;\nPROCEDURE P_DEPT_NUM(\n  IN_DEPTNO IN SCOTT.EMP.DEPTNO%TYPE,\n  OUT_NUM OUT NUMBER\n);\nEND MY_PACKAGE;\n```\n\n### 包体部分：\n\n包体部分是包的描述部分中游标、函数及过程的定义，格式如下：\n\n```sql\nCreate package body<包名>\nAs\n游标、函数、过程的具体意义；\nEnd<包名>；\n```\n\n包体部分：\n\n```sql\nCREATE OR REPLACE PACKAGE BODY MY_PACKAGE AS\n  FUNCTION F_DEPT_NUM(\n    IN_DEPTNO IN SCOTT.EMP.DEPTNO%TYPE\n  ) RETURN NUMBER AS\n    OUT_NUM NUMBER;\n  BEGIN\n    SELECT\n      COUNT(*) INTO OUT_NUM\n    FROM\n      SCOTT.EMP\n    WHERE\n      DEPTNO=IN_DEPTNO;\n    RETURN OUT_NUM;\n  END F_DEPT_NUM;\n  PROCEDURE P_DEPT_NUM(\n    IN_DEPTNO IN SCOTT.EMP.DEPTNO%TYPE,\n    OUT_NUM OUT NUMBER\n  ) AS\n  BEGIN\n    SELECT\n      COUNT(*) INTO OUT_NUM\n    FROM\n      SCOTT.EMP\n    WHERE\n      DEPTNO=IN_DEPTNO;\n  END P_DEPT_NUM;\nEND MY_PACKAGE;\n```\n\n## 调用包\n\n包调用的方式为：\n包名.变量名\n包名.游标名\n包名.函数名（过程名）\n一旦包创建之后，便可以随时调用其中的内容。\n\n```sql\nSET SERVEROUTPUT ON FORMAT WRAPPED\n\nDECLARE\n  NUM NUMBER;\nBEGIN\n  NUM:=MY_PACKAGE.F_DEPT_NUM(20);\n  DBMS_OUTPUT.PUT_LINE('THE NUM OF DEPT 20 IS '\n    || TO_CHAR(NUM));\n  MY_PACKAGE.P_DEPT_NUM(10, NUM);\n  DBMS_OUTPUT.PUT_LINE('THE NUM OF DEPT 10 IS '\n    ||TO_CHAR(NUM));\nEND;\n```\n\n## 包中游标的使用\n\n### 首先定义一个包头，存放游标变量类型\n\n```sql\nCREATE OR REPLACE PACKAGE SELECT_TABLE IS\n  TYPE MANAGER_RCD IS\n    RECORD (ENAME SCOTT.EMP.ENAME%TYPE, SAL SCOTT.EMP.SAL%TYPE, EDEPT SCOTT.EMP.DEPTNO%TYPE ); -- 定义一个记录类型\n  TYPE T_MANAGERREF IS\n    REF CURSOR RETURN MANAGER_RCD; --定义一个游标变量类型\nEND SELECT_TABLE; --定义一个包用来存放自定义的类型\n```\n\n例2：创建一个完整的包 :包头和包体 \n\n### 包头 \n\n```sql\nCREATE OR REPLACE PACKAGE \n  TEST_PACKAGE IS\n    FUNCTION AVGSAL(\n      IN_DEPTNO IN NUMBER\n    ) RETURN NUMBER; --声明函数\n  PROCEDURE MANAGER_INF(\n    MANAGER_CUR OUT SELECT_TABLE.T_MANAGERREF\n  ); --声明过程\nEND TEST_PACKAGE;\n```\n\n### 包体\n\n```sql\nCREATE OR REPLACE PACKAGE BODY TEST_PACKAGE IS\n  FUNCTION AVGSAL(\n    IN_DEPTNO IN NUMBER\n  ) RETURN NUMBER AS\n    AVG_SAL NUMBER;\n  BEGIN\n    SELECT\n      AVG(SAL) INTO AVG_SAL\n    FROM\n      SCOTT.EMP\n    WHERE\n      DEPTNO=IN_DEPTNO;\n    RETURN AVG_SAL;\n  END AVGSAL; --定义函数\n  PROCEDURE MANAGER_INF(\n    MANAGER_CUR OUT SELECT_TABLE.T_MANAGERREF\n  ) AS --过程manager_inf带有一个out类型的参数manager_cur，该参数是一个类型为select_table.t_managerref的游标变量\n  BEGIN\n    OPEN MANAGER_CUR FOR\n      SELECT\n        ENAME,\n        SAL,\n        DEPTNO\n      FROM\n        SCOTT.EMP\n      WHERE\n        LOWER(JOB)='MANAGER'; --打开游标变量\n  END MANAGER_INF;\nEND TEST_PACKAGE;\n```\n### 调用包\n\n```sql\nDECLARE\n  AVGNUM     NUMBER;\n  MAN_CUR    SELECT_TABLE.T_MANAGERREF;\n  EMP_NAME   SCOTT.EMP.ENAME%TYPE;\n  EMP_SAL    SCOTT.EMP.SAL%TYPE;\n  EMP_DEPTNO SCOTT.EMP.DEPTNO%TYPE;\nBEGIN\n  AVGNUM:= TEST_PACKAGE.AVGSAL(30); --调用包test_package的avgsal函数\n  DBMS_OUTPUT.PUT_LINE('AVGSAL IS '\n    ||TO_CHAR(AVGNUM));\n  TEST_PACKAGE.MANAGER_INF(MAN_CUR);\n --调用包test_package的manager_inf过程，游标变量Man_cur接受来自过程manager_inf的out参数manager_cur的值\n  FETCH MAN_CUR INTO EMP_NAME, EMP_SAL, EMP_DEPTNO;\n  DBMS_OUTPUT.PUT_LINE(' '\n    || EMP_NAME\n    ||' '\n    || TO_CHAR(EMP_SAL)\n    ||' '\n    || TO_CHAR(EMP_DEPTNO));\n  LOOP\n    EXIT WHEN NOT MAN_CUR%FOUND;\n    FETCH MAN_CUR INTO EMP_NAME, EMP_SAL, EMP_DEPTNO;\n    DBMS_OUTPUT.PUT_LINE(' '\n      || EMP_NAME\n      ||' '\n      || TO_CHAR(EMP_SAL)\n      ||' '\n      || TO_CHAR(EMP_DEPTNO));\n  END LOOP;\nEND;\n```","source":"_posts/ORACLE-PLSQL-包.md","raw":"---\ntitle: PL/SQL 包\ndate: 2023-05-1 13:04:12\ntags: \n- Database\n- Oracle\n- PL/SQL\n---\n\n## 包的创建及使用\n\n包类似于面向对象中的类，是数据库中的一个实体，其中包含一系列公共常量、变量、数据类型、游标、过程以及函数的定义。\n\n## 创建包\n\n包由包的描述部分和包体两部分组成，包描述部分相当于一个包头，他对包的所有部件进行一个简单的声明，这些部件可以被外界应用程序访问，包描述部分格式如下：\n```sql\nCREATE PACKAGE <包名> IS\n  变量、常量及数据类型的定义； 游标定义头部； 函数、过程的说明；\nEND<包名>； \n```\n\n### 包头部分：\n\n```sql\nCREATE PACKAGE MY_PACKAGE IS DEPT_NUM NUMBER;\n --Cursor manager_cur;\n FUNCTION F_DEPT_NUM(\n  IN_DEPTNO IN SCOTT.EMP.DEPTNO%TYPE\n) RETURN NUMBER;\nPROCEDURE P_DEPT_NUM(\n  IN_DEPTNO IN SCOTT.EMP.DEPTNO%TYPE,\n  OUT_NUM OUT NUMBER\n);\nEND MY_PACKAGE;\n```\n\n### 包体部分：\n\n包体部分是包的描述部分中游标、函数及过程的定义，格式如下：\n\n```sql\nCreate package body<包名>\nAs\n游标、函数、过程的具体意义；\nEnd<包名>；\n```\n\n包体部分：\n\n```sql\nCREATE OR REPLACE PACKAGE BODY MY_PACKAGE AS\n  FUNCTION F_DEPT_NUM(\n    IN_DEPTNO IN SCOTT.EMP.DEPTNO%TYPE\n  ) RETURN NUMBER AS\n    OUT_NUM NUMBER;\n  BEGIN\n    SELECT\n      COUNT(*) INTO OUT_NUM\n    FROM\n      SCOTT.EMP\n    WHERE\n      DEPTNO=IN_DEPTNO;\n    RETURN OUT_NUM;\n  END F_DEPT_NUM;\n  PROCEDURE P_DEPT_NUM(\n    IN_DEPTNO IN SCOTT.EMP.DEPTNO%TYPE,\n    OUT_NUM OUT NUMBER\n  ) AS\n  BEGIN\n    SELECT\n      COUNT(*) INTO OUT_NUM\n    FROM\n      SCOTT.EMP\n    WHERE\n      DEPTNO=IN_DEPTNO;\n  END P_DEPT_NUM;\nEND MY_PACKAGE;\n```\n\n## 调用包\n\n包调用的方式为：\n包名.变量名\n包名.游标名\n包名.函数名（过程名）\n一旦包创建之后，便可以随时调用其中的内容。\n\n```sql\nSET SERVEROUTPUT ON FORMAT WRAPPED\n\nDECLARE\n  NUM NUMBER;\nBEGIN\n  NUM:=MY_PACKAGE.F_DEPT_NUM(20);\n  DBMS_OUTPUT.PUT_LINE('THE NUM OF DEPT 20 IS '\n    || TO_CHAR(NUM));\n  MY_PACKAGE.P_DEPT_NUM(10, NUM);\n  DBMS_OUTPUT.PUT_LINE('THE NUM OF DEPT 10 IS '\n    ||TO_CHAR(NUM));\nEND;\n```\n\n## 包中游标的使用\n\n### 首先定义一个包头，存放游标变量类型\n\n```sql\nCREATE OR REPLACE PACKAGE SELECT_TABLE IS\n  TYPE MANAGER_RCD IS\n    RECORD (ENAME SCOTT.EMP.ENAME%TYPE, SAL SCOTT.EMP.SAL%TYPE, EDEPT SCOTT.EMP.DEPTNO%TYPE ); -- 定义一个记录类型\n  TYPE T_MANAGERREF IS\n    REF CURSOR RETURN MANAGER_RCD; --定义一个游标变量类型\nEND SELECT_TABLE; --定义一个包用来存放自定义的类型\n```\n\n例2：创建一个完整的包 :包头和包体 \n\n### 包头 \n\n```sql\nCREATE OR REPLACE PACKAGE \n  TEST_PACKAGE IS\n    FUNCTION AVGSAL(\n      IN_DEPTNO IN NUMBER\n    ) RETURN NUMBER; --声明函数\n  PROCEDURE MANAGER_INF(\n    MANAGER_CUR OUT SELECT_TABLE.T_MANAGERREF\n  ); --声明过程\nEND TEST_PACKAGE;\n```\n\n### 包体\n\n```sql\nCREATE OR REPLACE PACKAGE BODY TEST_PACKAGE IS\n  FUNCTION AVGSAL(\n    IN_DEPTNO IN NUMBER\n  ) RETURN NUMBER AS\n    AVG_SAL NUMBER;\n  BEGIN\n    SELECT\n      AVG(SAL) INTO AVG_SAL\n    FROM\n      SCOTT.EMP\n    WHERE\n      DEPTNO=IN_DEPTNO;\n    RETURN AVG_SAL;\n  END AVGSAL; --定义函数\n  PROCEDURE MANAGER_INF(\n    MANAGER_CUR OUT SELECT_TABLE.T_MANAGERREF\n  ) AS --过程manager_inf带有一个out类型的参数manager_cur，该参数是一个类型为select_table.t_managerref的游标变量\n  BEGIN\n    OPEN MANAGER_CUR FOR\n      SELECT\n        ENAME,\n        SAL,\n        DEPTNO\n      FROM\n        SCOTT.EMP\n      WHERE\n        LOWER(JOB)='MANAGER'; --打开游标变量\n  END MANAGER_INF;\nEND TEST_PACKAGE;\n```\n### 调用包\n\n```sql\nDECLARE\n  AVGNUM     NUMBER;\n  MAN_CUR    SELECT_TABLE.T_MANAGERREF;\n  EMP_NAME   SCOTT.EMP.ENAME%TYPE;\n  EMP_SAL    SCOTT.EMP.SAL%TYPE;\n  EMP_DEPTNO SCOTT.EMP.DEPTNO%TYPE;\nBEGIN\n  AVGNUM:= TEST_PACKAGE.AVGSAL(30); --调用包test_package的avgsal函数\n  DBMS_OUTPUT.PUT_LINE('AVGSAL IS '\n    ||TO_CHAR(AVGNUM));\n  TEST_PACKAGE.MANAGER_INF(MAN_CUR);\n --调用包test_package的manager_inf过程，游标变量Man_cur接受来自过程manager_inf的out参数manager_cur的值\n  FETCH MAN_CUR INTO EMP_NAME, EMP_SAL, EMP_DEPTNO;\n  DBMS_OUTPUT.PUT_LINE(' '\n    || EMP_NAME\n    ||' '\n    || TO_CHAR(EMP_SAL)\n    ||' '\n    || TO_CHAR(EMP_DEPTNO));\n  LOOP\n    EXIT WHEN NOT MAN_CUR%FOUND;\n    FETCH MAN_CUR INTO EMP_NAME, EMP_SAL, EMP_DEPTNO;\n    DBMS_OUTPUT.PUT_LINE(' '\n      || EMP_NAME\n      ||' '\n      || TO_CHAR(EMP_SAL)\n      ||' '\n      || TO_CHAR(EMP_DEPTNO));\n  END LOOP;\nEND;\n```","slug":"ORACLE-PLSQL-包","published":1,"updated":"2023-06-23T01:05:06.529Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5up002plv9e0x335t9b","content":"<h2 id=\"包的创建及使用\"><a href=\"#包的创建及使用\" class=\"headerlink\" title=\"包的创建及使用\"></a>包的创建及使用</h2><p>包类似于面向对象中的类，是数据库中的一个实体，其中包含一系列公共常量、变量、数据类型、游标、过程以及函数的定义。</p>\n<h2 id=\"创建包\"><a href=\"#创建包\" class=\"headerlink\" title=\"创建包\"></a>创建包</h2><p>包由包的描述部分和包体两部分组成，包描述部分相当于一个包头，他对包的所有部件进行一个简单的声明，这些部件可以被外界应用程序访问，包描述部分格式如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> PACKAGE <span class=\"operator\">&lt;</span>包名<span class=\"operator\">&gt;</span> <span class=\"keyword\">IS</span></span><br><span class=\"line\">  变量、常量及数据类型的定义； 游标定义头部； 函数、过程的说明；</span><br><span class=\"line\"><span class=\"keyword\">END</span><span class=\"operator\">&lt;</span>包名<span class=\"operator\">&gt;</span>； </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"包头部分：\"><a href=\"#包头部分：\" class=\"headerlink\" title=\"包头部分：\"></a>包头部分：</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> PACKAGE MY_PACKAGE <span class=\"keyword\">IS</span> DEPT_NUM NUMBER;</span><br><span class=\"line\"> <span class=\"comment\">--Cursor manager_cur;</span></span><br><span class=\"line\"> <span class=\"keyword\">FUNCTION</span> F_DEPT_NUM(</span><br><span class=\"line\">  IN_DEPTNO <span class=\"keyword\">IN</span> SCOTT.EMP.DEPTNO<span class=\"operator\">%</span>TYPE</span><br><span class=\"line\">) <span class=\"keyword\">RETURN</span> NUMBER;</span><br><span class=\"line\"><span class=\"keyword\">PROCEDURE</span> P_DEPT_NUM(</span><br><span class=\"line\">  IN_DEPTNO <span class=\"keyword\">IN</span> SCOTT.EMP.DEPTNO<span class=\"operator\">%</span>TYPE,</span><br><span class=\"line\">  OUT_NUM <span class=\"keyword\">OUT</span> NUMBER</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">END</span> MY_PACKAGE;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"包体部分：\"><a href=\"#包体部分：\" class=\"headerlink\" title=\"包体部分：\"></a>包体部分：</h3><p>包体部分是包的描述部分中游标、函数及过程的定义，格式如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Create</span> package body<span class=\"operator\">&lt;</span>包名<span class=\"operator\">&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">As</span></span><br><span class=\"line\">游标、函数、过程的具体意义；</span><br><span class=\"line\"><span class=\"keyword\">End</span><span class=\"operator\">&lt;</span>包名<span class=\"operator\">&gt;</span>；</span><br></pre></td></tr></table></figure>\n\n<p>包体部分：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">OR</span> REPLACE PACKAGE BODY MY_PACKAGE <span class=\"keyword\">AS</span></span><br><span class=\"line\">  <span class=\"keyword\">FUNCTION</span> F_DEPT_NUM(</span><br><span class=\"line\">    IN_DEPTNO <span class=\"keyword\">IN</span> SCOTT.EMP.DEPTNO<span class=\"operator\">%</span>TYPE</span><br><span class=\"line\">  ) <span class=\"keyword\">RETURN</span> NUMBER <span class=\"keyword\">AS</span></span><br><span class=\"line\">    OUT_NUM NUMBER;</span><br><span class=\"line\">  <span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">      <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">INTO</span> OUT_NUM</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span></span><br><span class=\"line\">      SCOTT.EMP</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span></span><br><span class=\"line\">      DEPTNO<span class=\"operator\">=</span>IN_DEPTNO;</span><br><span class=\"line\">    <span class=\"keyword\">RETURN</span> OUT_NUM;</span><br><span class=\"line\">  <span class=\"keyword\">END</span> F_DEPT_NUM;</span><br><span class=\"line\">  <span class=\"keyword\">PROCEDURE</span> P_DEPT_NUM(</span><br><span class=\"line\">    IN_DEPTNO <span class=\"keyword\">IN</span> SCOTT.EMP.DEPTNO<span class=\"operator\">%</span>TYPE,</span><br><span class=\"line\">    OUT_NUM <span class=\"keyword\">OUT</span> NUMBER</span><br><span class=\"line\">  ) <span class=\"keyword\">AS</span></span><br><span class=\"line\">  <span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">      <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">INTO</span> OUT_NUM</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span></span><br><span class=\"line\">      SCOTT.EMP</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span></span><br><span class=\"line\">      DEPTNO<span class=\"operator\">=</span>IN_DEPTNO;</span><br><span class=\"line\">  <span class=\"keyword\">END</span> P_DEPT_NUM;</span><br><span class=\"line\"><span class=\"keyword\">END</span> MY_PACKAGE;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"调用包\"><a href=\"#调用包\" class=\"headerlink\" title=\"调用包\"></a>调用包</h2><p>包调用的方式为：<br>包名.变量名<br>包名.游标名<br>包名.函数名（过程名）<br>一旦包创建之后，便可以随时调用其中的内容。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SET</span> SERVEROUTPUT <span class=\"keyword\">ON</span> FORMAT WRAPPED</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DECLARE</span></span><br><span class=\"line\">  NUM NUMBER;</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  NUM:<span class=\"operator\">=</span>MY_PACKAGE.F_DEPT_NUM(<span class=\"number\">20</span>);</span><br><span class=\"line\">  DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;THE NUM OF DEPT 20 IS &#x27;</span></span><br><span class=\"line\">    <span class=\"operator\">||</span> TO_CHAR(NUM));</span><br><span class=\"line\">  MY_PACKAGE.P_DEPT_NUM(<span class=\"number\">10</span>, NUM);</span><br><span class=\"line\">  DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;THE NUM OF DEPT 10 IS &#x27;</span></span><br><span class=\"line\">    <span class=\"operator\">||</span>TO_CHAR(NUM));</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"包中游标的使用\"><a href=\"#包中游标的使用\" class=\"headerlink\" title=\"包中游标的使用\"></a>包中游标的使用</h2><h3 id=\"首先定义一个包头，存放游标变量类型\"><a href=\"#首先定义一个包头，存放游标变量类型\" class=\"headerlink\" title=\"首先定义一个包头，存放游标变量类型\"></a>首先定义一个包头，存放游标变量类型</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">OR</span> REPLACE PACKAGE SELECT_TABLE <span class=\"keyword\">IS</span></span><br><span class=\"line\">  TYPE MANAGER_RCD <span class=\"keyword\">IS</span></span><br><span class=\"line\">    RECORD (ENAME SCOTT.EMP.ENAME<span class=\"operator\">%</span>TYPE, SAL SCOTT.EMP.SAL<span class=\"operator\">%</span>TYPE, EDEPT SCOTT.EMP.DEPTNO<span class=\"operator\">%</span>TYPE ); <span class=\"comment\">-- 定义一个记录类型</span></span><br><span class=\"line\">  TYPE T_MANAGERREF <span class=\"keyword\">IS</span></span><br><span class=\"line\">    <span class=\"keyword\">REF</span> <span class=\"keyword\">CURSOR</span> <span class=\"keyword\">RETURN</span> MANAGER_RCD; <span class=\"comment\">--定义一个游标变量类型</span></span><br><span class=\"line\"><span class=\"keyword\">END</span> SELECT_TABLE; <span class=\"comment\">--定义一个包用来存放自定义的类型</span></span><br></pre></td></tr></table></figure>\n\n<p>例2：创建一个完整的包 :包头和包体 </p>\n<h3 id=\"包头\"><a href=\"#包头\" class=\"headerlink\" title=\"包头\"></a>包头</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">OR</span> REPLACE PACKAGE </span><br><span class=\"line\">  TEST_PACKAGE <span class=\"keyword\">IS</span></span><br><span class=\"line\">    <span class=\"keyword\">FUNCTION</span> AVGSAL(</span><br><span class=\"line\">      IN_DEPTNO <span class=\"keyword\">IN</span> NUMBER</span><br><span class=\"line\">    ) <span class=\"keyword\">RETURN</span> NUMBER; <span class=\"comment\">--声明函数</span></span><br><span class=\"line\">  <span class=\"keyword\">PROCEDURE</span> MANAGER_INF(</span><br><span class=\"line\">    MANAGER_CUR <span class=\"keyword\">OUT</span> SELECT_TABLE.T_MANAGERREF</span><br><span class=\"line\">  ); <span class=\"comment\">--声明过程</span></span><br><span class=\"line\"><span class=\"keyword\">END</span> TEST_PACKAGE;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"包体\"><a href=\"#包体\" class=\"headerlink\" title=\"包体\"></a>包体</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">OR</span> REPLACE PACKAGE BODY TEST_PACKAGE <span class=\"keyword\">IS</span></span><br><span class=\"line\">  <span class=\"keyword\">FUNCTION</span> AVGSAL(</span><br><span class=\"line\">    IN_DEPTNO <span class=\"keyword\">IN</span> NUMBER</span><br><span class=\"line\">  ) <span class=\"keyword\">RETURN</span> NUMBER <span class=\"keyword\">AS</span></span><br><span class=\"line\">    AVG_SAL NUMBER;</span><br><span class=\"line\">  <span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">      <span class=\"built_in\">AVG</span>(SAL) <span class=\"keyword\">INTO</span> AVG_SAL</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span></span><br><span class=\"line\">      SCOTT.EMP</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span></span><br><span class=\"line\">      DEPTNO<span class=\"operator\">=</span>IN_DEPTNO;</span><br><span class=\"line\">    <span class=\"keyword\">RETURN</span> AVG_SAL;</span><br><span class=\"line\">  <span class=\"keyword\">END</span> AVGSAL; <span class=\"comment\">--定义函数</span></span><br><span class=\"line\">  <span class=\"keyword\">PROCEDURE</span> MANAGER_INF(</span><br><span class=\"line\">    MANAGER_CUR <span class=\"keyword\">OUT</span> SELECT_TABLE.T_MANAGERREF</span><br><span class=\"line\">  ) <span class=\"keyword\">AS</span> <span class=\"comment\">--过程manager_inf带有一个out类型的参数manager_cur，该参数是一个类型为select_table.t_managerref的游标变量</span></span><br><span class=\"line\">  <span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">    <span class=\"keyword\">OPEN</span> MANAGER_CUR <span class=\"keyword\">FOR</span></span><br><span class=\"line\">      <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">        ENAME,</span><br><span class=\"line\">        SAL,</span><br><span class=\"line\">        DEPTNO</span><br><span class=\"line\">      <span class=\"keyword\">FROM</span></span><br><span class=\"line\">        SCOTT.EMP</span><br><span class=\"line\">      <span class=\"keyword\">WHERE</span></span><br><span class=\"line\">        <span class=\"built_in\">LOWER</span>(JOB)<span class=\"operator\">=</span><span class=\"string\">&#x27;MANAGER&#x27;</span>; <span class=\"comment\">--打开游标变量</span></span><br><span class=\"line\">  <span class=\"keyword\">END</span> MANAGER_INF;</span><br><span class=\"line\"><span class=\"keyword\">END</span> TEST_PACKAGE;</span><br></pre></td></tr></table></figure>\n<h3 id=\"调用包-1\"><a href=\"#调用包-1\" class=\"headerlink\" title=\"调用包\"></a>调用包</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DECLARE</span></span><br><span class=\"line\">  AVGNUM     NUMBER;</span><br><span class=\"line\">  MAN_CUR    SELECT_TABLE.T_MANAGERREF;</span><br><span class=\"line\">  EMP_NAME   SCOTT.EMP.ENAME<span class=\"operator\">%</span>TYPE;</span><br><span class=\"line\">  EMP_SAL    SCOTT.EMP.SAL<span class=\"operator\">%</span>TYPE;</span><br><span class=\"line\">  EMP_DEPTNO SCOTT.EMP.DEPTNO<span class=\"operator\">%</span>TYPE;</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  AVGNUM:<span class=\"operator\">=</span> TEST_PACKAGE.AVGSAL(<span class=\"number\">30</span>); <span class=\"comment\">--调用包test_package的avgsal函数</span></span><br><span class=\"line\">  DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;AVGSAL IS &#x27;</span></span><br><span class=\"line\">    <span class=\"operator\">||</span>TO_CHAR(AVGNUM));</span><br><span class=\"line\">  TEST_PACKAGE.MANAGER_INF(MAN_CUR);</span><br><span class=\"line\"> <span class=\"comment\">--调用包test_package的manager_inf过程，游标变量Man_cur接受来自过程manager_inf的out参数manager_cur的值</span></span><br><span class=\"line\">  <span class=\"keyword\">FETCH</span> MAN_CUR <span class=\"keyword\">INTO</span> EMP_NAME, EMP_SAL, EMP_DEPTNO;</span><br><span class=\"line\">  DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27; &#x27;</span></span><br><span class=\"line\">    <span class=\"operator\">||</span> EMP_NAME</span><br><span class=\"line\">    <span class=\"operator\">||</span><span class=\"string\">&#x27; &#x27;</span></span><br><span class=\"line\">    <span class=\"operator\">||</span> TO_CHAR(EMP_SAL)</span><br><span class=\"line\">    <span class=\"operator\">||</span><span class=\"string\">&#x27; &#x27;</span></span><br><span class=\"line\">    <span class=\"operator\">||</span> TO_CHAR(EMP_DEPTNO));</span><br><span class=\"line\">  LOOP</span><br><span class=\"line\">    EXIT <span class=\"keyword\">WHEN</span> <span class=\"keyword\">NOT</span> MAN_CUR<span class=\"operator\">%</span>FOUND;</span><br><span class=\"line\">    <span class=\"keyword\">FETCH</span> MAN_CUR <span class=\"keyword\">INTO</span> EMP_NAME, EMP_SAL, EMP_DEPTNO;</span><br><span class=\"line\">    DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27; &#x27;</span></span><br><span class=\"line\">      <span class=\"operator\">||</span> EMP_NAME</span><br><span class=\"line\">      <span class=\"operator\">||</span><span class=\"string\">&#x27; &#x27;</span></span><br><span class=\"line\">      <span class=\"operator\">||</span> TO_CHAR(EMP_SAL)</span><br><span class=\"line\">      <span class=\"operator\">||</span><span class=\"string\">&#x27; &#x27;</span></span><br><span class=\"line\">      <span class=\"operator\">||</span> TO_CHAR(EMP_DEPTNO));</span><br><span class=\"line\">  <span class=\"keyword\">END</span> LOOP;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"cover":false,"excerpt":"","more":"<h2 id=\"包的创建及使用\"><a href=\"#包的创建及使用\" class=\"headerlink\" title=\"包的创建及使用\"></a>包的创建及使用</h2><p>包类似于面向对象中的类，是数据库中的一个实体，其中包含一系列公共常量、变量、数据类型、游标、过程以及函数的定义。</p>\n<h2 id=\"创建包\"><a href=\"#创建包\" class=\"headerlink\" title=\"创建包\"></a>创建包</h2><p>包由包的描述部分和包体两部分组成，包描述部分相当于一个包头，他对包的所有部件进行一个简单的声明，这些部件可以被外界应用程序访问，包描述部分格式如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> PACKAGE <span class=\"operator\">&lt;</span>包名<span class=\"operator\">&gt;</span> <span class=\"keyword\">IS</span></span><br><span class=\"line\">  变量、常量及数据类型的定义； 游标定义头部； 函数、过程的说明；</span><br><span class=\"line\"><span class=\"keyword\">END</span><span class=\"operator\">&lt;</span>包名<span class=\"operator\">&gt;</span>； </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"包头部分：\"><a href=\"#包头部分：\" class=\"headerlink\" title=\"包头部分：\"></a>包头部分：</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> PACKAGE MY_PACKAGE <span class=\"keyword\">IS</span> DEPT_NUM NUMBER;</span><br><span class=\"line\"> <span class=\"comment\">--Cursor manager_cur;</span></span><br><span class=\"line\"> <span class=\"keyword\">FUNCTION</span> F_DEPT_NUM(</span><br><span class=\"line\">  IN_DEPTNO <span class=\"keyword\">IN</span> SCOTT.EMP.DEPTNO<span class=\"operator\">%</span>TYPE</span><br><span class=\"line\">) <span class=\"keyword\">RETURN</span> NUMBER;</span><br><span class=\"line\"><span class=\"keyword\">PROCEDURE</span> P_DEPT_NUM(</span><br><span class=\"line\">  IN_DEPTNO <span class=\"keyword\">IN</span> SCOTT.EMP.DEPTNO<span class=\"operator\">%</span>TYPE,</span><br><span class=\"line\">  OUT_NUM <span class=\"keyword\">OUT</span> NUMBER</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">END</span> MY_PACKAGE;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"包体部分：\"><a href=\"#包体部分：\" class=\"headerlink\" title=\"包体部分：\"></a>包体部分：</h3><p>包体部分是包的描述部分中游标、函数及过程的定义，格式如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Create</span> package body<span class=\"operator\">&lt;</span>包名<span class=\"operator\">&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">As</span></span><br><span class=\"line\">游标、函数、过程的具体意义；</span><br><span class=\"line\"><span class=\"keyword\">End</span><span class=\"operator\">&lt;</span>包名<span class=\"operator\">&gt;</span>；</span><br></pre></td></tr></table></figure>\n\n<p>包体部分：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">OR</span> REPLACE PACKAGE BODY MY_PACKAGE <span class=\"keyword\">AS</span></span><br><span class=\"line\">  <span class=\"keyword\">FUNCTION</span> F_DEPT_NUM(</span><br><span class=\"line\">    IN_DEPTNO <span class=\"keyword\">IN</span> SCOTT.EMP.DEPTNO<span class=\"operator\">%</span>TYPE</span><br><span class=\"line\">  ) <span class=\"keyword\">RETURN</span> NUMBER <span class=\"keyword\">AS</span></span><br><span class=\"line\">    OUT_NUM NUMBER;</span><br><span class=\"line\">  <span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">      <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">INTO</span> OUT_NUM</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span></span><br><span class=\"line\">      SCOTT.EMP</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span></span><br><span class=\"line\">      DEPTNO<span class=\"operator\">=</span>IN_DEPTNO;</span><br><span class=\"line\">    <span class=\"keyword\">RETURN</span> OUT_NUM;</span><br><span class=\"line\">  <span class=\"keyword\">END</span> F_DEPT_NUM;</span><br><span class=\"line\">  <span class=\"keyword\">PROCEDURE</span> P_DEPT_NUM(</span><br><span class=\"line\">    IN_DEPTNO <span class=\"keyword\">IN</span> SCOTT.EMP.DEPTNO<span class=\"operator\">%</span>TYPE,</span><br><span class=\"line\">    OUT_NUM <span class=\"keyword\">OUT</span> NUMBER</span><br><span class=\"line\">  ) <span class=\"keyword\">AS</span></span><br><span class=\"line\">  <span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">      <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">INTO</span> OUT_NUM</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span></span><br><span class=\"line\">      SCOTT.EMP</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span></span><br><span class=\"line\">      DEPTNO<span class=\"operator\">=</span>IN_DEPTNO;</span><br><span class=\"line\">  <span class=\"keyword\">END</span> P_DEPT_NUM;</span><br><span class=\"line\"><span class=\"keyword\">END</span> MY_PACKAGE;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"调用包\"><a href=\"#调用包\" class=\"headerlink\" title=\"调用包\"></a>调用包</h2><p>包调用的方式为：<br>包名.变量名<br>包名.游标名<br>包名.函数名（过程名）<br>一旦包创建之后，便可以随时调用其中的内容。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SET</span> SERVEROUTPUT <span class=\"keyword\">ON</span> FORMAT WRAPPED</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DECLARE</span></span><br><span class=\"line\">  NUM NUMBER;</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  NUM:<span class=\"operator\">=</span>MY_PACKAGE.F_DEPT_NUM(<span class=\"number\">20</span>);</span><br><span class=\"line\">  DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;THE NUM OF DEPT 20 IS &#x27;</span></span><br><span class=\"line\">    <span class=\"operator\">||</span> TO_CHAR(NUM));</span><br><span class=\"line\">  MY_PACKAGE.P_DEPT_NUM(<span class=\"number\">10</span>, NUM);</span><br><span class=\"line\">  DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;THE NUM OF DEPT 10 IS &#x27;</span></span><br><span class=\"line\">    <span class=\"operator\">||</span>TO_CHAR(NUM));</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"包中游标的使用\"><a href=\"#包中游标的使用\" class=\"headerlink\" title=\"包中游标的使用\"></a>包中游标的使用</h2><h3 id=\"首先定义一个包头，存放游标变量类型\"><a href=\"#首先定义一个包头，存放游标变量类型\" class=\"headerlink\" title=\"首先定义一个包头，存放游标变量类型\"></a>首先定义一个包头，存放游标变量类型</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">OR</span> REPLACE PACKAGE SELECT_TABLE <span class=\"keyword\">IS</span></span><br><span class=\"line\">  TYPE MANAGER_RCD <span class=\"keyword\">IS</span></span><br><span class=\"line\">    RECORD (ENAME SCOTT.EMP.ENAME<span class=\"operator\">%</span>TYPE, SAL SCOTT.EMP.SAL<span class=\"operator\">%</span>TYPE, EDEPT SCOTT.EMP.DEPTNO<span class=\"operator\">%</span>TYPE ); <span class=\"comment\">-- 定义一个记录类型</span></span><br><span class=\"line\">  TYPE T_MANAGERREF <span class=\"keyword\">IS</span></span><br><span class=\"line\">    <span class=\"keyword\">REF</span> <span class=\"keyword\">CURSOR</span> <span class=\"keyword\">RETURN</span> MANAGER_RCD; <span class=\"comment\">--定义一个游标变量类型</span></span><br><span class=\"line\"><span class=\"keyword\">END</span> SELECT_TABLE; <span class=\"comment\">--定义一个包用来存放自定义的类型</span></span><br></pre></td></tr></table></figure>\n\n<p>例2：创建一个完整的包 :包头和包体 </p>\n<h3 id=\"包头\"><a href=\"#包头\" class=\"headerlink\" title=\"包头\"></a>包头</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">OR</span> REPLACE PACKAGE </span><br><span class=\"line\">  TEST_PACKAGE <span class=\"keyword\">IS</span></span><br><span class=\"line\">    <span class=\"keyword\">FUNCTION</span> AVGSAL(</span><br><span class=\"line\">      IN_DEPTNO <span class=\"keyword\">IN</span> NUMBER</span><br><span class=\"line\">    ) <span class=\"keyword\">RETURN</span> NUMBER; <span class=\"comment\">--声明函数</span></span><br><span class=\"line\">  <span class=\"keyword\">PROCEDURE</span> MANAGER_INF(</span><br><span class=\"line\">    MANAGER_CUR <span class=\"keyword\">OUT</span> SELECT_TABLE.T_MANAGERREF</span><br><span class=\"line\">  ); <span class=\"comment\">--声明过程</span></span><br><span class=\"line\"><span class=\"keyword\">END</span> TEST_PACKAGE;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"包体\"><a href=\"#包体\" class=\"headerlink\" title=\"包体\"></a>包体</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">OR</span> REPLACE PACKAGE BODY TEST_PACKAGE <span class=\"keyword\">IS</span></span><br><span class=\"line\">  <span class=\"keyword\">FUNCTION</span> AVGSAL(</span><br><span class=\"line\">    IN_DEPTNO <span class=\"keyword\">IN</span> NUMBER</span><br><span class=\"line\">  ) <span class=\"keyword\">RETURN</span> NUMBER <span class=\"keyword\">AS</span></span><br><span class=\"line\">    AVG_SAL NUMBER;</span><br><span class=\"line\">  <span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">      <span class=\"built_in\">AVG</span>(SAL) <span class=\"keyword\">INTO</span> AVG_SAL</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span></span><br><span class=\"line\">      SCOTT.EMP</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span></span><br><span class=\"line\">      DEPTNO<span class=\"operator\">=</span>IN_DEPTNO;</span><br><span class=\"line\">    <span class=\"keyword\">RETURN</span> AVG_SAL;</span><br><span class=\"line\">  <span class=\"keyword\">END</span> AVGSAL; <span class=\"comment\">--定义函数</span></span><br><span class=\"line\">  <span class=\"keyword\">PROCEDURE</span> MANAGER_INF(</span><br><span class=\"line\">    MANAGER_CUR <span class=\"keyword\">OUT</span> SELECT_TABLE.T_MANAGERREF</span><br><span class=\"line\">  ) <span class=\"keyword\">AS</span> <span class=\"comment\">--过程manager_inf带有一个out类型的参数manager_cur，该参数是一个类型为select_table.t_managerref的游标变量</span></span><br><span class=\"line\">  <span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">    <span class=\"keyword\">OPEN</span> MANAGER_CUR <span class=\"keyword\">FOR</span></span><br><span class=\"line\">      <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">        ENAME,</span><br><span class=\"line\">        SAL,</span><br><span class=\"line\">        DEPTNO</span><br><span class=\"line\">      <span class=\"keyword\">FROM</span></span><br><span class=\"line\">        SCOTT.EMP</span><br><span class=\"line\">      <span class=\"keyword\">WHERE</span></span><br><span class=\"line\">        <span class=\"built_in\">LOWER</span>(JOB)<span class=\"operator\">=</span><span class=\"string\">&#x27;MANAGER&#x27;</span>; <span class=\"comment\">--打开游标变量</span></span><br><span class=\"line\">  <span class=\"keyword\">END</span> MANAGER_INF;</span><br><span class=\"line\"><span class=\"keyword\">END</span> TEST_PACKAGE;</span><br></pre></td></tr></table></figure>\n<h3 id=\"调用包-1\"><a href=\"#调用包-1\" class=\"headerlink\" title=\"调用包\"></a>调用包</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DECLARE</span></span><br><span class=\"line\">  AVGNUM     NUMBER;</span><br><span class=\"line\">  MAN_CUR    SELECT_TABLE.T_MANAGERREF;</span><br><span class=\"line\">  EMP_NAME   SCOTT.EMP.ENAME<span class=\"operator\">%</span>TYPE;</span><br><span class=\"line\">  EMP_SAL    SCOTT.EMP.SAL<span class=\"operator\">%</span>TYPE;</span><br><span class=\"line\">  EMP_DEPTNO SCOTT.EMP.DEPTNO<span class=\"operator\">%</span>TYPE;</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  AVGNUM:<span class=\"operator\">=</span> TEST_PACKAGE.AVGSAL(<span class=\"number\">30</span>); <span class=\"comment\">--调用包test_package的avgsal函数</span></span><br><span class=\"line\">  DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;AVGSAL IS &#x27;</span></span><br><span class=\"line\">    <span class=\"operator\">||</span>TO_CHAR(AVGNUM));</span><br><span class=\"line\">  TEST_PACKAGE.MANAGER_INF(MAN_CUR);</span><br><span class=\"line\"> <span class=\"comment\">--调用包test_package的manager_inf过程，游标变量Man_cur接受来自过程manager_inf的out参数manager_cur的值</span></span><br><span class=\"line\">  <span class=\"keyword\">FETCH</span> MAN_CUR <span class=\"keyword\">INTO</span> EMP_NAME, EMP_SAL, EMP_DEPTNO;</span><br><span class=\"line\">  DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27; &#x27;</span></span><br><span class=\"line\">    <span class=\"operator\">||</span> EMP_NAME</span><br><span class=\"line\">    <span class=\"operator\">||</span><span class=\"string\">&#x27; &#x27;</span></span><br><span class=\"line\">    <span class=\"operator\">||</span> TO_CHAR(EMP_SAL)</span><br><span class=\"line\">    <span class=\"operator\">||</span><span class=\"string\">&#x27; &#x27;</span></span><br><span class=\"line\">    <span class=\"operator\">||</span> TO_CHAR(EMP_DEPTNO));</span><br><span class=\"line\">  LOOP</span><br><span class=\"line\">    EXIT <span class=\"keyword\">WHEN</span> <span class=\"keyword\">NOT</span> MAN_CUR<span class=\"operator\">%</span>FOUND;</span><br><span class=\"line\">    <span class=\"keyword\">FETCH</span> MAN_CUR <span class=\"keyword\">INTO</span> EMP_NAME, EMP_SAL, EMP_DEPTNO;</span><br><span class=\"line\">    DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27; &#x27;</span></span><br><span class=\"line\">      <span class=\"operator\">||</span> EMP_NAME</span><br><span class=\"line\">      <span class=\"operator\">||</span><span class=\"string\">&#x27; &#x27;</span></span><br><span class=\"line\">      <span class=\"operator\">||</span> TO_CHAR(EMP_SAL)</span><br><span class=\"line\">      <span class=\"operator\">||</span><span class=\"string\">&#x27; &#x27;</span></span><br><span class=\"line\">      <span class=\"operator\">||</span> TO_CHAR(EMP_DEPTNO));</span><br><span class=\"line\">  <span class=\"keyword\">END</span> LOOP;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br></pre></td></tr></table></figure>"},{"title":"PL/SQL 基础","date":"2023-04-12T05:04:12.000Z","_content":"\n# PL/SQL 基础\n\n## PL/SQL的基本结构：\n\nPL/SQL是一种块结构语言，其块结构如下:\n\n```sql\n  DECLARE\n       ――声明部分:声明变量、常量、用户定义的数据类型以及游标\n       ――这一部分可选，不需要可不写\n  BEGIN\n       ――主程序体，在这可以加入各种合法的语句\n  EXCEPTION\n       ――异常处理程序，当程序中出现错误时执行这一部分\n       ――这一部分可选\n  END; ――主程序体结束，分号必不可少；\n\n   从上面的结构可以看出，PL/SQL块由三部分组成：声明部分、执行部分和异常处理部分，其中只有执行部分是必须的：\n  BEGIN\n    /*执行部分*/   \n  END;\n```\n\n```sql\nDECLARE\n    /*声明部分*/\n BEGIN\n    /*执行部分*/  \n END; \n```\n都是合法的。\n\n\n## PL/SQL中的数据类型\n\n### (1) 标量\n\nNUMBER--用于存储和操纵数字数据 ,格式是NUMBER（p,s）,p是数据宽度，s是小数点后的位数，默认为0；\n\nCHARACTER――\n\n  CHAR :字符型，最长2000b\n\n  NCHAR：依赖所使用的语种的字符集，最长2000b，与CHAR类似；\n\n  VARCHAR2：用来存放变长字符串，但要指定最大长度，宽度范围1-4000；\n\n  NVARCHAR2：类似于VARCHAR2，依赖于所使用语种的字符集\n\n  VARCHAR：在当前的版本中，与VARCHAR2同义，但以后的版本中将实现真正的变长，不受宽度限制。\n\nDATE\n\n   世纪、年、月、日、时、分、秒，总长14个字节\n\n| Format                        | Result                         |\n| ----------------------------- | ------------------------------ |\n| YYYY-MM-DD                    | 2015-06-15                     |\n| YYYY-MON-DD                   | 2015-JUN-15                    |\n| YYYY-MM-DD HH24:MI:SS FF3     | 2015-06-15 13:18:10 700        |\n| YYYY-MM-DD HH24:MI:SS FF3 TZR | 2015-06-15 13:18:10 700 +08:00 |\n| DS                            | 6/15/2015                      |\n| DL                            | Monday, June 15, 2015          |\n| TS                            | 1:18:10 PM                     |\n\nTO_DATE('12/1/1985', 'DS')\n\n\nBOOLEAN―― TRUE、FALSE、NULL\n\n### （2）复合\nRECORD\n\nVARRAY\n\nNESTED TABLE\n\n### （3）引用\n\nREF CURSOR \n\nREF操作符 \n\n### （4）LOB\nBLOB\n\nCLOB\n\nNCLOB\n\nBFILE \n\n## 3、PL/SQL的控制结构举例\n\n### （1）IF语句\n```sql\nSET SERVEROUTPUT ON\n\nDECLARE\n  V_NUM NUMBER(3);\nBEGIN\n  SELECT\n    COUNT(*) INTO V_NUM\n  FROM\n    SCOTT.EMP\n  WHERE\n    SAL>2500;\n  IF V_NUM<5 THEN\n    DBMS_OUTPUT.PUT_LINE('TOTAL MANAGER NUM '\n      ||TO_CHAR(V_NUM));\n  ELSIF V_NUM<5 DBMS_OUTPUT.PUT_LINE('TOTAL MANAGER NUM 2'\n    ||TO_CHAR(V_NUM));\nELSE\n  DBMS_OUTPUT.PUT_LINE('TOTAL MANAGER NUM 3'\n    ||TO_CHAR(V_NUM));\nEND IF;\nEND;\n```\n### （2）loop语句\n```sql\nDECLARE\n  N      NUMBER:=1;\n  COUNT1 NUMBER:=2;\nBEGIN\n  LOOP\n    N:=N*COUNT1;\n    COUNT1:=COUNT1+1;\n    IF COUNT1>10 THEN\n      EXIT;\n    END IF;\n  END LOOP;\n  DBMS_OUTPUT.PUT_LINE(TO_CHAR(N));\nEND;\n/  \n```\n\n### （3）FOR 语句\n```sql\nDECLARE\n  V_LOWER NUMBER :=1;\n  V_UPPER NUMBER :=10;\nBEGIN\n  FOR I IN V_LOWER .. V_UPPER LOOP\n    DBMS_OUTPUT.PUT_LINE('i is: '\n      || I);\n  END LOOP;\nEND;\n```\n\n### （4）WHILE 语句\n\n```sql\nDECLARE\n  N NUMBER:=0;\nBEGIN\n  WHILE N<100 LOOP\n    N:=N+1;\n    DBMS_OUTPUT.PUT_LINE('n='\n      ||N);\n  END LOOP;\nEND;\n```","source":"_posts/ORACLE-PLSQL-基础.md","raw":"---\ntitle: PL/SQL 基础\ndate: 2023-04-12 13:04:12\ntags: \n- Database\n- Oracle\n- PL/SQL\n---\n\n# PL/SQL 基础\n\n## PL/SQL的基本结构：\n\nPL/SQL是一种块结构语言，其块结构如下:\n\n```sql\n  DECLARE\n       ――声明部分:声明变量、常量、用户定义的数据类型以及游标\n       ――这一部分可选，不需要可不写\n  BEGIN\n       ――主程序体，在这可以加入各种合法的语句\n  EXCEPTION\n       ――异常处理程序，当程序中出现错误时执行这一部分\n       ――这一部分可选\n  END; ――主程序体结束，分号必不可少；\n\n   从上面的结构可以看出，PL/SQL块由三部分组成：声明部分、执行部分和异常处理部分，其中只有执行部分是必须的：\n  BEGIN\n    /*执行部分*/   \n  END;\n```\n\n```sql\nDECLARE\n    /*声明部分*/\n BEGIN\n    /*执行部分*/  \n END; \n```\n都是合法的。\n\n\n## PL/SQL中的数据类型\n\n### (1) 标量\n\nNUMBER--用于存储和操纵数字数据 ,格式是NUMBER（p,s）,p是数据宽度，s是小数点后的位数，默认为0；\n\nCHARACTER――\n\n  CHAR :字符型，最长2000b\n\n  NCHAR：依赖所使用的语种的字符集，最长2000b，与CHAR类似；\n\n  VARCHAR2：用来存放变长字符串，但要指定最大长度，宽度范围1-4000；\n\n  NVARCHAR2：类似于VARCHAR2，依赖于所使用语种的字符集\n\n  VARCHAR：在当前的版本中，与VARCHAR2同义，但以后的版本中将实现真正的变长，不受宽度限制。\n\nDATE\n\n   世纪、年、月、日、时、分、秒，总长14个字节\n\n| Format                        | Result                         |\n| ----------------------------- | ------------------------------ |\n| YYYY-MM-DD                    | 2015-06-15                     |\n| YYYY-MON-DD                   | 2015-JUN-15                    |\n| YYYY-MM-DD HH24:MI:SS FF3     | 2015-06-15 13:18:10 700        |\n| YYYY-MM-DD HH24:MI:SS FF3 TZR | 2015-06-15 13:18:10 700 +08:00 |\n| DS                            | 6/15/2015                      |\n| DL                            | Monday, June 15, 2015          |\n| TS                            | 1:18:10 PM                     |\n\nTO_DATE('12/1/1985', 'DS')\n\n\nBOOLEAN―― TRUE、FALSE、NULL\n\n### （2）复合\nRECORD\n\nVARRAY\n\nNESTED TABLE\n\n### （3）引用\n\nREF CURSOR \n\nREF操作符 \n\n### （4）LOB\nBLOB\n\nCLOB\n\nNCLOB\n\nBFILE \n\n## 3、PL/SQL的控制结构举例\n\n### （1）IF语句\n```sql\nSET SERVEROUTPUT ON\n\nDECLARE\n  V_NUM NUMBER(3);\nBEGIN\n  SELECT\n    COUNT(*) INTO V_NUM\n  FROM\n    SCOTT.EMP\n  WHERE\n    SAL>2500;\n  IF V_NUM<5 THEN\n    DBMS_OUTPUT.PUT_LINE('TOTAL MANAGER NUM '\n      ||TO_CHAR(V_NUM));\n  ELSIF V_NUM<5 DBMS_OUTPUT.PUT_LINE('TOTAL MANAGER NUM 2'\n    ||TO_CHAR(V_NUM));\nELSE\n  DBMS_OUTPUT.PUT_LINE('TOTAL MANAGER NUM 3'\n    ||TO_CHAR(V_NUM));\nEND IF;\nEND;\n```\n### （2）loop语句\n```sql\nDECLARE\n  N      NUMBER:=1;\n  COUNT1 NUMBER:=2;\nBEGIN\n  LOOP\n    N:=N*COUNT1;\n    COUNT1:=COUNT1+1;\n    IF COUNT1>10 THEN\n      EXIT;\n    END IF;\n  END LOOP;\n  DBMS_OUTPUT.PUT_LINE(TO_CHAR(N));\nEND;\n/  \n```\n\n### （3）FOR 语句\n```sql\nDECLARE\n  V_LOWER NUMBER :=1;\n  V_UPPER NUMBER :=10;\nBEGIN\n  FOR I IN V_LOWER .. V_UPPER LOOP\n    DBMS_OUTPUT.PUT_LINE('i is: '\n      || I);\n  END LOOP;\nEND;\n```\n\n### （4）WHILE 语句\n\n```sql\nDECLARE\n  N NUMBER:=0;\nBEGIN\n  WHILE N<100 LOOP\n    N:=N+1;\n    DBMS_OUTPUT.PUT_LINE('n='\n      ||N);\n  END LOOP;\nEND;\n```","slug":"ORACLE-PLSQL-基础","published":1,"updated":"2023-06-23T01:05:10.006Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5uq002rlv9e1rdmddtb","content":"<h1 id=\"PL-SQL-基础\"><a href=\"#PL-SQL-基础\" class=\"headerlink\" title=\"PL&#x2F;SQL 基础\"></a>PL&#x2F;SQL 基础</h1><h2 id=\"PL-SQL的基本结构：\"><a href=\"#PL-SQL的基本结构：\" class=\"headerlink\" title=\"PL&#x2F;SQL的基本结构：\"></a>PL&#x2F;SQL的基本结构：</h2><p>PL&#x2F;SQL是一种块结构语言，其块结构如下:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DECLARE</span></span><br><span class=\"line\">     ――声明部分:声明变量、常量、用户定义的数据类型以及游标</span><br><span class=\"line\">     ――这一部分可选，不需要可不写</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">     ――主程序体，在这可以加入各种合法的语句</span><br><span class=\"line\">EXCEPTION</span><br><span class=\"line\">     ――异常处理程序，当程序中出现错误时执行这一部分</span><br><span class=\"line\">     ――这一部分可选</span><br><span class=\"line\"><span class=\"keyword\">END</span>; ――主程序体结束，分号必不可少；</span><br><span class=\"line\"></span><br><span class=\"line\"> 从上面的结构可以看出，PL<span class=\"operator\">/</span><span class=\"keyword\">SQL</span>块由三部分组成：声明部分、执行部分和异常处理部分，其中只有执行部分是必须的：</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  <span class=\"comment\">/*执行部分*/</span>   </span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DECLARE</span></span><br><span class=\"line\">    <span class=\"comment\">/*声明部分*/</span></span><br><span class=\"line\"> <span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">    <span class=\"comment\">/*执行部分*/</span>  </span><br><span class=\"line\"> <span class=\"keyword\">END</span>; </span><br></pre></td></tr></table></figure>\n<p>都是合法的。</p>\n<h2 id=\"PL-SQL中的数据类型\"><a href=\"#PL-SQL中的数据类型\" class=\"headerlink\" title=\"PL&#x2F;SQL中的数据类型\"></a>PL&#x2F;SQL中的数据类型</h2><h3 id=\"1-标量\"><a href=\"#1-标量\" class=\"headerlink\" title=\"(1) 标量\"></a>(1) 标量</h3><p>NUMBER–用于存储和操纵数字数据 ,格式是NUMBER（p,s）,p是数据宽度，s是小数点后的位数，默认为0；</p>\n<p>CHARACTER――</p>\n<p>  CHAR :字符型，最长2000b</p>\n<p>  NCHAR：依赖所使用的语种的字符集，最长2000b，与CHAR类似；</p>\n<p>  VARCHAR2：用来存放变长字符串，但要指定最大长度，宽度范围1-4000；</p>\n<p>  NVARCHAR2：类似于VARCHAR2，依赖于所使用语种的字符集</p>\n<p>  VARCHAR：在当前的版本中，与VARCHAR2同义，但以后的版本中将实现真正的变长，不受宽度限制。</p>\n<p>DATE</p>\n<p>   世纪、年、月、日、时、分、秒，总长14个字节</p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Result</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>YYYY-MM-DD</td>\n<td>2015-06-15</td>\n</tr>\n<tr>\n<td>YYYY-MON-DD</td>\n<td>2015-JUN-15</td>\n</tr>\n<tr>\n<td>YYYY-MM-DD HH24:MI:SS FF3</td>\n<td>2015-06-15 13:18:10 700</td>\n</tr>\n<tr>\n<td>YYYY-MM-DD HH24:MI:SS FF3 TZR</td>\n<td>2015-06-15 13:18:10 700 +08:00</td>\n</tr>\n<tr>\n<td>DS</td>\n<td>6&#x2F;15&#x2F;2015</td>\n</tr>\n<tr>\n<td>DL</td>\n<td>Monday, June 15, 2015</td>\n</tr>\n<tr>\n<td>TS</td>\n<td>1:18:10 PM</td>\n</tr>\n</tbody></table>\n<p>TO_DATE(‘12&#x2F;1&#x2F;1985’, ‘DS’)</p>\n<p>BOOLEAN―― TRUE、FALSE、NULL</p>\n<h3 id=\"（2）复合\"><a href=\"#（2）复合\" class=\"headerlink\" title=\"（2）复合\"></a>（2）复合</h3><p>RECORD</p>\n<p>VARRAY</p>\n<p>NESTED TABLE</p>\n<h3 id=\"（3）引用\"><a href=\"#（3）引用\" class=\"headerlink\" title=\"（3）引用\"></a>（3）引用</h3><p>REF CURSOR </p>\n<p>REF操作符 </p>\n<h3 id=\"（4）LOB\"><a href=\"#（4）LOB\" class=\"headerlink\" title=\"（4）LOB\"></a>（4）LOB</h3><p>BLOB</p>\n<p>CLOB</p>\n<p>NCLOB</p>\n<p>BFILE </p>\n<h2 id=\"3、PL-SQL的控制结构举例\"><a href=\"#3、PL-SQL的控制结构举例\" class=\"headerlink\" title=\"3、PL&#x2F;SQL的控制结构举例\"></a>3、PL&#x2F;SQL的控制结构举例</h2><h3 id=\"（1）IF语句\"><a href=\"#（1）IF语句\" class=\"headerlink\" title=\"（1）IF语句\"></a>（1）IF语句</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SET</span> SERVEROUTPUT <span class=\"keyword\">ON</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DECLARE</span></span><br><span class=\"line\">  V_NUM NUMBER(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">    <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">INTO</span> V_NUM</span><br><span class=\"line\">  <span class=\"keyword\">FROM</span></span><br><span class=\"line\">    SCOTT.EMP</span><br><span class=\"line\">  <span class=\"keyword\">WHERE</span></span><br><span class=\"line\">    SAL<span class=\"operator\">&gt;</span><span class=\"number\">2500</span>;</span><br><span class=\"line\">  IF V_NUM<span class=\"operator\">&lt;</span><span class=\"number\">5</span> <span class=\"keyword\">THEN</span></span><br><span class=\"line\">    DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;TOTAL MANAGER NUM &#x27;</span></span><br><span class=\"line\">      <span class=\"operator\">||</span>TO_CHAR(V_NUM));</span><br><span class=\"line\">  ELSIF V_NUM<span class=\"operator\">&lt;</span><span class=\"number\">5</span> DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;TOTAL MANAGER NUM 2&#x27;</span></span><br><span class=\"line\">    <span class=\"operator\">||</span>TO_CHAR(V_NUM));</span><br><span class=\"line\"><span class=\"keyword\">ELSE</span></span><br><span class=\"line\">  DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;TOTAL MANAGER NUM 3&#x27;</span></span><br><span class=\"line\">    <span class=\"operator\">||</span>TO_CHAR(V_NUM));</span><br><span class=\"line\"><span class=\"keyword\">END</span> IF;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"（2）loop语句\"><a href=\"#（2）loop语句\" class=\"headerlink\" title=\"（2）loop语句\"></a>（2）loop语句</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DECLARE</span></span><br><span class=\"line\">  N      NUMBER:<span class=\"operator\">=</span><span class=\"number\">1</span>;</span><br><span class=\"line\">  COUNT1 NUMBER:<span class=\"operator\">=</span><span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  LOOP</span><br><span class=\"line\">    N:<span class=\"operator\">=</span>N<span class=\"operator\">*</span>COUNT1;</span><br><span class=\"line\">    COUNT1:<span class=\"operator\">=</span>COUNT1<span class=\"operator\">+</span><span class=\"number\">1</span>;</span><br><span class=\"line\">    IF COUNT1<span class=\"operator\">&gt;</span><span class=\"number\">10</span> <span class=\"keyword\">THEN</span></span><br><span class=\"line\">      EXIT;</span><br><span class=\"line\">    <span class=\"keyword\">END</span> IF;</span><br><span class=\"line\">  <span class=\"keyword\">END</span> LOOP;</span><br><span class=\"line\">  DBMS_OUTPUT.PUT_LINE(TO_CHAR(N));</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span>  </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"（3）FOR-语句\"><a href=\"#（3）FOR-语句\" class=\"headerlink\" title=\"（3）FOR 语句\"></a>（3）FOR 语句</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DECLARE</span></span><br><span class=\"line\">  V_LOWER NUMBER :<span class=\"operator\">=</span><span class=\"number\">1</span>;</span><br><span class=\"line\">  V_UPPER NUMBER :<span class=\"operator\">=</span><span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  <span class=\"keyword\">FOR</span> I <span class=\"keyword\">IN</span> V_LOWER .. V_UPPER LOOP</span><br><span class=\"line\">    DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;i is: &#x27;</span></span><br><span class=\"line\">      <span class=\"operator\">||</span> I);</span><br><span class=\"line\">  <span class=\"keyword\">END</span> LOOP;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"（4）WHILE-语句\"><a href=\"#（4）WHILE-语句\" class=\"headerlink\" title=\"（4）WHILE 语句\"></a>（4）WHILE 语句</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DECLARE</span></span><br><span class=\"line\">  N NUMBER:<span class=\"operator\">=</span><span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  WHILE N<span class=\"operator\">&lt;</span><span class=\"number\">100</span> LOOP</span><br><span class=\"line\">    N:<span class=\"operator\">=</span>N<span class=\"operator\">+</span><span class=\"number\">1</span>;</span><br><span class=\"line\">    DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;n=&#x27;</span></span><br><span class=\"line\">      <span class=\"operator\">||</span>N);</span><br><span class=\"line\">  <span class=\"keyword\">END</span> LOOP;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"cover":false,"excerpt":"","more":"<h1 id=\"PL-SQL-基础\"><a href=\"#PL-SQL-基础\" class=\"headerlink\" title=\"PL&#x2F;SQL 基础\"></a>PL&#x2F;SQL 基础</h1><h2 id=\"PL-SQL的基本结构：\"><a href=\"#PL-SQL的基本结构：\" class=\"headerlink\" title=\"PL&#x2F;SQL的基本结构：\"></a>PL&#x2F;SQL的基本结构：</h2><p>PL&#x2F;SQL是一种块结构语言，其块结构如下:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DECLARE</span></span><br><span class=\"line\">     ――声明部分:声明变量、常量、用户定义的数据类型以及游标</span><br><span class=\"line\">     ――这一部分可选，不需要可不写</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">     ――主程序体，在这可以加入各种合法的语句</span><br><span class=\"line\">EXCEPTION</span><br><span class=\"line\">     ――异常处理程序，当程序中出现错误时执行这一部分</span><br><span class=\"line\">     ――这一部分可选</span><br><span class=\"line\"><span class=\"keyword\">END</span>; ――主程序体结束，分号必不可少；</span><br><span class=\"line\"></span><br><span class=\"line\"> 从上面的结构可以看出，PL<span class=\"operator\">/</span><span class=\"keyword\">SQL</span>块由三部分组成：声明部分、执行部分和异常处理部分，其中只有执行部分是必须的：</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  <span class=\"comment\">/*执行部分*/</span>   </span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DECLARE</span></span><br><span class=\"line\">    <span class=\"comment\">/*声明部分*/</span></span><br><span class=\"line\"> <span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">    <span class=\"comment\">/*执行部分*/</span>  </span><br><span class=\"line\"> <span class=\"keyword\">END</span>; </span><br></pre></td></tr></table></figure>\n<p>都是合法的。</p>\n<h2 id=\"PL-SQL中的数据类型\"><a href=\"#PL-SQL中的数据类型\" class=\"headerlink\" title=\"PL&#x2F;SQL中的数据类型\"></a>PL&#x2F;SQL中的数据类型</h2><h3 id=\"1-标量\"><a href=\"#1-标量\" class=\"headerlink\" title=\"(1) 标量\"></a>(1) 标量</h3><p>NUMBER–用于存储和操纵数字数据 ,格式是NUMBER（p,s）,p是数据宽度，s是小数点后的位数，默认为0；</p>\n<p>CHARACTER――</p>\n<p>  CHAR :字符型，最长2000b</p>\n<p>  NCHAR：依赖所使用的语种的字符集，最长2000b，与CHAR类似；</p>\n<p>  VARCHAR2：用来存放变长字符串，但要指定最大长度，宽度范围1-4000；</p>\n<p>  NVARCHAR2：类似于VARCHAR2，依赖于所使用语种的字符集</p>\n<p>  VARCHAR：在当前的版本中，与VARCHAR2同义，但以后的版本中将实现真正的变长，不受宽度限制。</p>\n<p>DATE</p>\n<p>   世纪、年、月、日、时、分、秒，总长14个字节</p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Result</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>YYYY-MM-DD</td>\n<td>2015-06-15</td>\n</tr>\n<tr>\n<td>YYYY-MON-DD</td>\n<td>2015-JUN-15</td>\n</tr>\n<tr>\n<td>YYYY-MM-DD HH24:MI:SS FF3</td>\n<td>2015-06-15 13:18:10 700</td>\n</tr>\n<tr>\n<td>YYYY-MM-DD HH24:MI:SS FF3 TZR</td>\n<td>2015-06-15 13:18:10 700 +08:00</td>\n</tr>\n<tr>\n<td>DS</td>\n<td>6&#x2F;15&#x2F;2015</td>\n</tr>\n<tr>\n<td>DL</td>\n<td>Monday, June 15, 2015</td>\n</tr>\n<tr>\n<td>TS</td>\n<td>1:18:10 PM</td>\n</tr>\n</tbody></table>\n<p>TO_DATE(‘12&#x2F;1&#x2F;1985’, ‘DS’)</p>\n<p>BOOLEAN―― TRUE、FALSE、NULL</p>\n<h3 id=\"（2）复合\"><a href=\"#（2）复合\" class=\"headerlink\" title=\"（2）复合\"></a>（2）复合</h3><p>RECORD</p>\n<p>VARRAY</p>\n<p>NESTED TABLE</p>\n<h3 id=\"（3）引用\"><a href=\"#（3）引用\" class=\"headerlink\" title=\"（3）引用\"></a>（3）引用</h3><p>REF CURSOR </p>\n<p>REF操作符 </p>\n<h3 id=\"（4）LOB\"><a href=\"#（4）LOB\" class=\"headerlink\" title=\"（4）LOB\"></a>（4）LOB</h3><p>BLOB</p>\n<p>CLOB</p>\n<p>NCLOB</p>\n<p>BFILE </p>\n<h2 id=\"3、PL-SQL的控制结构举例\"><a href=\"#3、PL-SQL的控制结构举例\" class=\"headerlink\" title=\"3、PL&#x2F;SQL的控制结构举例\"></a>3、PL&#x2F;SQL的控制结构举例</h2><h3 id=\"（1）IF语句\"><a href=\"#（1）IF语句\" class=\"headerlink\" title=\"（1）IF语句\"></a>（1）IF语句</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SET</span> SERVEROUTPUT <span class=\"keyword\">ON</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DECLARE</span></span><br><span class=\"line\">  V_NUM NUMBER(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">    <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">INTO</span> V_NUM</span><br><span class=\"line\">  <span class=\"keyword\">FROM</span></span><br><span class=\"line\">    SCOTT.EMP</span><br><span class=\"line\">  <span class=\"keyword\">WHERE</span></span><br><span class=\"line\">    SAL<span class=\"operator\">&gt;</span><span class=\"number\">2500</span>;</span><br><span class=\"line\">  IF V_NUM<span class=\"operator\">&lt;</span><span class=\"number\">5</span> <span class=\"keyword\">THEN</span></span><br><span class=\"line\">    DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;TOTAL MANAGER NUM &#x27;</span></span><br><span class=\"line\">      <span class=\"operator\">||</span>TO_CHAR(V_NUM));</span><br><span class=\"line\">  ELSIF V_NUM<span class=\"operator\">&lt;</span><span class=\"number\">5</span> DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;TOTAL MANAGER NUM 2&#x27;</span></span><br><span class=\"line\">    <span class=\"operator\">||</span>TO_CHAR(V_NUM));</span><br><span class=\"line\"><span class=\"keyword\">ELSE</span></span><br><span class=\"line\">  DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;TOTAL MANAGER NUM 3&#x27;</span></span><br><span class=\"line\">    <span class=\"operator\">||</span>TO_CHAR(V_NUM));</span><br><span class=\"line\"><span class=\"keyword\">END</span> IF;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"（2）loop语句\"><a href=\"#（2）loop语句\" class=\"headerlink\" title=\"（2）loop语句\"></a>（2）loop语句</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DECLARE</span></span><br><span class=\"line\">  N      NUMBER:<span class=\"operator\">=</span><span class=\"number\">1</span>;</span><br><span class=\"line\">  COUNT1 NUMBER:<span class=\"operator\">=</span><span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  LOOP</span><br><span class=\"line\">    N:<span class=\"operator\">=</span>N<span class=\"operator\">*</span>COUNT1;</span><br><span class=\"line\">    COUNT1:<span class=\"operator\">=</span>COUNT1<span class=\"operator\">+</span><span class=\"number\">1</span>;</span><br><span class=\"line\">    IF COUNT1<span class=\"operator\">&gt;</span><span class=\"number\">10</span> <span class=\"keyword\">THEN</span></span><br><span class=\"line\">      EXIT;</span><br><span class=\"line\">    <span class=\"keyword\">END</span> IF;</span><br><span class=\"line\">  <span class=\"keyword\">END</span> LOOP;</span><br><span class=\"line\">  DBMS_OUTPUT.PUT_LINE(TO_CHAR(N));</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span>  </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"（3）FOR-语句\"><a href=\"#（3）FOR-语句\" class=\"headerlink\" title=\"（3）FOR 语句\"></a>（3）FOR 语句</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DECLARE</span></span><br><span class=\"line\">  V_LOWER NUMBER :<span class=\"operator\">=</span><span class=\"number\">1</span>;</span><br><span class=\"line\">  V_UPPER NUMBER :<span class=\"operator\">=</span><span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  <span class=\"keyword\">FOR</span> I <span class=\"keyword\">IN</span> V_LOWER .. V_UPPER LOOP</span><br><span class=\"line\">    DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;i is: &#x27;</span></span><br><span class=\"line\">      <span class=\"operator\">||</span> I);</span><br><span class=\"line\">  <span class=\"keyword\">END</span> LOOP;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"（4）WHILE-语句\"><a href=\"#（4）WHILE-语句\" class=\"headerlink\" title=\"（4）WHILE 语句\"></a>（4）WHILE 语句</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DECLARE</span></span><br><span class=\"line\">  N NUMBER:<span class=\"operator\">=</span><span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  WHILE N<span class=\"operator\">&lt;</span><span class=\"number\">100</span> LOOP</span><br><span class=\"line\">    N:<span class=\"operator\">=</span>N<span class=\"operator\">+</span><span class=\"number\">1</span>;</span><br><span class=\"line\">    DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;n=&#x27;</span></span><br><span class=\"line\">      <span class=\"operator\">||</span>N);</span><br><span class=\"line\">  <span class=\"keyword\">END</span> LOOP;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br></pre></td></tr></table></figure>"},{"title":"PL/SQL 存储过程","date":"2023-04-26T05:04:12.000Z","_content":"\n### PL/SQL 存储过程\n\n## 存储过程的创建及使用\n\n首先：set serveroutput on format wrapped\n\n说明：\n\nIn 参数类型：表示这个参数值输入给过程，供过程使用；\n\nOut参数类型：表示该参数是输出类型的参数，表示这个参数在过程中被赋值，可以传给过程体外的环境；\n\nIn out参数类型：这种类型的参数实际上就是综合了上述两种参数类型，及向过程体传值，也向过程体外的环境传值；\n\n例1：in /out 参数的使用\n\n```sql\nCREATE OR REPLACE PROCEDURE DEPT_MEMBER_NUM (\n  IN_DEPTNO IN SCOTT.EMP.DEPTNO%TYPE,\n  OUT_TOTAL_NUM OUT NUMBER\n) AS\nBEGIN\n  SELECT\n    COUNT(*) INTO OUT_TOTAL_NUM\n  FROM\n    SCOTT.EMP\n  WHERE\n    DEPTNO=IN_DEPTNO;\nEND DEPT_MEMBER_NUM;\n```\n\n调用存储过程:\n\n```sql\nDECLARE\n  RECIVE_OUTPARA NUMBER;\nBEGIN\n  DEPT_MEMBER_NUM(10, RECIVE_OUTPARA);\n  DBMS_OUTPUT.PUT_LINE('THE NUMBER OF DEPT 10 IS '\n    ||TO_CHAR(RECIVE_OUTPARA));\nEND;\n```\n\n例2：in out参数的使用\n\n```sql\nCREATE OR REPLACE PROCEDURE DEPT_MEMBER_NUM (\n  INOUT_PARA IN OUT SCOTT.EMP.DEPTNO%TYPE\n) AS\nBEGIN\n  SELECT\n    COUNT(*) INTO INOUT_PARA\n  FROM\n    SCOTT.EMP\n  WHERE\n    DEPTNO=INOUT_PARA;\nEND DEPT_MEMBER_NUM;\n```\n\n调用存储过程:\n\n```sql\nDECLARE\n  RECIVE_INOUTPARA NUMBER :=10;\nBEGIN\n  DEPT_MEMBER_NUM(RECIVE_INOUTPARA);\n  DBMS_OUTPUT.PUT_LINE('THE NUMBER OF DEPT 10 IS '\n    ||TO_CHAR(RECIVE_INOUTPARA));\nEND;\n```\n\n## 存储过程的修改及删除：\n\n上面的存储过程使用的Create or replace procedure关键字可以用create procedure代替，事实上create procedure表示创建存储过程，而Create or replace procedure表示创建或替代已经存在的存储过程，通常使用Create or replace procedure替代原来的存储过程来表示修改存储过程；\n\n删除存储过程：\n\n```sql\nDROP PROCEDURE DEPT_MEMBER_NUM；\n```\n\n\n\n\n\n","source":"_posts/ORACLE-PLSQL-存储过程.md","raw":"---\ntitle: PL/SQL 存储过程\ndate: 2023-04-26 13:04:12\ntags: \n- Database\n- Oracle\n- PL/SQL\n---\n\n### PL/SQL 存储过程\n\n## 存储过程的创建及使用\n\n首先：set serveroutput on format wrapped\n\n说明：\n\nIn 参数类型：表示这个参数值输入给过程，供过程使用；\n\nOut参数类型：表示该参数是输出类型的参数，表示这个参数在过程中被赋值，可以传给过程体外的环境；\n\nIn out参数类型：这种类型的参数实际上就是综合了上述两种参数类型，及向过程体传值，也向过程体外的环境传值；\n\n例1：in /out 参数的使用\n\n```sql\nCREATE OR REPLACE PROCEDURE DEPT_MEMBER_NUM (\n  IN_DEPTNO IN SCOTT.EMP.DEPTNO%TYPE,\n  OUT_TOTAL_NUM OUT NUMBER\n) AS\nBEGIN\n  SELECT\n    COUNT(*) INTO OUT_TOTAL_NUM\n  FROM\n    SCOTT.EMP\n  WHERE\n    DEPTNO=IN_DEPTNO;\nEND DEPT_MEMBER_NUM;\n```\n\n调用存储过程:\n\n```sql\nDECLARE\n  RECIVE_OUTPARA NUMBER;\nBEGIN\n  DEPT_MEMBER_NUM(10, RECIVE_OUTPARA);\n  DBMS_OUTPUT.PUT_LINE('THE NUMBER OF DEPT 10 IS '\n    ||TO_CHAR(RECIVE_OUTPARA));\nEND;\n```\n\n例2：in out参数的使用\n\n```sql\nCREATE OR REPLACE PROCEDURE DEPT_MEMBER_NUM (\n  INOUT_PARA IN OUT SCOTT.EMP.DEPTNO%TYPE\n) AS\nBEGIN\n  SELECT\n    COUNT(*) INTO INOUT_PARA\n  FROM\n    SCOTT.EMP\n  WHERE\n    DEPTNO=INOUT_PARA;\nEND DEPT_MEMBER_NUM;\n```\n\n调用存储过程:\n\n```sql\nDECLARE\n  RECIVE_INOUTPARA NUMBER :=10;\nBEGIN\n  DEPT_MEMBER_NUM(RECIVE_INOUTPARA);\n  DBMS_OUTPUT.PUT_LINE('THE NUMBER OF DEPT 10 IS '\n    ||TO_CHAR(RECIVE_INOUTPARA));\nEND;\n```\n\n## 存储过程的修改及删除：\n\n上面的存储过程使用的Create or replace procedure关键字可以用create procedure代替，事实上create procedure表示创建存储过程，而Create or replace procedure表示创建或替代已经存在的存储过程，通常使用Create or replace procedure替代原来的存储过程来表示修改存储过程；\n\n删除存储过程：\n\n```sql\nDROP PROCEDURE DEPT_MEMBER_NUM；\n```\n\n\n\n\n\n","slug":"ORACLE-PLSQL-存储过程","published":1,"updated":"2023-06-23T01:05:13.713Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5ur002ulv9e13ze0mn5","content":"<h3 id=\"PL-SQL-存储过程\"><a href=\"#PL-SQL-存储过程\" class=\"headerlink\" title=\"PL&#x2F;SQL 存储过程\"></a>PL&#x2F;SQL 存储过程</h3><h2 id=\"存储过程的创建及使用\"><a href=\"#存储过程的创建及使用\" class=\"headerlink\" title=\"存储过程的创建及使用\"></a>存储过程的创建及使用</h2><p>首先：set serveroutput on format wrapped</p>\n<p>说明：</p>\n<p>In 参数类型：表示这个参数值输入给过程，供过程使用；</p>\n<p>Out参数类型：表示该参数是输出类型的参数，表示这个参数在过程中被赋值，可以传给过程体外的环境；</p>\n<p>In out参数类型：这种类型的参数实际上就是综合了上述两种参数类型，及向过程体传值，也向过程体外的环境传值；</p>\n<p>例1：in &#x2F;out 参数的使用</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">OR</span> REPLACE <span class=\"keyword\">PROCEDURE</span> DEPT_MEMBER_NUM (</span><br><span class=\"line\">  IN_DEPTNO <span class=\"keyword\">IN</span> SCOTT.EMP.DEPTNO<span class=\"operator\">%</span>TYPE,</span><br><span class=\"line\">  OUT_TOTAL_NUM <span class=\"keyword\">OUT</span> NUMBER</span><br><span class=\"line\">) <span class=\"keyword\">AS</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">    <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">INTO</span> OUT_TOTAL_NUM</span><br><span class=\"line\">  <span class=\"keyword\">FROM</span></span><br><span class=\"line\">    SCOTT.EMP</span><br><span class=\"line\">  <span class=\"keyword\">WHERE</span></span><br><span class=\"line\">    DEPTNO<span class=\"operator\">=</span>IN_DEPTNO;</span><br><span class=\"line\"><span class=\"keyword\">END</span> DEPT_MEMBER_NUM;</span><br></pre></td></tr></table></figure>\n\n<p>调用存储过程:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DECLARE</span></span><br><span class=\"line\">  RECIVE_OUTPARA NUMBER;</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  DEPT_MEMBER_NUM(<span class=\"number\">10</span>, RECIVE_OUTPARA);</span><br><span class=\"line\">  DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;THE NUMBER OF DEPT 10 IS &#x27;</span></span><br><span class=\"line\">    <span class=\"operator\">||</span>TO_CHAR(RECIVE_OUTPARA));</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br></pre></td></tr></table></figure>\n\n<p>例2：in out参数的使用</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">OR</span> REPLACE <span class=\"keyword\">PROCEDURE</span> DEPT_MEMBER_NUM (</span><br><span class=\"line\">  INOUT_PARA <span class=\"keyword\">IN</span> <span class=\"keyword\">OUT</span> SCOTT.EMP.DEPTNO<span class=\"operator\">%</span>TYPE</span><br><span class=\"line\">) <span class=\"keyword\">AS</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">    <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">INTO</span> INOUT_PARA</span><br><span class=\"line\">  <span class=\"keyword\">FROM</span></span><br><span class=\"line\">    SCOTT.EMP</span><br><span class=\"line\">  <span class=\"keyword\">WHERE</span></span><br><span class=\"line\">    DEPTNO<span class=\"operator\">=</span>INOUT_PARA;</span><br><span class=\"line\"><span class=\"keyword\">END</span> DEPT_MEMBER_NUM;</span><br></pre></td></tr></table></figure>\n\n<p>调用存储过程:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DECLARE</span></span><br><span class=\"line\">  RECIVE_INOUTPARA NUMBER :<span class=\"operator\">=</span><span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  DEPT_MEMBER_NUM(RECIVE_INOUTPARA);</span><br><span class=\"line\">  DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;THE NUMBER OF DEPT 10 IS &#x27;</span></span><br><span class=\"line\">    <span class=\"operator\">||</span>TO_CHAR(RECIVE_INOUTPARA));</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"存储过程的修改及删除：\"><a href=\"#存储过程的修改及删除：\" class=\"headerlink\" title=\"存储过程的修改及删除：\"></a>存储过程的修改及删除：</h2><p>上面的存储过程使用的Create or replace procedure关键字可以用create procedure代替，事实上create procedure表示创建存储过程，而Create or replace procedure表示创建或替代已经存在的存储过程，通常使用Create or replace procedure替代原来的存储过程来表示修改存储过程；</p>\n<p>删除存储过程：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">PROCEDURE</span> DEPT_MEMBER_NUM；</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h3 id=\"PL-SQL-存储过程\"><a href=\"#PL-SQL-存储过程\" class=\"headerlink\" title=\"PL&#x2F;SQL 存储过程\"></a>PL&#x2F;SQL 存储过程</h3><h2 id=\"存储过程的创建及使用\"><a href=\"#存储过程的创建及使用\" class=\"headerlink\" title=\"存储过程的创建及使用\"></a>存储过程的创建及使用</h2><p>首先：set serveroutput on format wrapped</p>\n<p>说明：</p>\n<p>In 参数类型：表示这个参数值输入给过程，供过程使用；</p>\n<p>Out参数类型：表示该参数是输出类型的参数，表示这个参数在过程中被赋值，可以传给过程体外的环境；</p>\n<p>In out参数类型：这种类型的参数实际上就是综合了上述两种参数类型，及向过程体传值，也向过程体外的环境传值；</p>\n<p>例1：in &#x2F;out 参数的使用</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">OR</span> REPLACE <span class=\"keyword\">PROCEDURE</span> DEPT_MEMBER_NUM (</span><br><span class=\"line\">  IN_DEPTNO <span class=\"keyword\">IN</span> SCOTT.EMP.DEPTNO<span class=\"operator\">%</span>TYPE,</span><br><span class=\"line\">  OUT_TOTAL_NUM <span class=\"keyword\">OUT</span> NUMBER</span><br><span class=\"line\">) <span class=\"keyword\">AS</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">    <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">INTO</span> OUT_TOTAL_NUM</span><br><span class=\"line\">  <span class=\"keyword\">FROM</span></span><br><span class=\"line\">    SCOTT.EMP</span><br><span class=\"line\">  <span class=\"keyword\">WHERE</span></span><br><span class=\"line\">    DEPTNO<span class=\"operator\">=</span>IN_DEPTNO;</span><br><span class=\"line\"><span class=\"keyword\">END</span> DEPT_MEMBER_NUM;</span><br></pre></td></tr></table></figure>\n\n<p>调用存储过程:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DECLARE</span></span><br><span class=\"line\">  RECIVE_OUTPARA NUMBER;</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  DEPT_MEMBER_NUM(<span class=\"number\">10</span>, RECIVE_OUTPARA);</span><br><span class=\"line\">  DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;THE NUMBER OF DEPT 10 IS &#x27;</span></span><br><span class=\"line\">    <span class=\"operator\">||</span>TO_CHAR(RECIVE_OUTPARA));</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br></pre></td></tr></table></figure>\n\n<p>例2：in out参数的使用</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">OR</span> REPLACE <span class=\"keyword\">PROCEDURE</span> DEPT_MEMBER_NUM (</span><br><span class=\"line\">  INOUT_PARA <span class=\"keyword\">IN</span> <span class=\"keyword\">OUT</span> SCOTT.EMP.DEPTNO<span class=\"operator\">%</span>TYPE</span><br><span class=\"line\">) <span class=\"keyword\">AS</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">    <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">INTO</span> INOUT_PARA</span><br><span class=\"line\">  <span class=\"keyword\">FROM</span></span><br><span class=\"line\">    SCOTT.EMP</span><br><span class=\"line\">  <span class=\"keyword\">WHERE</span></span><br><span class=\"line\">    DEPTNO<span class=\"operator\">=</span>INOUT_PARA;</span><br><span class=\"line\"><span class=\"keyword\">END</span> DEPT_MEMBER_NUM;</span><br></pre></td></tr></table></figure>\n\n<p>调用存储过程:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DECLARE</span></span><br><span class=\"line\">  RECIVE_INOUTPARA NUMBER :<span class=\"operator\">=</span><span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  DEPT_MEMBER_NUM(RECIVE_INOUTPARA);</span><br><span class=\"line\">  DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;THE NUMBER OF DEPT 10 IS &#x27;</span></span><br><span class=\"line\">    <span class=\"operator\">||</span>TO_CHAR(RECIVE_INOUTPARA));</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"存储过程的修改及删除：\"><a href=\"#存储过程的修改及删除：\" class=\"headerlink\" title=\"存储过程的修改及删除：\"></a>存储过程的修改及删除：</h2><p>上面的存储过程使用的Create or replace procedure关键字可以用create procedure代替，事实上create procedure表示创建存储过程，而Create or replace procedure表示创建或替代已经存在的存储过程，通常使用Create or replace procedure替代原来的存储过程来表示修改存储过程；</p>\n<p>删除存储过程：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">PROCEDURE</span> DEPT_MEMBER_NUM；</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n"},{"title":"Oracle PL/SQL 游标","date":"2023-04-25T10:35:46.000Z","_content":"\n\n\n## PL/SQL中的游标CURSOR\n\n注意例子中：%TYPE和%ROWTYPE两种特殊变量；\n\n游标是用来处理使用select语句从数据库中检索到的多行记录的工具，借助于游标的功能，数据库应用程序可以对一组记录逐个进行处理，每次处理一行。可以将游标理解为指向select查询结果的指针。\n\n游标分为显式游标和隐式游标，隐式游标无需用户过问，我们主要学习显式游标。\n\n显式游标处理的4个步骤：\n  a)声明游标\n  b)为查询打开游标\n  c)将结果提取到PL/SQL变量中\n  d)关闭游标\n\n```sql\nDECLARE\n -- [1] 返回值\n  EMP SCOTT.EMP%ROWTYPE;\n -- [2] 游标\n  CURSOR EMP_CUR IS\n    SELECT\n      EMPNO,\n      SAL\n    FROM\n      SCOTT.EMP;\nBEGIN\n -- [3] open\n  OPEN EMP_CUR;\n -- [4] loop\n  LOOP\n -- [5] exit condition\n    EXIT WHEN NOT EMP_CUR%FOUND;\n -- [6] fetch\n    FETCH EMP_CUR INTO EMP;\n -- [7] do sth\n  END LOOP;\n -- [8]关闭游标\n  CLOSE EMP_CUR;\nEND;\n```\n\n(1)\n```sql\nDECLARE\n  EMP_ID   SCOTT.EMP.EMPNO%TYPE; --变量Emp_id的类型取scott.emp.empno的类型\n  EMP_NAME SCOTT.EMP.ENAME%TYPE;\n  EMP_JOB  SCOTT.EMP.JOB%TYPE;\n  EMP_SAL  SCOTT.EMP.SAL%TYPE;\n  CURSOR EMP_CUR IS --声明游标emp_cur\n    SELECT\n      EMPNO,\n      ENAME,\n      JOB,\n      SAL\n    FROM\n      SCOTT.EMP\n    WHERE\n      DEPTNO=20\n    ORDER BY\n      SAL;\nBEGIN\n  OPEN EMP_CUR; -- 打开游标，实质就是执行游标emp_cur定义中的sql语句\n  FETCH EMP_CUR INTO EMP_ID, EMP_NAME, EMP_JOB, EMP_SAL;\n --提取游标，实质就是获取emp_cur所指向的结果集中的当前行\n  LOOP\n    EXIT WHEN NOT EMP_CUR%FOUND; --如果游标走到结果集的尾部，则结束LOOP\n    IF LOWER(EMP_JOB)='MANAGER' THEN\n      DBMS_OUTPUT.PUT_LINE('THE MANAGER IS'\n        || EMP_NAME);\n    ELSE\n      DBMS_OUTPUT.PUT_LINE(EMP_ID\n        || 'IS'\n        ||EMP_NAME\n        ||'AND SALARY IS'\n        || EMP_SAL);\n    END IF;\n    FETCH EMP_CUR INTO EMP_ID, EMP_NAME, EMP_JOB, EMP_SAL;\n  END LOOP;\n  CLOSE EMP_CUR; --关闭游标\nEND;\n/\n```\n\n(2) 上面的例子可以修改如下：\n\n```sql\nDECLARE\n  EMPL SCOTT.EMP%ROWTYPE; --变量empl的类型为复合类型，类似于c语言中的结构体\n  CURSOR EMP_CUR IS --声明游标emp_cur\n    SELECT\n      *\n    FROM\n      SCOTT.EMP\n    WHERE\n      DEPTNO=20\n    ORDER BY\n      SAL;\nBEGIN\n  OPEN EMP_CUR; -- 打开游标，实质就是执行游标emp_cur定义中的sql语句\n  FETCH EMP_CUR INTO EMPL;\n --提取游标，实质就是获取emp_cur所指向的结果集中的当前行\n  LOOP\n    EXIT WHEN NOT EMP_CUR%FOUND; --如果游标走到结果集的尾部，则结束LOOP\n    IF LOWER(EMPL.JOB)='MANAGER' THEN\n      DBMS_OUTPUT.PUT_LINE('THE MANAGER IS'\n        || EMPL.ENAME);\n    ELSE\n      DBMS_OUTPUT.PUT_LINE(EMPL.EMPNO\n        || ' IS '\n        ||EMPL.ENAME\n        || ' AND SALARY IS '\n        || EMPL.SAL);\n    END IF;\n    FETCH EMP_CUR INTO EMPL;\n  END LOOP;\n  CLOSE EMP_CUR; --关闭游标\nEND;\n/         --执行上面的语句\n```\n\n\n## 隐式游标的基本操作\n\n隐式游标 ---由Oracle数据库自动创建，名称是(SQL) ,主要用途是可以返回一个操作是否成功或失败.\n  (1) 由Oracle在内部声明，由系统管理\n  (2) 用于处理\n     -DML语句   --注意只能用于DML语句哦。\n     -返回单行的查询--如果使用select .. into ，则要求该select查询的结果只包含一条记录\n  (3) 用于判断一个操作是否成功.\n     SQL%notfound  --返回Boolean值  存在结果集返回 False\n     SQL%found    --返回Boolean值   存在结果集返回 True\n     SQL%rowcount  --修改涉及到的记录的行数\n     SQL%isopen   --在隐式游标里一般这个属性是自动打开和关闭的，且任何时候查询都返回False。\n\n例1：\n```sql\nSET SERVEROUTPUT ON\n\nDECLARE\n  ICOUNT INT:=0;\nBEGIN\n  INSERT INTO EMP(\n    EMPNO,\n    ENMAE\n  ) VALUES(\n    2,\n    'jerry'\n  );\n  DBMS_OUTPUT.PUT_LINE('游标所影响的行数：'\n    ||SQL%ROWCOUNT);\n  IF SQL%NOTFOUNT THEN\n    DBMS_OUTPUT.PUT_LINE('NotFount为真');\n  ELSE\n    DBMS_OUTPUT.PUT_LINE('NofFount为假');\n  END IF;\nEND;\n```\n## 显式游标的属性操作\n\n### （1）是否找到游标－%FOUND\n  此属性表示当前游标是否指向有效的一行，取值：TRUE FALSE\n\n例2：\n```sql\nBEGIN\n  DELETE FROM EMP\n  WHERE\n    EMPNO=7934;\n  IF SQL%FOUND THEN\n    DBMS_OUTPUT.PUT_LINE('DELETE SUCCESS');\n  ELSE\n    DBMS_OUTPUT.PUT_LINE('DELETE FAIL');\n  END IF;\nEND;\n```\n说明：该例使用了隐式游标,当然，显式游标也可以使用属性%FOUND\n\n### （2）是否未找到游标－%NOTFOUND\n\n上例等价于：\n\n例3：\n\n```sql\nBEGIN\n  DELETE FROM EMP\n  WHERE\n    EMPNO=7934;\n  IF SQL%NOTFOUND THEN\n    DBMS_OUTPUT.PUT_LINE('delete fail');\n  ELSE\n    DBMS_OUTPUT.PUT_LINE('delete success');\n  END IF;\nEND;\n/\n```\n\n### (3) 游标行数－%ROWCOUNT\n    此属性记录了用户成功提取数据的行数，也可以了解为游标所在的行数。\n\n例4：\n\n```sql\nDECLARE\n  EMPL EMP%ROWTYPE;\n  CURSOR EMP_CUR IS\n    SELECT\n      *\n    FROM\n      EMP;\nBEGIN\n  OPEN EMP_CUR;\n  LOOP\n    FETCH EMP_CUR INTO EMPL;\n    DBMS_OUTPUT.PUT_LINE(TO_CHAR(EMPL.EMPNO));\n    EXIT WHEN EMP_CUR%ROWCOUNT=5 OR EMP_CUR%NOTFOUND;\n  END LOOP;\n  CLOSE EMP_CUR;\nEND;\n```\n(4) 是否打开游标－%ISOPEN\n\n例5：\n\n```sql\nDECLARE\n  EMPL EMP%ROWTYPE;\n  CURSOR EMP_CUR IS\n    SELECT\n      *\n    FROM\n      EMP;\nBEGIN\n  IF EMP_CUR%ISOPEN THEN\n    FETCH EMP_CUR INTO EMPL;\n    DBMS_OUTPUT.PUT_LINE(TO_CHAR(EMPL.EMPNO));\n  ELSE\n    DBMS_OUTPUT.PUT_LINE('EMP_CUR IS NOT OPEN');\n    OPEN EMP_CUR;\n    LOOP\n      FETCH EMP_CUR INTO EMPL;\n      DBMS_OUTPUT.PUT_LINE(TO_CHAR(EMPL.EMPNO));\n      EXIT WHEN EMP_CUR%ROWCOUNT=5;\n    END LOOP;\n    CLOSE EMP_CUR;\n  END IF;\nEND;\n/\n```\n\n## 参数化游标\n\n在定义游标时可以带上参数，使得在使用游标时，根据参数不同所选中的结果集也不同，达到动态使用游标的目的。\n\n例6：\n\n首先在SQL/PLUS上输入下面的语句：\n\n```s\nAccept dept_id prompt 'please input the deptno:'\n```\n\n说明：accept是SQL*PLUS的命令，不是pl/sql语句，类似于c++的cin，该命令可以接受你的键盘输入到dept_id。\n\n例6：\n```sql\nDECLARE\n  DID  EMP.DEPTNO%TYPE:=&DEPT_ID;\n  EMPL EMP%ROWTYPE;\n  CURSOR EMP_CUR(DEPTID NUMBER)IS\n    SELECT\n      *\n    FROM\n      EMP\n    WHERE\n      DEPTNO=DEPTID;\nBEGIN\n  OPEN EMP_CUR(DID);\n  LOOP\n    FETCH EMP_CUR INTO EMPL;\n    DBMS_OUTPUT.PUT_LINE(TO_CHAR(EMPL.EMPNO));\n    EXIT WHEN (EMP_CUR%ROWCOUNT=3) OR (EMP_CUR%NOTFOUND);\n  END LOOP;\n  CLOSE EMP_CUR;\nEND;\n```\n\n## 游标变量的使用\n\n### （1）声明游标变量类型\n\n游标变量是一种引用类型，当程序运行时，他们可以指向不同的存储单元（类似于c语言中的指针类型）。如果要使用引用类型，首先要声明该变量，然后相应的存储单元必须要分配。Pl/sql中引用类型通过下述语法进行声明：\n\n  Ref type\n\n其中，type是已经被定义的类型，ref关键字指明：新的类型必须是一个指向type类型的指针。因此，游标变量就是 REF CURSOR（指向游标的指针）。定义一个游标变量的完整类型语法如下：\n\n  Type <新类型名> is ref cursor return<游标的返回类型>\n\n其中，<新类型名>是新定义的游标变量的类型，<游标的返回类型>是指该游标返回的记录类型，这样定义的游标变量类型是受限的，它的返回类型只能是特定的记录类型；\n如果没有return<游标的返回类型>部分：\n\n  Type <新类型名> is ref cursor\n\n这样的游标变量类型是非受限的，一个非受限的游标变量可以为任何查询打开。\n\n例1：声明游标变量\n\n```sql\nDeclare\nType t_deptref is ref cursor\n  Return scott.dept%rowtype;   --使用%rowtype定义返回类型\nType manager_rcd is record(\nEname scott.emp.sname%type,\nSal scott.emp.sal%type,\nEdept scott.emp.deptno%type); --定义记录类型，类似于c语言中的结构体\n\nType t_managerref is ref cursor\n   Return manager_rcd;        -- 定义返回类型为manager_rcd的游标变量类型\n  V_dept t_deptref;           -- 定义t_deptref类型的游标变量\n  V_manager t_managerref;     -- 定义t_managerref类型的游标变量\n```\n\n### （2）打开游标变量\n\n如果要将一个游标变量于一个特定的select语句相关联，需要使用OPEN FOR语句，其语法是：\n\n  OPEN <游标变量> FOR <select语句>；\n\n例2：打开游标变量\n\n```sql\nDECLARE\n  TYPE T_DEPTREF IS\n    REF CURSOR RETURN SCOTT.DEPT%ROWTYPE;\n  V_DEPT   T_DEPTREF;\n  ROW_DEPT SCOTT.DEPT%ROWTYPE;\nBEGIN\n  OPEN V_DEPT FOR\n    SELECT\n      *\n    FROM\n      SCOTT.DEPT;\n  FETCH V_DEPT INTO ROW_DEPT;\n  DBMS_OUTPUT.PUT_LINE(' ' \n    ||TO_CHAR(ROW_DEPT.DEPTNO)\n    ||' '\n    ||ROW_DEPT.DNAME\n    ||' '\n    ||ROW_DEPT.LOC);\n  LOOP\n    EXIT WHEN NOT V_DEPT%FOUND;\n    FETCH V_DEPT INTO ROW_DEPT;\n    DBMS_OUTPUT.PUT_LINE(' '\n      ||TO_CHAR(ROW_DEPT.DEPTNO)\n      ||' '\n      ||ROW_DEPT.DNAME\n      ||' '\n      ||ROW_DEPT.LOC);\n  END LOOP;\nEND;\n```","source":"_posts/ORACLE-PLSQL-游标.md","raw":"---\ntitle: Oracle PL/SQL 游标\ndate: 2023-04-25 18:35:46\ntags: \n- Database\n- Oracle\n- PL/SQL\n---\n\n\n\n## PL/SQL中的游标CURSOR\n\n注意例子中：%TYPE和%ROWTYPE两种特殊变量；\n\n游标是用来处理使用select语句从数据库中检索到的多行记录的工具，借助于游标的功能，数据库应用程序可以对一组记录逐个进行处理，每次处理一行。可以将游标理解为指向select查询结果的指针。\n\n游标分为显式游标和隐式游标，隐式游标无需用户过问，我们主要学习显式游标。\n\n显式游标处理的4个步骤：\n  a)声明游标\n  b)为查询打开游标\n  c)将结果提取到PL/SQL变量中\n  d)关闭游标\n\n```sql\nDECLARE\n -- [1] 返回值\n  EMP SCOTT.EMP%ROWTYPE;\n -- [2] 游标\n  CURSOR EMP_CUR IS\n    SELECT\n      EMPNO,\n      SAL\n    FROM\n      SCOTT.EMP;\nBEGIN\n -- [3] open\n  OPEN EMP_CUR;\n -- [4] loop\n  LOOP\n -- [5] exit condition\n    EXIT WHEN NOT EMP_CUR%FOUND;\n -- [6] fetch\n    FETCH EMP_CUR INTO EMP;\n -- [7] do sth\n  END LOOP;\n -- [8]关闭游标\n  CLOSE EMP_CUR;\nEND;\n```\n\n(1)\n```sql\nDECLARE\n  EMP_ID   SCOTT.EMP.EMPNO%TYPE; --变量Emp_id的类型取scott.emp.empno的类型\n  EMP_NAME SCOTT.EMP.ENAME%TYPE;\n  EMP_JOB  SCOTT.EMP.JOB%TYPE;\n  EMP_SAL  SCOTT.EMP.SAL%TYPE;\n  CURSOR EMP_CUR IS --声明游标emp_cur\n    SELECT\n      EMPNO,\n      ENAME,\n      JOB,\n      SAL\n    FROM\n      SCOTT.EMP\n    WHERE\n      DEPTNO=20\n    ORDER BY\n      SAL;\nBEGIN\n  OPEN EMP_CUR; -- 打开游标，实质就是执行游标emp_cur定义中的sql语句\n  FETCH EMP_CUR INTO EMP_ID, EMP_NAME, EMP_JOB, EMP_SAL;\n --提取游标，实质就是获取emp_cur所指向的结果集中的当前行\n  LOOP\n    EXIT WHEN NOT EMP_CUR%FOUND; --如果游标走到结果集的尾部，则结束LOOP\n    IF LOWER(EMP_JOB)='MANAGER' THEN\n      DBMS_OUTPUT.PUT_LINE('THE MANAGER IS'\n        || EMP_NAME);\n    ELSE\n      DBMS_OUTPUT.PUT_LINE(EMP_ID\n        || 'IS'\n        ||EMP_NAME\n        ||'AND SALARY IS'\n        || EMP_SAL);\n    END IF;\n    FETCH EMP_CUR INTO EMP_ID, EMP_NAME, EMP_JOB, EMP_SAL;\n  END LOOP;\n  CLOSE EMP_CUR; --关闭游标\nEND;\n/\n```\n\n(2) 上面的例子可以修改如下：\n\n```sql\nDECLARE\n  EMPL SCOTT.EMP%ROWTYPE; --变量empl的类型为复合类型，类似于c语言中的结构体\n  CURSOR EMP_CUR IS --声明游标emp_cur\n    SELECT\n      *\n    FROM\n      SCOTT.EMP\n    WHERE\n      DEPTNO=20\n    ORDER BY\n      SAL;\nBEGIN\n  OPEN EMP_CUR; -- 打开游标，实质就是执行游标emp_cur定义中的sql语句\n  FETCH EMP_CUR INTO EMPL;\n --提取游标，实质就是获取emp_cur所指向的结果集中的当前行\n  LOOP\n    EXIT WHEN NOT EMP_CUR%FOUND; --如果游标走到结果集的尾部，则结束LOOP\n    IF LOWER(EMPL.JOB)='MANAGER' THEN\n      DBMS_OUTPUT.PUT_LINE('THE MANAGER IS'\n        || EMPL.ENAME);\n    ELSE\n      DBMS_OUTPUT.PUT_LINE(EMPL.EMPNO\n        || ' IS '\n        ||EMPL.ENAME\n        || ' AND SALARY IS '\n        || EMPL.SAL);\n    END IF;\n    FETCH EMP_CUR INTO EMPL;\n  END LOOP;\n  CLOSE EMP_CUR; --关闭游标\nEND;\n/         --执行上面的语句\n```\n\n\n## 隐式游标的基本操作\n\n隐式游标 ---由Oracle数据库自动创建，名称是(SQL) ,主要用途是可以返回一个操作是否成功或失败.\n  (1) 由Oracle在内部声明，由系统管理\n  (2) 用于处理\n     -DML语句   --注意只能用于DML语句哦。\n     -返回单行的查询--如果使用select .. into ，则要求该select查询的结果只包含一条记录\n  (3) 用于判断一个操作是否成功.\n     SQL%notfound  --返回Boolean值  存在结果集返回 False\n     SQL%found    --返回Boolean值   存在结果集返回 True\n     SQL%rowcount  --修改涉及到的记录的行数\n     SQL%isopen   --在隐式游标里一般这个属性是自动打开和关闭的，且任何时候查询都返回False。\n\n例1：\n```sql\nSET SERVEROUTPUT ON\n\nDECLARE\n  ICOUNT INT:=0;\nBEGIN\n  INSERT INTO EMP(\n    EMPNO,\n    ENMAE\n  ) VALUES(\n    2,\n    'jerry'\n  );\n  DBMS_OUTPUT.PUT_LINE('游标所影响的行数：'\n    ||SQL%ROWCOUNT);\n  IF SQL%NOTFOUNT THEN\n    DBMS_OUTPUT.PUT_LINE('NotFount为真');\n  ELSE\n    DBMS_OUTPUT.PUT_LINE('NofFount为假');\n  END IF;\nEND;\n```\n## 显式游标的属性操作\n\n### （1）是否找到游标－%FOUND\n  此属性表示当前游标是否指向有效的一行，取值：TRUE FALSE\n\n例2：\n```sql\nBEGIN\n  DELETE FROM EMP\n  WHERE\n    EMPNO=7934;\n  IF SQL%FOUND THEN\n    DBMS_OUTPUT.PUT_LINE('DELETE SUCCESS');\n  ELSE\n    DBMS_OUTPUT.PUT_LINE('DELETE FAIL');\n  END IF;\nEND;\n```\n说明：该例使用了隐式游标,当然，显式游标也可以使用属性%FOUND\n\n### （2）是否未找到游标－%NOTFOUND\n\n上例等价于：\n\n例3：\n\n```sql\nBEGIN\n  DELETE FROM EMP\n  WHERE\n    EMPNO=7934;\n  IF SQL%NOTFOUND THEN\n    DBMS_OUTPUT.PUT_LINE('delete fail');\n  ELSE\n    DBMS_OUTPUT.PUT_LINE('delete success');\n  END IF;\nEND;\n/\n```\n\n### (3) 游标行数－%ROWCOUNT\n    此属性记录了用户成功提取数据的行数，也可以了解为游标所在的行数。\n\n例4：\n\n```sql\nDECLARE\n  EMPL EMP%ROWTYPE;\n  CURSOR EMP_CUR IS\n    SELECT\n      *\n    FROM\n      EMP;\nBEGIN\n  OPEN EMP_CUR;\n  LOOP\n    FETCH EMP_CUR INTO EMPL;\n    DBMS_OUTPUT.PUT_LINE(TO_CHAR(EMPL.EMPNO));\n    EXIT WHEN EMP_CUR%ROWCOUNT=5 OR EMP_CUR%NOTFOUND;\n  END LOOP;\n  CLOSE EMP_CUR;\nEND;\n```\n(4) 是否打开游标－%ISOPEN\n\n例5：\n\n```sql\nDECLARE\n  EMPL EMP%ROWTYPE;\n  CURSOR EMP_CUR IS\n    SELECT\n      *\n    FROM\n      EMP;\nBEGIN\n  IF EMP_CUR%ISOPEN THEN\n    FETCH EMP_CUR INTO EMPL;\n    DBMS_OUTPUT.PUT_LINE(TO_CHAR(EMPL.EMPNO));\n  ELSE\n    DBMS_OUTPUT.PUT_LINE('EMP_CUR IS NOT OPEN');\n    OPEN EMP_CUR;\n    LOOP\n      FETCH EMP_CUR INTO EMPL;\n      DBMS_OUTPUT.PUT_LINE(TO_CHAR(EMPL.EMPNO));\n      EXIT WHEN EMP_CUR%ROWCOUNT=5;\n    END LOOP;\n    CLOSE EMP_CUR;\n  END IF;\nEND;\n/\n```\n\n## 参数化游标\n\n在定义游标时可以带上参数，使得在使用游标时，根据参数不同所选中的结果集也不同，达到动态使用游标的目的。\n\n例6：\n\n首先在SQL/PLUS上输入下面的语句：\n\n```s\nAccept dept_id prompt 'please input the deptno:'\n```\n\n说明：accept是SQL*PLUS的命令，不是pl/sql语句，类似于c++的cin，该命令可以接受你的键盘输入到dept_id。\n\n例6：\n```sql\nDECLARE\n  DID  EMP.DEPTNO%TYPE:=&DEPT_ID;\n  EMPL EMP%ROWTYPE;\n  CURSOR EMP_CUR(DEPTID NUMBER)IS\n    SELECT\n      *\n    FROM\n      EMP\n    WHERE\n      DEPTNO=DEPTID;\nBEGIN\n  OPEN EMP_CUR(DID);\n  LOOP\n    FETCH EMP_CUR INTO EMPL;\n    DBMS_OUTPUT.PUT_LINE(TO_CHAR(EMPL.EMPNO));\n    EXIT WHEN (EMP_CUR%ROWCOUNT=3) OR (EMP_CUR%NOTFOUND);\n  END LOOP;\n  CLOSE EMP_CUR;\nEND;\n```\n\n## 游标变量的使用\n\n### （1）声明游标变量类型\n\n游标变量是一种引用类型，当程序运行时，他们可以指向不同的存储单元（类似于c语言中的指针类型）。如果要使用引用类型，首先要声明该变量，然后相应的存储单元必须要分配。Pl/sql中引用类型通过下述语法进行声明：\n\n  Ref type\n\n其中，type是已经被定义的类型，ref关键字指明：新的类型必须是一个指向type类型的指针。因此，游标变量就是 REF CURSOR（指向游标的指针）。定义一个游标变量的完整类型语法如下：\n\n  Type <新类型名> is ref cursor return<游标的返回类型>\n\n其中，<新类型名>是新定义的游标变量的类型，<游标的返回类型>是指该游标返回的记录类型，这样定义的游标变量类型是受限的，它的返回类型只能是特定的记录类型；\n如果没有return<游标的返回类型>部分：\n\n  Type <新类型名> is ref cursor\n\n这样的游标变量类型是非受限的，一个非受限的游标变量可以为任何查询打开。\n\n例1：声明游标变量\n\n```sql\nDeclare\nType t_deptref is ref cursor\n  Return scott.dept%rowtype;   --使用%rowtype定义返回类型\nType manager_rcd is record(\nEname scott.emp.sname%type,\nSal scott.emp.sal%type,\nEdept scott.emp.deptno%type); --定义记录类型，类似于c语言中的结构体\n\nType t_managerref is ref cursor\n   Return manager_rcd;        -- 定义返回类型为manager_rcd的游标变量类型\n  V_dept t_deptref;           -- 定义t_deptref类型的游标变量\n  V_manager t_managerref;     -- 定义t_managerref类型的游标变量\n```\n\n### （2）打开游标变量\n\n如果要将一个游标变量于一个特定的select语句相关联，需要使用OPEN FOR语句，其语法是：\n\n  OPEN <游标变量> FOR <select语句>；\n\n例2：打开游标变量\n\n```sql\nDECLARE\n  TYPE T_DEPTREF IS\n    REF CURSOR RETURN SCOTT.DEPT%ROWTYPE;\n  V_DEPT   T_DEPTREF;\n  ROW_DEPT SCOTT.DEPT%ROWTYPE;\nBEGIN\n  OPEN V_DEPT FOR\n    SELECT\n      *\n    FROM\n      SCOTT.DEPT;\n  FETCH V_DEPT INTO ROW_DEPT;\n  DBMS_OUTPUT.PUT_LINE(' ' \n    ||TO_CHAR(ROW_DEPT.DEPTNO)\n    ||' '\n    ||ROW_DEPT.DNAME\n    ||' '\n    ||ROW_DEPT.LOC);\n  LOOP\n    EXIT WHEN NOT V_DEPT%FOUND;\n    FETCH V_DEPT INTO ROW_DEPT;\n    DBMS_OUTPUT.PUT_LINE(' '\n      ||TO_CHAR(ROW_DEPT.DEPTNO)\n      ||' '\n      ||ROW_DEPT.DNAME\n      ||' '\n      ||ROW_DEPT.LOC);\n  END LOOP;\nEND;\n```","slug":"ORACLE-PLSQL-游标","published":1,"updated":"2023-06-23T01:05:17.493Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5ur002wlv9ebfht683t","content":"<h2 id=\"PL-SQL中的游标CURSOR\"><a href=\"#PL-SQL中的游标CURSOR\" class=\"headerlink\" title=\"PL&#x2F;SQL中的游标CURSOR\"></a>PL&#x2F;SQL中的游标CURSOR</h2><p>注意例子中：%TYPE和%ROWTYPE两种特殊变量；</p>\n<p>游标是用来处理使用select语句从数据库中检索到的多行记录的工具，借助于游标的功能，数据库应用程序可以对一组记录逐个进行处理，每次处理一行。可以将游标理解为指向select查询结果的指针。</p>\n<p>游标分为显式游标和隐式游标，隐式游标无需用户过问，我们主要学习显式游标。</p>\n<p>显式游标处理的4个步骤：<br>  a)声明游标<br>  b)为查询打开游标<br>  c)将结果提取到PL&#x2F;SQL变量中<br>  d)关闭游标</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DECLARE</span></span><br><span class=\"line\"> <span class=\"comment\">-- [1] 返回值</span></span><br><span class=\"line\">  EMP SCOTT.EMP<span class=\"operator\">%</span>ROWTYPE;</span><br><span class=\"line\"> <span class=\"comment\">-- [2] 游标</span></span><br><span class=\"line\">  <span class=\"keyword\">CURSOR</span> EMP_CUR <span class=\"keyword\">IS</span></span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">      EMPNO,</span><br><span class=\"line\">      SAL</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span></span><br><span class=\"line\">      SCOTT.EMP;</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\"> <span class=\"comment\">-- [3] open</span></span><br><span class=\"line\">  <span class=\"keyword\">OPEN</span> EMP_CUR;</span><br><span class=\"line\"> <span class=\"comment\">-- [4] loop</span></span><br><span class=\"line\">  LOOP</span><br><span class=\"line\"> <span class=\"comment\">-- [5] exit condition</span></span><br><span class=\"line\">    EXIT <span class=\"keyword\">WHEN</span> <span class=\"keyword\">NOT</span> EMP_CUR<span class=\"operator\">%</span>FOUND;</span><br><span class=\"line\"> <span class=\"comment\">-- [6] fetch</span></span><br><span class=\"line\">    <span class=\"keyword\">FETCH</span> EMP_CUR <span class=\"keyword\">INTO</span> EMP;</span><br><span class=\"line\"> <span class=\"comment\">-- [7] do sth</span></span><br><span class=\"line\">  <span class=\"keyword\">END</span> LOOP;</span><br><span class=\"line\"> <span class=\"comment\">-- [8]关闭游标</span></span><br><span class=\"line\">  <span class=\"keyword\">CLOSE</span> EMP_CUR;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br></pre></td></tr></table></figure>\n\n<p>(1)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DECLARE</span></span><br><span class=\"line\">  EMP_ID   SCOTT.EMP.EMPNO<span class=\"operator\">%</span>TYPE; <span class=\"comment\">--变量Emp_id的类型取scott.emp.empno的类型</span></span><br><span class=\"line\">  EMP_NAME SCOTT.EMP.ENAME<span class=\"operator\">%</span>TYPE;</span><br><span class=\"line\">  EMP_JOB  SCOTT.EMP.JOB<span class=\"operator\">%</span>TYPE;</span><br><span class=\"line\">  EMP_SAL  SCOTT.EMP.SAL<span class=\"operator\">%</span>TYPE;</span><br><span class=\"line\">  <span class=\"keyword\">CURSOR</span> EMP_CUR <span class=\"keyword\">IS</span> <span class=\"comment\">--声明游标emp_cur</span></span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">      EMPNO,</span><br><span class=\"line\">      ENAME,</span><br><span class=\"line\">      JOB,</span><br><span class=\"line\">      SAL</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span></span><br><span class=\"line\">      SCOTT.EMP</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span></span><br><span class=\"line\">      DEPTNO<span class=\"operator\">=</span><span class=\"number\">20</span></span><br><span class=\"line\">    <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span></span><br><span class=\"line\">      SAL;</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  <span class=\"keyword\">OPEN</span> EMP_CUR; <span class=\"comment\">-- 打开游标，实质就是执行游标emp_cur定义中的sql语句</span></span><br><span class=\"line\">  <span class=\"keyword\">FETCH</span> EMP_CUR <span class=\"keyword\">INTO</span> EMP_ID, EMP_NAME, EMP_JOB, EMP_SAL;</span><br><span class=\"line\"> <span class=\"comment\">--提取游标，实质就是获取emp_cur所指向的结果集中的当前行</span></span><br><span class=\"line\">  LOOP</span><br><span class=\"line\">    EXIT <span class=\"keyword\">WHEN</span> <span class=\"keyword\">NOT</span> EMP_CUR<span class=\"operator\">%</span>FOUND; <span class=\"comment\">--如果游标走到结果集的尾部，则结束LOOP</span></span><br><span class=\"line\">    IF <span class=\"built_in\">LOWER</span>(EMP_JOB)<span class=\"operator\">=</span><span class=\"string\">&#x27;MANAGER&#x27;</span> <span class=\"keyword\">THEN</span></span><br><span class=\"line\">      DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;THE MANAGER IS&#x27;</span></span><br><span class=\"line\">        <span class=\"operator\">||</span> EMP_NAME);</span><br><span class=\"line\">    <span class=\"keyword\">ELSE</span></span><br><span class=\"line\">      DBMS_OUTPUT.PUT_LINE(EMP_ID</span><br><span class=\"line\">        <span class=\"operator\">||</span> <span class=\"string\">&#x27;IS&#x27;</span></span><br><span class=\"line\">        <span class=\"operator\">||</span>EMP_NAME</span><br><span class=\"line\">        <span class=\"operator\">||</span><span class=\"string\">&#x27;AND SALARY IS&#x27;</span></span><br><span class=\"line\">        <span class=\"operator\">||</span> EMP_SAL);</span><br><span class=\"line\">    <span class=\"keyword\">END</span> IF;</span><br><span class=\"line\">    <span class=\"keyword\">FETCH</span> EMP_CUR <span class=\"keyword\">INTO</span> EMP_ID, EMP_NAME, EMP_JOB, EMP_SAL;</span><br><span class=\"line\">  <span class=\"keyword\">END</span> LOOP;</span><br><span class=\"line\">  <span class=\"keyword\">CLOSE</span> EMP_CUR; <span class=\"comment\">--关闭游标</span></span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br></pre></td></tr></table></figure>\n\n<p>(2) 上面的例子可以修改如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DECLARE</span></span><br><span class=\"line\">  EMPL SCOTT.EMP<span class=\"operator\">%</span>ROWTYPE; <span class=\"comment\">--变量empl的类型为复合类型，类似于c语言中的结构体</span></span><br><span class=\"line\">  <span class=\"keyword\">CURSOR</span> EMP_CUR <span class=\"keyword\">IS</span> <span class=\"comment\">--声明游标emp_cur</span></span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">      <span class=\"operator\">*</span></span><br><span class=\"line\">    <span class=\"keyword\">FROM</span></span><br><span class=\"line\">      SCOTT.EMP</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span></span><br><span class=\"line\">      DEPTNO<span class=\"operator\">=</span><span class=\"number\">20</span></span><br><span class=\"line\">    <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span></span><br><span class=\"line\">      SAL;</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  <span class=\"keyword\">OPEN</span> EMP_CUR; <span class=\"comment\">-- 打开游标，实质就是执行游标emp_cur定义中的sql语句</span></span><br><span class=\"line\">  <span class=\"keyword\">FETCH</span> EMP_CUR <span class=\"keyword\">INTO</span> EMPL;</span><br><span class=\"line\"> <span class=\"comment\">--提取游标，实质就是获取emp_cur所指向的结果集中的当前行</span></span><br><span class=\"line\">  LOOP</span><br><span class=\"line\">    EXIT <span class=\"keyword\">WHEN</span> <span class=\"keyword\">NOT</span> EMP_CUR<span class=\"operator\">%</span>FOUND; <span class=\"comment\">--如果游标走到结果集的尾部，则结束LOOP</span></span><br><span class=\"line\">    IF <span class=\"built_in\">LOWER</span>(EMPL.JOB)<span class=\"operator\">=</span><span class=\"string\">&#x27;MANAGER&#x27;</span> <span class=\"keyword\">THEN</span></span><br><span class=\"line\">      DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;THE MANAGER IS&#x27;</span></span><br><span class=\"line\">        <span class=\"operator\">||</span> EMPL.ENAME);</span><br><span class=\"line\">    <span class=\"keyword\">ELSE</span></span><br><span class=\"line\">      DBMS_OUTPUT.PUT_LINE(EMPL.EMPNO</span><br><span class=\"line\">        <span class=\"operator\">||</span> <span class=\"string\">&#x27; IS &#x27;</span></span><br><span class=\"line\">        <span class=\"operator\">||</span>EMPL.ENAME</span><br><span class=\"line\">        <span class=\"operator\">||</span> <span class=\"string\">&#x27; AND SALARY IS &#x27;</span></span><br><span class=\"line\">        <span class=\"operator\">||</span> EMPL.SAL);</span><br><span class=\"line\">    <span class=\"keyword\">END</span> IF;</span><br><span class=\"line\">    <span class=\"keyword\">FETCH</span> EMP_CUR <span class=\"keyword\">INTO</span> EMPL;</span><br><span class=\"line\">  <span class=\"keyword\">END</span> LOOP;</span><br><span class=\"line\">  <span class=\"keyword\">CLOSE</span> EMP_CUR; <span class=\"comment\">--关闭游标</span></span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span>         <span class=\"comment\">--执行上面的语句</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"隐式游标的基本操作\"><a href=\"#隐式游标的基本操作\" class=\"headerlink\" title=\"隐式游标的基本操作\"></a>隐式游标的基本操作</h2><p>隐式游标 —由Oracle数据库自动创建，名称是(SQL) ,主要用途是可以返回一个操作是否成功或失败.<br>  (1) 由Oracle在内部声明，由系统管理<br>  (2) 用于处理<br>     -DML语句   –注意只能用于DML语句哦。<br>     -返回单行的查询–如果使用select .. into ，则要求该select查询的结果只包含一条记录<br>  (3) 用于判断一个操作是否成功.<br>     SQL%notfound  –返回Boolean值  存在结果集返回 False<br>     SQL%found    –返回Boolean值   存在结果集返回 True<br>     SQL%rowcount  –修改涉及到的记录的行数<br>     SQL%isopen   –在隐式游标里一般这个属性是自动打开和关闭的，且任何时候查询都返回False。</p>\n<p>例1：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SET</span> SERVEROUTPUT <span class=\"keyword\">ON</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DECLARE</span></span><br><span class=\"line\">  ICOUNT <span class=\"type\">INT</span>:<span class=\"operator\">=</span><span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  <span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> EMP(</span><br><span class=\"line\">    EMPNO,</span><br><span class=\"line\">    ENMAE</span><br><span class=\"line\">  ) <span class=\"keyword\">VALUES</span>(</span><br><span class=\"line\">    <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;jerry&#x27;</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">  DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;游标所影响的行数：&#x27;</span></span><br><span class=\"line\">    <span class=\"operator\">||</span><span class=\"keyword\">SQL</span><span class=\"operator\">%</span>ROWCOUNT);</span><br><span class=\"line\">  IF <span class=\"keyword\">SQL</span><span class=\"operator\">%</span>NOTFOUNT <span class=\"keyword\">THEN</span></span><br><span class=\"line\">    DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;NotFount为真&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">ELSE</span></span><br><span class=\"line\">    DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;NofFount为假&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">END</span> IF;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"显式游标的属性操作\"><a href=\"#显式游标的属性操作\" class=\"headerlink\" title=\"显式游标的属性操作\"></a>显式游标的属性操作</h2><h3 id=\"（1）是否找到游标－-FOUND\"><a href=\"#（1）是否找到游标－-FOUND\" class=\"headerlink\" title=\"（1）是否找到游标－%FOUND\"></a>（1）是否找到游标－%FOUND</h3><p>  此属性表示当前游标是否指向有效的一行，取值：TRUE FALSE</p>\n<p>例2：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  <span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> EMP</span><br><span class=\"line\">  <span class=\"keyword\">WHERE</span></span><br><span class=\"line\">    EMPNO<span class=\"operator\">=</span><span class=\"number\">7934</span>;</span><br><span class=\"line\">  IF <span class=\"keyword\">SQL</span><span class=\"operator\">%</span>FOUND <span class=\"keyword\">THEN</span></span><br><span class=\"line\">    DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;DELETE SUCCESS&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">ELSE</span></span><br><span class=\"line\">    DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;DELETE FAIL&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">END</span> IF;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br></pre></td></tr></table></figure>\n<p>说明：该例使用了隐式游标,当然，显式游标也可以使用属性%FOUND</p>\n<h3 id=\"（2）是否未找到游标－-NOTFOUND\"><a href=\"#（2）是否未找到游标－-NOTFOUND\" class=\"headerlink\" title=\"（2）是否未找到游标－%NOTFOUND\"></a>（2）是否未找到游标－%NOTFOUND</h3><p>上例等价于：</p>\n<p>例3：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  <span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> EMP</span><br><span class=\"line\">  <span class=\"keyword\">WHERE</span></span><br><span class=\"line\">    EMPNO<span class=\"operator\">=</span><span class=\"number\">7934</span>;</span><br><span class=\"line\">  IF <span class=\"keyword\">SQL</span><span class=\"operator\">%</span>NOTFOUND <span class=\"keyword\">THEN</span></span><br><span class=\"line\">    DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;delete fail&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">ELSE</span></span><br><span class=\"line\">    DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;delete success&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">END</span> IF;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-游标行数－-ROWCOUNT\"><a href=\"#3-游标行数－-ROWCOUNT\" class=\"headerlink\" title=\"(3) 游标行数－%ROWCOUNT\"></a>(3) 游标行数－%ROWCOUNT</h3><pre><code>此属性记录了用户成功提取数据的行数，也可以了解为游标所在的行数。\n</code></pre>\n<p>例4：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DECLARE</span></span><br><span class=\"line\">  EMPL EMP<span class=\"operator\">%</span>ROWTYPE;</span><br><span class=\"line\">  <span class=\"keyword\">CURSOR</span> EMP_CUR <span class=\"keyword\">IS</span></span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">      <span class=\"operator\">*</span></span><br><span class=\"line\">    <span class=\"keyword\">FROM</span></span><br><span class=\"line\">      EMP;</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  <span class=\"keyword\">OPEN</span> EMP_CUR;</span><br><span class=\"line\">  LOOP</span><br><span class=\"line\">    <span class=\"keyword\">FETCH</span> EMP_CUR <span class=\"keyword\">INTO</span> EMPL;</span><br><span class=\"line\">    DBMS_OUTPUT.PUT_LINE(TO_CHAR(EMPL.EMPNO));</span><br><span class=\"line\">    EXIT <span class=\"keyword\">WHEN</span> EMP_CUR<span class=\"operator\">%</span>ROWCOUNT<span class=\"operator\">=</span><span class=\"number\">5</span> <span class=\"keyword\">OR</span> EMP_CUR<span class=\"operator\">%</span>NOTFOUND;</span><br><span class=\"line\">  <span class=\"keyword\">END</span> LOOP;</span><br><span class=\"line\">  <span class=\"keyword\">CLOSE</span> EMP_CUR;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br></pre></td></tr></table></figure>\n<p>(4) 是否打开游标－%ISOPEN</p>\n<p>例5：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DECLARE</span></span><br><span class=\"line\">  EMPL EMP<span class=\"operator\">%</span>ROWTYPE;</span><br><span class=\"line\">  <span class=\"keyword\">CURSOR</span> EMP_CUR <span class=\"keyword\">IS</span></span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">      <span class=\"operator\">*</span></span><br><span class=\"line\">    <span class=\"keyword\">FROM</span></span><br><span class=\"line\">      EMP;</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  IF EMP_CUR<span class=\"operator\">%</span>ISOPEN <span class=\"keyword\">THEN</span></span><br><span class=\"line\">    <span class=\"keyword\">FETCH</span> EMP_CUR <span class=\"keyword\">INTO</span> EMPL;</span><br><span class=\"line\">    DBMS_OUTPUT.PUT_LINE(TO_CHAR(EMPL.EMPNO));</span><br><span class=\"line\">  <span class=\"keyword\">ELSE</span></span><br><span class=\"line\">    DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;EMP_CUR IS NOT OPEN&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">OPEN</span> EMP_CUR;</span><br><span class=\"line\">    LOOP</span><br><span class=\"line\">      <span class=\"keyword\">FETCH</span> EMP_CUR <span class=\"keyword\">INTO</span> EMPL;</span><br><span class=\"line\">      DBMS_OUTPUT.PUT_LINE(TO_CHAR(EMPL.EMPNO));</span><br><span class=\"line\">      EXIT <span class=\"keyword\">WHEN</span> EMP_CUR<span class=\"operator\">%</span>ROWCOUNT<span class=\"operator\">=</span><span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">END</span> LOOP;</span><br><span class=\"line\">    <span class=\"keyword\">CLOSE</span> EMP_CUR;</span><br><span class=\"line\">  <span class=\"keyword\">END</span> IF;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参数化游标\"><a href=\"#参数化游标\" class=\"headerlink\" title=\"参数化游标\"></a>参数化游标</h2><p>在定义游标时可以带上参数，使得在使用游标时，根据参数不同所选中的结果集也不同，达到动态使用游标的目的。</p>\n<p>例6：</p>\n<p>首先在SQL&#x2F;PLUS上输入下面的语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Accept dept_id prompt &#x27;please input the deptno:&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>说明：accept是SQL*PLUS的命令，不是pl&#x2F;sql语句，类似于c++的cin，该命令可以接受你的键盘输入到dept_id。</p>\n<p>例6：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DECLARE</span></span><br><span class=\"line\">  DID  EMP.DEPTNO<span class=\"operator\">%</span>TYPE:<span class=\"operator\">=</span><span class=\"operator\">&amp;</span>DEPT_ID;</span><br><span class=\"line\">  EMPL EMP<span class=\"operator\">%</span>ROWTYPE;</span><br><span class=\"line\">  <span class=\"keyword\">CURSOR</span> EMP_CUR(DEPTID NUMBER)<span class=\"keyword\">IS</span></span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">      <span class=\"operator\">*</span></span><br><span class=\"line\">    <span class=\"keyword\">FROM</span></span><br><span class=\"line\">      EMP</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span></span><br><span class=\"line\">      DEPTNO<span class=\"operator\">=</span>DEPTID;</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  <span class=\"keyword\">OPEN</span> EMP_CUR(DID);</span><br><span class=\"line\">  LOOP</span><br><span class=\"line\">    <span class=\"keyword\">FETCH</span> EMP_CUR <span class=\"keyword\">INTO</span> EMPL;</span><br><span class=\"line\">    DBMS_OUTPUT.PUT_LINE(TO_CHAR(EMPL.EMPNO));</span><br><span class=\"line\">    EXIT <span class=\"keyword\">WHEN</span> (EMP_CUR<span class=\"operator\">%</span>ROWCOUNT<span class=\"operator\">=</span><span class=\"number\">3</span>) <span class=\"keyword\">OR</span> (EMP_CUR<span class=\"operator\">%</span>NOTFOUND);</span><br><span class=\"line\">  <span class=\"keyword\">END</span> LOOP;</span><br><span class=\"line\">  <span class=\"keyword\">CLOSE</span> EMP_CUR;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"游标变量的使用\"><a href=\"#游标变量的使用\" class=\"headerlink\" title=\"游标变量的使用\"></a>游标变量的使用</h2><h3 id=\"（1）声明游标变量类型\"><a href=\"#（1）声明游标变量类型\" class=\"headerlink\" title=\"（1）声明游标变量类型\"></a>（1）声明游标变量类型</h3><p>游标变量是一种引用类型，当程序运行时，他们可以指向不同的存储单元（类似于c语言中的指针类型）。如果要使用引用类型，首先要声明该变量，然后相应的存储单元必须要分配。Pl&#x2F;sql中引用类型通过下述语法进行声明：</p>\n<p>  Ref type</p>\n<p>其中，type是已经被定义的类型，ref关键字指明：新的类型必须是一个指向type类型的指针。因此，游标变量就是 REF CURSOR（指向游标的指针）。定义一个游标变量的完整类型语法如下：</p>\n<p>  Type &lt;新类型名&gt; is ref cursor return&lt;游标的返回类型&gt;</p>\n<p>其中，&lt;新类型名&gt;是新定义的游标变量的类型，&lt;游标的返回类型&gt;是指该游标返回的记录类型，这样定义的游标变量类型是受限的，它的返回类型只能是特定的记录类型；<br>如果没有return&lt;游标的返回类型&gt;部分：</p>\n<p>  Type &lt;新类型名&gt; is ref cursor</p>\n<p>这样的游标变量类型是非受限的，一个非受限的游标变量可以为任何查询打开。</p>\n<p>例1：声明游标变量</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Declare</span></span><br><span class=\"line\">Type t_deptref <span class=\"keyword\">is</span> <span class=\"keyword\">ref</span> <span class=\"keyword\">cursor</span></span><br><span class=\"line\">  <span class=\"keyword\">Return</span> scott.dept<span class=\"operator\">%</span>rowtype;   <span class=\"comment\">--使用%rowtype定义返回类型</span></span><br><span class=\"line\">Type manager_rcd <span class=\"keyword\">is</span> record(</span><br><span class=\"line\">Ename scott.emp.sname<span class=\"operator\">%</span>type,</span><br><span class=\"line\">Sal scott.emp.sal<span class=\"operator\">%</span>type,</span><br><span class=\"line\">Edept scott.emp.deptno<span class=\"operator\">%</span>type); <span class=\"comment\">--定义记录类型，类似于c语言中的结构体</span></span><br><span class=\"line\"></span><br><span class=\"line\">Type t_managerref <span class=\"keyword\">is</span> <span class=\"keyword\">ref</span> <span class=\"keyword\">cursor</span></span><br><span class=\"line\">   <span class=\"keyword\">Return</span> manager_rcd;        <span class=\"comment\">-- 定义返回类型为manager_rcd的游标变量类型</span></span><br><span class=\"line\">  V_dept t_deptref;           <span class=\"comment\">-- 定义t_deptref类型的游标变量</span></span><br><span class=\"line\">  V_manager t_managerref;     <span class=\"comment\">-- 定义t_managerref类型的游标变量</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"（2）打开游标变量\"><a href=\"#（2）打开游标变量\" class=\"headerlink\" title=\"（2）打开游标变量\"></a>（2）打开游标变量</h3><p>如果要将一个游标变量于一个特定的select语句相关联，需要使用OPEN FOR语句，其语法是：</p>\n<p>  OPEN &lt;游标变量&gt; FOR &lt;select语句&gt;；</p>\n<p>例2：打开游标变量</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DECLARE</span></span><br><span class=\"line\">  TYPE T_DEPTREF <span class=\"keyword\">IS</span></span><br><span class=\"line\">    <span class=\"keyword\">REF</span> <span class=\"keyword\">CURSOR</span> <span class=\"keyword\">RETURN</span> SCOTT.DEPT<span class=\"operator\">%</span>ROWTYPE;</span><br><span class=\"line\">  V_DEPT   T_DEPTREF;</span><br><span class=\"line\">  ROW_DEPT SCOTT.DEPT<span class=\"operator\">%</span>ROWTYPE;</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  <span class=\"keyword\">OPEN</span> V_DEPT <span class=\"keyword\">FOR</span></span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">      <span class=\"operator\">*</span></span><br><span class=\"line\">    <span class=\"keyword\">FROM</span></span><br><span class=\"line\">      SCOTT.DEPT;</span><br><span class=\"line\">  <span class=\"keyword\">FETCH</span> V_DEPT <span class=\"keyword\">INTO</span> ROW_DEPT;</span><br><span class=\"line\">  DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27; &#x27;</span> </span><br><span class=\"line\">    <span class=\"operator\">||</span>TO_CHAR(ROW_DEPT.DEPTNO)</span><br><span class=\"line\">    <span class=\"operator\">||</span><span class=\"string\">&#x27; &#x27;</span></span><br><span class=\"line\">    <span class=\"operator\">||</span>ROW_DEPT.DNAME</span><br><span class=\"line\">    <span class=\"operator\">||</span><span class=\"string\">&#x27; &#x27;</span></span><br><span class=\"line\">    <span class=\"operator\">||</span>ROW_DEPT.LOC);</span><br><span class=\"line\">  LOOP</span><br><span class=\"line\">    EXIT <span class=\"keyword\">WHEN</span> <span class=\"keyword\">NOT</span> V_DEPT<span class=\"operator\">%</span>FOUND;</span><br><span class=\"line\">    <span class=\"keyword\">FETCH</span> V_DEPT <span class=\"keyword\">INTO</span> ROW_DEPT;</span><br><span class=\"line\">    DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27; &#x27;</span></span><br><span class=\"line\">      <span class=\"operator\">||</span>TO_CHAR(ROW_DEPT.DEPTNO)</span><br><span class=\"line\">      <span class=\"operator\">||</span><span class=\"string\">&#x27; &#x27;</span></span><br><span class=\"line\">      <span class=\"operator\">||</span>ROW_DEPT.DNAME</span><br><span class=\"line\">      <span class=\"operator\">||</span><span class=\"string\">&#x27; &#x27;</span></span><br><span class=\"line\">      <span class=\"operator\">||</span>ROW_DEPT.LOC);</span><br><span class=\"line\">  <span class=\"keyword\">END</span> LOOP;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"cover":false,"excerpt":"","more":"<h2 id=\"PL-SQL中的游标CURSOR\"><a href=\"#PL-SQL中的游标CURSOR\" class=\"headerlink\" title=\"PL&#x2F;SQL中的游标CURSOR\"></a>PL&#x2F;SQL中的游标CURSOR</h2><p>注意例子中：%TYPE和%ROWTYPE两种特殊变量；</p>\n<p>游标是用来处理使用select语句从数据库中检索到的多行记录的工具，借助于游标的功能，数据库应用程序可以对一组记录逐个进行处理，每次处理一行。可以将游标理解为指向select查询结果的指针。</p>\n<p>游标分为显式游标和隐式游标，隐式游标无需用户过问，我们主要学习显式游标。</p>\n<p>显式游标处理的4个步骤：<br>  a)声明游标<br>  b)为查询打开游标<br>  c)将结果提取到PL&#x2F;SQL变量中<br>  d)关闭游标</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DECLARE</span></span><br><span class=\"line\"> <span class=\"comment\">-- [1] 返回值</span></span><br><span class=\"line\">  EMP SCOTT.EMP<span class=\"operator\">%</span>ROWTYPE;</span><br><span class=\"line\"> <span class=\"comment\">-- [2] 游标</span></span><br><span class=\"line\">  <span class=\"keyword\">CURSOR</span> EMP_CUR <span class=\"keyword\">IS</span></span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">      EMPNO,</span><br><span class=\"line\">      SAL</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span></span><br><span class=\"line\">      SCOTT.EMP;</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\"> <span class=\"comment\">-- [3] open</span></span><br><span class=\"line\">  <span class=\"keyword\">OPEN</span> EMP_CUR;</span><br><span class=\"line\"> <span class=\"comment\">-- [4] loop</span></span><br><span class=\"line\">  LOOP</span><br><span class=\"line\"> <span class=\"comment\">-- [5] exit condition</span></span><br><span class=\"line\">    EXIT <span class=\"keyword\">WHEN</span> <span class=\"keyword\">NOT</span> EMP_CUR<span class=\"operator\">%</span>FOUND;</span><br><span class=\"line\"> <span class=\"comment\">-- [6] fetch</span></span><br><span class=\"line\">    <span class=\"keyword\">FETCH</span> EMP_CUR <span class=\"keyword\">INTO</span> EMP;</span><br><span class=\"line\"> <span class=\"comment\">-- [7] do sth</span></span><br><span class=\"line\">  <span class=\"keyword\">END</span> LOOP;</span><br><span class=\"line\"> <span class=\"comment\">-- [8]关闭游标</span></span><br><span class=\"line\">  <span class=\"keyword\">CLOSE</span> EMP_CUR;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br></pre></td></tr></table></figure>\n\n<p>(1)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DECLARE</span></span><br><span class=\"line\">  EMP_ID   SCOTT.EMP.EMPNO<span class=\"operator\">%</span>TYPE; <span class=\"comment\">--变量Emp_id的类型取scott.emp.empno的类型</span></span><br><span class=\"line\">  EMP_NAME SCOTT.EMP.ENAME<span class=\"operator\">%</span>TYPE;</span><br><span class=\"line\">  EMP_JOB  SCOTT.EMP.JOB<span class=\"operator\">%</span>TYPE;</span><br><span class=\"line\">  EMP_SAL  SCOTT.EMP.SAL<span class=\"operator\">%</span>TYPE;</span><br><span class=\"line\">  <span class=\"keyword\">CURSOR</span> EMP_CUR <span class=\"keyword\">IS</span> <span class=\"comment\">--声明游标emp_cur</span></span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">      EMPNO,</span><br><span class=\"line\">      ENAME,</span><br><span class=\"line\">      JOB,</span><br><span class=\"line\">      SAL</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span></span><br><span class=\"line\">      SCOTT.EMP</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span></span><br><span class=\"line\">      DEPTNO<span class=\"operator\">=</span><span class=\"number\">20</span></span><br><span class=\"line\">    <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span></span><br><span class=\"line\">      SAL;</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  <span class=\"keyword\">OPEN</span> EMP_CUR; <span class=\"comment\">-- 打开游标，实质就是执行游标emp_cur定义中的sql语句</span></span><br><span class=\"line\">  <span class=\"keyword\">FETCH</span> EMP_CUR <span class=\"keyword\">INTO</span> EMP_ID, EMP_NAME, EMP_JOB, EMP_SAL;</span><br><span class=\"line\"> <span class=\"comment\">--提取游标，实质就是获取emp_cur所指向的结果集中的当前行</span></span><br><span class=\"line\">  LOOP</span><br><span class=\"line\">    EXIT <span class=\"keyword\">WHEN</span> <span class=\"keyword\">NOT</span> EMP_CUR<span class=\"operator\">%</span>FOUND; <span class=\"comment\">--如果游标走到结果集的尾部，则结束LOOP</span></span><br><span class=\"line\">    IF <span class=\"built_in\">LOWER</span>(EMP_JOB)<span class=\"operator\">=</span><span class=\"string\">&#x27;MANAGER&#x27;</span> <span class=\"keyword\">THEN</span></span><br><span class=\"line\">      DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;THE MANAGER IS&#x27;</span></span><br><span class=\"line\">        <span class=\"operator\">||</span> EMP_NAME);</span><br><span class=\"line\">    <span class=\"keyword\">ELSE</span></span><br><span class=\"line\">      DBMS_OUTPUT.PUT_LINE(EMP_ID</span><br><span class=\"line\">        <span class=\"operator\">||</span> <span class=\"string\">&#x27;IS&#x27;</span></span><br><span class=\"line\">        <span class=\"operator\">||</span>EMP_NAME</span><br><span class=\"line\">        <span class=\"operator\">||</span><span class=\"string\">&#x27;AND SALARY IS&#x27;</span></span><br><span class=\"line\">        <span class=\"operator\">||</span> EMP_SAL);</span><br><span class=\"line\">    <span class=\"keyword\">END</span> IF;</span><br><span class=\"line\">    <span class=\"keyword\">FETCH</span> EMP_CUR <span class=\"keyword\">INTO</span> EMP_ID, EMP_NAME, EMP_JOB, EMP_SAL;</span><br><span class=\"line\">  <span class=\"keyword\">END</span> LOOP;</span><br><span class=\"line\">  <span class=\"keyword\">CLOSE</span> EMP_CUR; <span class=\"comment\">--关闭游标</span></span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br></pre></td></tr></table></figure>\n\n<p>(2) 上面的例子可以修改如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DECLARE</span></span><br><span class=\"line\">  EMPL SCOTT.EMP<span class=\"operator\">%</span>ROWTYPE; <span class=\"comment\">--变量empl的类型为复合类型，类似于c语言中的结构体</span></span><br><span class=\"line\">  <span class=\"keyword\">CURSOR</span> EMP_CUR <span class=\"keyword\">IS</span> <span class=\"comment\">--声明游标emp_cur</span></span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">      <span class=\"operator\">*</span></span><br><span class=\"line\">    <span class=\"keyword\">FROM</span></span><br><span class=\"line\">      SCOTT.EMP</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span></span><br><span class=\"line\">      DEPTNO<span class=\"operator\">=</span><span class=\"number\">20</span></span><br><span class=\"line\">    <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span></span><br><span class=\"line\">      SAL;</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  <span class=\"keyword\">OPEN</span> EMP_CUR; <span class=\"comment\">-- 打开游标，实质就是执行游标emp_cur定义中的sql语句</span></span><br><span class=\"line\">  <span class=\"keyword\">FETCH</span> EMP_CUR <span class=\"keyword\">INTO</span> EMPL;</span><br><span class=\"line\"> <span class=\"comment\">--提取游标，实质就是获取emp_cur所指向的结果集中的当前行</span></span><br><span class=\"line\">  LOOP</span><br><span class=\"line\">    EXIT <span class=\"keyword\">WHEN</span> <span class=\"keyword\">NOT</span> EMP_CUR<span class=\"operator\">%</span>FOUND; <span class=\"comment\">--如果游标走到结果集的尾部，则结束LOOP</span></span><br><span class=\"line\">    IF <span class=\"built_in\">LOWER</span>(EMPL.JOB)<span class=\"operator\">=</span><span class=\"string\">&#x27;MANAGER&#x27;</span> <span class=\"keyword\">THEN</span></span><br><span class=\"line\">      DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;THE MANAGER IS&#x27;</span></span><br><span class=\"line\">        <span class=\"operator\">||</span> EMPL.ENAME);</span><br><span class=\"line\">    <span class=\"keyword\">ELSE</span></span><br><span class=\"line\">      DBMS_OUTPUT.PUT_LINE(EMPL.EMPNO</span><br><span class=\"line\">        <span class=\"operator\">||</span> <span class=\"string\">&#x27; IS &#x27;</span></span><br><span class=\"line\">        <span class=\"operator\">||</span>EMPL.ENAME</span><br><span class=\"line\">        <span class=\"operator\">||</span> <span class=\"string\">&#x27; AND SALARY IS &#x27;</span></span><br><span class=\"line\">        <span class=\"operator\">||</span> EMPL.SAL);</span><br><span class=\"line\">    <span class=\"keyword\">END</span> IF;</span><br><span class=\"line\">    <span class=\"keyword\">FETCH</span> EMP_CUR <span class=\"keyword\">INTO</span> EMPL;</span><br><span class=\"line\">  <span class=\"keyword\">END</span> LOOP;</span><br><span class=\"line\">  <span class=\"keyword\">CLOSE</span> EMP_CUR; <span class=\"comment\">--关闭游标</span></span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span>         <span class=\"comment\">--执行上面的语句</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"隐式游标的基本操作\"><a href=\"#隐式游标的基本操作\" class=\"headerlink\" title=\"隐式游标的基本操作\"></a>隐式游标的基本操作</h2><p>隐式游标 —由Oracle数据库自动创建，名称是(SQL) ,主要用途是可以返回一个操作是否成功或失败.<br>  (1) 由Oracle在内部声明，由系统管理<br>  (2) 用于处理<br>     -DML语句   –注意只能用于DML语句哦。<br>     -返回单行的查询–如果使用select .. into ，则要求该select查询的结果只包含一条记录<br>  (3) 用于判断一个操作是否成功.<br>     SQL%notfound  –返回Boolean值  存在结果集返回 False<br>     SQL%found    –返回Boolean值   存在结果集返回 True<br>     SQL%rowcount  –修改涉及到的记录的行数<br>     SQL%isopen   –在隐式游标里一般这个属性是自动打开和关闭的，且任何时候查询都返回False。</p>\n<p>例1：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SET</span> SERVEROUTPUT <span class=\"keyword\">ON</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DECLARE</span></span><br><span class=\"line\">  ICOUNT <span class=\"type\">INT</span>:<span class=\"operator\">=</span><span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  <span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> EMP(</span><br><span class=\"line\">    EMPNO,</span><br><span class=\"line\">    ENMAE</span><br><span class=\"line\">  ) <span class=\"keyword\">VALUES</span>(</span><br><span class=\"line\">    <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;jerry&#x27;</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">  DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;游标所影响的行数：&#x27;</span></span><br><span class=\"line\">    <span class=\"operator\">||</span><span class=\"keyword\">SQL</span><span class=\"operator\">%</span>ROWCOUNT);</span><br><span class=\"line\">  IF <span class=\"keyword\">SQL</span><span class=\"operator\">%</span>NOTFOUNT <span class=\"keyword\">THEN</span></span><br><span class=\"line\">    DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;NotFount为真&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">ELSE</span></span><br><span class=\"line\">    DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;NofFount为假&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">END</span> IF;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"显式游标的属性操作\"><a href=\"#显式游标的属性操作\" class=\"headerlink\" title=\"显式游标的属性操作\"></a>显式游标的属性操作</h2><h3 id=\"（1）是否找到游标－-FOUND\"><a href=\"#（1）是否找到游标－-FOUND\" class=\"headerlink\" title=\"（1）是否找到游标－%FOUND\"></a>（1）是否找到游标－%FOUND</h3><p>  此属性表示当前游标是否指向有效的一行，取值：TRUE FALSE</p>\n<p>例2：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  <span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> EMP</span><br><span class=\"line\">  <span class=\"keyword\">WHERE</span></span><br><span class=\"line\">    EMPNO<span class=\"operator\">=</span><span class=\"number\">7934</span>;</span><br><span class=\"line\">  IF <span class=\"keyword\">SQL</span><span class=\"operator\">%</span>FOUND <span class=\"keyword\">THEN</span></span><br><span class=\"line\">    DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;DELETE SUCCESS&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">ELSE</span></span><br><span class=\"line\">    DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;DELETE FAIL&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">END</span> IF;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br></pre></td></tr></table></figure>\n<p>说明：该例使用了隐式游标,当然，显式游标也可以使用属性%FOUND</p>\n<h3 id=\"（2）是否未找到游标－-NOTFOUND\"><a href=\"#（2）是否未找到游标－-NOTFOUND\" class=\"headerlink\" title=\"（2）是否未找到游标－%NOTFOUND\"></a>（2）是否未找到游标－%NOTFOUND</h3><p>上例等价于：</p>\n<p>例3：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  <span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> EMP</span><br><span class=\"line\">  <span class=\"keyword\">WHERE</span></span><br><span class=\"line\">    EMPNO<span class=\"operator\">=</span><span class=\"number\">7934</span>;</span><br><span class=\"line\">  IF <span class=\"keyword\">SQL</span><span class=\"operator\">%</span>NOTFOUND <span class=\"keyword\">THEN</span></span><br><span class=\"line\">    DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;delete fail&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">ELSE</span></span><br><span class=\"line\">    DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;delete success&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">END</span> IF;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-游标行数－-ROWCOUNT\"><a href=\"#3-游标行数－-ROWCOUNT\" class=\"headerlink\" title=\"(3) 游标行数－%ROWCOUNT\"></a>(3) 游标行数－%ROWCOUNT</h3><pre><code>此属性记录了用户成功提取数据的行数，也可以了解为游标所在的行数。\n</code></pre>\n<p>例4：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DECLARE</span></span><br><span class=\"line\">  EMPL EMP<span class=\"operator\">%</span>ROWTYPE;</span><br><span class=\"line\">  <span class=\"keyword\">CURSOR</span> EMP_CUR <span class=\"keyword\">IS</span></span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">      <span class=\"operator\">*</span></span><br><span class=\"line\">    <span class=\"keyword\">FROM</span></span><br><span class=\"line\">      EMP;</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  <span class=\"keyword\">OPEN</span> EMP_CUR;</span><br><span class=\"line\">  LOOP</span><br><span class=\"line\">    <span class=\"keyword\">FETCH</span> EMP_CUR <span class=\"keyword\">INTO</span> EMPL;</span><br><span class=\"line\">    DBMS_OUTPUT.PUT_LINE(TO_CHAR(EMPL.EMPNO));</span><br><span class=\"line\">    EXIT <span class=\"keyword\">WHEN</span> EMP_CUR<span class=\"operator\">%</span>ROWCOUNT<span class=\"operator\">=</span><span class=\"number\">5</span> <span class=\"keyword\">OR</span> EMP_CUR<span class=\"operator\">%</span>NOTFOUND;</span><br><span class=\"line\">  <span class=\"keyword\">END</span> LOOP;</span><br><span class=\"line\">  <span class=\"keyword\">CLOSE</span> EMP_CUR;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br></pre></td></tr></table></figure>\n<p>(4) 是否打开游标－%ISOPEN</p>\n<p>例5：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DECLARE</span></span><br><span class=\"line\">  EMPL EMP<span class=\"operator\">%</span>ROWTYPE;</span><br><span class=\"line\">  <span class=\"keyword\">CURSOR</span> EMP_CUR <span class=\"keyword\">IS</span></span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">      <span class=\"operator\">*</span></span><br><span class=\"line\">    <span class=\"keyword\">FROM</span></span><br><span class=\"line\">      EMP;</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  IF EMP_CUR<span class=\"operator\">%</span>ISOPEN <span class=\"keyword\">THEN</span></span><br><span class=\"line\">    <span class=\"keyword\">FETCH</span> EMP_CUR <span class=\"keyword\">INTO</span> EMPL;</span><br><span class=\"line\">    DBMS_OUTPUT.PUT_LINE(TO_CHAR(EMPL.EMPNO));</span><br><span class=\"line\">  <span class=\"keyword\">ELSE</span></span><br><span class=\"line\">    DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;EMP_CUR IS NOT OPEN&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">OPEN</span> EMP_CUR;</span><br><span class=\"line\">    LOOP</span><br><span class=\"line\">      <span class=\"keyword\">FETCH</span> EMP_CUR <span class=\"keyword\">INTO</span> EMPL;</span><br><span class=\"line\">      DBMS_OUTPUT.PUT_LINE(TO_CHAR(EMPL.EMPNO));</span><br><span class=\"line\">      EXIT <span class=\"keyword\">WHEN</span> EMP_CUR<span class=\"operator\">%</span>ROWCOUNT<span class=\"operator\">=</span><span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">END</span> LOOP;</span><br><span class=\"line\">    <span class=\"keyword\">CLOSE</span> EMP_CUR;</span><br><span class=\"line\">  <span class=\"keyword\">END</span> IF;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参数化游标\"><a href=\"#参数化游标\" class=\"headerlink\" title=\"参数化游标\"></a>参数化游标</h2><p>在定义游标时可以带上参数，使得在使用游标时，根据参数不同所选中的结果集也不同，达到动态使用游标的目的。</p>\n<p>例6：</p>\n<p>首先在SQL&#x2F;PLUS上输入下面的语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Accept dept_id prompt &#x27;please input the deptno:&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>说明：accept是SQL*PLUS的命令，不是pl&#x2F;sql语句，类似于c++的cin，该命令可以接受你的键盘输入到dept_id。</p>\n<p>例6：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DECLARE</span></span><br><span class=\"line\">  DID  EMP.DEPTNO<span class=\"operator\">%</span>TYPE:<span class=\"operator\">=</span><span class=\"operator\">&amp;</span>DEPT_ID;</span><br><span class=\"line\">  EMPL EMP<span class=\"operator\">%</span>ROWTYPE;</span><br><span class=\"line\">  <span class=\"keyword\">CURSOR</span> EMP_CUR(DEPTID NUMBER)<span class=\"keyword\">IS</span></span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">      <span class=\"operator\">*</span></span><br><span class=\"line\">    <span class=\"keyword\">FROM</span></span><br><span class=\"line\">      EMP</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span></span><br><span class=\"line\">      DEPTNO<span class=\"operator\">=</span>DEPTID;</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  <span class=\"keyword\">OPEN</span> EMP_CUR(DID);</span><br><span class=\"line\">  LOOP</span><br><span class=\"line\">    <span class=\"keyword\">FETCH</span> EMP_CUR <span class=\"keyword\">INTO</span> EMPL;</span><br><span class=\"line\">    DBMS_OUTPUT.PUT_LINE(TO_CHAR(EMPL.EMPNO));</span><br><span class=\"line\">    EXIT <span class=\"keyword\">WHEN</span> (EMP_CUR<span class=\"operator\">%</span>ROWCOUNT<span class=\"operator\">=</span><span class=\"number\">3</span>) <span class=\"keyword\">OR</span> (EMP_CUR<span class=\"operator\">%</span>NOTFOUND);</span><br><span class=\"line\">  <span class=\"keyword\">END</span> LOOP;</span><br><span class=\"line\">  <span class=\"keyword\">CLOSE</span> EMP_CUR;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"游标变量的使用\"><a href=\"#游标变量的使用\" class=\"headerlink\" title=\"游标变量的使用\"></a>游标变量的使用</h2><h3 id=\"（1）声明游标变量类型\"><a href=\"#（1）声明游标变量类型\" class=\"headerlink\" title=\"（1）声明游标变量类型\"></a>（1）声明游标变量类型</h3><p>游标变量是一种引用类型，当程序运行时，他们可以指向不同的存储单元（类似于c语言中的指针类型）。如果要使用引用类型，首先要声明该变量，然后相应的存储单元必须要分配。Pl&#x2F;sql中引用类型通过下述语法进行声明：</p>\n<p>  Ref type</p>\n<p>其中，type是已经被定义的类型，ref关键字指明：新的类型必须是一个指向type类型的指针。因此，游标变量就是 REF CURSOR（指向游标的指针）。定义一个游标变量的完整类型语法如下：</p>\n<p>  Type &lt;新类型名&gt; is ref cursor return&lt;游标的返回类型&gt;</p>\n<p>其中，&lt;新类型名&gt;是新定义的游标变量的类型，&lt;游标的返回类型&gt;是指该游标返回的记录类型，这样定义的游标变量类型是受限的，它的返回类型只能是特定的记录类型；<br>如果没有return&lt;游标的返回类型&gt;部分：</p>\n<p>  Type &lt;新类型名&gt; is ref cursor</p>\n<p>这样的游标变量类型是非受限的，一个非受限的游标变量可以为任何查询打开。</p>\n<p>例1：声明游标变量</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Declare</span></span><br><span class=\"line\">Type t_deptref <span class=\"keyword\">is</span> <span class=\"keyword\">ref</span> <span class=\"keyword\">cursor</span></span><br><span class=\"line\">  <span class=\"keyword\">Return</span> scott.dept<span class=\"operator\">%</span>rowtype;   <span class=\"comment\">--使用%rowtype定义返回类型</span></span><br><span class=\"line\">Type manager_rcd <span class=\"keyword\">is</span> record(</span><br><span class=\"line\">Ename scott.emp.sname<span class=\"operator\">%</span>type,</span><br><span class=\"line\">Sal scott.emp.sal<span class=\"operator\">%</span>type,</span><br><span class=\"line\">Edept scott.emp.deptno<span class=\"operator\">%</span>type); <span class=\"comment\">--定义记录类型，类似于c语言中的结构体</span></span><br><span class=\"line\"></span><br><span class=\"line\">Type t_managerref <span class=\"keyword\">is</span> <span class=\"keyword\">ref</span> <span class=\"keyword\">cursor</span></span><br><span class=\"line\">   <span class=\"keyword\">Return</span> manager_rcd;        <span class=\"comment\">-- 定义返回类型为manager_rcd的游标变量类型</span></span><br><span class=\"line\">  V_dept t_deptref;           <span class=\"comment\">-- 定义t_deptref类型的游标变量</span></span><br><span class=\"line\">  V_manager t_managerref;     <span class=\"comment\">-- 定义t_managerref类型的游标变量</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"（2）打开游标变量\"><a href=\"#（2）打开游标变量\" class=\"headerlink\" title=\"（2）打开游标变量\"></a>（2）打开游标变量</h3><p>如果要将一个游标变量于一个特定的select语句相关联，需要使用OPEN FOR语句，其语法是：</p>\n<p>  OPEN &lt;游标变量&gt; FOR &lt;select语句&gt;；</p>\n<p>例2：打开游标变量</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DECLARE</span></span><br><span class=\"line\">  TYPE T_DEPTREF <span class=\"keyword\">IS</span></span><br><span class=\"line\">    <span class=\"keyword\">REF</span> <span class=\"keyword\">CURSOR</span> <span class=\"keyword\">RETURN</span> SCOTT.DEPT<span class=\"operator\">%</span>ROWTYPE;</span><br><span class=\"line\">  V_DEPT   T_DEPTREF;</span><br><span class=\"line\">  ROW_DEPT SCOTT.DEPT<span class=\"operator\">%</span>ROWTYPE;</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  <span class=\"keyword\">OPEN</span> V_DEPT <span class=\"keyword\">FOR</span></span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">      <span class=\"operator\">*</span></span><br><span class=\"line\">    <span class=\"keyword\">FROM</span></span><br><span class=\"line\">      SCOTT.DEPT;</span><br><span class=\"line\">  <span class=\"keyword\">FETCH</span> V_DEPT <span class=\"keyword\">INTO</span> ROW_DEPT;</span><br><span class=\"line\">  DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27; &#x27;</span> </span><br><span class=\"line\">    <span class=\"operator\">||</span>TO_CHAR(ROW_DEPT.DEPTNO)</span><br><span class=\"line\">    <span class=\"operator\">||</span><span class=\"string\">&#x27; &#x27;</span></span><br><span class=\"line\">    <span class=\"operator\">||</span>ROW_DEPT.DNAME</span><br><span class=\"line\">    <span class=\"operator\">||</span><span class=\"string\">&#x27; &#x27;</span></span><br><span class=\"line\">    <span class=\"operator\">||</span>ROW_DEPT.LOC);</span><br><span class=\"line\">  LOOP</span><br><span class=\"line\">    EXIT <span class=\"keyword\">WHEN</span> <span class=\"keyword\">NOT</span> V_DEPT<span class=\"operator\">%</span>FOUND;</span><br><span class=\"line\">    <span class=\"keyword\">FETCH</span> V_DEPT <span class=\"keyword\">INTO</span> ROW_DEPT;</span><br><span class=\"line\">    DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27; &#x27;</span></span><br><span class=\"line\">      <span class=\"operator\">||</span>TO_CHAR(ROW_DEPT.DEPTNO)</span><br><span class=\"line\">      <span class=\"operator\">||</span><span class=\"string\">&#x27; &#x27;</span></span><br><span class=\"line\">      <span class=\"operator\">||</span>ROW_DEPT.DNAME</span><br><span class=\"line\">      <span class=\"operator\">||</span><span class=\"string\">&#x27; &#x27;</span></span><br><span class=\"line\">      <span class=\"operator\">||</span>ROW_DEPT.LOC);</span><br><span class=\"line\">  <span class=\"keyword\">END</span> LOOP;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br></pre></td></tr></table></figure>"},{"title":"ORACLE PLSQL 触发器","date":"2023-05-08T09:31:43.000Z","_content":"\n# 触发器\n\n基础知识：\n\n触发器类似于函数和过程，它们都是具有声明部分、执行部分和异常处理部分的命名PL/SQL块。\n\n像包一样，触发器必须在数据库中以独立对象的身份存储。过程是显式地通过过程调用从其他块中执行的.\n同时，过程调用可以传递参数。与之相反,触发器是在事件发生时隐式地运行的，并且触发器不能接收参数。\n运行触发器的方式叫做激发（firing）触发器，触发事件可以是对数据库表的DML（INSERT、UPDATE或DELETE）操作或某种视图的操作(View)。\n或系统事件，如数据库的启动和关闭，以及某种DDL操作。\n\n触发器可以用于下列情况：  \n• 维护在表创建阶段通过声明限制无法实现的复杂完整性限制。  \n• 通过记录修改内容和修改者来审计表中的信息。  \n• 在表内容发生变更时，自动通知其他程序采取相应的处理。  \n有三种主要的触发器类型： D M L、替代触发器和系统触发器。\n\n\n## 创建触发器的通用语法\n\n```sql\nCREATE [OR REPLACE ] TRIGGER trigger_name  \n{BEFORE | AFTER | INSTEAD OF }  \n{INSERT [OR] | UPDATE [OR] | DELETE}  \n[OF col_name]  \nON table_name  \n[REFERENCING OLD AS o NEW AS n]  \n[FOR EACH ROW]  \nWHEN (condition)   \nDECLARE \n   Declaration-statements \nBEGIN  \n   Executable-statements \nEXCEPTION \n   Exception-handling-statements \nEND;\n```\n\n其中\n\n    CREATE [OR REPLACE] TRIGGER trigger_name - 使用trigger_name创建或替换现有的触发器。\n    {BEFORE | AFTER | INSTEAD OF} - 指定何时执行触发器。INSTEAD OF子句用于在视图上创建触发器。\n    {INSERT [OR] | UPDATE [OR] | DELETE} - 这指定了DML操作。\n    [OF col_name] − 这指定了将要更新的列名称。\n    [ON table_name] - 这指定了与触发器关联的表的名称。\n    [REFERENCING OLD AS o NEW AS n] - 这允许各种DML语句(如INSERT，UPDATE和DELETE)引用新值和旧值。\n    [FOR EACH ROW] - 这指定了一个行级别的触发器，即触发器将被执行的每一行受到影响。否则触发器将在执行SQL语句时执行一次，这称为表级触发器。\n    WHEN(condition) - 这为触发器触发的行提供了一个条件。先对该条件求值。触发器主体只有在该条件为真值时才运行。\n\n注意：触发器主体不能超过32K。如果触发器长度超过了该限制，就要把该体内的某些代码放到单独编译的包或存储子程序中，并从触发器主体中调用这些代码。\n\n## DML触发器\n\nDML触发器是由对数据库表进行INSERT、UPDATE、DELETE操作而激发的触发器。该类\n触发器可以在上述操作之前或之后激发运行，也可以按每个变更行激发一次（行级触发器），或每个语句激发一次进行（语句级触发器）。这些条件的组合形成了触发器的类型。总共有1 2种可能的触发类型： 3种语句×2种定时×2级。DML触发器只能定义在表上，也就是说只有对表的DML语句可以触发DML触发器。\n\n| 类别    | 值                     | 说明                                                       |\n| ------- | ---------------------- | ---------------------------------------------------------- |\n| DML语句 | INSERT、DELETE、UPDATE | 定义何种DML语句激发触发器                                  |\n| 定时    | AFTER BEFOR            | 定义触发器是在语句运行前或运行后激发                       |\n| 级      | 行                     | 对由触发语句变更的每一行激发一次，定义中的FOR EACH ROW子句 |\n|         | 语句                   | 该触发器就在语句之前或之后激发一次                         |\n\n例1：行级DML触发器(每执行一行触发一次)：\n```sql\nset serveroutput on \n```\n定义   \n(1)\n```sql\nCREATE OR REPLACE PACKAGE TRIGER_PACKAGE AS\n -- Global counter for use in the triggers\n  V_COUNTER NUMBER:=1;\nEND TRIGER_PACKAGE;\n```\n(2)\n```sql\nCREATE OR REPLACE TRIGGER ROW_DML BEFORE\n  UPDATE ON SCOTT.EMP FOR EACH ROW\nBEGIN\n  DBMS_OUTPUT.PUT_LINE('THE '\n    ||TO_CHAR(TRIGPACKAGE.V_COUNTER)\n    ||' TH ROW UPDATED');\n  TRIGPACKAGE.V_COUNTER:= TRIGPACKAGE.V_COUNTER +1;\nEND ROW_DML;\n```\n（2）触发\n```sql\nBEGIN\n  UPDATE SCOTT.EMP\n  SET\n    SAL=SAL＋100\n  WHERE\n    DEPTNO=10;\nEND;\n```\n例2：语句级DML触发器(每执行一条DNL语句触发一次)：  \n(1) 定义:\n```sql\nCREATE OR REPLACE TRIGGER STATEMENT_DML BEFORE\n  UPDATE ON SCOTT.EMP\nBEGIN\n  DBMS_OUTPUT.PUT_LINE('ONLY TRIGGERS 1 TIMES');\nEND STATEMENT_DML;\n```\n（2）触发:\n```sql\nBEGIN\n  UPDATE SCOTT.EMP\n  SET\n    SAL=SAL+1\n  WHERE\n    DEPTNO=10;\nDBMS_OUTPUT.PUT_LINE('20203206222 唐权威');\nEND;\n```\n例3：比较before 和after触发器  \n(1) 定义before触发器\n```sql \n-- 20203206222 唐权威\nCREATE OR REPLACE TRIGGER BEFORE_DML AFTER\n  INSERT OR UPDATE OR DELETE ON SCOTT.EMP\nDECLARE\n  CURSOR EMP_CUR IS\n    SELECT\n      EMPNO,\n      SAL\n    FROM\n      SCOTT.EMP\n    WHERE\n      DEPTNO=10;\n  EMP_SAL   SCOTT.EMP.SAL%TYPE;\n  EMP_EMPNO SCOTT.EMP.EMPNO%TYPE;\n  DML_TYPE  VARCHAR2(10);\nBEGIN\n  IF INSERTING THEN\n    DML_TYPE:='INSERT';\n  ELSIF UPDATING THEN\n    DML_TYPE:='UPDATE';\n  ELSE\n    DML_TYPE:='DELETE';\n  END IF;\n  OPEN EMP_CUR;\n  FETCH EMP_CUR INTO EMP_EMPNO, EMP_SAL;\n  WHILE NOT EMP_CUR%NOTFOUND LOOP\n    DBMS_OUTPUT.PUT_LINE('BEFORE '\n      ||DML_TYPE\n      ||', THE SAL OF '\n      ||TO_CHAR(EMP_EMPNO)\n      || ' IS'\n      ||TO_CHAR(EMP_SAL));\n    FETCH EMP_CUR INTO EMP_EMPNO, EMP_SAL;\n  END LOOP;\n  CLOSE EMP_CUR;\n  DBMS_OUTPUT.PUT_LINE('THEN BEGIN TO INSERT');\nEND BEFORE_DML;\n/\n```\n函数INSRETING,UPDATING,DELETING.\n\n（2）触发BEFORE触发器\n```sql\n-- 20203206222 唐权威\nDECLARE\n  CURSOR SAL_CUR IS\n    SELECT\n      EMPNO,\n      SAL\n    FROM\n      SCOTT.EMP\n    WHERE\n      DEPTNO=10;\n  EMP_SAL   SCOTT.EMP.SAL%TYPE;\n  EMP_EMPNO SCOTT.EMP.EMPNO%TYPE;\nBEGIN\n  INSERT INTO SCOTT.EMP VALUES(\n    8001,\n    'JACK',\n    'CLERK',\n    7788,\n    SYSDATE,\n    8000,\n    1000,\n    10\n  );\n  OPEN SAL_CUR;\n  FETCH SAL_CUR INTO EMP_EMPNO, EMP_SAL;\n  WHILE SAL_CUR%FOUND LOOP\n    DBMS_OUTPUT.PUT_LINE('AFTER INSERT, THE SAL OF '\n      ||TO_CHAR(EMP_EMPNO)\n      || ' IS'\n      ||TO_CHAR(EMP_SAL));\n    FETCH SAL_CUR INTO EMP_EMPNO, EMP_SAL;\n  END LOOP;\n  CLOSE SAL_CUR;\nEND;\n```\n或者简单的执行\n```sql\nINSERT INTO SCOTT.EMP(\n  EMPNO,\n  ENAME,\n  SAL\n) VALUES(\n  10,\n  'JACK',\n  1000\n);\nINSERT INTO SCOTT.EMP(\n  EMPNO,\n  ENAME,\n  SAL,\n  DEPTNO\n) VALUES(\n  8012,\n  'JACK',\n  1000,\n  10\n) DELETE FROM EMP WHERE EMPNO IN(\n  8000,\n  8001\n);\n-- 20203206222 唐权威\nUPDATE SCOTT.EMP\nSET\n  DEPTNO=50\nWHERE\n  DEPTNO=10;\n```\n\n## instead of触发器（替代触发器）\n\n替代触发器不同于DML触发器的一点是，替代触发器**只能定义在视图**上，而DML触发器即可以定义在视图上，也可定义在表上。  \n替代触发器顾名思义，就是不执行满足触发条件的语句，而用替代触发器体种的语句替代。\n\n例1：替代触发器  \n（1）创建一个测试视图emp_dept  \n```sql\n-- 20203206222 唐权威\nCREATE OR REPLACE VIEW EMP_DEPT(\n  EMPNO,\n  DEPTNO,\n  DEPTLOC\n) AS\n  SELECT\n    EMPNO,\n    D.DEPTNO,\n    D.LOC\n  FROM\n    SCOTT.EMP,\n    SCOTT.DEPT D\n  WHERE\n    EMP.DEPTNO=D.DEPTNO;\n```\n(2)由于视图emp_dept是由两个表连接而成，因此不能对视图emp_dept进行DML操作，因我们创建一个替代触发器，通过这种手段向emp_dept对应的基本表EMP和DEPT中插入数据。\n\n说明：  \n行级触发器是按触发语句所处理的行激发的。在触发器内部，我们可以访问正在处理中的行的数据，这种访问是通过两个相关的标识符： :old和:new实现的。相关标识符是一种特殊的PL/SQL变量，PL/SQL编译器将把这种变量按记录类型处理：\n\n>triggering_table%ROWTYPE   \n\n其中，triggering_table表示触发器所在的表或视图。因此可以通过  \n：new.field 或：old.field   \n来访问正在处理的行中的字段。\n\n| 触发语句 | :old                       | :new               |\n| -------- | -------------------------- | ------------------ |\n| INSERT   | 无意义，null               | INSERT语句中的新值 |\n| UPDATE   | UPDATE前，表、视图上的原值 | UPDATE语句中的新值 |\n| DELETE   | DELETE前，表、视图上的原值 | 无意义，null       |\n\n例如：  \n在表emp上定义了一个update触发器，并且在emp中deptno＝50对应的记录为：  \n>8003 JACK       CLERK           7788 17-10月-07       8000       1000    50\n\n下面的语句触发了该触发器\n```sql\n\nselect * from scott.emp;\n\nselect * from scott.dept;\n\ninsert into scott.dept values (80,'QUANW','AnYue');\n-- 20203206222 唐权威\nupdate scott.emp set deptno=80 where deptno=10;\n```\n那么 \n```\n:old.deptno=50,:old.enmae=JACK,:old.job=CLERK …；\n     :new.empno=null,:new.enmae=null,…… :new.deptno=80,:new.sal=null,…；\n```\n(2.1)定义instead of触发器\n```sql\n-- 20203206222 唐权威\nCREATE OR REPLACE TRIGGER INSTEAD_DML INSTEAD OF\n  INSERT OR UPDATE OR DELETE ON SCOTT.EMP_DEPT FOR EACH ROW\nBEGIN\n  IF INSERTING THEN\n    DBMS_OUTPUT.PUT_LINE(TO_CHAR(:NEW.DEPTNO)\n      ||TO_CHAR(:NEW.DEPTLOC));\n    INSERT INTO SCOTT.DEPT(\n      DEPTNO,\n      LOC\n    ) VALUES(\n      :NEW.DEPTNO,\n      :NEW.DEPTLOC\n    );\n --Insert into SCOTT.emp(empno,deptno) values(:new.empno,:new.deptno);\n  ELSIF UPDATING THEN\n    UPDATE SCOTT.DEPT\n    SET\n      DEPTNO=:NEW.DEPTNO\n    WHERE\n      DEPTNO=:OLD.DEPTNO;\n    UPDATE SCOTT.DEPT\n    SET\n      LOC=:NEW.DEPTLOC\n    WHERE\n      DEPTNO=:OLD.DEPTNO;\n    UPDATE SCOTT.EMP\n    SET\n      EMPNO=:NEW.EMPNO\n    WHERE\n      EMPNO=:OLD.EMPNO\n      AND DEPTNO=:OLD.DEPTNO;\n    UPDATE SCOTT.EMP\n    SET\n      DEPTNO=:NEW.DEPTNO\n    WHERE\n      EMPNO=:OLD.EMPNO\n      AND DEPTNO=:OLD.DEPTNO;\n  ELSE\n    DBMS_OUTPUT.PUT_LINE('DELETE IS IGNORED');\n  END IF;\nEND INSTEAD_DML;\n/\n```\n\n\\DELETE\n```sql\nselect * from all_triggers where TRIGGER_NAME='INSTEAD_DML';\n\nselect * from all_views where VIEW_NAME='EMP_DEPT';\n```\n\n（2．2）触发instead of触发器\n\n分别执行下面的语句就触发了（2.1）定义的instead of触发器；\n```sql\nINSERT INTO SCOTT.EMP_DEPT VALUES(8020,90,'BEIJING');\n\n-- 20203206222 唐权威\nUPDATE SCOTT.EMP_DEPT\nSET\n  DEPTLOC='SHANGHAI'\nWHERE\n  DEPTNO=80;\n-- 20203206222 唐权威\nDELETE FROM SCOTT.EMP_DEPT\nWHERE\n  DEPTLOC='SHANGHAI';\n```\n执行下面的语句，看看变化：\n```sql\nSELECT * FROM  SCOTT.EMP;\nSELECT * FROM  SCOTT.DEPT;\nSELECT * FROM  SCOTT.EMP_DEPT;\n```\n例2：引用子句：\n\n我们可以根据需要使用子句REFERENCING来为:new和:old指定一个不同的名称，\n使程序阅读更明了，例如例1（2.1）中创建的instead of触发器，可以改为：\n```sql\n-- 20203206222 唐权威\nCREATE OR REPLACE TRIGGER INSTEAD_DML INSTEAD OF\n  INSERT OR UPDATE OR DELETE ON SCOTT.EMP_DEPT\n   REFERENCING NEW AS NEW_EMP_DEPT FOR EACH ROW\nBEGIN\n  IF INSERTING THEN\n    DBMS_OUTPUT.PUT_LINE(TO_CHAR(:NEW_EMP_DEPT.DEPTNO)\n      ||TO_CHAR(:NEW_EMP_DEPT.DEPTLOC));\n    INSERT INTO SCOTT.DEPT(\n      DEPTNO,\n      LOC\n    ) VALUES(\n      :NEW_EMP_DEPT.DEPTNO,\n      :NEW_EMP_DEPT.DEPTLOC\n    );\n --Insert into SCOTT.emp(empno,deptno) values(:NEW_EMP_DEPT.empno,:NEW_EMP_DEPT.deptno);\n  ELSIF UPDATING THEN\n    UPDATE SCOTT.DEPT\n    SET\n      DEPTNO=:NEW_EMP_DEPT.DEPTNO\n    WHERE\n      DEPTNO=:OLD.DEPTNO;\n    UPDATE SCOTT.DEPT\n    SET\n      LOC=:NEW_EMP_DEPT.DEPTLOC\n    WHERE\n      DEPTNO=:OLD.DEPTNO;\n    UPDATE SCOTT.EMP\n    SET\n      EMPNO=:NEW_EMP_DEPT.EMPNO\n    WHERE\n      EMPNO=:OLD.EMPNO\n      AND DEPTNO=:OLD.DEPTNO;\n    UPDATE SCOTT.EMP\n    SET\n      DEPTNO=:NEW_EMP_DEPT.DEPTNO\n    WHERE\n      EMPNO=:OLD.EMPNO\n      AND DEPTNO=:OLD.DEPTNO;\n  ELSE\n    DBMS_OUTPUT.PUT_LINE('DELETE IS IGNORED');\n  END IF;\nEND INSTEAD_DML;\n```\n\n\n\n\n## 系统触发器\n\n1、DML和替代触发器都在（或代替）DML事件，即INSERT、UPDATE、DELETE语句上激活。而系统触发器可以在两种不同的事件即DDL或数据库事件上激活。DDL事件包括CREATE、ALTER或DROP语句，而数据库事件包括服务器的启动或关闭，用户的登录或退出，以及服务器错误。创建系统触发器的语法如下：\n```sql\nCREATE [OR REPLACE] TRIGGER [ schema.] trigger_name\n{BEFORE | AFTER}\n{ ddl_event_list| database_event_list}\nON {DATABASE | SCHEMA}\n[ when_clause]\ntrigger_body;\n```\n说明:  \n关键字 **DATABASE** 和 **SCHEMA** 的区别:  \n若用户在创建logon 触发器tt_tirg时,选择了SCHEMA关键字,那么只有用户tt的登陆回触发tt_tirg,其他用户的登陆不会触发tt_tirg;  \n若用户tt在创建logon 触发器tt_tirg时,选择了database关键字,那么所有用户的登陆都会触发tt_tirg;\n\n| 事件       | event       | 允许时机      | 说明                             |\n| ---------- | ----------- | ------------- | -------------------------------- |\n| 启动       | startup     | after         | 实例启动时激活                   |\n| 关闭       | shutdown    | before        | 实例正常关闭时激活               |\n| 服务器错误 | servererror | after         | 只要有该类错误就激活             |\n| 登录       | logon       | after         | 在用户成功连接数据库后激活       |\n| 注销       | logoff      | before        | 在用户注销开始时激活             |\n| 创建       | create      | before，after | 在创建模式对象之前或之后激活     |\n| 撤消       | drop        | before，after | 在创建模式对象撤消之前或之后激活 |\n| 变更       | alter       | before，after | 在创建模式对象变更之前或之后激活 |\n\n3.数据库事件触发器\n\n例1：在自己的模式下面创建一个测试用表\n```sql\n-- 20203206222 唐权威\nCREATE TABLE LOGON_RECORD(\n  USER_ID VARCHAR2(10),\n  LOG_TIME DATE,\n  ACTION VARCHAR(20)\n);\n```\n\n例2：在自己的模式下面创建一个schema级别的logon触发器   \n\n(1)创建  \n\n```sql\n-- 20203206222 唐权威\nCREATE OR REPLACE TRIGGER LOGON_TRIG \nAFTER LOGON ON SCHEMA\nBEGIN\n  INSERT INTO LOGON_RECORD VALUES(\n    USER,\n    SYSDATE,\n    'SCHEMA_LOGON'\n  );\nEND;\n```\n\n```sql\nselect * from ALL_TRIGGERS where trigger_name='LOGON_TRIG';\n```\n(2) 触发\n\n```\nconn username/poasswd;\n```\n并让附近同学执行相应的连接语句  \n\n(3) 查看表logon_record\n```sql\nselect * from logon_record;\n```\n其他用户的登陆不会记录在表logon_record中;  \n\n例3: 在自己的模式下面创建一个database级别的logon触发器  \n\n(1)创建\n\n```sql\nCREATE OR REPLACE TRIGGER LOGON_TRIG_DB \nAFTER LOGON ON DATABASE\nBEGIN\n  INSERT INTO LOGON_RECORD \n  VALUES(\n    USER,\n    SYSDATE,\n    'DBLOGON'\n  );\nEND;\n```\n\n\n(2)触发\n```\nconn username/poasswd;\n```\n并让附近同学执行相应的连接语句\n(3)查看表logon_record  \n```sql\nselect * from logon_record;\n```\n其他用户的登陆会记录在表logon_record中;  \n4、DDL触发器  \n(1)创建一个测试用表ddl_tri_db  \n```sql\nCREATE TABLE DDL_TRI_DB(\n  USER_ID VARCHAR2(10),\n  CTIME DATE,\n  ACTION VARCHAR2(20)\n);\n```\n(2)创建DDL触发器\n```sql\nCREATE OR REPLACE TRIGGER DDL_TRI \nAFTER CREATE ON DATABASE\nBEGIN\n  INSERT INTO DDL_TRI_DB(\n    USER_ID,\n    CTIME,\n    ACTION\n  ) VALUES(\n    USER,\n    SYSDATE,\n    'CREATE'\n  );\nEND DDL_TRI;\n```\n（3）触发\n```sql\nCREATE TABLE TT(\n  TID NUMBER\n);\n```\n(4) 查看\n```sql\nselect * from quanwei.ddl_tri_db;\n```\n请将上例中的关键字database 换为schema然后比较变化； \n```sql\nCREATE OR REPLACE TRIGGER DDL_TRI \nAFTER CREATE ON SCHEMA\nBEGIN\n  INSERT INTO DDL_TRI_DB(\n    USER_ID,\n    CTIME,\n    ACTION\n  ) VALUES(\n    USER,\n    SYSDATE,\n    'CREATE_S'\n  );\nEND DDL_TRI;\n```\n（3）触发\n```sql\nCREATE TABLE TT(\n  TID NUMBER\n);\n```\n(4) 查看\n```sql\nselect * from ddl_tri_db;\n```\n5、when 子句的使用\n\n如果触发器存在when子句，并且在WHEN子句中指定了trigger_condition的话，则首先对该条件求值。触发器主体只有在该条件为真值时才运行。\n```sql\nset serveroutput on \n```\n(1)创建\n```sql\nCREATE OR REPLACE TRIGGER WHEN_TEST BEFORE\n  UPDATE ON SCOTT.EMP FOR EACH ROW WHEN (OLD.DEPTNO=10)\nBEGIN\n  DBMS_OUTPUT.PUT_LINE('THE UPDATE EXECUTED ONLY WHEN THE DEPTNO=10');\nEND WHEN_TEST;\n```\n（2） 触发\n```sql\nupdate SCOTT.emp set sal=sal+10000;\n```\n\n6、 系统触发器和WHEN子句\n\n就象DML触发器一样，系统触发器可以使用WHEN子句来指定触发器激活条件。\n然而，对每一种系统触发器所指定的条件类型有如下限制：  \n\n    STARTUP和SHUTDOWN触发器不能带有任何条件。   \n    SERVERERROR触发器可以使用ERRNO测试来检查特定的错误。  \n    LOGON 和LOGOFF触发器可以使用USERID或USERNAME测试来检查用户标识或用户名。  \n    DDL触发器可以检查正在修改对象的名称和类型。  ","source":"_posts/ORACLE-PLSQL-触发器.md","raw":"---\ntitle: ORACLE PLSQL 触发器\ndate: 2023-05-08 17:31:43\ntags: \n- Database\n- Oracle\n- PL/SQL\n---\n\n# 触发器\n\n基础知识：\n\n触发器类似于函数和过程，它们都是具有声明部分、执行部分和异常处理部分的命名PL/SQL块。\n\n像包一样，触发器必须在数据库中以独立对象的身份存储。过程是显式地通过过程调用从其他块中执行的.\n同时，过程调用可以传递参数。与之相反,触发器是在事件发生时隐式地运行的，并且触发器不能接收参数。\n运行触发器的方式叫做激发（firing）触发器，触发事件可以是对数据库表的DML（INSERT、UPDATE或DELETE）操作或某种视图的操作(View)。\n或系统事件，如数据库的启动和关闭，以及某种DDL操作。\n\n触发器可以用于下列情况：  \n• 维护在表创建阶段通过声明限制无法实现的复杂完整性限制。  \n• 通过记录修改内容和修改者来审计表中的信息。  \n• 在表内容发生变更时，自动通知其他程序采取相应的处理。  \n有三种主要的触发器类型： D M L、替代触发器和系统触发器。\n\n\n## 创建触发器的通用语法\n\n```sql\nCREATE [OR REPLACE ] TRIGGER trigger_name  \n{BEFORE | AFTER | INSTEAD OF }  \n{INSERT [OR] | UPDATE [OR] | DELETE}  \n[OF col_name]  \nON table_name  \n[REFERENCING OLD AS o NEW AS n]  \n[FOR EACH ROW]  \nWHEN (condition)   \nDECLARE \n   Declaration-statements \nBEGIN  \n   Executable-statements \nEXCEPTION \n   Exception-handling-statements \nEND;\n```\n\n其中\n\n    CREATE [OR REPLACE] TRIGGER trigger_name - 使用trigger_name创建或替换现有的触发器。\n    {BEFORE | AFTER | INSTEAD OF} - 指定何时执行触发器。INSTEAD OF子句用于在视图上创建触发器。\n    {INSERT [OR] | UPDATE [OR] | DELETE} - 这指定了DML操作。\n    [OF col_name] − 这指定了将要更新的列名称。\n    [ON table_name] - 这指定了与触发器关联的表的名称。\n    [REFERENCING OLD AS o NEW AS n] - 这允许各种DML语句(如INSERT，UPDATE和DELETE)引用新值和旧值。\n    [FOR EACH ROW] - 这指定了一个行级别的触发器，即触发器将被执行的每一行受到影响。否则触发器将在执行SQL语句时执行一次，这称为表级触发器。\n    WHEN(condition) - 这为触发器触发的行提供了一个条件。先对该条件求值。触发器主体只有在该条件为真值时才运行。\n\n注意：触发器主体不能超过32K。如果触发器长度超过了该限制，就要把该体内的某些代码放到单独编译的包或存储子程序中，并从触发器主体中调用这些代码。\n\n## DML触发器\n\nDML触发器是由对数据库表进行INSERT、UPDATE、DELETE操作而激发的触发器。该类\n触发器可以在上述操作之前或之后激发运行，也可以按每个变更行激发一次（行级触发器），或每个语句激发一次进行（语句级触发器）。这些条件的组合形成了触发器的类型。总共有1 2种可能的触发类型： 3种语句×2种定时×2级。DML触发器只能定义在表上，也就是说只有对表的DML语句可以触发DML触发器。\n\n| 类别    | 值                     | 说明                                                       |\n| ------- | ---------------------- | ---------------------------------------------------------- |\n| DML语句 | INSERT、DELETE、UPDATE | 定义何种DML语句激发触发器                                  |\n| 定时    | AFTER BEFOR            | 定义触发器是在语句运行前或运行后激发                       |\n| 级      | 行                     | 对由触发语句变更的每一行激发一次，定义中的FOR EACH ROW子句 |\n|         | 语句                   | 该触发器就在语句之前或之后激发一次                         |\n\n例1：行级DML触发器(每执行一行触发一次)：\n```sql\nset serveroutput on \n```\n定义   \n(1)\n```sql\nCREATE OR REPLACE PACKAGE TRIGER_PACKAGE AS\n -- Global counter for use in the triggers\n  V_COUNTER NUMBER:=1;\nEND TRIGER_PACKAGE;\n```\n(2)\n```sql\nCREATE OR REPLACE TRIGGER ROW_DML BEFORE\n  UPDATE ON SCOTT.EMP FOR EACH ROW\nBEGIN\n  DBMS_OUTPUT.PUT_LINE('THE '\n    ||TO_CHAR(TRIGPACKAGE.V_COUNTER)\n    ||' TH ROW UPDATED');\n  TRIGPACKAGE.V_COUNTER:= TRIGPACKAGE.V_COUNTER +1;\nEND ROW_DML;\n```\n（2）触发\n```sql\nBEGIN\n  UPDATE SCOTT.EMP\n  SET\n    SAL=SAL＋100\n  WHERE\n    DEPTNO=10;\nEND;\n```\n例2：语句级DML触发器(每执行一条DNL语句触发一次)：  \n(1) 定义:\n```sql\nCREATE OR REPLACE TRIGGER STATEMENT_DML BEFORE\n  UPDATE ON SCOTT.EMP\nBEGIN\n  DBMS_OUTPUT.PUT_LINE('ONLY TRIGGERS 1 TIMES');\nEND STATEMENT_DML;\n```\n（2）触发:\n```sql\nBEGIN\n  UPDATE SCOTT.EMP\n  SET\n    SAL=SAL+1\n  WHERE\n    DEPTNO=10;\nDBMS_OUTPUT.PUT_LINE('20203206222 唐权威');\nEND;\n```\n例3：比较before 和after触发器  \n(1) 定义before触发器\n```sql \n-- 20203206222 唐权威\nCREATE OR REPLACE TRIGGER BEFORE_DML AFTER\n  INSERT OR UPDATE OR DELETE ON SCOTT.EMP\nDECLARE\n  CURSOR EMP_CUR IS\n    SELECT\n      EMPNO,\n      SAL\n    FROM\n      SCOTT.EMP\n    WHERE\n      DEPTNO=10;\n  EMP_SAL   SCOTT.EMP.SAL%TYPE;\n  EMP_EMPNO SCOTT.EMP.EMPNO%TYPE;\n  DML_TYPE  VARCHAR2(10);\nBEGIN\n  IF INSERTING THEN\n    DML_TYPE:='INSERT';\n  ELSIF UPDATING THEN\n    DML_TYPE:='UPDATE';\n  ELSE\n    DML_TYPE:='DELETE';\n  END IF;\n  OPEN EMP_CUR;\n  FETCH EMP_CUR INTO EMP_EMPNO, EMP_SAL;\n  WHILE NOT EMP_CUR%NOTFOUND LOOP\n    DBMS_OUTPUT.PUT_LINE('BEFORE '\n      ||DML_TYPE\n      ||', THE SAL OF '\n      ||TO_CHAR(EMP_EMPNO)\n      || ' IS'\n      ||TO_CHAR(EMP_SAL));\n    FETCH EMP_CUR INTO EMP_EMPNO, EMP_SAL;\n  END LOOP;\n  CLOSE EMP_CUR;\n  DBMS_OUTPUT.PUT_LINE('THEN BEGIN TO INSERT');\nEND BEFORE_DML;\n/\n```\n函数INSRETING,UPDATING,DELETING.\n\n（2）触发BEFORE触发器\n```sql\n-- 20203206222 唐权威\nDECLARE\n  CURSOR SAL_CUR IS\n    SELECT\n      EMPNO,\n      SAL\n    FROM\n      SCOTT.EMP\n    WHERE\n      DEPTNO=10;\n  EMP_SAL   SCOTT.EMP.SAL%TYPE;\n  EMP_EMPNO SCOTT.EMP.EMPNO%TYPE;\nBEGIN\n  INSERT INTO SCOTT.EMP VALUES(\n    8001,\n    'JACK',\n    'CLERK',\n    7788,\n    SYSDATE,\n    8000,\n    1000,\n    10\n  );\n  OPEN SAL_CUR;\n  FETCH SAL_CUR INTO EMP_EMPNO, EMP_SAL;\n  WHILE SAL_CUR%FOUND LOOP\n    DBMS_OUTPUT.PUT_LINE('AFTER INSERT, THE SAL OF '\n      ||TO_CHAR(EMP_EMPNO)\n      || ' IS'\n      ||TO_CHAR(EMP_SAL));\n    FETCH SAL_CUR INTO EMP_EMPNO, EMP_SAL;\n  END LOOP;\n  CLOSE SAL_CUR;\nEND;\n```\n或者简单的执行\n```sql\nINSERT INTO SCOTT.EMP(\n  EMPNO,\n  ENAME,\n  SAL\n) VALUES(\n  10,\n  'JACK',\n  1000\n);\nINSERT INTO SCOTT.EMP(\n  EMPNO,\n  ENAME,\n  SAL,\n  DEPTNO\n) VALUES(\n  8012,\n  'JACK',\n  1000,\n  10\n) DELETE FROM EMP WHERE EMPNO IN(\n  8000,\n  8001\n);\n-- 20203206222 唐权威\nUPDATE SCOTT.EMP\nSET\n  DEPTNO=50\nWHERE\n  DEPTNO=10;\n```\n\n## instead of触发器（替代触发器）\n\n替代触发器不同于DML触发器的一点是，替代触发器**只能定义在视图**上，而DML触发器即可以定义在视图上，也可定义在表上。  \n替代触发器顾名思义，就是不执行满足触发条件的语句，而用替代触发器体种的语句替代。\n\n例1：替代触发器  \n（1）创建一个测试视图emp_dept  \n```sql\n-- 20203206222 唐权威\nCREATE OR REPLACE VIEW EMP_DEPT(\n  EMPNO,\n  DEPTNO,\n  DEPTLOC\n) AS\n  SELECT\n    EMPNO,\n    D.DEPTNO,\n    D.LOC\n  FROM\n    SCOTT.EMP,\n    SCOTT.DEPT D\n  WHERE\n    EMP.DEPTNO=D.DEPTNO;\n```\n(2)由于视图emp_dept是由两个表连接而成，因此不能对视图emp_dept进行DML操作，因我们创建一个替代触发器，通过这种手段向emp_dept对应的基本表EMP和DEPT中插入数据。\n\n说明：  \n行级触发器是按触发语句所处理的行激发的。在触发器内部，我们可以访问正在处理中的行的数据，这种访问是通过两个相关的标识符： :old和:new实现的。相关标识符是一种特殊的PL/SQL变量，PL/SQL编译器将把这种变量按记录类型处理：\n\n>triggering_table%ROWTYPE   \n\n其中，triggering_table表示触发器所在的表或视图。因此可以通过  \n：new.field 或：old.field   \n来访问正在处理的行中的字段。\n\n| 触发语句 | :old                       | :new               |\n| -------- | -------------------------- | ------------------ |\n| INSERT   | 无意义，null               | INSERT语句中的新值 |\n| UPDATE   | UPDATE前，表、视图上的原值 | UPDATE语句中的新值 |\n| DELETE   | DELETE前，表、视图上的原值 | 无意义，null       |\n\n例如：  \n在表emp上定义了一个update触发器，并且在emp中deptno＝50对应的记录为：  \n>8003 JACK       CLERK           7788 17-10月-07       8000       1000    50\n\n下面的语句触发了该触发器\n```sql\n\nselect * from scott.emp;\n\nselect * from scott.dept;\n\ninsert into scott.dept values (80,'QUANW','AnYue');\n-- 20203206222 唐权威\nupdate scott.emp set deptno=80 where deptno=10;\n```\n那么 \n```\n:old.deptno=50,:old.enmae=JACK,:old.job=CLERK …；\n     :new.empno=null,:new.enmae=null,…… :new.deptno=80,:new.sal=null,…；\n```\n(2.1)定义instead of触发器\n```sql\n-- 20203206222 唐权威\nCREATE OR REPLACE TRIGGER INSTEAD_DML INSTEAD OF\n  INSERT OR UPDATE OR DELETE ON SCOTT.EMP_DEPT FOR EACH ROW\nBEGIN\n  IF INSERTING THEN\n    DBMS_OUTPUT.PUT_LINE(TO_CHAR(:NEW.DEPTNO)\n      ||TO_CHAR(:NEW.DEPTLOC));\n    INSERT INTO SCOTT.DEPT(\n      DEPTNO,\n      LOC\n    ) VALUES(\n      :NEW.DEPTNO,\n      :NEW.DEPTLOC\n    );\n --Insert into SCOTT.emp(empno,deptno) values(:new.empno,:new.deptno);\n  ELSIF UPDATING THEN\n    UPDATE SCOTT.DEPT\n    SET\n      DEPTNO=:NEW.DEPTNO\n    WHERE\n      DEPTNO=:OLD.DEPTNO;\n    UPDATE SCOTT.DEPT\n    SET\n      LOC=:NEW.DEPTLOC\n    WHERE\n      DEPTNO=:OLD.DEPTNO;\n    UPDATE SCOTT.EMP\n    SET\n      EMPNO=:NEW.EMPNO\n    WHERE\n      EMPNO=:OLD.EMPNO\n      AND DEPTNO=:OLD.DEPTNO;\n    UPDATE SCOTT.EMP\n    SET\n      DEPTNO=:NEW.DEPTNO\n    WHERE\n      EMPNO=:OLD.EMPNO\n      AND DEPTNO=:OLD.DEPTNO;\n  ELSE\n    DBMS_OUTPUT.PUT_LINE('DELETE IS IGNORED');\n  END IF;\nEND INSTEAD_DML;\n/\n```\n\n\\DELETE\n```sql\nselect * from all_triggers where TRIGGER_NAME='INSTEAD_DML';\n\nselect * from all_views where VIEW_NAME='EMP_DEPT';\n```\n\n（2．2）触发instead of触发器\n\n分别执行下面的语句就触发了（2.1）定义的instead of触发器；\n```sql\nINSERT INTO SCOTT.EMP_DEPT VALUES(8020,90,'BEIJING');\n\n-- 20203206222 唐权威\nUPDATE SCOTT.EMP_DEPT\nSET\n  DEPTLOC='SHANGHAI'\nWHERE\n  DEPTNO=80;\n-- 20203206222 唐权威\nDELETE FROM SCOTT.EMP_DEPT\nWHERE\n  DEPTLOC='SHANGHAI';\n```\n执行下面的语句，看看变化：\n```sql\nSELECT * FROM  SCOTT.EMP;\nSELECT * FROM  SCOTT.DEPT;\nSELECT * FROM  SCOTT.EMP_DEPT;\n```\n例2：引用子句：\n\n我们可以根据需要使用子句REFERENCING来为:new和:old指定一个不同的名称，\n使程序阅读更明了，例如例1（2.1）中创建的instead of触发器，可以改为：\n```sql\n-- 20203206222 唐权威\nCREATE OR REPLACE TRIGGER INSTEAD_DML INSTEAD OF\n  INSERT OR UPDATE OR DELETE ON SCOTT.EMP_DEPT\n   REFERENCING NEW AS NEW_EMP_DEPT FOR EACH ROW\nBEGIN\n  IF INSERTING THEN\n    DBMS_OUTPUT.PUT_LINE(TO_CHAR(:NEW_EMP_DEPT.DEPTNO)\n      ||TO_CHAR(:NEW_EMP_DEPT.DEPTLOC));\n    INSERT INTO SCOTT.DEPT(\n      DEPTNO,\n      LOC\n    ) VALUES(\n      :NEW_EMP_DEPT.DEPTNO,\n      :NEW_EMP_DEPT.DEPTLOC\n    );\n --Insert into SCOTT.emp(empno,deptno) values(:NEW_EMP_DEPT.empno,:NEW_EMP_DEPT.deptno);\n  ELSIF UPDATING THEN\n    UPDATE SCOTT.DEPT\n    SET\n      DEPTNO=:NEW_EMP_DEPT.DEPTNO\n    WHERE\n      DEPTNO=:OLD.DEPTNO;\n    UPDATE SCOTT.DEPT\n    SET\n      LOC=:NEW_EMP_DEPT.DEPTLOC\n    WHERE\n      DEPTNO=:OLD.DEPTNO;\n    UPDATE SCOTT.EMP\n    SET\n      EMPNO=:NEW_EMP_DEPT.EMPNO\n    WHERE\n      EMPNO=:OLD.EMPNO\n      AND DEPTNO=:OLD.DEPTNO;\n    UPDATE SCOTT.EMP\n    SET\n      DEPTNO=:NEW_EMP_DEPT.DEPTNO\n    WHERE\n      EMPNO=:OLD.EMPNO\n      AND DEPTNO=:OLD.DEPTNO;\n  ELSE\n    DBMS_OUTPUT.PUT_LINE('DELETE IS IGNORED');\n  END IF;\nEND INSTEAD_DML;\n```\n\n\n\n\n## 系统触发器\n\n1、DML和替代触发器都在（或代替）DML事件，即INSERT、UPDATE、DELETE语句上激活。而系统触发器可以在两种不同的事件即DDL或数据库事件上激活。DDL事件包括CREATE、ALTER或DROP语句，而数据库事件包括服务器的启动或关闭，用户的登录或退出，以及服务器错误。创建系统触发器的语法如下：\n```sql\nCREATE [OR REPLACE] TRIGGER [ schema.] trigger_name\n{BEFORE | AFTER}\n{ ddl_event_list| database_event_list}\nON {DATABASE | SCHEMA}\n[ when_clause]\ntrigger_body;\n```\n说明:  \n关键字 **DATABASE** 和 **SCHEMA** 的区别:  \n若用户在创建logon 触发器tt_tirg时,选择了SCHEMA关键字,那么只有用户tt的登陆回触发tt_tirg,其他用户的登陆不会触发tt_tirg;  \n若用户tt在创建logon 触发器tt_tirg时,选择了database关键字,那么所有用户的登陆都会触发tt_tirg;\n\n| 事件       | event       | 允许时机      | 说明                             |\n| ---------- | ----------- | ------------- | -------------------------------- |\n| 启动       | startup     | after         | 实例启动时激活                   |\n| 关闭       | shutdown    | before        | 实例正常关闭时激活               |\n| 服务器错误 | servererror | after         | 只要有该类错误就激活             |\n| 登录       | logon       | after         | 在用户成功连接数据库后激活       |\n| 注销       | logoff      | before        | 在用户注销开始时激活             |\n| 创建       | create      | before，after | 在创建模式对象之前或之后激活     |\n| 撤消       | drop        | before，after | 在创建模式对象撤消之前或之后激活 |\n| 变更       | alter       | before，after | 在创建模式对象变更之前或之后激活 |\n\n3.数据库事件触发器\n\n例1：在自己的模式下面创建一个测试用表\n```sql\n-- 20203206222 唐权威\nCREATE TABLE LOGON_RECORD(\n  USER_ID VARCHAR2(10),\n  LOG_TIME DATE,\n  ACTION VARCHAR(20)\n);\n```\n\n例2：在自己的模式下面创建一个schema级别的logon触发器   \n\n(1)创建  \n\n```sql\n-- 20203206222 唐权威\nCREATE OR REPLACE TRIGGER LOGON_TRIG \nAFTER LOGON ON SCHEMA\nBEGIN\n  INSERT INTO LOGON_RECORD VALUES(\n    USER,\n    SYSDATE,\n    'SCHEMA_LOGON'\n  );\nEND;\n```\n\n```sql\nselect * from ALL_TRIGGERS where trigger_name='LOGON_TRIG';\n```\n(2) 触发\n\n```\nconn username/poasswd;\n```\n并让附近同学执行相应的连接语句  \n\n(3) 查看表logon_record\n```sql\nselect * from logon_record;\n```\n其他用户的登陆不会记录在表logon_record中;  \n\n例3: 在自己的模式下面创建一个database级别的logon触发器  \n\n(1)创建\n\n```sql\nCREATE OR REPLACE TRIGGER LOGON_TRIG_DB \nAFTER LOGON ON DATABASE\nBEGIN\n  INSERT INTO LOGON_RECORD \n  VALUES(\n    USER,\n    SYSDATE,\n    'DBLOGON'\n  );\nEND;\n```\n\n\n(2)触发\n```\nconn username/poasswd;\n```\n并让附近同学执行相应的连接语句\n(3)查看表logon_record  \n```sql\nselect * from logon_record;\n```\n其他用户的登陆会记录在表logon_record中;  \n4、DDL触发器  \n(1)创建一个测试用表ddl_tri_db  \n```sql\nCREATE TABLE DDL_TRI_DB(\n  USER_ID VARCHAR2(10),\n  CTIME DATE,\n  ACTION VARCHAR2(20)\n);\n```\n(2)创建DDL触发器\n```sql\nCREATE OR REPLACE TRIGGER DDL_TRI \nAFTER CREATE ON DATABASE\nBEGIN\n  INSERT INTO DDL_TRI_DB(\n    USER_ID,\n    CTIME,\n    ACTION\n  ) VALUES(\n    USER,\n    SYSDATE,\n    'CREATE'\n  );\nEND DDL_TRI;\n```\n（3）触发\n```sql\nCREATE TABLE TT(\n  TID NUMBER\n);\n```\n(4) 查看\n```sql\nselect * from quanwei.ddl_tri_db;\n```\n请将上例中的关键字database 换为schema然后比较变化； \n```sql\nCREATE OR REPLACE TRIGGER DDL_TRI \nAFTER CREATE ON SCHEMA\nBEGIN\n  INSERT INTO DDL_TRI_DB(\n    USER_ID,\n    CTIME,\n    ACTION\n  ) VALUES(\n    USER,\n    SYSDATE,\n    'CREATE_S'\n  );\nEND DDL_TRI;\n```\n（3）触发\n```sql\nCREATE TABLE TT(\n  TID NUMBER\n);\n```\n(4) 查看\n```sql\nselect * from ddl_tri_db;\n```\n5、when 子句的使用\n\n如果触发器存在when子句，并且在WHEN子句中指定了trigger_condition的话，则首先对该条件求值。触发器主体只有在该条件为真值时才运行。\n```sql\nset serveroutput on \n```\n(1)创建\n```sql\nCREATE OR REPLACE TRIGGER WHEN_TEST BEFORE\n  UPDATE ON SCOTT.EMP FOR EACH ROW WHEN (OLD.DEPTNO=10)\nBEGIN\n  DBMS_OUTPUT.PUT_LINE('THE UPDATE EXECUTED ONLY WHEN THE DEPTNO=10');\nEND WHEN_TEST;\n```\n（2） 触发\n```sql\nupdate SCOTT.emp set sal=sal+10000;\n```\n\n6、 系统触发器和WHEN子句\n\n就象DML触发器一样，系统触发器可以使用WHEN子句来指定触发器激活条件。\n然而，对每一种系统触发器所指定的条件类型有如下限制：  \n\n    STARTUP和SHUTDOWN触发器不能带有任何条件。   \n    SERVERERROR触发器可以使用ERRNO测试来检查特定的错误。  \n    LOGON 和LOGOFF触发器可以使用USERID或USERNAME测试来检查用户标识或用户名。  \n    DDL触发器可以检查正在修改对象的名称和类型。  ","slug":"ORACLE-PLSQL-触发器","published":1,"updated":"2023-06-23T01:05:21.727Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5us002zlv9e22xngdvx","content":"<h1 id=\"触发器\"><a href=\"#触发器\" class=\"headerlink\" title=\"触发器\"></a>触发器</h1><p>基础知识：</p>\n<p>触发器类似于函数和过程，它们都是具有声明部分、执行部分和异常处理部分的命名PL&#x2F;SQL块。</p>\n<p>像包一样，触发器必须在数据库中以独立对象的身份存储。过程是显式地通过过程调用从其他块中执行的.<br>同时，过程调用可以传递参数。与之相反,触发器是在事件发生时隐式地运行的，并且触发器不能接收参数。<br>运行触发器的方式叫做激发（firing）触发器，触发事件可以是对数据库表的DML（INSERT、UPDATE或DELETE）操作或某种视图的操作(View)。<br>或系统事件，如数据库的启动和关闭，以及某种DDL操作。</p>\n<p>触发器可以用于下列情况：<br>• 维护在表创建阶段通过声明限制无法实现的复杂完整性限制。<br>• 通过记录修改内容和修改者来审计表中的信息。<br>• 在表内容发生变更时，自动通知其他程序采取相应的处理。<br>有三种主要的触发器类型： D M L、替代触发器和系统触发器。</p>\n<h2 id=\"创建触发器的通用语法\"><a href=\"#创建触发器的通用语法\" class=\"headerlink\" title=\"创建触发器的通用语法\"></a>创建触发器的通用语法</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> [<span class=\"keyword\">OR</span> REPLACE ] <span class=\"keyword\">TRIGGER</span> trigger_name  </span><br><span class=\"line\">&#123;BEFORE <span class=\"operator\">|</span> AFTER <span class=\"operator\">|</span> INSTEAD <span class=\"keyword\">OF</span> &#125;  </span><br><span class=\"line\">&#123;<span class=\"keyword\">INSERT</span> [<span class=\"keyword\">OR</span>] <span class=\"operator\">|</span> <span class=\"keyword\">UPDATE</span> [<span class=\"keyword\">OR</span>] <span class=\"operator\">|</span> <span class=\"keyword\">DELETE</span>&#125;  </span><br><span class=\"line\">[<span class=\"keyword\">OF</span> col_name]  </span><br><span class=\"line\"><span class=\"keyword\">ON</span> table_name  </span><br><span class=\"line\">[<span class=\"keyword\">REFERENCING</span> <span class=\"keyword\">OLD</span> <span class=\"keyword\">AS</span> o <span class=\"keyword\">NEW</span> <span class=\"keyword\">AS</span> n]  </span><br><span class=\"line\">[<span class=\"keyword\">FOR</span> <span class=\"keyword\">EACH</span> <span class=\"type\">ROW</span>]  </span><br><span class=\"line\"><span class=\"keyword\">WHEN</span> (<span class=\"keyword\">condition</span>)   </span><br><span class=\"line\"><span class=\"keyword\">DECLARE</span> </span><br><span class=\"line\">   Declaration<span class=\"operator\">-</span>statements </span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span>  </span><br><span class=\"line\">   Executable<span class=\"operator\">-</span>statements </span><br><span class=\"line\">EXCEPTION </span><br><span class=\"line\">   Exception<span class=\"operator\">-</span>handling<span class=\"operator\">-</span>statements </span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br></pre></td></tr></table></figure>\n\n<p>其中</p>\n<pre><code>CREATE [OR REPLACE] TRIGGER trigger_name - 使用trigger_name创建或替换现有的触发器。\n&#123;BEFORE | AFTER | INSTEAD OF&#125; - 指定何时执行触发器。INSTEAD OF子句用于在视图上创建触发器。\n&#123;INSERT [OR] | UPDATE [OR] | DELETE&#125; - 这指定了DML操作。\n[OF col_name] − 这指定了将要更新的列名称。\n[ON table_name] - 这指定了与触发器关联的表的名称。\n[REFERENCING OLD AS o NEW AS n] - 这允许各种DML语句(如INSERT，UPDATE和DELETE)引用新值和旧值。\n[FOR EACH ROW] - 这指定了一个行级别的触发器，即触发器将被执行的每一行受到影响。否则触发器将在执行SQL语句时执行一次，这称为表级触发器。\nWHEN(condition) - 这为触发器触发的行提供了一个条件。先对该条件求值。触发器主体只有在该条件为真值时才运行。\n</code></pre>\n<p>注意：触发器主体不能超过32K。如果触发器长度超过了该限制，就要把该体内的某些代码放到单独编译的包或存储子程序中，并从触发器主体中调用这些代码。</p>\n<h2 id=\"DML触发器\"><a href=\"#DML触发器\" class=\"headerlink\" title=\"DML触发器\"></a>DML触发器</h2><p>DML触发器是由对数据库表进行INSERT、UPDATE、DELETE操作而激发的触发器。该类<br>触发器可以在上述操作之前或之后激发运行，也可以按每个变更行激发一次（行级触发器），或每个语句激发一次进行（语句级触发器）。这些条件的组合形成了触发器的类型。总共有1 2种可能的触发类型： 3种语句×2种定时×2级。DML触发器只能定义在表上，也就是说只有对表的DML语句可以触发DML触发器。</p>\n<table>\n<thead>\n<tr>\n<th>类别</th>\n<th>值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>DML语句</td>\n<td>INSERT、DELETE、UPDATE</td>\n<td>定义何种DML语句激发触发器</td>\n</tr>\n<tr>\n<td>定时</td>\n<td>AFTER BEFOR</td>\n<td>定义触发器是在语句运行前或运行后激发</td>\n</tr>\n<tr>\n<td>级</td>\n<td>行</td>\n<td>对由触发语句变更的每一行激发一次，定义中的FOR EACH ROW子句</td>\n</tr>\n<tr>\n<td></td>\n<td>语句</td>\n<td>该触发器就在语句之前或之后激发一次</td>\n</tr>\n</tbody></table>\n<p>例1：行级DML触发器(每执行一行触发一次)：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> serveroutput <span class=\"keyword\">on</span> </span><br></pre></td></tr></table></figure>\n<p>定义<br>(1)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">OR</span> REPLACE PACKAGE TRIGER_PACKAGE <span class=\"keyword\">AS</span></span><br><span class=\"line\"> <span class=\"comment\">-- Global counter for use in the triggers</span></span><br><span class=\"line\">  V_COUNTER NUMBER:<span class=\"operator\">=</span><span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span> TRIGER_PACKAGE;</span><br></pre></td></tr></table></figure>\n<p>(2)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">OR</span> REPLACE <span class=\"keyword\">TRIGGER</span> ROW_DML BEFORE</span><br><span class=\"line\">  <span class=\"keyword\">UPDATE</span> <span class=\"keyword\">ON</span> SCOTT.EMP <span class=\"keyword\">FOR</span> <span class=\"keyword\">EACH</span> <span class=\"type\">ROW</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;THE &#x27;</span></span><br><span class=\"line\">    <span class=\"operator\">||</span>TO_CHAR(TRIGPACKAGE.V_COUNTER)</span><br><span class=\"line\">    <span class=\"operator\">||</span><span class=\"string\">&#x27; TH ROW UPDATED&#x27;</span>);</span><br><span class=\"line\">  TRIGPACKAGE.V_COUNTER:<span class=\"operator\">=</span> TRIGPACKAGE.V_COUNTER <span class=\"operator\">+</span><span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span> ROW_DML;</span><br></pre></td></tr></table></figure>\n<p>（2）触发</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  <span class=\"keyword\">UPDATE</span> SCOTT.EMP</span><br><span class=\"line\">  <span class=\"keyword\">SET</span></span><br><span class=\"line\">    SAL<span class=\"operator\">=</span>SAL＋<span class=\"number\">100</span></span><br><span class=\"line\">  <span class=\"keyword\">WHERE</span></span><br><span class=\"line\">    DEPTNO<span class=\"operator\">=</span><span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br></pre></td></tr></table></figure>\n<p>例2：语句级DML触发器(每执行一条DNL语句触发一次)：<br>(1) 定义:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">OR</span> REPLACE <span class=\"keyword\">TRIGGER</span> STATEMENT_DML BEFORE</span><br><span class=\"line\">  <span class=\"keyword\">UPDATE</span> <span class=\"keyword\">ON</span> SCOTT.EMP</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;ONLY TRIGGERS 1 TIMES&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">END</span> STATEMENT_DML;</span><br></pre></td></tr></table></figure>\n<p>（2）触发:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  <span class=\"keyword\">UPDATE</span> SCOTT.EMP</span><br><span class=\"line\">  <span class=\"keyword\">SET</span></span><br><span class=\"line\">    SAL<span class=\"operator\">=</span>SAL<span class=\"operator\">+</span><span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">WHERE</span></span><br><span class=\"line\">    DEPTNO<span class=\"operator\">=</span><span class=\"number\">10</span>;</span><br><span class=\"line\">DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;20203206222 唐权威&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br></pre></td></tr></table></figure>\n<p>例3：比较before 和after触发器<br>(1) 定义before触发器</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 20203206222 唐权威</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">OR</span> REPLACE <span class=\"keyword\">TRIGGER</span> BEFORE_DML AFTER</span><br><span class=\"line\">  <span class=\"keyword\">INSERT</span> <span class=\"keyword\">OR</span> <span class=\"keyword\">UPDATE</span> <span class=\"keyword\">OR</span> <span class=\"keyword\">DELETE</span> <span class=\"keyword\">ON</span> SCOTT.EMP</span><br><span class=\"line\"><span class=\"keyword\">DECLARE</span></span><br><span class=\"line\">  <span class=\"keyword\">CURSOR</span> EMP_CUR <span class=\"keyword\">IS</span></span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">      EMPNO,</span><br><span class=\"line\">      SAL</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span></span><br><span class=\"line\">      SCOTT.EMP</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span></span><br><span class=\"line\">      DEPTNO<span class=\"operator\">=</span><span class=\"number\">10</span>;</span><br><span class=\"line\">  EMP_SAL   SCOTT.EMP.SAL<span class=\"operator\">%</span>TYPE;</span><br><span class=\"line\">  EMP_EMPNO SCOTT.EMP.EMPNO<span class=\"operator\">%</span>TYPE;</span><br><span class=\"line\">  DML_TYPE  VARCHAR2(<span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  IF INSERTING <span class=\"keyword\">THEN</span></span><br><span class=\"line\">    DML_TYPE:<span class=\"operator\">=</span><span class=\"string\">&#x27;INSERT&#x27;</span>;</span><br><span class=\"line\">  ELSIF UPDATING <span class=\"keyword\">THEN</span></span><br><span class=\"line\">    DML_TYPE:<span class=\"operator\">=</span><span class=\"string\">&#x27;UPDATE&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">ELSE</span></span><br><span class=\"line\">    DML_TYPE:<span class=\"operator\">=</span><span class=\"string\">&#x27;DELETE&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">END</span> IF;</span><br><span class=\"line\">  <span class=\"keyword\">OPEN</span> EMP_CUR;</span><br><span class=\"line\">  <span class=\"keyword\">FETCH</span> EMP_CUR <span class=\"keyword\">INTO</span> EMP_EMPNO, EMP_SAL;</span><br><span class=\"line\">  WHILE <span class=\"keyword\">NOT</span> EMP_CUR<span class=\"operator\">%</span>NOTFOUND LOOP</span><br><span class=\"line\">    DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;BEFORE &#x27;</span></span><br><span class=\"line\">      <span class=\"operator\">||</span>DML_TYPE</span><br><span class=\"line\">      <span class=\"operator\">||</span><span class=\"string\">&#x27;, THE SAL OF &#x27;</span></span><br><span class=\"line\">      <span class=\"operator\">||</span>TO_CHAR(EMP_EMPNO)</span><br><span class=\"line\">      <span class=\"operator\">||</span> <span class=\"string\">&#x27; IS&#x27;</span></span><br><span class=\"line\">      <span class=\"operator\">||</span>TO_CHAR(EMP_SAL));</span><br><span class=\"line\">    <span class=\"keyword\">FETCH</span> EMP_CUR <span class=\"keyword\">INTO</span> EMP_EMPNO, EMP_SAL;</span><br><span class=\"line\">  <span class=\"keyword\">END</span> LOOP;</span><br><span class=\"line\">  <span class=\"keyword\">CLOSE</span> EMP_CUR;</span><br><span class=\"line\">  DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;THEN BEGIN TO INSERT&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">END</span> BEFORE_DML;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br></pre></td></tr></table></figure>\n<p>函数INSRETING,UPDATING,DELETING.</p>\n<p>（2）触发BEFORE触发器</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 20203206222 唐权威</span></span><br><span class=\"line\"><span class=\"keyword\">DECLARE</span></span><br><span class=\"line\">  <span class=\"keyword\">CURSOR</span> SAL_CUR <span class=\"keyword\">IS</span></span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">      EMPNO,</span><br><span class=\"line\">      SAL</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span></span><br><span class=\"line\">      SCOTT.EMP</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span></span><br><span class=\"line\">      DEPTNO<span class=\"operator\">=</span><span class=\"number\">10</span>;</span><br><span class=\"line\">  EMP_SAL   SCOTT.EMP.SAL<span class=\"operator\">%</span>TYPE;</span><br><span class=\"line\">  EMP_EMPNO SCOTT.EMP.EMPNO<span class=\"operator\">%</span>TYPE;</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  <span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> SCOTT.EMP <span class=\"keyword\">VALUES</span>(</span><br><span class=\"line\">    <span class=\"number\">8001</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;JACK&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;CLERK&#x27;</span>,</span><br><span class=\"line\">    <span class=\"number\">7788</span>,</span><br><span class=\"line\">    SYSDATE,</span><br><span class=\"line\">    <span class=\"number\">8000</span>,</span><br><span class=\"line\">    <span class=\"number\">1000</span>,</span><br><span class=\"line\">    <span class=\"number\">10</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"keyword\">OPEN</span> SAL_CUR;</span><br><span class=\"line\">  <span class=\"keyword\">FETCH</span> SAL_CUR <span class=\"keyword\">INTO</span> EMP_EMPNO, EMP_SAL;</span><br><span class=\"line\">  WHILE SAL_CUR<span class=\"operator\">%</span>FOUND LOOP</span><br><span class=\"line\">    DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;AFTER INSERT, THE SAL OF &#x27;</span></span><br><span class=\"line\">      <span class=\"operator\">||</span>TO_CHAR(EMP_EMPNO)</span><br><span class=\"line\">      <span class=\"operator\">||</span> <span class=\"string\">&#x27; IS&#x27;</span></span><br><span class=\"line\">      <span class=\"operator\">||</span>TO_CHAR(EMP_SAL));</span><br><span class=\"line\">    <span class=\"keyword\">FETCH</span> SAL_CUR <span class=\"keyword\">INTO</span> EMP_EMPNO, EMP_SAL;</span><br><span class=\"line\">  <span class=\"keyword\">END</span> LOOP;</span><br><span class=\"line\">  <span class=\"keyword\">CLOSE</span> SAL_CUR;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br></pre></td></tr></table></figure>\n<p>或者简单的执行</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> SCOTT.EMP(</span><br><span class=\"line\">  EMPNO,</span><br><span class=\"line\">  ENAME,</span><br><span class=\"line\">  SAL</span><br><span class=\"line\">) <span class=\"keyword\">VALUES</span>(</span><br><span class=\"line\">  <span class=\"number\">10</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;JACK&#x27;</span>,</span><br><span class=\"line\">  <span class=\"number\">1000</span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> SCOTT.EMP(</span><br><span class=\"line\">  EMPNO,</span><br><span class=\"line\">  ENAME,</span><br><span class=\"line\">  SAL,</span><br><span class=\"line\">  DEPTNO</span><br><span class=\"line\">) <span class=\"keyword\">VALUES</span>(</span><br><span class=\"line\">  <span class=\"number\">8012</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;JACK&#x27;</span>,</span><br><span class=\"line\">  <span class=\"number\">1000</span>,</span><br><span class=\"line\">  <span class=\"number\">10</span></span><br><span class=\"line\">) <span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> EMP <span class=\"keyword\">WHERE</span> EMPNO <span class=\"keyword\">IN</span>(</span><br><span class=\"line\">  <span class=\"number\">8000</span>,</span><br><span class=\"line\">  <span class=\"number\">8001</span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">-- 20203206222 唐权威</span></span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> SCOTT.EMP</span><br><span class=\"line\"><span class=\"keyword\">SET</span></span><br><span class=\"line\">  DEPTNO<span class=\"operator\">=</span><span class=\"number\">50</span></span><br><span class=\"line\"><span class=\"keyword\">WHERE</span></span><br><span class=\"line\">  DEPTNO<span class=\"operator\">=</span><span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"instead-of触发器（替代触发器）\"><a href=\"#instead-of触发器（替代触发器）\" class=\"headerlink\" title=\"instead of触发器（替代触发器）\"></a>instead of触发器（替代触发器）</h2><p>替代触发器不同于DML触发器的一点是，替代触发器<strong>只能定义在视图</strong>上，而DML触发器即可以定义在视图上，也可定义在表上。<br>替代触发器顾名思义，就是不执行满足触发条件的语句，而用替代触发器体种的语句替代。</p>\n<p>例1：替代触发器<br>（1）创建一个测试视图emp_dept  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 20203206222 唐权威</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">OR</span> REPLACE <span class=\"keyword\">VIEW</span> EMP_DEPT(</span><br><span class=\"line\">  EMPNO,</span><br><span class=\"line\">  DEPTNO,</span><br><span class=\"line\">  DEPTLOC</span><br><span class=\"line\">) <span class=\"keyword\">AS</span></span><br><span class=\"line\">  <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">    EMPNO,</span><br><span class=\"line\">    D.DEPTNO,</span><br><span class=\"line\">    D.LOC</span><br><span class=\"line\">  <span class=\"keyword\">FROM</span></span><br><span class=\"line\">    SCOTT.EMP,</span><br><span class=\"line\">    SCOTT.DEPT D</span><br><span class=\"line\">  <span class=\"keyword\">WHERE</span></span><br><span class=\"line\">    EMP.DEPTNO<span class=\"operator\">=</span>D.DEPTNO;</span><br></pre></td></tr></table></figure>\n<p>(2)由于视图emp_dept是由两个表连接而成，因此不能对视图emp_dept进行DML操作，因我们创建一个替代触发器，通过这种手段向emp_dept对应的基本表EMP和DEPT中插入数据。</p>\n<p>说明：<br>行级触发器是按触发语句所处理的行激发的。在触发器内部，我们可以访问正在处理中的行的数据，这种访问是通过两个相关的标识符： :old和:new实现的。相关标识符是一种特殊的PL&#x2F;SQL变量，PL&#x2F;SQL编译器将把这种变量按记录类型处理：</p>\n<blockquote>\n<p>triggering_table%ROWTYPE   </p>\n</blockquote>\n<p>其中，triggering_table表示触发器所在的表或视图。因此可以通过<br>：new.field 或：old.field<br>来访问正在处理的行中的字段。</p>\n<table>\n<thead>\n<tr>\n<th>触发语句</th>\n<th>:old</th>\n<th>:new</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>INSERT</td>\n<td>无意义，null</td>\n<td>INSERT语句中的新值</td>\n</tr>\n<tr>\n<td>UPDATE</td>\n<td>UPDATE前，表、视图上的原值</td>\n<td>UPDATE语句中的新值</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>DELETE前，表、视图上的原值</td>\n<td>无意义，null</td>\n</tr>\n</tbody></table>\n<p>例如：<br>在表emp上定义了一个update触发器，并且在emp中deptno＝50对应的记录为：  </p>\n<blockquote>\n<p>8003 JACK       CLERK           7788 17-10月-07       8000       1000    50</p>\n</blockquote>\n<p>下面的语句触发了该触发器</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> scott.emp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> scott.dept;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> scott.dept <span class=\"keyword\">values</span> (<span class=\"number\">80</span>,<span class=\"string\">&#x27;QUANW&#x27;</span>,<span class=\"string\">&#x27;AnYue&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">-- 20203206222 唐权威</span></span><br><span class=\"line\"><span class=\"keyword\">update</span> scott.emp <span class=\"keyword\">set</span> deptno<span class=\"operator\">=</span><span class=\"number\">80</span> <span class=\"keyword\">where</span> deptno<span class=\"operator\">=</span><span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n<p>那么 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:old.deptno=50,:old.enmae=JACK,:old.job=CLERK …；</span><br><span class=\"line\">     :new.empno=null,:new.enmae=null,…… :new.deptno=80,:new.sal=null,…；</span><br></pre></td></tr></table></figure>\n<p>(2.1)定义instead of触发器</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 20203206222 唐权威</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">OR</span> REPLACE <span class=\"keyword\">TRIGGER</span> INSTEAD_DML INSTEAD <span class=\"keyword\">OF</span></span><br><span class=\"line\">  <span class=\"keyword\">INSERT</span> <span class=\"keyword\">OR</span> <span class=\"keyword\">UPDATE</span> <span class=\"keyword\">OR</span> <span class=\"keyword\">DELETE</span> <span class=\"keyword\">ON</span> SCOTT.EMP_DEPT <span class=\"keyword\">FOR</span> <span class=\"keyword\">EACH</span> <span class=\"type\">ROW</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  IF INSERTING <span class=\"keyword\">THEN</span></span><br><span class=\"line\">    DBMS_OUTPUT.PUT_LINE(TO_CHAR(:NEW.DEPTNO)</span><br><span class=\"line\">      <span class=\"operator\">||</span>TO_CHAR(:NEW.DEPTLOC));</span><br><span class=\"line\">    <span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> SCOTT.DEPT(</span><br><span class=\"line\">      DEPTNO,</span><br><span class=\"line\">      LOC</span><br><span class=\"line\">    ) <span class=\"keyword\">VALUES</span>(</span><br><span class=\"line\">      :NEW.DEPTNO,</span><br><span class=\"line\">      :NEW.DEPTLOC</span><br><span class=\"line\">    );</span><br><span class=\"line\"> <span class=\"comment\">--Insert into SCOTT.emp(empno,deptno) values(:new.empno,:new.deptno);</span></span><br><span class=\"line\">  ELSIF UPDATING <span class=\"keyword\">THEN</span></span><br><span class=\"line\">    <span class=\"keyword\">UPDATE</span> SCOTT.DEPT</span><br><span class=\"line\">    <span class=\"keyword\">SET</span></span><br><span class=\"line\">      DEPTNO<span class=\"operator\">=</span>:NEW.DEPTNO</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span></span><br><span class=\"line\">      DEPTNO<span class=\"operator\">=</span>:OLD.DEPTNO;</span><br><span class=\"line\">    <span class=\"keyword\">UPDATE</span> SCOTT.DEPT</span><br><span class=\"line\">    <span class=\"keyword\">SET</span></span><br><span class=\"line\">      LOC<span class=\"operator\">=</span>:NEW.DEPTLOC</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span></span><br><span class=\"line\">      DEPTNO<span class=\"operator\">=</span>:OLD.DEPTNO;</span><br><span class=\"line\">    <span class=\"keyword\">UPDATE</span> SCOTT.EMP</span><br><span class=\"line\">    <span class=\"keyword\">SET</span></span><br><span class=\"line\">      EMPNO<span class=\"operator\">=</span>:NEW.EMPNO</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span></span><br><span class=\"line\">      EMPNO<span class=\"operator\">=</span>:OLD.EMPNO</span><br><span class=\"line\">      <span class=\"keyword\">AND</span> DEPTNO<span class=\"operator\">=</span>:OLD.DEPTNO;</span><br><span class=\"line\">    <span class=\"keyword\">UPDATE</span> SCOTT.EMP</span><br><span class=\"line\">    <span class=\"keyword\">SET</span></span><br><span class=\"line\">      DEPTNO<span class=\"operator\">=</span>:NEW.DEPTNO</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span></span><br><span class=\"line\">      EMPNO<span class=\"operator\">=</span>:OLD.EMPNO</span><br><span class=\"line\">      <span class=\"keyword\">AND</span> DEPTNO<span class=\"operator\">=</span>:OLD.DEPTNO;</span><br><span class=\"line\">  <span class=\"keyword\">ELSE</span></span><br><span class=\"line\">    DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;DELETE IS IGNORED&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">END</span> IF;</span><br><span class=\"line\"><span class=\"keyword\">END</span> INSTEAD_DML;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br></pre></td></tr></table></figure>\n\n<p>\\DELETE</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> all_triggers <span class=\"keyword\">where</span> TRIGGER_NAME<span class=\"operator\">=</span><span class=\"string\">&#x27;INSTEAD_DML&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> all_views <span class=\"keyword\">where</span> VIEW_NAME<span class=\"operator\">=</span><span class=\"string\">&#x27;EMP_DEPT&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>（2．2）触发instead of触发器</p>\n<p>分别执行下面的语句就触发了（2.1）定义的instead of触发器；</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> SCOTT.EMP_DEPT <span class=\"keyword\">VALUES</span>(<span class=\"number\">8020</span>,<span class=\"number\">90</span>,<span class=\"string\">&#x27;BEIJING&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 20203206222 唐权威</span></span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> SCOTT.EMP_DEPT</span><br><span class=\"line\"><span class=\"keyword\">SET</span></span><br><span class=\"line\">  DEPTLOC<span class=\"operator\">=</span><span class=\"string\">&#x27;SHANGHAI&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">WHERE</span></span><br><span class=\"line\">  DEPTNO<span class=\"operator\">=</span><span class=\"number\">80</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 20203206222 唐权威</span></span><br><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> SCOTT.EMP_DEPT</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span></span><br><span class=\"line\">  DEPTLOC<span class=\"operator\">=</span><span class=\"string\">&#x27;SHANGHAI&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>执行下面的语句，看看变化：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span>  SCOTT.EMP;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span>  SCOTT.DEPT;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span>  SCOTT.EMP_DEPT;</span><br></pre></td></tr></table></figure>\n<p>例2：引用子句：</p>\n<p>我们可以根据需要使用子句REFERENCING来为:new和:old指定一个不同的名称，<br>使程序阅读更明了，例如例1（2.1）中创建的instead of触发器，可以改为：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 20203206222 唐权威</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">OR</span> REPLACE <span class=\"keyword\">TRIGGER</span> INSTEAD_DML INSTEAD <span class=\"keyword\">OF</span></span><br><span class=\"line\">  <span class=\"keyword\">INSERT</span> <span class=\"keyword\">OR</span> <span class=\"keyword\">UPDATE</span> <span class=\"keyword\">OR</span> <span class=\"keyword\">DELETE</span> <span class=\"keyword\">ON</span> SCOTT.EMP_DEPT</span><br><span class=\"line\">   <span class=\"keyword\">REFERENCING</span> <span class=\"keyword\">NEW</span> <span class=\"keyword\">AS</span> NEW_EMP_DEPT <span class=\"keyword\">FOR</span> <span class=\"keyword\">EACH</span> <span class=\"type\">ROW</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  IF INSERTING <span class=\"keyword\">THEN</span></span><br><span class=\"line\">    DBMS_OUTPUT.PUT_LINE(TO_CHAR(:NEW_EMP_DEPT.DEPTNO)</span><br><span class=\"line\">      <span class=\"operator\">||</span>TO_CHAR(:NEW_EMP_DEPT.DEPTLOC));</span><br><span class=\"line\">    <span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> SCOTT.DEPT(</span><br><span class=\"line\">      DEPTNO,</span><br><span class=\"line\">      LOC</span><br><span class=\"line\">    ) <span class=\"keyword\">VALUES</span>(</span><br><span class=\"line\">      :NEW_EMP_DEPT.DEPTNO,</span><br><span class=\"line\">      :NEW_EMP_DEPT.DEPTLOC</span><br><span class=\"line\">    );</span><br><span class=\"line\"> <span class=\"comment\">--Insert into SCOTT.emp(empno,deptno) values(:NEW_EMP_DEPT.empno,:NEW_EMP_DEPT.deptno);</span></span><br><span class=\"line\">  ELSIF UPDATING <span class=\"keyword\">THEN</span></span><br><span class=\"line\">    <span class=\"keyword\">UPDATE</span> SCOTT.DEPT</span><br><span class=\"line\">    <span class=\"keyword\">SET</span></span><br><span class=\"line\">      DEPTNO<span class=\"operator\">=</span>:NEW_EMP_DEPT.DEPTNO</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span></span><br><span class=\"line\">      DEPTNO<span class=\"operator\">=</span>:OLD.DEPTNO;</span><br><span class=\"line\">    <span class=\"keyword\">UPDATE</span> SCOTT.DEPT</span><br><span class=\"line\">    <span class=\"keyword\">SET</span></span><br><span class=\"line\">      LOC<span class=\"operator\">=</span>:NEW_EMP_DEPT.DEPTLOC</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span></span><br><span class=\"line\">      DEPTNO<span class=\"operator\">=</span>:OLD.DEPTNO;</span><br><span class=\"line\">    <span class=\"keyword\">UPDATE</span> SCOTT.EMP</span><br><span class=\"line\">    <span class=\"keyword\">SET</span></span><br><span class=\"line\">      EMPNO<span class=\"operator\">=</span>:NEW_EMP_DEPT.EMPNO</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span></span><br><span class=\"line\">      EMPNO<span class=\"operator\">=</span>:OLD.EMPNO</span><br><span class=\"line\">      <span class=\"keyword\">AND</span> DEPTNO<span class=\"operator\">=</span>:OLD.DEPTNO;</span><br><span class=\"line\">    <span class=\"keyword\">UPDATE</span> SCOTT.EMP</span><br><span class=\"line\">    <span class=\"keyword\">SET</span></span><br><span class=\"line\">      DEPTNO<span class=\"operator\">=</span>:NEW_EMP_DEPT.DEPTNO</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span></span><br><span class=\"line\">      EMPNO<span class=\"operator\">=</span>:OLD.EMPNO</span><br><span class=\"line\">      <span class=\"keyword\">AND</span> DEPTNO<span class=\"operator\">=</span>:OLD.DEPTNO;</span><br><span class=\"line\">  <span class=\"keyword\">ELSE</span></span><br><span class=\"line\">    DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;DELETE IS IGNORED&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">END</span> IF;</span><br><span class=\"line\"><span class=\"keyword\">END</span> INSTEAD_DML;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h2 id=\"系统触发器\"><a href=\"#系统触发器\" class=\"headerlink\" title=\"系统触发器\"></a>系统触发器</h2><p>1、DML和替代触发器都在（或代替）DML事件，即INSERT、UPDATE、DELETE语句上激活。而系统触发器可以在两种不同的事件即DDL或数据库事件上激活。DDL事件包括CREATE、ALTER或DROP语句，而数据库事件包括服务器的启动或关闭，用户的登录或退出，以及服务器错误。创建系统触发器的语法如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> [<span class=\"keyword\">OR</span> REPLACE] <span class=\"keyword\">TRIGGER</span> [ schema.] trigger_name</span><br><span class=\"line\">&#123;BEFORE <span class=\"operator\">|</span> AFTER&#125;</span><br><span class=\"line\">&#123; ddl_event_list<span class=\"operator\">|</span> database_event_list&#125;</span><br><span class=\"line\"><span class=\"keyword\">ON</span> &#123;DATABASE <span class=\"operator\">|</span> SCHEMA&#125;</span><br><span class=\"line\">[ when_clause]</span><br><span class=\"line\">trigger_body;</span><br></pre></td></tr></table></figure>\n<p>说明:<br>关键字 <strong>DATABASE</strong> 和 <strong>SCHEMA</strong> 的区别:<br>若用户在创建logon 触发器tt_tirg时,选择了SCHEMA关键字,那么只有用户tt的登陆回触发tt_tirg,其他用户的登陆不会触发tt_tirg;<br>若用户tt在创建logon 触发器tt_tirg时,选择了database关键字,那么所有用户的登陆都会触发tt_tirg;</p>\n<table>\n<thead>\n<tr>\n<th>事件</th>\n<th>event</th>\n<th>允许时机</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>启动</td>\n<td>startup</td>\n<td>after</td>\n<td>实例启动时激活</td>\n</tr>\n<tr>\n<td>关闭</td>\n<td>shutdown</td>\n<td>before</td>\n<td>实例正常关闭时激活</td>\n</tr>\n<tr>\n<td>服务器错误</td>\n<td>servererror</td>\n<td>after</td>\n<td>只要有该类错误就激活</td>\n</tr>\n<tr>\n<td>登录</td>\n<td>logon</td>\n<td>after</td>\n<td>在用户成功连接数据库后激活</td>\n</tr>\n<tr>\n<td>注销</td>\n<td>logoff</td>\n<td>before</td>\n<td>在用户注销开始时激活</td>\n</tr>\n<tr>\n<td>创建</td>\n<td>create</td>\n<td>before，after</td>\n<td>在创建模式对象之前或之后激活</td>\n</tr>\n<tr>\n<td>撤消</td>\n<td>drop</td>\n<td>before，after</td>\n<td>在创建模式对象撤消之前或之后激活</td>\n</tr>\n<tr>\n<td>变更</td>\n<td>alter</td>\n<td>before，after</td>\n<td>在创建模式对象变更之前或之后激活</td>\n</tr>\n</tbody></table>\n<p>3.数据库事件触发器</p>\n<p>例1：在自己的模式下面创建一个测试用表</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 20203206222 唐权威</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> LOGON_RECORD(</span><br><span class=\"line\">  USER_ID VARCHAR2(<span class=\"number\">10</span>),</span><br><span class=\"line\">  LOG_TIME <span class=\"type\">DATE</span>,</span><br><span class=\"line\">  ACTION <span class=\"type\">VARCHAR</span>(<span class=\"number\">20</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>例2：在自己的模式下面创建一个schema级别的logon触发器   </p>\n<p>(1)创建  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 20203206222 唐权威</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">OR</span> REPLACE <span class=\"keyword\">TRIGGER</span> LOGON_TRIG </span><br><span class=\"line\">AFTER LOGON <span class=\"keyword\">ON</span> SCHEMA</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  <span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> LOGON_RECORD <span class=\"keyword\">VALUES</span>(</span><br><span class=\"line\">    <span class=\"keyword\">USER</span>,</span><br><span class=\"line\">    SYSDATE,</span><br><span class=\"line\">    <span class=\"string\">&#x27;SCHEMA_LOGON&#x27;</span></span><br><span class=\"line\">  );</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> ALL_TRIGGERS <span class=\"keyword\">where</span> trigger_name<span class=\"operator\">=</span><span class=\"string\">&#x27;LOGON_TRIG&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>(2) 触发</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conn username/poasswd;</span><br></pre></td></tr></table></figure>\n<p>并让附近同学执行相应的连接语句  </p>\n<p>(3) 查看表logon_record</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> logon_record;</span><br></pre></td></tr></table></figure>\n<p>其他用户的登陆不会记录在表logon_record中;  </p>\n<p>例3: 在自己的模式下面创建一个database级别的logon触发器  </p>\n<p>(1)创建</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">OR</span> REPLACE <span class=\"keyword\">TRIGGER</span> LOGON_TRIG_DB </span><br><span class=\"line\">AFTER LOGON <span class=\"keyword\">ON</span> DATABASE</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  <span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> LOGON_RECORD </span><br><span class=\"line\">  <span class=\"keyword\">VALUES</span>(</span><br><span class=\"line\">    <span class=\"keyword\">USER</span>,</span><br><span class=\"line\">    SYSDATE,</span><br><span class=\"line\">    <span class=\"string\">&#x27;DBLOGON&#x27;</span></span><br><span class=\"line\">  );</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br></pre></td></tr></table></figure>\n\n\n<p>(2)触发</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conn username/poasswd;</span><br></pre></td></tr></table></figure>\n<p>并让附近同学执行相应的连接语句<br>(3)查看表logon_record  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> logon_record;</span><br></pre></td></tr></table></figure>\n<p>其他用户的登陆会记录在表logon_record中;<br>4、DDL触发器<br>(1)创建一个测试用表ddl_tri_db  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> DDL_TRI_DB(</span><br><span class=\"line\">  USER_ID VARCHAR2(<span class=\"number\">10</span>),</span><br><span class=\"line\">  CTIME <span class=\"type\">DATE</span>,</span><br><span class=\"line\">  ACTION VARCHAR2(<span class=\"number\">20</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>(2)创建DDL触发器</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">OR</span> REPLACE <span class=\"keyword\">TRIGGER</span> DDL_TRI </span><br><span class=\"line\">AFTER <span class=\"keyword\">CREATE</span> <span class=\"keyword\">ON</span> DATABASE</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  <span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> DDL_TRI_DB(</span><br><span class=\"line\">    USER_ID,</span><br><span class=\"line\">    CTIME,</span><br><span class=\"line\">    ACTION</span><br><span class=\"line\">  ) <span class=\"keyword\">VALUES</span>(</span><br><span class=\"line\">    <span class=\"keyword\">USER</span>,</span><br><span class=\"line\">    SYSDATE,</span><br><span class=\"line\">    <span class=\"string\">&#x27;CREATE&#x27;</span></span><br><span class=\"line\">  );</span><br><span class=\"line\"><span class=\"keyword\">END</span> DDL_TRI;</span><br></pre></td></tr></table></figure>\n<p>（3）触发</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> TT(</span><br><span class=\"line\">  TID NUMBER</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>(4) 查看</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> quanwei.ddl_tri_db;</span><br></pre></td></tr></table></figure>\n<p>请将上例中的关键字database 换为schema然后比较变化； </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">OR</span> REPLACE <span class=\"keyword\">TRIGGER</span> DDL_TRI </span><br><span class=\"line\">AFTER <span class=\"keyword\">CREATE</span> <span class=\"keyword\">ON</span> SCHEMA</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  <span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> DDL_TRI_DB(</span><br><span class=\"line\">    USER_ID,</span><br><span class=\"line\">    CTIME,</span><br><span class=\"line\">    ACTION</span><br><span class=\"line\">  ) <span class=\"keyword\">VALUES</span>(</span><br><span class=\"line\">    <span class=\"keyword\">USER</span>,</span><br><span class=\"line\">    SYSDATE,</span><br><span class=\"line\">    <span class=\"string\">&#x27;CREATE_S&#x27;</span></span><br><span class=\"line\">  );</span><br><span class=\"line\"><span class=\"keyword\">END</span> DDL_TRI;</span><br></pre></td></tr></table></figure>\n<p>（3）触发</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> TT(</span><br><span class=\"line\">  TID NUMBER</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>(4) 查看</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> ddl_tri_db;</span><br></pre></td></tr></table></figure>\n<p>5、when 子句的使用</p>\n<p>如果触发器存在when子句，并且在WHEN子句中指定了trigger_condition的话，则首先对该条件求值。触发器主体只有在该条件为真值时才运行。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> serveroutput <span class=\"keyword\">on</span> </span><br></pre></td></tr></table></figure>\n<p>(1)创建</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">OR</span> REPLACE <span class=\"keyword\">TRIGGER</span> WHEN_TEST BEFORE</span><br><span class=\"line\">  <span class=\"keyword\">UPDATE</span> <span class=\"keyword\">ON</span> SCOTT.EMP <span class=\"keyword\">FOR</span> <span class=\"keyword\">EACH</span> <span class=\"type\">ROW</span> <span class=\"keyword\">WHEN</span> (OLD.DEPTNO<span class=\"operator\">=</span><span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;THE UPDATE EXECUTED ONLY WHEN THE DEPTNO=10&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">END</span> WHEN_TEST;</span><br></pre></td></tr></table></figure>\n<p>（2） 触发</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">update</span> SCOTT.emp <span class=\"keyword\">set</span> sal<span class=\"operator\">=</span>sal<span class=\"operator\">+</span><span class=\"number\">10000</span>;</span><br></pre></td></tr></table></figure>\n\n<p>6、 系统触发器和WHEN子句</p>\n<p>就象DML触发器一样，系统触发器可以使用WHEN子句来指定触发器激活条件。<br>然而，对每一种系统触发器所指定的条件类型有如下限制：  </p>\n<pre><code>STARTUP和SHUTDOWN触发器不能带有任何条件。   \nSERVERERROR触发器可以使用ERRNO测试来检查特定的错误。  \nLOGON 和LOGOFF触发器可以使用USERID或USERNAME测试来检查用户标识或用户名。  \nDDL触发器可以检查正在修改对象的名称和类型。  \n</code></pre>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h1 id=\"触发器\"><a href=\"#触发器\" class=\"headerlink\" title=\"触发器\"></a>触发器</h1><p>基础知识：</p>\n<p>触发器类似于函数和过程，它们都是具有声明部分、执行部分和异常处理部分的命名PL&#x2F;SQL块。</p>\n<p>像包一样，触发器必须在数据库中以独立对象的身份存储。过程是显式地通过过程调用从其他块中执行的.<br>同时，过程调用可以传递参数。与之相反,触发器是在事件发生时隐式地运行的，并且触发器不能接收参数。<br>运行触发器的方式叫做激发（firing）触发器，触发事件可以是对数据库表的DML（INSERT、UPDATE或DELETE）操作或某种视图的操作(View)。<br>或系统事件，如数据库的启动和关闭，以及某种DDL操作。</p>\n<p>触发器可以用于下列情况：<br>• 维护在表创建阶段通过声明限制无法实现的复杂完整性限制。<br>• 通过记录修改内容和修改者来审计表中的信息。<br>• 在表内容发生变更时，自动通知其他程序采取相应的处理。<br>有三种主要的触发器类型： D M L、替代触发器和系统触发器。</p>\n<h2 id=\"创建触发器的通用语法\"><a href=\"#创建触发器的通用语法\" class=\"headerlink\" title=\"创建触发器的通用语法\"></a>创建触发器的通用语法</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> [<span class=\"keyword\">OR</span> REPLACE ] <span class=\"keyword\">TRIGGER</span> trigger_name  </span><br><span class=\"line\">&#123;BEFORE <span class=\"operator\">|</span> AFTER <span class=\"operator\">|</span> INSTEAD <span class=\"keyword\">OF</span> &#125;  </span><br><span class=\"line\">&#123;<span class=\"keyword\">INSERT</span> [<span class=\"keyword\">OR</span>] <span class=\"operator\">|</span> <span class=\"keyword\">UPDATE</span> [<span class=\"keyword\">OR</span>] <span class=\"operator\">|</span> <span class=\"keyword\">DELETE</span>&#125;  </span><br><span class=\"line\">[<span class=\"keyword\">OF</span> col_name]  </span><br><span class=\"line\"><span class=\"keyword\">ON</span> table_name  </span><br><span class=\"line\">[<span class=\"keyword\">REFERENCING</span> <span class=\"keyword\">OLD</span> <span class=\"keyword\">AS</span> o <span class=\"keyword\">NEW</span> <span class=\"keyword\">AS</span> n]  </span><br><span class=\"line\">[<span class=\"keyword\">FOR</span> <span class=\"keyword\">EACH</span> <span class=\"type\">ROW</span>]  </span><br><span class=\"line\"><span class=\"keyword\">WHEN</span> (<span class=\"keyword\">condition</span>)   </span><br><span class=\"line\"><span class=\"keyword\">DECLARE</span> </span><br><span class=\"line\">   Declaration<span class=\"operator\">-</span>statements </span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span>  </span><br><span class=\"line\">   Executable<span class=\"operator\">-</span>statements </span><br><span class=\"line\">EXCEPTION </span><br><span class=\"line\">   Exception<span class=\"operator\">-</span>handling<span class=\"operator\">-</span>statements </span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br></pre></td></tr></table></figure>\n\n<p>其中</p>\n<pre><code>CREATE [OR REPLACE] TRIGGER trigger_name - 使用trigger_name创建或替换现有的触发器。\n&#123;BEFORE | AFTER | INSTEAD OF&#125; - 指定何时执行触发器。INSTEAD OF子句用于在视图上创建触发器。\n&#123;INSERT [OR] | UPDATE [OR] | DELETE&#125; - 这指定了DML操作。\n[OF col_name] − 这指定了将要更新的列名称。\n[ON table_name] - 这指定了与触发器关联的表的名称。\n[REFERENCING OLD AS o NEW AS n] - 这允许各种DML语句(如INSERT，UPDATE和DELETE)引用新值和旧值。\n[FOR EACH ROW] - 这指定了一个行级别的触发器，即触发器将被执行的每一行受到影响。否则触发器将在执行SQL语句时执行一次，这称为表级触发器。\nWHEN(condition) - 这为触发器触发的行提供了一个条件。先对该条件求值。触发器主体只有在该条件为真值时才运行。\n</code></pre>\n<p>注意：触发器主体不能超过32K。如果触发器长度超过了该限制，就要把该体内的某些代码放到单独编译的包或存储子程序中，并从触发器主体中调用这些代码。</p>\n<h2 id=\"DML触发器\"><a href=\"#DML触发器\" class=\"headerlink\" title=\"DML触发器\"></a>DML触发器</h2><p>DML触发器是由对数据库表进行INSERT、UPDATE、DELETE操作而激发的触发器。该类<br>触发器可以在上述操作之前或之后激发运行，也可以按每个变更行激发一次（行级触发器），或每个语句激发一次进行（语句级触发器）。这些条件的组合形成了触发器的类型。总共有1 2种可能的触发类型： 3种语句×2种定时×2级。DML触发器只能定义在表上，也就是说只有对表的DML语句可以触发DML触发器。</p>\n<table>\n<thead>\n<tr>\n<th>类别</th>\n<th>值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>DML语句</td>\n<td>INSERT、DELETE、UPDATE</td>\n<td>定义何种DML语句激发触发器</td>\n</tr>\n<tr>\n<td>定时</td>\n<td>AFTER BEFOR</td>\n<td>定义触发器是在语句运行前或运行后激发</td>\n</tr>\n<tr>\n<td>级</td>\n<td>行</td>\n<td>对由触发语句变更的每一行激发一次，定义中的FOR EACH ROW子句</td>\n</tr>\n<tr>\n<td></td>\n<td>语句</td>\n<td>该触发器就在语句之前或之后激发一次</td>\n</tr>\n</tbody></table>\n<p>例1：行级DML触发器(每执行一行触发一次)：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> serveroutput <span class=\"keyword\">on</span> </span><br></pre></td></tr></table></figure>\n<p>定义<br>(1)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">OR</span> REPLACE PACKAGE TRIGER_PACKAGE <span class=\"keyword\">AS</span></span><br><span class=\"line\"> <span class=\"comment\">-- Global counter for use in the triggers</span></span><br><span class=\"line\">  V_COUNTER NUMBER:<span class=\"operator\">=</span><span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span> TRIGER_PACKAGE;</span><br></pre></td></tr></table></figure>\n<p>(2)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">OR</span> REPLACE <span class=\"keyword\">TRIGGER</span> ROW_DML BEFORE</span><br><span class=\"line\">  <span class=\"keyword\">UPDATE</span> <span class=\"keyword\">ON</span> SCOTT.EMP <span class=\"keyword\">FOR</span> <span class=\"keyword\">EACH</span> <span class=\"type\">ROW</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;THE &#x27;</span></span><br><span class=\"line\">    <span class=\"operator\">||</span>TO_CHAR(TRIGPACKAGE.V_COUNTER)</span><br><span class=\"line\">    <span class=\"operator\">||</span><span class=\"string\">&#x27; TH ROW UPDATED&#x27;</span>);</span><br><span class=\"line\">  TRIGPACKAGE.V_COUNTER:<span class=\"operator\">=</span> TRIGPACKAGE.V_COUNTER <span class=\"operator\">+</span><span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span> ROW_DML;</span><br></pre></td></tr></table></figure>\n<p>（2）触发</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  <span class=\"keyword\">UPDATE</span> SCOTT.EMP</span><br><span class=\"line\">  <span class=\"keyword\">SET</span></span><br><span class=\"line\">    SAL<span class=\"operator\">=</span>SAL＋<span class=\"number\">100</span></span><br><span class=\"line\">  <span class=\"keyword\">WHERE</span></span><br><span class=\"line\">    DEPTNO<span class=\"operator\">=</span><span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br></pre></td></tr></table></figure>\n<p>例2：语句级DML触发器(每执行一条DNL语句触发一次)：<br>(1) 定义:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">OR</span> REPLACE <span class=\"keyword\">TRIGGER</span> STATEMENT_DML BEFORE</span><br><span class=\"line\">  <span class=\"keyword\">UPDATE</span> <span class=\"keyword\">ON</span> SCOTT.EMP</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;ONLY TRIGGERS 1 TIMES&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">END</span> STATEMENT_DML;</span><br></pre></td></tr></table></figure>\n<p>（2）触发:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  <span class=\"keyword\">UPDATE</span> SCOTT.EMP</span><br><span class=\"line\">  <span class=\"keyword\">SET</span></span><br><span class=\"line\">    SAL<span class=\"operator\">=</span>SAL<span class=\"operator\">+</span><span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">WHERE</span></span><br><span class=\"line\">    DEPTNO<span class=\"operator\">=</span><span class=\"number\">10</span>;</span><br><span class=\"line\">DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;20203206222 唐权威&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br></pre></td></tr></table></figure>\n<p>例3：比较before 和after触发器<br>(1) 定义before触发器</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 20203206222 唐权威</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">OR</span> REPLACE <span class=\"keyword\">TRIGGER</span> BEFORE_DML AFTER</span><br><span class=\"line\">  <span class=\"keyword\">INSERT</span> <span class=\"keyword\">OR</span> <span class=\"keyword\">UPDATE</span> <span class=\"keyword\">OR</span> <span class=\"keyword\">DELETE</span> <span class=\"keyword\">ON</span> SCOTT.EMP</span><br><span class=\"line\"><span class=\"keyword\">DECLARE</span></span><br><span class=\"line\">  <span class=\"keyword\">CURSOR</span> EMP_CUR <span class=\"keyword\">IS</span></span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">      EMPNO,</span><br><span class=\"line\">      SAL</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span></span><br><span class=\"line\">      SCOTT.EMP</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span></span><br><span class=\"line\">      DEPTNO<span class=\"operator\">=</span><span class=\"number\">10</span>;</span><br><span class=\"line\">  EMP_SAL   SCOTT.EMP.SAL<span class=\"operator\">%</span>TYPE;</span><br><span class=\"line\">  EMP_EMPNO SCOTT.EMP.EMPNO<span class=\"operator\">%</span>TYPE;</span><br><span class=\"line\">  DML_TYPE  VARCHAR2(<span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  IF INSERTING <span class=\"keyword\">THEN</span></span><br><span class=\"line\">    DML_TYPE:<span class=\"operator\">=</span><span class=\"string\">&#x27;INSERT&#x27;</span>;</span><br><span class=\"line\">  ELSIF UPDATING <span class=\"keyword\">THEN</span></span><br><span class=\"line\">    DML_TYPE:<span class=\"operator\">=</span><span class=\"string\">&#x27;UPDATE&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">ELSE</span></span><br><span class=\"line\">    DML_TYPE:<span class=\"operator\">=</span><span class=\"string\">&#x27;DELETE&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">END</span> IF;</span><br><span class=\"line\">  <span class=\"keyword\">OPEN</span> EMP_CUR;</span><br><span class=\"line\">  <span class=\"keyword\">FETCH</span> EMP_CUR <span class=\"keyword\">INTO</span> EMP_EMPNO, EMP_SAL;</span><br><span class=\"line\">  WHILE <span class=\"keyword\">NOT</span> EMP_CUR<span class=\"operator\">%</span>NOTFOUND LOOP</span><br><span class=\"line\">    DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;BEFORE &#x27;</span></span><br><span class=\"line\">      <span class=\"operator\">||</span>DML_TYPE</span><br><span class=\"line\">      <span class=\"operator\">||</span><span class=\"string\">&#x27;, THE SAL OF &#x27;</span></span><br><span class=\"line\">      <span class=\"operator\">||</span>TO_CHAR(EMP_EMPNO)</span><br><span class=\"line\">      <span class=\"operator\">||</span> <span class=\"string\">&#x27; IS&#x27;</span></span><br><span class=\"line\">      <span class=\"operator\">||</span>TO_CHAR(EMP_SAL));</span><br><span class=\"line\">    <span class=\"keyword\">FETCH</span> EMP_CUR <span class=\"keyword\">INTO</span> EMP_EMPNO, EMP_SAL;</span><br><span class=\"line\">  <span class=\"keyword\">END</span> LOOP;</span><br><span class=\"line\">  <span class=\"keyword\">CLOSE</span> EMP_CUR;</span><br><span class=\"line\">  DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;THEN BEGIN TO INSERT&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">END</span> BEFORE_DML;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br></pre></td></tr></table></figure>\n<p>函数INSRETING,UPDATING,DELETING.</p>\n<p>（2）触发BEFORE触发器</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 20203206222 唐权威</span></span><br><span class=\"line\"><span class=\"keyword\">DECLARE</span></span><br><span class=\"line\">  <span class=\"keyword\">CURSOR</span> SAL_CUR <span class=\"keyword\">IS</span></span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">      EMPNO,</span><br><span class=\"line\">      SAL</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span></span><br><span class=\"line\">      SCOTT.EMP</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span></span><br><span class=\"line\">      DEPTNO<span class=\"operator\">=</span><span class=\"number\">10</span>;</span><br><span class=\"line\">  EMP_SAL   SCOTT.EMP.SAL<span class=\"operator\">%</span>TYPE;</span><br><span class=\"line\">  EMP_EMPNO SCOTT.EMP.EMPNO<span class=\"operator\">%</span>TYPE;</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  <span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> SCOTT.EMP <span class=\"keyword\">VALUES</span>(</span><br><span class=\"line\">    <span class=\"number\">8001</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;JACK&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;CLERK&#x27;</span>,</span><br><span class=\"line\">    <span class=\"number\">7788</span>,</span><br><span class=\"line\">    SYSDATE,</span><br><span class=\"line\">    <span class=\"number\">8000</span>,</span><br><span class=\"line\">    <span class=\"number\">1000</span>,</span><br><span class=\"line\">    <span class=\"number\">10</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"keyword\">OPEN</span> SAL_CUR;</span><br><span class=\"line\">  <span class=\"keyword\">FETCH</span> SAL_CUR <span class=\"keyword\">INTO</span> EMP_EMPNO, EMP_SAL;</span><br><span class=\"line\">  WHILE SAL_CUR<span class=\"operator\">%</span>FOUND LOOP</span><br><span class=\"line\">    DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;AFTER INSERT, THE SAL OF &#x27;</span></span><br><span class=\"line\">      <span class=\"operator\">||</span>TO_CHAR(EMP_EMPNO)</span><br><span class=\"line\">      <span class=\"operator\">||</span> <span class=\"string\">&#x27; IS&#x27;</span></span><br><span class=\"line\">      <span class=\"operator\">||</span>TO_CHAR(EMP_SAL));</span><br><span class=\"line\">    <span class=\"keyword\">FETCH</span> SAL_CUR <span class=\"keyword\">INTO</span> EMP_EMPNO, EMP_SAL;</span><br><span class=\"line\">  <span class=\"keyword\">END</span> LOOP;</span><br><span class=\"line\">  <span class=\"keyword\">CLOSE</span> SAL_CUR;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br></pre></td></tr></table></figure>\n<p>或者简单的执行</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> SCOTT.EMP(</span><br><span class=\"line\">  EMPNO,</span><br><span class=\"line\">  ENAME,</span><br><span class=\"line\">  SAL</span><br><span class=\"line\">) <span class=\"keyword\">VALUES</span>(</span><br><span class=\"line\">  <span class=\"number\">10</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;JACK&#x27;</span>,</span><br><span class=\"line\">  <span class=\"number\">1000</span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> SCOTT.EMP(</span><br><span class=\"line\">  EMPNO,</span><br><span class=\"line\">  ENAME,</span><br><span class=\"line\">  SAL,</span><br><span class=\"line\">  DEPTNO</span><br><span class=\"line\">) <span class=\"keyword\">VALUES</span>(</span><br><span class=\"line\">  <span class=\"number\">8012</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;JACK&#x27;</span>,</span><br><span class=\"line\">  <span class=\"number\">1000</span>,</span><br><span class=\"line\">  <span class=\"number\">10</span></span><br><span class=\"line\">) <span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> EMP <span class=\"keyword\">WHERE</span> EMPNO <span class=\"keyword\">IN</span>(</span><br><span class=\"line\">  <span class=\"number\">8000</span>,</span><br><span class=\"line\">  <span class=\"number\">8001</span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">-- 20203206222 唐权威</span></span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> SCOTT.EMP</span><br><span class=\"line\"><span class=\"keyword\">SET</span></span><br><span class=\"line\">  DEPTNO<span class=\"operator\">=</span><span class=\"number\">50</span></span><br><span class=\"line\"><span class=\"keyword\">WHERE</span></span><br><span class=\"line\">  DEPTNO<span class=\"operator\">=</span><span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"instead-of触发器（替代触发器）\"><a href=\"#instead-of触发器（替代触发器）\" class=\"headerlink\" title=\"instead of触发器（替代触发器）\"></a>instead of触发器（替代触发器）</h2><p>替代触发器不同于DML触发器的一点是，替代触发器<strong>只能定义在视图</strong>上，而DML触发器即可以定义在视图上，也可定义在表上。<br>替代触发器顾名思义，就是不执行满足触发条件的语句，而用替代触发器体种的语句替代。</p>\n<p>例1：替代触发器<br>（1）创建一个测试视图emp_dept  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 20203206222 唐权威</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">OR</span> REPLACE <span class=\"keyword\">VIEW</span> EMP_DEPT(</span><br><span class=\"line\">  EMPNO,</span><br><span class=\"line\">  DEPTNO,</span><br><span class=\"line\">  DEPTLOC</span><br><span class=\"line\">) <span class=\"keyword\">AS</span></span><br><span class=\"line\">  <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">    EMPNO,</span><br><span class=\"line\">    D.DEPTNO,</span><br><span class=\"line\">    D.LOC</span><br><span class=\"line\">  <span class=\"keyword\">FROM</span></span><br><span class=\"line\">    SCOTT.EMP,</span><br><span class=\"line\">    SCOTT.DEPT D</span><br><span class=\"line\">  <span class=\"keyword\">WHERE</span></span><br><span class=\"line\">    EMP.DEPTNO<span class=\"operator\">=</span>D.DEPTNO;</span><br></pre></td></tr></table></figure>\n<p>(2)由于视图emp_dept是由两个表连接而成，因此不能对视图emp_dept进行DML操作，因我们创建一个替代触发器，通过这种手段向emp_dept对应的基本表EMP和DEPT中插入数据。</p>\n<p>说明：<br>行级触发器是按触发语句所处理的行激发的。在触发器内部，我们可以访问正在处理中的行的数据，这种访问是通过两个相关的标识符： :old和:new实现的。相关标识符是一种特殊的PL&#x2F;SQL变量，PL&#x2F;SQL编译器将把这种变量按记录类型处理：</p>\n<blockquote>\n<p>triggering_table%ROWTYPE   </p>\n</blockquote>\n<p>其中，triggering_table表示触发器所在的表或视图。因此可以通过<br>：new.field 或：old.field<br>来访问正在处理的行中的字段。</p>\n<table>\n<thead>\n<tr>\n<th>触发语句</th>\n<th>:old</th>\n<th>:new</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>INSERT</td>\n<td>无意义，null</td>\n<td>INSERT语句中的新值</td>\n</tr>\n<tr>\n<td>UPDATE</td>\n<td>UPDATE前，表、视图上的原值</td>\n<td>UPDATE语句中的新值</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>DELETE前，表、视图上的原值</td>\n<td>无意义，null</td>\n</tr>\n</tbody></table>\n<p>例如：<br>在表emp上定义了一个update触发器，并且在emp中deptno＝50对应的记录为：  </p>\n<blockquote>\n<p>8003 JACK       CLERK           7788 17-10月-07       8000       1000    50</p>\n</blockquote>\n<p>下面的语句触发了该触发器</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> scott.emp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> scott.dept;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> scott.dept <span class=\"keyword\">values</span> (<span class=\"number\">80</span>,<span class=\"string\">&#x27;QUANW&#x27;</span>,<span class=\"string\">&#x27;AnYue&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">-- 20203206222 唐权威</span></span><br><span class=\"line\"><span class=\"keyword\">update</span> scott.emp <span class=\"keyword\">set</span> deptno<span class=\"operator\">=</span><span class=\"number\">80</span> <span class=\"keyword\">where</span> deptno<span class=\"operator\">=</span><span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n<p>那么 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:old.deptno=50,:old.enmae=JACK,:old.job=CLERK …；</span><br><span class=\"line\">     :new.empno=null,:new.enmae=null,…… :new.deptno=80,:new.sal=null,…；</span><br></pre></td></tr></table></figure>\n<p>(2.1)定义instead of触发器</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 20203206222 唐权威</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">OR</span> REPLACE <span class=\"keyword\">TRIGGER</span> INSTEAD_DML INSTEAD <span class=\"keyword\">OF</span></span><br><span class=\"line\">  <span class=\"keyword\">INSERT</span> <span class=\"keyword\">OR</span> <span class=\"keyword\">UPDATE</span> <span class=\"keyword\">OR</span> <span class=\"keyword\">DELETE</span> <span class=\"keyword\">ON</span> SCOTT.EMP_DEPT <span class=\"keyword\">FOR</span> <span class=\"keyword\">EACH</span> <span class=\"type\">ROW</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  IF INSERTING <span class=\"keyword\">THEN</span></span><br><span class=\"line\">    DBMS_OUTPUT.PUT_LINE(TO_CHAR(:NEW.DEPTNO)</span><br><span class=\"line\">      <span class=\"operator\">||</span>TO_CHAR(:NEW.DEPTLOC));</span><br><span class=\"line\">    <span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> SCOTT.DEPT(</span><br><span class=\"line\">      DEPTNO,</span><br><span class=\"line\">      LOC</span><br><span class=\"line\">    ) <span class=\"keyword\">VALUES</span>(</span><br><span class=\"line\">      :NEW.DEPTNO,</span><br><span class=\"line\">      :NEW.DEPTLOC</span><br><span class=\"line\">    );</span><br><span class=\"line\"> <span class=\"comment\">--Insert into SCOTT.emp(empno,deptno) values(:new.empno,:new.deptno);</span></span><br><span class=\"line\">  ELSIF UPDATING <span class=\"keyword\">THEN</span></span><br><span class=\"line\">    <span class=\"keyword\">UPDATE</span> SCOTT.DEPT</span><br><span class=\"line\">    <span class=\"keyword\">SET</span></span><br><span class=\"line\">      DEPTNO<span class=\"operator\">=</span>:NEW.DEPTNO</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span></span><br><span class=\"line\">      DEPTNO<span class=\"operator\">=</span>:OLD.DEPTNO;</span><br><span class=\"line\">    <span class=\"keyword\">UPDATE</span> SCOTT.DEPT</span><br><span class=\"line\">    <span class=\"keyword\">SET</span></span><br><span class=\"line\">      LOC<span class=\"operator\">=</span>:NEW.DEPTLOC</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span></span><br><span class=\"line\">      DEPTNO<span class=\"operator\">=</span>:OLD.DEPTNO;</span><br><span class=\"line\">    <span class=\"keyword\">UPDATE</span> SCOTT.EMP</span><br><span class=\"line\">    <span class=\"keyword\">SET</span></span><br><span class=\"line\">      EMPNO<span class=\"operator\">=</span>:NEW.EMPNO</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span></span><br><span class=\"line\">      EMPNO<span class=\"operator\">=</span>:OLD.EMPNO</span><br><span class=\"line\">      <span class=\"keyword\">AND</span> DEPTNO<span class=\"operator\">=</span>:OLD.DEPTNO;</span><br><span class=\"line\">    <span class=\"keyword\">UPDATE</span> SCOTT.EMP</span><br><span class=\"line\">    <span class=\"keyword\">SET</span></span><br><span class=\"line\">      DEPTNO<span class=\"operator\">=</span>:NEW.DEPTNO</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span></span><br><span class=\"line\">      EMPNO<span class=\"operator\">=</span>:OLD.EMPNO</span><br><span class=\"line\">      <span class=\"keyword\">AND</span> DEPTNO<span class=\"operator\">=</span>:OLD.DEPTNO;</span><br><span class=\"line\">  <span class=\"keyword\">ELSE</span></span><br><span class=\"line\">    DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;DELETE IS IGNORED&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">END</span> IF;</span><br><span class=\"line\"><span class=\"keyword\">END</span> INSTEAD_DML;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br></pre></td></tr></table></figure>\n\n<p>\\DELETE</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> all_triggers <span class=\"keyword\">where</span> TRIGGER_NAME<span class=\"operator\">=</span><span class=\"string\">&#x27;INSTEAD_DML&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> all_views <span class=\"keyword\">where</span> VIEW_NAME<span class=\"operator\">=</span><span class=\"string\">&#x27;EMP_DEPT&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>（2．2）触发instead of触发器</p>\n<p>分别执行下面的语句就触发了（2.1）定义的instead of触发器；</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> SCOTT.EMP_DEPT <span class=\"keyword\">VALUES</span>(<span class=\"number\">8020</span>,<span class=\"number\">90</span>,<span class=\"string\">&#x27;BEIJING&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 20203206222 唐权威</span></span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> SCOTT.EMP_DEPT</span><br><span class=\"line\"><span class=\"keyword\">SET</span></span><br><span class=\"line\">  DEPTLOC<span class=\"operator\">=</span><span class=\"string\">&#x27;SHANGHAI&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">WHERE</span></span><br><span class=\"line\">  DEPTNO<span class=\"operator\">=</span><span class=\"number\">80</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 20203206222 唐权威</span></span><br><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> SCOTT.EMP_DEPT</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span></span><br><span class=\"line\">  DEPTLOC<span class=\"operator\">=</span><span class=\"string\">&#x27;SHANGHAI&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>执行下面的语句，看看变化：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span>  SCOTT.EMP;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span>  SCOTT.DEPT;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span>  SCOTT.EMP_DEPT;</span><br></pre></td></tr></table></figure>\n<p>例2：引用子句：</p>\n<p>我们可以根据需要使用子句REFERENCING来为:new和:old指定一个不同的名称，<br>使程序阅读更明了，例如例1（2.1）中创建的instead of触发器，可以改为：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 20203206222 唐权威</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">OR</span> REPLACE <span class=\"keyword\">TRIGGER</span> INSTEAD_DML INSTEAD <span class=\"keyword\">OF</span></span><br><span class=\"line\">  <span class=\"keyword\">INSERT</span> <span class=\"keyword\">OR</span> <span class=\"keyword\">UPDATE</span> <span class=\"keyword\">OR</span> <span class=\"keyword\">DELETE</span> <span class=\"keyword\">ON</span> SCOTT.EMP_DEPT</span><br><span class=\"line\">   <span class=\"keyword\">REFERENCING</span> <span class=\"keyword\">NEW</span> <span class=\"keyword\">AS</span> NEW_EMP_DEPT <span class=\"keyword\">FOR</span> <span class=\"keyword\">EACH</span> <span class=\"type\">ROW</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  IF INSERTING <span class=\"keyword\">THEN</span></span><br><span class=\"line\">    DBMS_OUTPUT.PUT_LINE(TO_CHAR(:NEW_EMP_DEPT.DEPTNO)</span><br><span class=\"line\">      <span class=\"operator\">||</span>TO_CHAR(:NEW_EMP_DEPT.DEPTLOC));</span><br><span class=\"line\">    <span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> SCOTT.DEPT(</span><br><span class=\"line\">      DEPTNO,</span><br><span class=\"line\">      LOC</span><br><span class=\"line\">    ) <span class=\"keyword\">VALUES</span>(</span><br><span class=\"line\">      :NEW_EMP_DEPT.DEPTNO,</span><br><span class=\"line\">      :NEW_EMP_DEPT.DEPTLOC</span><br><span class=\"line\">    );</span><br><span class=\"line\"> <span class=\"comment\">--Insert into SCOTT.emp(empno,deptno) values(:NEW_EMP_DEPT.empno,:NEW_EMP_DEPT.deptno);</span></span><br><span class=\"line\">  ELSIF UPDATING <span class=\"keyword\">THEN</span></span><br><span class=\"line\">    <span class=\"keyword\">UPDATE</span> SCOTT.DEPT</span><br><span class=\"line\">    <span class=\"keyword\">SET</span></span><br><span class=\"line\">      DEPTNO<span class=\"operator\">=</span>:NEW_EMP_DEPT.DEPTNO</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span></span><br><span class=\"line\">      DEPTNO<span class=\"operator\">=</span>:OLD.DEPTNO;</span><br><span class=\"line\">    <span class=\"keyword\">UPDATE</span> SCOTT.DEPT</span><br><span class=\"line\">    <span class=\"keyword\">SET</span></span><br><span class=\"line\">      LOC<span class=\"operator\">=</span>:NEW_EMP_DEPT.DEPTLOC</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span></span><br><span class=\"line\">      DEPTNO<span class=\"operator\">=</span>:OLD.DEPTNO;</span><br><span class=\"line\">    <span class=\"keyword\">UPDATE</span> SCOTT.EMP</span><br><span class=\"line\">    <span class=\"keyword\">SET</span></span><br><span class=\"line\">      EMPNO<span class=\"operator\">=</span>:NEW_EMP_DEPT.EMPNO</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span></span><br><span class=\"line\">      EMPNO<span class=\"operator\">=</span>:OLD.EMPNO</span><br><span class=\"line\">      <span class=\"keyword\">AND</span> DEPTNO<span class=\"operator\">=</span>:OLD.DEPTNO;</span><br><span class=\"line\">    <span class=\"keyword\">UPDATE</span> SCOTT.EMP</span><br><span class=\"line\">    <span class=\"keyword\">SET</span></span><br><span class=\"line\">      DEPTNO<span class=\"operator\">=</span>:NEW_EMP_DEPT.DEPTNO</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span></span><br><span class=\"line\">      EMPNO<span class=\"operator\">=</span>:OLD.EMPNO</span><br><span class=\"line\">      <span class=\"keyword\">AND</span> DEPTNO<span class=\"operator\">=</span>:OLD.DEPTNO;</span><br><span class=\"line\">  <span class=\"keyword\">ELSE</span></span><br><span class=\"line\">    DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;DELETE IS IGNORED&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">END</span> IF;</span><br><span class=\"line\"><span class=\"keyword\">END</span> INSTEAD_DML;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h2 id=\"系统触发器\"><a href=\"#系统触发器\" class=\"headerlink\" title=\"系统触发器\"></a>系统触发器</h2><p>1、DML和替代触发器都在（或代替）DML事件，即INSERT、UPDATE、DELETE语句上激活。而系统触发器可以在两种不同的事件即DDL或数据库事件上激活。DDL事件包括CREATE、ALTER或DROP语句，而数据库事件包括服务器的启动或关闭，用户的登录或退出，以及服务器错误。创建系统触发器的语法如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> [<span class=\"keyword\">OR</span> REPLACE] <span class=\"keyword\">TRIGGER</span> [ schema.] trigger_name</span><br><span class=\"line\">&#123;BEFORE <span class=\"operator\">|</span> AFTER&#125;</span><br><span class=\"line\">&#123; ddl_event_list<span class=\"operator\">|</span> database_event_list&#125;</span><br><span class=\"line\"><span class=\"keyword\">ON</span> &#123;DATABASE <span class=\"operator\">|</span> SCHEMA&#125;</span><br><span class=\"line\">[ when_clause]</span><br><span class=\"line\">trigger_body;</span><br></pre></td></tr></table></figure>\n<p>说明:<br>关键字 <strong>DATABASE</strong> 和 <strong>SCHEMA</strong> 的区别:<br>若用户在创建logon 触发器tt_tirg时,选择了SCHEMA关键字,那么只有用户tt的登陆回触发tt_tirg,其他用户的登陆不会触发tt_tirg;<br>若用户tt在创建logon 触发器tt_tirg时,选择了database关键字,那么所有用户的登陆都会触发tt_tirg;</p>\n<table>\n<thead>\n<tr>\n<th>事件</th>\n<th>event</th>\n<th>允许时机</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>启动</td>\n<td>startup</td>\n<td>after</td>\n<td>实例启动时激活</td>\n</tr>\n<tr>\n<td>关闭</td>\n<td>shutdown</td>\n<td>before</td>\n<td>实例正常关闭时激活</td>\n</tr>\n<tr>\n<td>服务器错误</td>\n<td>servererror</td>\n<td>after</td>\n<td>只要有该类错误就激活</td>\n</tr>\n<tr>\n<td>登录</td>\n<td>logon</td>\n<td>after</td>\n<td>在用户成功连接数据库后激活</td>\n</tr>\n<tr>\n<td>注销</td>\n<td>logoff</td>\n<td>before</td>\n<td>在用户注销开始时激活</td>\n</tr>\n<tr>\n<td>创建</td>\n<td>create</td>\n<td>before，after</td>\n<td>在创建模式对象之前或之后激活</td>\n</tr>\n<tr>\n<td>撤消</td>\n<td>drop</td>\n<td>before，after</td>\n<td>在创建模式对象撤消之前或之后激活</td>\n</tr>\n<tr>\n<td>变更</td>\n<td>alter</td>\n<td>before，after</td>\n<td>在创建模式对象变更之前或之后激活</td>\n</tr>\n</tbody></table>\n<p>3.数据库事件触发器</p>\n<p>例1：在自己的模式下面创建一个测试用表</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 20203206222 唐权威</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> LOGON_RECORD(</span><br><span class=\"line\">  USER_ID VARCHAR2(<span class=\"number\">10</span>),</span><br><span class=\"line\">  LOG_TIME <span class=\"type\">DATE</span>,</span><br><span class=\"line\">  ACTION <span class=\"type\">VARCHAR</span>(<span class=\"number\">20</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>例2：在自己的模式下面创建一个schema级别的logon触发器   </p>\n<p>(1)创建  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 20203206222 唐权威</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">OR</span> REPLACE <span class=\"keyword\">TRIGGER</span> LOGON_TRIG </span><br><span class=\"line\">AFTER LOGON <span class=\"keyword\">ON</span> SCHEMA</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  <span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> LOGON_RECORD <span class=\"keyword\">VALUES</span>(</span><br><span class=\"line\">    <span class=\"keyword\">USER</span>,</span><br><span class=\"line\">    SYSDATE,</span><br><span class=\"line\">    <span class=\"string\">&#x27;SCHEMA_LOGON&#x27;</span></span><br><span class=\"line\">  );</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> ALL_TRIGGERS <span class=\"keyword\">where</span> trigger_name<span class=\"operator\">=</span><span class=\"string\">&#x27;LOGON_TRIG&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>(2) 触发</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conn username/poasswd;</span><br></pre></td></tr></table></figure>\n<p>并让附近同学执行相应的连接语句  </p>\n<p>(3) 查看表logon_record</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> logon_record;</span><br></pre></td></tr></table></figure>\n<p>其他用户的登陆不会记录在表logon_record中;  </p>\n<p>例3: 在自己的模式下面创建一个database级别的logon触发器  </p>\n<p>(1)创建</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">OR</span> REPLACE <span class=\"keyword\">TRIGGER</span> LOGON_TRIG_DB </span><br><span class=\"line\">AFTER LOGON <span class=\"keyword\">ON</span> DATABASE</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  <span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> LOGON_RECORD </span><br><span class=\"line\">  <span class=\"keyword\">VALUES</span>(</span><br><span class=\"line\">    <span class=\"keyword\">USER</span>,</span><br><span class=\"line\">    SYSDATE,</span><br><span class=\"line\">    <span class=\"string\">&#x27;DBLOGON&#x27;</span></span><br><span class=\"line\">  );</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br></pre></td></tr></table></figure>\n\n\n<p>(2)触发</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conn username/poasswd;</span><br></pre></td></tr></table></figure>\n<p>并让附近同学执行相应的连接语句<br>(3)查看表logon_record  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> logon_record;</span><br></pre></td></tr></table></figure>\n<p>其他用户的登陆会记录在表logon_record中;<br>4、DDL触发器<br>(1)创建一个测试用表ddl_tri_db  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> DDL_TRI_DB(</span><br><span class=\"line\">  USER_ID VARCHAR2(<span class=\"number\">10</span>),</span><br><span class=\"line\">  CTIME <span class=\"type\">DATE</span>,</span><br><span class=\"line\">  ACTION VARCHAR2(<span class=\"number\">20</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>(2)创建DDL触发器</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">OR</span> REPLACE <span class=\"keyword\">TRIGGER</span> DDL_TRI </span><br><span class=\"line\">AFTER <span class=\"keyword\">CREATE</span> <span class=\"keyword\">ON</span> DATABASE</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  <span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> DDL_TRI_DB(</span><br><span class=\"line\">    USER_ID,</span><br><span class=\"line\">    CTIME,</span><br><span class=\"line\">    ACTION</span><br><span class=\"line\">  ) <span class=\"keyword\">VALUES</span>(</span><br><span class=\"line\">    <span class=\"keyword\">USER</span>,</span><br><span class=\"line\">    SYSDATE,</span><br><span class=\"line\">    <span class=\"string\">&#x27;CREATE&#x27;</span></span><br><span class=\"line\">  );</span><br><span class=\"line\"><span class=\"keyword\">END</span> DDL_TRI;</span><br></pre></td></tr></table></figure>\n<p>（3）触发</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> TT(</span><br><span class=\"line\">  TID NUMBER</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>(4) 查看</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> quanwei.ddl_tri_db;</span><br></pre></td></tr></table></figure>\n<p>请将上例中的关键字database 换为schema然后比较变化； </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">OR</span> REPLACE <span class=\"keyword\">TRIGGER</span> DDL_TRI </span><br><span class=\"line\">AFTER <span class=\"keyword\">CREATE</span> <span class=\"keyword\">ON</span> SCHEMA</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  <span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> DDL_TRI_DB(</span><br><span class=\"line\">    USER_ID,</span><br><span class=\"line\">    CTIME,</span><br><span class=\"line\">    ACTION</span><br><span class=\"line\">  ) <span class=\"keyword\">VALUES</span>(</span><br><span class=\"line\">    <span class=\"keyword\">USER</span>,</span><br><span class=\"line\">    SYSDATE,</span><br><span class=\"line\">    <span class=\"string\">&#x27;CREATE_S&#x27;</span></span><br><span class=\"line\">  );</span><br><span class=\"line\"><span class=\"keyword\">END</span> DDL_TRI;</span><br></pre></td></tr></table></figure>\n<p>（3）触发</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> TT(</span><br><span class=\"line\">  TID NUMBER</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>(4) 查看</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> ddl_tri_db;</span><br></pre></td></tr></table></figure>\n<p>5、when 子句的使用</p>\n<p>如果触发器存在when子句，并且在WHEN子句中指定了trigger_condition的话，则首先对该条件求值。触发器主体只有在该条件为真值时才运行。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> serveroutput <span class=\"keyword\">on</span> </span><br></pre></td></tr></table></figure>\n<p>(1)创建</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">OR</span> REPLACE <span class=\"keyword\">TRIGGER</span> WHEN_TEST BEFORE</span><br><span class=\"line\">  <span class=\"keyword\">UPDATE</span> <span class=\"keyword\">ON</span> SCOTT.EMP <span class=\"keyword\">FOR</span> <span class=\"keyword\">EACH</span> <span class=\"type\">ROW</span> <span class=\"keyword\">WHEN</span> (OLD.DEPTNO<span class=\"operator\">=</span><span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;THE UPDATE EXECUTED ONLY WHEN THE DEPTNO=10&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">END</span> WHEN_TEST;</span><br></pre></td></tr></table></figure>\n<p>（2） 触发</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">update</span> SCOTT.emp <span class=\"keyword\">set</span> sal<span class=\"operator\">=</span>sal<span class=\"operator\">+</span><span class=\"number\">10000</span>;</span><br></pre></td></tr></table></figure>\n\n<p>6、 系统触发器和WHEN子句</p>\n<p>就象DML触发器一样，系统触发器可以使用WHEN子句来指定触发器激活条件。<br>然而，对每一种系统触发器所指定的条件类型有如下限制：  </p>\n<pre><code>STARTUP和SHUTDOWN触发器不能带有任何条件。   \nSERVERERROR触发器可以使用ERRNO测试来检查特定的错误。  \nLOGON 和LOGOFF触发器可以使用USERID或USERNAME测试来检查用户标识或用户名。  \nDDL触发器可以检查正在修改对象的名称和类型。  \n</code></pre>\n"},{"title":"OpenGauss Database","date":"2023-04-07T06:41:03.000Z","_content":"# OpenGauss Database\n\n## 安装\n```bash\n\ndocker run --name opengauss --privileged=true -d -e GS_PASSWORD=Tq@021009 -p 5432:5432 enmotech/opengauss:latest\n\ndocker run --name opengauss --privileged=true -d -e GS_PASSWORD=Tq@021009 -p 5432:5432 opengauss/opengauss\n\ngsql -d postgres -U gaussdb -W 'Tq@021009' -h host_ip -p 5432\n\nsu - omm\n\ngsql\n\n```\n\n```\n步骤 1 以操作系统用户omm登录数据库主节点。\ngs_om -t status --detail\n\n步骤 2 使用如下命令查询openGauss状态：\n\n若要查询某主机上的实例状态，请在命令中增加“-h”项。示例如下：。示例如下：\ngs_om -t status -h plat2 --detail\n\n其中，plat2为待查询主机的名称。\n\n```\n\n步骤 1 以操作系统用户omm登录数据库主节点。\n\n步骤 2 使用以下命令启动openGauss。\ngs_om -t start\n\n启动openGauss语法\ngs_om -t start [-h HOSTNAME] [-D dataDir] [--time-out=SECS] [--security-mode=MODE] [-l LOGFILE]\n\n说明：双机启动必须以双机模式启动, 若中间过程以单机模式启动, 则必须修复才能恢复双机关系, 用gs_ctl build进行修复。\n\n步骤 1 以操作系统用户omm登录数据库主节点。\n\n步骤 2 使用以下命令停止openGauss。\ngs_om -t stop\n\n停止openGauss语法：\ngs_om -t stop [-h HOSTNAME] [-D dataDir]  [--time-out=SECS] [-m MODE] [-l LOGFILE]\n\n\n系统日志存储位置：数据库节点的运行日志放在“/var/log/gaussdb/用户名/pg_log”中各自对应的目录下。\n数据库节点运行日志的命名规则：postgresql-创建时间.log\n","source":"_posts/OpenGauss-Database.md","raw":"---\ntitle: OpenGauss Database\ndate: 2023-04-07 14:41:03\ntags: \n- OpenGauss\n- Database\n---\n# OpenGauss Database\n\n## 安装\n```bash\n\ndocker run --name opengauss --privileged=true -d -e GS_PASSWORD=Tq@021009 -p 5432:5432 enmotech/opengauss:latest\n\ndocker run --name opengauss --privileged=true -d -e GS_PASSWORD=Tq@021009 -p 5432:5432 opengauss/opengauss\n\ngsql -d postgres -U gaussdb -W 'Tq@021009' -h host_ip -p 5432\n\nsu - omm\n\ngsql\n\n```\n\n```\n步骤 1 以操作系统用户omm登录数据库主节点。\ngs_om -t status --detail\n\n步骤 2 使用如下命令查询openGauss状态：\n\n若要查询某主机上的实例状态，请在命令中增加“-h”项。示例如下：。示例如下：\ngs_om -t status -h plat2 --detail\n\n其中，plat2为待查询主机的名称。\n\n```\n\n步骤 1 以操作系统用户omm登录数据库主节点。\n\n步骤 2 使用以下命令启动openGauss。\ngs_om -t start\n\n启动openGauss语法\ngs_om -t start [-h HOSTNAME] [-D dataDir] [--time-out=SECS] [--security-mode=MODE] [-l LOGFILE]\n\n说明：双机启动必须以双机模式启动, 若中间过程以单机模式启动, 则必须修复才能恢复双机关系, 用gs_ctl build进行修复。\n\n步骤 1 以操作系统用户omm登录数据库主节点。\n\n步骤 2 使用以下命令停止openGauss。\ngs_om -t stop\n\n停止openGauss语法：\ngs_om -t stop [-h HOSTNAME] [-D dataDir]  [--time-out=SECS] [-m MODE] [-l LOGFILE]\n\n\n系统日志存储位置：数据库节点的运行日志放在“/var/log/gaussdb/用户名/pg_log”中各自对应的目录下。\n数据库节点运行日志的命名规则：postgresql-创建时间.log\n","slug":"OpenGauss-Database","published":1,"updated":"2023-06-23T01:04:16.229Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5us0031lv9ef180fser","content":"<h1 id=\"OpenGauss-Database\"><a href=\"#OpenGauss-Database\" class=\"headerlink\" title=\"OpenGauss Database\"></a>OpenGauss Database</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">docker run --name opengauss --privileged=<span class=\"literal\">true</span> -d -e GS_PASSWORD=Tq@021009 -p 5432:5432 enmotech/opengauss:latest</span><br><span class=\"line\"></span><br><span class=\"line\">docker run --name opengauss --privileged=<span class=\"literal\">true</span> -d -e GS_PASSWORD=Tq@021009 -p 5432:5432 opengauss/opengauss</span><br><span class=\"line\"></span><br><span class=\"line\">gsql -d postgres -U gaussdb -W <span class=\"string\">&#x27;Tq@021009&#x27;</span> -h host_ip -p 5432</span><br><span class=\"line\"></span><br><span class=\"line\">su - omm</span><br><span class=\"line\"></span><br><span class=\"line\">gsql</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">步骤 1 以操作系统用户omm登录数据库主节点。</span><br><span class=\"line\">gs_om -t status --detail</span><br><span class=\"line\"></span><br><span class=\"line\">步骤 2 使用如下命令查询openGauss状态：</span><br><span class=\"line\"></span><br><span class=\"line\">若要查询某主机上的实例状态，请在命令中增加“-h”项。示例如下：。示例如下：</span><br><span class=\"line\">gs_om -t status -h plat2 --detail</span><br><span class=\"line\"></span><br><span class=\"line\">其中，plat2为待查询主机的名称。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>步骤 1 以操作系统用户omm登录数据库主节点。</p>\n<p>步骤 2 使用以下命令启动openGauss。<br>gs_om -t start</p>\n<p>启动openGauss语法<br>gs_om -t start [-h HOSTNAME] [-D dataDir] [–time-out&#x3D;SECS] [–security-mode&#x3D;MODE] [-l LOGFILE]</p>\n<p>说明：双机启动必须以双机模式启动, 若中间过程以单机模式启动, 则必须修复才能恢复双机关系, 用gs_ctl build进行修复。</p>\n<p>步骤 1 以操作系统用户omm登录数据库主节点。</p>\n<p>步骤 2 使用以下命令停止openGauss。<br>gs_om -t stop</p>\n<p>停止openGauss语法：<br>gs_om -t stop [-h HOSTNAME] [-D dataDir]  [–time-out&#x3D;SECS] [-m MODE] [-l LOGFILE]</p>\n<p>系统日志存储位置：数据库节点的运行日志放在“&#x2F;var&#x2F;log&#x2F;gaussdb&#x2F;用户名&#x2F;pg_log”中各自对应的目录下。<br>数据库节点运行日志的命名规则：postgresql-创建时间.log</p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h1 id=\"OpenGauss-Database\"><a href=\"#OpenGauss-Database\" class=\"headerlink\" title=\"OpenGauss Database\"></a>OpenGauss Database</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">docker run --name opengauss --privileged=<span class=\"literal\">true</span> -d -e GS_PASSWORD=Tq@021009 -p 5432:5432 enmotech/opengauss:latest</span><br><span class=\"line\"></span><br><span class=\"line\">docker run --name opengauss --privileged=<span class=\"literal\">true</span> -d -e GS_PASSWORD=Tq@021009 -p 5432:5432 opengauss/opengauss</span><br><span class=\"line\"></span><br><span class=\"line\">gsql -d postgres -U gaussdb -W <span class=\"string\">&#x27;Tq@021009&#x27;</span> -h host_ip -p 5432</span><br><span class=\"line\"></span><br><span class=\"line\">su - omm</span><br><span class=\"line\"></span><br><span class=\"line\">gsql</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">步骤 1 以操作系统用户omm登录数据库主节点。</span><br><span class=\"line\">gs_om -t status --detail</span><br><span class=\"line\"></span><br><span class=\"line\">步骤 2 使用如下命令查询openGauss状态：</span><br><span class=\"line\"></span><br><span class=\"line\">若要查询某主机上的实例状态，请在命令中增加“-h”项。示例如下：。示例如下：</span><br><span class=\"line\">gs_om -t status -h plat2 --detail</span><br><span class=\"line\"></span><br><span class=\"line\">其中，plat2为待查询主机的名称。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>步骤 1 以操作系统用户omm登录数据库主节点。</p>\n<p>步骤 2 使用以下命令启动openGauss。<br>gs_om -t start</p>\n<p>启动openGauss语法<br>gs_om -t start [-h HOSTNAME] [-D dataDir] [–time-out&#x3D;SECS] [–security-mode&#x3D;MODE] [-l LOGFILE]</p>\n<p>说明：双机启动必须以双机模式启动, 若中间过程以单机模式启动, 则必须修复才能恢复双机关系, 用gs_ctl build进行修复。</p>\n<p>步骤 1 以操作系统用户omm登录数据库主节点。</p>\n<p>步骤 2 使用以下命令停止openGauss。<br>gs_om -t stop</p>\n<p>停止openGauss语法：<br>gs_om -t stop [-h HOSTNAME] [-D dataDir]  [–time-out&#x3D;SECS] [-m MODE] [-l LOGFILE]</p>\n<p>系统日志存储位置：数据库节点的运行日志放在“&#x2F;var&#x2F;log&#x2F;gaussdb&#x2F;用户名&#x2F;pg_log”中各自对应的目录下。<br>数据库节点运行日志的命名规则：postgresql-创建时间.log</p>\n"},{"title":"Oracle DBA","date":"2023-03-24T11:53:09.000Z","_content":"\n# Oracle DBA\n\n## Oracle DB 架构\n\n![](2023-05-07-17-11-39.png)\n\n主要组件概述\n\n* Oracle 服务器：Oracle 服务器中有多个文件、进程和内存结构;但是，在处理 SQL 语句时，并非所有方法都使用它们。有些用于提高数据库的性能，确保在发生软件或硬件错误时可以恢复数据库，或执行维护数据库所需的其他任务。Oracle 服务器由 Oracle 实例和 Oracle 数据库组成。\n\n* Oracle 实例：Oracle 实例是后台进程和内存结构的组合。必须启动实例才能访问数据库中的数据。每次启动实例时，都会分配一个系统全局区域 （SGA） 并启动 Oracle 后台进程。后台进程代表调用进程执行功能。它们整合了原本由为每个用户运行的多个 Oracle 程序处理的功能。后台进程执行输入/输出 （I/O） 并监视其他 Oracle 进程，以提供更高的并行性，从而提高性能和可靠性。\n\n* Oracle 数据库：Oracle 数据库由操作系统文件（也称为数据库文件）组成，这些文件为数据库信息提供实际的物理存储。数据库文件用于确保数据保持一致，并且可以在实例发生故障时恢复。\n\n* 其他密钥文件：非数据库文件用于配置实例、对特权用户进行身份验证以及在发生磁盘故障时恢复数据库。\n\n* 用户和服务器进程：用户和服务器进程是执行 SQL 语句时涉及的主要进程;但是，其他进程可以帮助服务器完成 SQL 语句的处理。\n\n* 其他进程：Oracle 中的其他选项也存在许多其他进程，例如高级队列、实际应用程序群集、共享服务器、高级复制等。这些过程在各自的课程中讨论。\n\n## Oracle Instance\n\n![](2023-05-07-17-15-34.png)\n\nOracle 实例由系统全局区域 （SGA） 内存结构和用于管理数据库的后台进程组成。实例是使用特定于每个操作系统的方法标识的。实例一次只能打开和使用一个数据库。\n\n\n## 建立连接和会话\n\n### 连接到Oracle Instance\n\n用户启动 SQL*Plus 等工具开发的应用程序。此应用程序或工具作为**用户进程**执行。\n\n当用户登录到 Oracle 服务器时，将在运行 Oracle 服务器的计算机上创建一个**服务器进程**。\n\n服务器进程代表客户端上运行的用户进程与 Oracle 实例通信。服务器进程代表用户执行 SQL 语句。\n\n### 连接\n\n连接是用户进程和 Oracle 服务器之间的通信路径。数据库用户可以通过以下三种方式之一连接到 Oracle 服务器：\n\n1. 用户登录到运行 Oracle 实例的操作系统，并启动访问该系统上的数据库的应用程序或工具。通信路径是使用主机操作系统上可用的进程间通信机制建立的。\n2. 用户在本地计算机上启动应用程序或工具，并通过网络连接到运行 Oracle 实例的计算机。在这种称为客户端-服务器（C/S）的配置中，网络软件用于在用户和 Oracle 服务器之间进行通信。\n3. 在三层连接中，用户的计算机通过网络与应用程序或网络服务器通信，应用程序或网络服务器通过网络连接到运行 Oracle 实例的计算机。例如，用户在网络上的计算机上运行浏览器，以使用驻留在 NT 服务器上的应用程序，该应用程序从 UNIX 主机上运行的 Oracle 数据库中检索数据。\n\n\n### 会话\n\n会话是用户与 Oracle 服务器的特定连接。会话在 Oracle 服务器验证用户时开始，在用户注销或异常终止时结束。对于给定的数据库用户，如果用户同时从许多工具、应用程序或终端登录，则可能出现许多并发会话。除了某些专用的数据库管理工具外，启动数据库会话需要 Oracle 服务器可供使用。\n\n注意：此处介绍的连接类型（用户和服务器进程之间存在一对一的对应关系）称为专用服务器连接。使用共享服务器配置时，多个用户进程可以共享服务器进程。\n\n## Oracle Database\n\n![](2023-05-07-17-21-09.png)\n\n数据库的一般用途是存储和检索相关信息。Oracle 数据库具有逻辑结构和物理结构。数据库的物理结构是数据库中的一组操作系统文件。\n\nOracle 数据库由三种文件类型组成。\n\n* **数据文件**(Data files): 包含数据库中实际数据\n\n* **重做日志**(Redo logs): 包含对数据库所做的更改的记录，以便在发生故障时恢复数据\n\n* **控制文件**(Control files): 包含维护和验证数据库完整性所需信息\n\n其他关键文件结构\nOracle 服务器还使用不属于数据库的其他文件：\n1. **参数文件**(parameter file)定义了 Oracle 实例的特征。例如，它包含调整 SGA 中某些内存结构大小的参数。\n2. **密码文件**(password file)对有权启动和关闭 Oracle 实例的用户进行身份验证。\n3. **存档的重做日志文件**(Archived redo log files)是从介质故障中恢复可能需要的重做日志文件的脱机副本。\n\n## Physical Structure\n\nOracle 数据库的物理结构仅包含三种类型的文件：\n1. 数据文件\n2. 重做日志文件\n3. 控制文件\n\n## Memory Structure\n\n1. 系统全局区域 （SGA）：在实例启动时分配，是 Oracle 实例的基本组件\n2. 程序全局区域 （PGA）：在服务器进程启动时分配\n\n\n### 系统全局区(SGA)\n它用于存储由数据库进程共享的数据库信息。它包含Oracle服务器的数据和控制信息，并被分配在Oracle所在的计算机的虚拟内存中。\n\nSGA 的大小由几个初始化参数确定。对 SGA 大小影响最大的参数是：\n* DB_CACHE_SIZE：标准块的缓存大小。\n* LOG_BUFFER：为重做日志缓冲区缓存分配的字节数。\n* SHARED_POOL_SIZE：专用于共享 SQL 和 PL/SQL 的区域的大小（以字节为单位）。\n* LARGE_POOL_SIZE：大型游泳池的大小;默认值为零。\n  \n由下面几个内存区域组成：\n* Shared pool\n* Database buffer cache\n* Redo log buffer cache\n* Large pool(optional)\n* Java pool (optional)\n\n#### Shared pool\n\n存储最近的执行的 SQL 语句和最近使用的数据定义(DD)\n\n由两部分组成：\n1. Library cache (LRU,SQL,PL/SQL)\n2. Data dictionary cache ()\n\n调整\n```sql\nALTER SYSTEM SET SHARED_POOL_SIZE = 64M;\n```\n\n### Database Buffer Cache\n\n数据库缓冲缓存存储数据副本,即已从数据文件中检索的块。\n获取和更新数据时，它可以极大地提高性能。\n它通过最近最少使用的 （LRU） 算法进行管理。\nDB_BLOCK_SIZE确定主块大小。\n\n处理查询时，Oracle 服务器进程会在数据库缓冲区缓存中查找所需的任何块。如果在数据库缓冲区高速缓存中找不到该块，服务器进程将从数据文件中读取该块，并将副本放在数据库缓冲区高速缓存中。由于对同一块的后续请求可能会在内存中找到该块，因此请求可能不需要物理读取。Oracle 服务器使用最近最少使用的算法来老化最近未访问的缓冲区，以便为数据库缓冲区缓存中的新块腾出空间。\n\n\n调整大小\n缓冲区缓存中每个缓冲区的大小等于 Oracle 块的大小，由 DB_BLOCK_SIZE 参数指定。\n数据库缓冲区高速缓存由用于缓冲池和多个块大小的独立子高速缓存组成。\n参数 DB_BLOCK_SIZE 确定用于 SYSTEM 表空间的主块大小。\n三个参数定义缓冲区缓存的大小：\n\n1. DB_CACHE_SIZE：仅调整默认缓冲区缓存大小的大小，它始终存在且不能设置为零。\n2. DB_KEEP_CACHE_SIZE：调整保留缓冲区缓存的大小，该缓存用于在内存中保留可能重复使用的块。\n3. DB_RECYCLE_CACHE_SIZE：调整回收缓冲区缓存的大小，用于从内存中消除重用变化不大的块。\n\n可以使用标准块大小和最多四个非标准块大小创建 Oracle 数据库。非标准块大小可以具有介于 2 KB 和 32 KB 之间的任何 2 次方值。\n\n```sql\nALTER SYSTEM SET DB_CACHE_SIZE = 96M;\n```\n\nDB_CACHE_ADVICE 收集统计信息以预测不同的缓存大小行为\n\n### Redo Log Buffer Cache\n\n重做日志缓冲区缓存记录所有对数据库数据块进行的更改\n\n其主要目的是恢复。\n中记录的更改称为重做条目（redo entries）。\n重做条目包含用于重建或重做更改的信息。\n\n重做日志缓冲区缓存是一个循环缓冲区，其中包含对数据文件块所做的更改。此信息存储在重做条目中。重做条目包含在通过插入、更新、删除、创建、更改或删除操作进行更改之前重新创建数据所需的信息。\n\n大小由下式定义： \nLOG_BUFFER\n\n### Large pool\n\n当用户通过共享服务器进行连接时，Oracle 需要在共享池中分配额外的空间，用于存储有关用户进程、调度程序和服务器之间连接的信息。Large pool 减轻了shared pool内区域的负担。共享池不必放弃内存来缓存 SQL 分析树，转而使用共享服务器会话信息、I/O 以及备份和恢复进程。性能提升来自共享 SQL 缓存的增加和收缩带来的开销的减少。\n\n调整大型池的大小\n大型池的大小以 LARGE_POOL_SIZE 参数定义的字节为单位。\n\n### Java pool\n\n如果安装和使用 Java，则为必需。\n\n它在数据库表中的存储方式与PL/SQL大致相同。\n\n它的大小由 JAVA_POOL_SIZE 参数调整。\n\n## PGA\n\n![](2023-05-07-17-44-18.png)\n\nProgram Global Area \n程序全局区域或进程全局区域 （PGA） 是一个内存区域，其中包含单个服务器进程或单个后台进程的数据和控制信息。\n\nPGA 在创建进程时分配，在进程终止时解除分配。与由多个进程共享的 SGA 相比，PGA 是一个仅由一个进程使用的区域。\n\n在专用服务器配置中，PGA 包括以下组件：\n* 排序区域：用于处理 SQL 语句可能需要的任何排序\n* 会话信息：包括会话的用户权限和性能统计信息\n* 游标状态：指示会话当前使用的 SQL 语句处理阶段\n* 堆栈空间：包含其他会话变量\n注： 使用共享服务器配置时，其中一些结构存储在 SGA 中。\n如果使用共享服务器配置，则多个用户进程可以共享服务器进程。\n如果创建了大型池，则结构将存储在大型池中;否则，它们将存储在共享池中。\n\n\n## Oracle Process\n* 用户进程：在数据库用户请求连接到 Oracle 服务器时启动\n* 服务器进程：连接到 Oracle 实例，并在用户建立会话时启动。\n* 后台进程：启动 Oracle 实例时可用\n\n### 用户进程\n\n需要从数据库请求信息的数据库用户必须首先与 Oracle 服务器建立连接。\n使用数据库接口工具（如 SQL*Plus）请求连接，并开始用户进程。\n用户进程不直接与 Oracle 服务器交互。\n相反，它通过用户帐户接口 （UPI） 生成调用，该接口创建会话并启动服务器进程。\n\n### 服务器进程\n是与甲骨文服务器直接交互的程序\n\n1. 它完成生成的调用并返回结果。\n2. 可以是专用服务器或共享服务器。\n\n用户建立连接后，将启动服务器进程来处理用户进程请求。\n服务器进程可以是专用服务器进程，也可以是共享服务器进程。\n在专用服务器环境中，服务器进程处理单个用户进程的请求。一\n旦用户进程断开连接，服务器进程就会终止。\n在共享服务器环境中，服务器进程处理多个用户进程的请求。\n服务器进程使用 Oracle 程序接口 （OPI） 与 Oracle Server通信。\n\n### 后台进程\nOracle 体系结构有五个必需的后台进程：\n1. DBWn\t\t\t\n2. PMON\t\t\n3. CKPT\n4. LGWR\t\t\t\n5. SMON\t\n\n除了必需列表之外，Oracle 还有许多可选的后台进程，这些进程在使用其选项时启动。\n\n以下是一些可选后台进程的列表：\n* RECO：恢复器\n* QMNn：高级排队\n* ARCn：存档器\n* LCKn：RAC 锁管理器 — 实例锁\n* LMON：RAC DLM 监视器 — 全局锁\n* LMDn：RAC DLM 监视器 — 远程锁定\n* CJQ0：快照刷新\n* Dnnn：调度程序\n* SNNN：共享服务器\n* Pnnn：并行查询从属\n\n#### 数据库写进程 （DBWn） \n\n服务器进程在缓冲区缓存中记录对回滚和数据块的更改。\nDBWn 将数据库缓冲区缓存中的脏缓冲区写入数据文件。\n它确保数据库缓冲区缓存中提供足够数量的可用缓冲区（当服务器进程需要从数据文件中读取块时可以覆盖的缓冲区）。\n数据库性能得到提高，因为服务器进程仅在缓冲区高速缓存中进行更改。\n\nDBWn 延迟写入数据文件，直到发生以下事件之一：\n* 检查点\n* 脏缓冲区数达到阈值\n* 进程在扫描可用缓冲区时扫描指定数量的块No free buffers\n* 发生超时\n* 实际应用程序群集环境中的 ping 请求\n* 将普通表空间或临时表空间置于脱机状态\n* 将表空间置于只读模式\n* 删除或截断表\n* ALTER TABLESPACE tablespace name BEGIN BACKUP\n\n#### Log Writer (LGWR)\n\n在以下情况下，LGWR 会执行从重做日志缓冲区缓存到重做日志文件的顺序写入：\n* 当事务提交时\n* 当重做日志缓冲区缓存已满三分之一时\n* 当重做日志缓冲区缓存中的更改记录超过 1 MB 时\n* 在 DBWn 之前，将数据库缓冲区缓存中修改的块写入数据文件\n* 每 3 秒一次。\n* 由于恢复需要重做，因此 LGWR 仅在将重做写入磁盘后确认提交。\n* LGWR 还可以调用 DBWn 来写入数据文件。\n注意：DBWn 不会写入联机重做日志（online redo logs）。\n\n#### System Monitor (SMON)\n\n如果 Oracle 实例出现故障，SGA 中尚未写入磁盘的任何信息都将丢失。\n例如，操作系统故障会导致实例故障。实例丢失后，后台进程 SMON 会在重新打开数据库时自动执行实例恢复。\n\n**实例恢复**包括以下步骤：  \n1. 前滚以恢复尚未记录在数据文件中但已记录在联机重做日志中的数据。由于实例故障期间 SGA 丢失，此数据尚未写入磁盘。在此过程中，SMON 读取重做日志文件，并将重做日志中记录的更改应用于数据块。由于所有已提交的事务都已写入重做日志，因此此过程将完全恢复这些事务。\n2. 打开数据库，以便用户可以登录。未被未恢复的事务锁定的任何数据都立即可用。\n3. 回滚未提交的事务。它们在访问锁定数据时由 SMON 或单个服务器进程回滚。\n\n\nSMON 还执行一些空间维护功能：  \n它合并或合并数据文件中可用空间的相邻区域。\n它解除分配临时段以将其作为数据文件中的可用空间返回。\n临时段用于在 SQL 语句处理期间存储数据。\n\n#### Process Monitor (PMON)\n\n**事务恢复**\n\n后台进程 PMON 在进程失败后通过以下方式清理：\n1. 回滚用户的当前事务\n2. 释放所有当前持有的表锁或行锁\n3. 释放用户当前保留的其他资源\n4. 重新启动失效调度程序\n\n#### Checkpoint (CKPT)\n\n当 Oracle 后台进程 DBWn 将 SGA 中所有已修改的数据库缓冲区（包括已提交和未提交的数据）写入数据文件时，会发生称为检查点的事件。\n\n实施检查点的原因如下：\n1. 检查点确保内存中频繁更改的数据块定期写入数据文件。由于 DBWn 的LRU算法，频繁更改的数据块可能永远不会符合最近最少使用的块的条件，因此，如果未发生检查点，则可能永远不会写入磁盘。\n2. 由于检查点之前的所有数据库更改都已记录在数据文件中，因此如果需要实例恢复，则不再需要将检查点之前的重做日志条目应用于数据文件。因此，检查点非常有用，因为它们可以加快实例恢复。\n\n在检查点，将写入以下信息：\n* 检查点编号到数据文件头中\n* 检查点编号、日志序列号、存档的日志名称和系统更改编号到控制文件中。\n* CKPT 不会将数据块写入磁盘或将块重做到联机重做日志。\n注： 不应将 CKPT 过程与管理重做日志文件课程中讨论的检查点操作混淆。\n\n\n### Archiver (ARCn)\n![](2023-05-07-18-03-58.png)\n存档程序进程\n所有其他后台进程都是可选的，具体取决于数据库的配置;\n但是，其中之一 ARCn 对于在磁盘丢失后恢复数据库至关重要。\n当联机重做日志文件填满时，Oracle 服务器开始写入下一个联机重做日志文件。\n从一个重做日志切换到另一个重做日志的过程称为日志切换。\nARCn 进程在每个日志切换时启动已填充日志组的备份或存档。\n它会自动存档联机重做日志，然后才能重用日志，以便保留对数据库所做的所有更改。\n这使 DBA 能够将数据库恢复到故障点，即使磁盘驱动器已损坏也是如此。\n\n存档重做日志文件\nDBA 必须做出的重要决策之一是将数据库配置为在 ARCHIVELOG 或 NOARCHIVELOG 模式下运行。\n1. **NOARCHIVELOG 模式**：在 NOARCHIVELOG 模式下，每次发生日志切换时，都会覆盖联机重做日志文件。\nLGWR 不会覆盖重做日志组，直到该组的检查点完成。\n这可确保在发生实例崩溃时可以恢复已提交的数据。\n在实例崩溃期间，只有 SGA 丢失。\n没有磁盘丢失，只有内存。\n例如，操作系统崩溃会导致实例崩溃。\n2. **ARCHIVELOG 模式**：如果数据库配置为在存档日志模式下运行，\n则必须先存档已填充联机重做日志文件的非活动组，然后才能再次使用它们。\n由于对数据库所做的更改记录在联机重做日志文件中，\n因此数据库管理员可以使用数据文件的物理备份和存档的联机重做日志文件来恢复数据库，\n而不会因任何单点故障（包括磁盘丢失）而丢失任何已提交的数据。\n通常，生产数据库配置为在 ARCHIVELOG 模式下运行。\n\n\n## Logical Structure\n\n![](2023-05-07-18-04-36.png)\n\n逻辑结构层次结构如下：\n1. **Oracle DB**是一组**表空间**(Tablespace)。\n2. **表空间**可以由一个或多个**段**(Segment)组成。\n3. **段**由**区**(Extent)组成。\n4. **区**由**逻辑块**(Block)组成。\n5. 块是读取和写入操作的最小单位。\n\n## SQL执行过程\n\nSQL -> 连接器 -> 语法分析器 -> 语义分析与优化器 -> 执行引擎\n\n## 执行DML\n\n1. 连接到实例\n2. 处理 DML 语句\n   1. 解析与用于处理查询的解析阶段相同。\n   2. 执行需要额外的处理才能进行数据更改。\n3. DML 执行阶段\n   1. 如果数据和回滚块尚未在缓冲区缓存中，则服务器进程会将它们从数据文件读取到缓冲区缓存中。\n   2. 服务器进程对要修改的行放置锁。回滚块用于存储数据的先前映像，以便在必要时可以回滚 DML 语句。\n   3. 数据块记录数据的新值。\n   4. 服务器进程将之前的图像记录到撤消块并更新数据块。这两项更改都是在数据库缓冲区高速缓存中完成的。缓冲区缓存中任何更改的块都将标记为脏缓冲区。也就是说，缓冲区与磁盘上的相应块不同。\n   5. 处理 DELETE 或 INSERT 命令使用类似的步骤。DELETE 的前面图像包含已删除行中的列值，插入项的前面图像包含行位置信息。\n4. 查询返回行\n5. DML 语句记录更改\n6. 提交可确保事务恢复\n\n## 执行 SELECT\n\n1. 搜索共享池\n2. 验证语句\n3. 验证数据源\n5. 获取锁\n6. 检查权限\n7. 解析语句\n8. 执行语句\n9. 从游标获取值\n\n","source":"_posts/Oracle-DBA.md","raw":"---\ntitle: Oracle DBA\ndate: 2023-03-24 19:53:09\ntags: \n- Database\n- Oracle\n---\n\n# Oracle DBA\n\n## Oracle DB 架构\n\n![](2023-05-07-17-11-39.png)\n\n主要组件概述\n\n* Oracle 服务器：Oracle 服务器中有多个文件、进程和内存结构;但是，在处理 SQL 语句时，并非所有方法都使用它们。有些用于提高数据库的性能，确保在发生软件或硬件错误时可以恢复数据库，或执行维护数据库所需的其他任务。Oracle 服务器由 Oracle 实例和 Oracle 数据库组成。\n\n* Oracle 实例：Oracle 实例是后台进程和内存结构的组合。必须启动实例才能访问数据库中的数据。每次启动实例时，都会分配一个系统全局区域 （SGA） 并启动 Oracle 后台进程。后台进程代表调用进程执行功能。它们整合了原本由为每个用户运行的多个 Oracle 程序处理的功能。后台进程执行输入/输出 （I/O） 并监视其他 Oracle 进程，以提供更高的并行性，从而提高性能和可靠性。\n\n* Oracle 数据库：Oracle 数据库由操作系统文件（也称为数据库文件）组成，这些文件为数据库信息提供实际的物理存储。数据库文件用于确保数据保持一致，并且可以在实例发生故障时恢复。\n\n* 其他密钥文件：非数据库文件用于配置实例、对特权用户进行身份验证以及在发生磁盘故障时恢复数据库。\n\n* 用户和服务器进程：用户和服务器进程是执行 SQL 语句时涉及的主要进程;但是，其他进程可以帮助服务器完成 SQL 语句的处理。\n\n* 其他进程：Oracle 中的其他选项也存在许多其他进程，例如高级队列、实际应用程序群集、共享服务器、高级复制等。这些过程在各自的课程中讨论。\n\n## Oracle Instance\n\n![](2023-05-07-17-15-34.png)\n\nOracle 实例由系统全局区域 （SGA） 内存结构和用于管理数据库的后台进程组成。实例是使用特定于每个操作系统的方法标识的。实例一次只能打开和使用一个数据库。\n\n\n## 建立连接和会话\n\n### 连接到Oracle Instance\n\n用户启动 SQL*Plus 等工具开发的应用程序。此应用程序或工具作为**用户进程**执行。\n\n当用户登录到 Oracle 服务器时，将在运行 Oracle 服务器的计算机上创建一个**服务器进程**。\n\n服务器进程代表客户端上运行的用户进程与 Oracle 实例通信。服务器进程代表用户执行 SQL 语句。\n\n### 连接\n\n连接是用户进程和 Oracle 服务器之间的通信路径。数据库用户可以通过以下三种方式之一连接到 Oracle 服务器：\n\n1. 用户登录到运行 Oracle 实例的操作系统，并启动访问该系统上的数据库的应用程序或工具。通信路径是使用主机操作系统上可用的进程间通信机制建立的。\n2. 用户在本地计算机上启动应用程序或工具，并通过网络连接到运行 Oracle 实例的计算机。在这种称为客户端-服务器（C/S）的配置中，网络软件用于在用户和 Oracle 服务器之间进行通信。\n3. 在三层连接中，用户的计算机通过网络与应用程序或网络服务器通信，应用程序或网络服务器通过网络连接到运行 Oracle 实例的计算机。例如，用户在网络上的计算机上运行浏览器，以使用驻留在 NT 服务器上的应用程序，该应用程序从 UNIX 主机上运行的 Oracle 数据库中检索数据。\n\n\n### 会话\n\n会话是用户与 Oracle 服务器的特定连接。会话在 Oracle 服务器验证用户时开始，在用户注销或异常终止时结束。对于给定的数据库用户，如果用户同时从许多工具、应用程序或终端登录，则可能出现许多并发会话。除了某些专用的数据库管理工具外，启动数据库会话需要 Oracle 服务器可供使用。\n\n注意：此处介绍的连接类型（用户和服务器进程之间存在一对一的对应关系）称为专用服务器连接。使用共享服务器配置时，多个用户进程可以共享服务器进程。\n\n## Oracle Database\n\n![](2023-05-07-17-21-09.png)\n\n数据库的一般用途是存储和检索相关信息。Oracle 数据库具有逻辑结构和物理结构。数据库的物理结构是数据库中的一组操作系统文件。\n\nOracle 数据库由三种文件类型组成。\n\n* **数据文件**(Data files): 包含数据库中实际数据\n\n* **重做日志**(Redo logs): 包含对数据库所做的更改的记录，以便在发生故障时恢复数据\n\n* **控制文件**(Control files): 包含维护和验证数据库完整性所需信息\n\n其他关键文件结构\nOracle 服务器还使用不属于数据库的其他文件：\n1. **参数文件**(parameter file)定义了 Oracle 实例的特征。例如，它包含调整 SGA 中某些内存结构大小的参数。\n2. **密码文件**(password file)对有权启动和关闭 Oracle 实例的用户进行身份验证。\n3. **存档的重做日志文件**(Archived redo log files)是从介质故障中恢复可能需要的重做日志文件的脱机副本。\n\n## Physical Structure\n\nOracle 数据库的物理结构仅包含三种类型的文件：\n1. 数据文件\n2. 重做日志文件\n3. 控制文件\n\n## Memory Structure\n\n1. 系统全局区域 （SGA）：在实例启动时分配，是 Oracle 实例的基本组件\n2. 程序全局区域 （PGA）：在服务器进程启动时分配\n\n\n### 系统全局区(SGA)\n它用于存储由数据库进程共享的数据库信息。它包含Oracle服务器的数据和控制信息，并被分配在Oracle所在的计算机的虚拟内存中。\n\nSGA 的大小由几个初始化参数确定。对 SGA 大小影响最大的参数是：\n* DB_CACHE_SIZE：标准块的缓存大小。\n* LOG_BUFFER：为重做日志缓冲区缓存分配的字节数。\n* SHARED_POOL_SIZE：专用于共享 SQL 和 PL/SQL 的区域的大小（以字节为单位）。\n* LARGE_POOL_SIZE：大型游泳池的大小;默认值为零。\n  \n由下面几个内存区域组成：\n* Shared pool\n* Database buffer cache\n* Redo log buffer cache\n* Large pool(optional)\n* Java pool (optional)\n\n#### Shared pool\n\n存储最近的执行的 SQL 语句和最近使用的数据定义(DD)\n\n由两部分组成：\n1. Library cache (LRU,SQL,PL/SQL)\n2. Data dictionary cache ()\n\n调整\n```sql\nALTER SYSTEM SET SHARED_POOL_SIZE = 64M;\n```\n\n### Database Buffer Cache\n\n数据库缓冲缓存存储数据副本,即已从数据文件中检索的块。\n获取和更新数据时，它可以极大地提高性能。\n它通过最近最少使用的 （LRU） 算法进行管理。\nDB_BLOCK_SIZE确定主块大小。\n\n处理查询时，Oracle 服务器进程会在数据库缓冲区缓存中查找所需的任何块。如果在数据库缓冲区高速缓存中找不到该块，服务器进程将从数据文件中读取该块，并将副本放在数据库缓冲区高速缓存中。由于对同一块的后续请求可能会在内存中找到该块，因此请求可能不需要物理读取。Oracle 服务器使用最近最少使用的算法来老化最近未访问的缓冲区，以便为数据库缓冲区缓存中的新块腾出空间。\n\n\n调整大小\n缓冲区缓存中每个缓冲区的大小等于 Oracle 块的大小，由 DB_BLOCK_SIZE 参数指定。\n数据库缓冲区高速缓存由用于缓冲池和多个块大小的独立子高速缓存组成。\n参数 DB_BLOCK_SIZE 确定用于 SYSTEM 表空间的主块大小。\n三个参数定义缓冲区缓存的大小：\n\n1. DB_CACHE_SIZE：仅调整默认缓冲区缓存大小的大小，它始终存在且不能设置为零。\n2. DB_KEEP_CACHE_SIZE：调整保留缓冲区缓存的大小，该缓存用于在内存中保留可能重复使用的块。\n3. DB_RECYCLE_CACHE_SIZE：调整回收缓冲区缓存的大小，用于从内存中消除重用变化不大的块。\n\n可以使用标准块大小和最多四个非标准块大小创建 Oracle 数据库。非标准块大小可以具有介于 2 KB 和 32 KB 之间的任何 2 次方值。\n\n```sql\nALTER SYSTEM SET DB_CACHE_SIZE = 96M;\n```\n\nDB_CACHE_ADVICE 收集统计信息以预测不同的缓存大小行为\n\n### Redo Log Buffer Cache\n\n重做日志缓冲区缓存记录所有对数据库数据块进行的更改\n\n其主要目的是恢复。\n中记录的更改称为重做条目（redo entries）。\n重做条目包含用于重建或重做更改的信息。\n\n重做日志缓冲区缓存是一个循环缓冲区，其中包含对数据文件块所做的更改。此信息存储在重做条目中。重做条目包含在通过插入、更新、删除、创建、更改或删除操作进行更改之前重新创建数据所需的信息。\n\n大小由下式定义： \nLOG_BUFFER\n\n### Large pool\n\n当用户通过共享服务器进行连接时，Oracle 需要在共享池中分配额外的空间，用于存储有关用户进程、调度程序和服务器之间连接的信息。Large pool 减轻了shared pool内区域的负担。共享池不必放弃内存来缓存 SQL 分析树，转而使用共享服务器会话信息、I/O 以及备份和恢复进程。性能提升来自共享 SQL 缓存的增加和收缩带来的开销的减少。\n\n调整大型池的大小\n大型池的大小以 LARGE_POOL_SIZE 参数定义的字节为单位。\n\n### Java pool\n\n如果安装和使用 Java，则为必需。\n\n它在数据库表中的存储方式与PL/SQL大致相同。\n\n它的大小由 JAVA_POOL_SIZE 参数调整。\n\n## PGA\n\n![](2023-05-07-17-44-18.png)\n\nProgram Global Area \n程序全局区域或进程全局区域 （PGA） 是一个内存区域，其中包含单个服务器进程或单个后台进程的数据和控制信息。\n\nPGA 在创建进程时分配，在进程终止时解除分配。与由多个进程共享的 SGA 相比，PGA 是一个仅由一个进程使用的区域。\n\n在专用服务器配置中，PGA 包括以下组件：\n* 排序区域：用于处理 SQL 语句可能需要的任何排序\n* 会话信息：包括会话的用户权限和性能统计信息\n* 游标状态：指示会话当前使用的 SQL 语句处理阶段\n* 堆栈空间：包含其他会话变量\n注： 使用共享服务器配置时，其中一些结构存储在 SGA 中。\n如果使用共享服务器配置，则多个用户进程可以共享服务器进程。\n如果创建了大型池，则结构将存储在大型池中;否则，它们将存储在共享池中。\n\n\n## Oracle Process\n* 用户进程：在数据库用户请求连接到 Oracle 服务器时启动\n* 服务器进程：连接到 Oracle 实例，并在用户建立会话时启动。\n* 后台进程：启动 Oracle 实例时可用\n\n### 用户进程\n\n需要从数据库请求信息的数据库用户必须首先与 Oracle 服务器建立连接。\n使用数据库接口工具（如 SQL*Plus）请求连接，并开始用户进程。\n用户进程不直接与 Oracle 服务器交互。\n相反，它通过用户帐户接口 （UPI） 生成调用，该接口创建会话并启动服务器进程。\n\n### 服务器进程\n是与甲骨文服务器直接交互的程序\n\n1. 它完成生成的调用并返回结果。\n2. 可以是专用服务器或共享服务器。\n\n用户建立连接后，将启动服务器进程来处理用户进程请求。\n服务器进程可以是专用服务器进程，也可以是共享服务器进程。\n在专用服务器环境中，服务器进程处理单个用户进程的请求。一\n旦用户进程断开连接，服务器进程就会终止。\n在共享服务器环境中，服务器进程处理多个用户进程的请求。\n服务器进程使用 Oracle 程序接口 （OPI） 与 Oracle Server通信。\n\n### 后台进程\nOracle 体系结构有五个必需的后台进程：\n1. DBWn\t\t\t\n2. PMON\t\t\n3. CKPT\n4. LGWR\t\t\t\n5. SMON\t\n\n除了必需列表之外，Oracle 还有许多可选的后台进程，这些进程在使用其选项时启动。\n\n以下是一些可选后台进程的列表：\n* RECO：恢复器\n* QMNn：高级排队\n* ARCn：存档器\n* LCKn：RAC 锁管理器 — 实例锁\n* LMON：RAC DLM 监视器 — 全局锁\n* LMDn：RAC DLM 监视器 — 远程锁定\n* CJQ0：快照刷新\n* Dnnn：调度程序\n* SNNN：共享服务器\n* Pnnn：并行查询从属\n\n#### 数据库写进程 （DBWn） \n\n服务器进程在缓冲区缓存中记录对回滚和数据块的更改。\nDBWn 将数据库缓冲区缓存中的脏缓冲区写入数据文件。\n它确保数据库缓冲区缓存中提供足够数量的可用缓冲区（当服务器进程需要从数据文件中读取块时可以覆盖的缓冲区）。\n数据库性能得到提高，因为服务器进程仅在缓冲区高速缓存中进行更改。\n\nDBWn 延迟写入数据文件，直到发生以下事件之一：\n* 检查点\n* 脏缓冲区数达到阈值\n* 进程在扫描可用缓冲区时扫描指定数量的块No free buffers\n* 发生超时\n* 实际应用程序群集环境中的 ping 请求\n* 将普通表空间或临时表空间置于脱机状态\n* 将表空间置于只读模式\n* 删除或截断表\n* ALTER TABLESPACE tablespace name BEGIN BACKUP\n\n#### Log Writer (LGWR)\n\n在以下情况下，LGWR 会执行从重做日志缓冲区缓存到重做日志文件的顺序写入：\n* 当事务提交时\n* 当重做日志缓冲区缓存已满三分之一时\n* 当重做日志缓冲区缓存中的更改记录超过 1 MB 时\n* 在 DBWn 之前，将数据库缓冲区缓存中修改的块写入数据文件\n* 每 3 秒一次。\n* 由于恢复需要重做，因此 LGWR 仅在将重做写入磁盘后确认提交。\n* LGWR 还可以调用 DBWn 来写入数据文件。\n注意：DBWn 不会写入联机重做日志（online redo logs）。\n\n#### System Monitor (SMON)\n\n如果 Oracle 实例出现故障，SGA 中尚未写入磁盘的任何信息都将丢失。\n例如，操作系统故障会导致实例故障。实例丢失后，后台进程 SMON 会在重新打开数据库时自动执行实例恢复。\n\n**实例恢复**包括以下步骤：  \n1. 前滚以恢复尚未记录在数据文件中但已记录在联机重做日志中的数据。由于实例故障期间 SGA 丢失，此数据尚未写入磁盘。在此过程中，SMON 读取重做日志文件，并将重做日志中记录的更改应用于数据块。由于所有已提交的事务都已写入重做日志，因此此过程将完全恢复这些事务。\n2. 打开数据库，以便用户可以登录。未被未恢复的事务锁定的任何数据都立即可用。\n3. 回滚未提交的事务。它们在访问锁定数据时由 SMON 或单个服务器进程回滚。\n\n\nSMON 还执行一些空间维护功能：  \n它合并或合并数据文件中可用空间的相邻区域。\n它解除分配临时段以将其作为数据文件中的可用空间返回。\n临时段用于在 SQL 语句处理期间存储数据。\n\n#### Process Monitor (PMON)\n\n**事务恢复**\n\n后台进程 PMON 在进程失败后通过以下方式清理：\n1. 回滚用户的当前事务\n2. 释放所有当前持有的表锁或行锁\n3. 释放用户当前保留的其他资源\n4. 重新启动失效调度程序\n\n#### Checkpoint (CKPT)\n\n当 Oracle 后台进程 DBWn 将 SGA 中所有已修改的数据库缓冲区（包括已提交和未提交的数据）写入数据文件时，会发生称为检查点的事件。\n\n实施检查点的原因如下：\n1. 检查点确保内存中频繁更改的数据块定期写入数据文件。由于 DBWn 的LRU算法，频繁更改的数据块可能永远不会符合最近最少使用的块的条件，因此，如果未发生检查点，则可能永远不会写入磁盘。\n2. 由于检查点之前的所有数据库更改都已记录在数据文件中，因此如果需要实例恢复，则不再需要将检查点之前的重做日志条目应用于数据文件。因此，检查点非常有用，因为它们可以加快实例恢复。\n\n在检查点，将写入以下信息：\n* 检查点编号到数据文件头中\n* 检查点编号、日志序列号、存档的日志名称和系统更改编号到控制文件中。\n* CKPT 不会将数据块写入磁盘或将块重做到联机重做日志。\n注： 不应将 CKPT 过程与管理重做日志文件课程中讨论的检查点操作混淆。\n\n\n### Archiver (ARCn)\n![](2023-05-07-18-03-58.png)\n存档程序进程\n所有其他后台进程都是可选的，具体取决于数据库的配置;\n但是，其中之一 ARCn 对于在磁盘丢失后恢复数据库至关重要。\n当联机重做日志文件填满时，Oracle 服务器开始写入下一个联机重做日志文件。\n从一个重做日志切换到另一个重做日志的过程称为日志切换。\nARCn 进程在每个日志切换时启动已填充日志组的备份或存档。\n它会自动存档联机重做日志，然后才能重用日志，以便保留对数据库所做的所有更改。\n这使 DBA 能够将数据库恢复到故障点，即使磁盘驱动器已损坏也是如此。\n\n存档重做日志文件\nDBA 必须做出的重要决策之一是将数据库配置为在 ARCHIVELOG 或 NOARCHIVELOG 模式下运行。\n1. **NOARCHIVELOG 模式**：在 NOARCHIVELOG 模式下，每次发生日志切换时，都会覆盖联机重做日志文件。\nLGWR 不会覆盖重做日志组，直到该组的检查点完成。\n这可确保在发生实例崩溃时可以恢复已提交的数据。\n在实例崩溃期间，只有 SGA 丢失。\n没有磁盘丢失，只有内存。\n例如，操作系统崩溃会导致实例崩溃。\n2. **ARCHIVELOG 模式**：如果数据库配置为在存档日志模式下运行，\n则必须先存档已填充联机重做日志文件的非活动组，然后才能再次使用它们。\n由于对数据库所做的更改记录在联机重做日志文件中，\n因此数据库管理员可以使用数据文件的物理备份和存档的联机重做日志文件来恢复数据库，\n而不会因任何单点故障（包括磁盘丢失）而丢失任何已提交的数据。\n通常，生产数据库配置为在 ARCHIVELOG 模式下运行。\n\n\n## Logical Structure\n\n![](2023-05-07-18-04-36.png)\n\n逻辑结构层次结构如下：\n1. **Oracle DB**是一组**表空间**(Tablespace)。\n2. **表空间**可以由一个或多个**段**(Segment)组成。\n3. **段**由**区**(Extent)组成。\n4. **区**由**逻辑块**(Block)组成。\n5. 块是读取和写入操作的最小单位。\n\n## SQL执行过程\n\nSQL -> 连接器 -> 语法分析器 -> 语义分析与优化器 -> 执行引擎\n\n## 执行DML\n\n1. 连接到实例\n2. 处理 DML 语句\n   1. 解析与用于处理查询的解析阶段相同。\n   2. 执行需要额外的处理才能进行数据更改。\n3. DML 执行阶段\n   1. 如果数据和回滚块尚未在缓冲区缓存中，则服务器进程会将它们从数据文件读取到缓冲区缓存中。\n   2. 服务器进程对要修改的行放置锁。回滚块用于存储数据的先前映像，以便在必要时可以回滚 DML 语句。\n   3. 数据块记录数据的新值。\n   4. 服务器进程将之前的图像记录到撤消块并更新数据块。这两项更改都是在数据库缓冲区高速缓存中完成的。缓冲区缓存中任何更改的块都将标记为脏缓冲区。也就是说，缓冲区与磁盘上的相应块不同。\n   5. 处理 DELETE 或 INSERT 命令使用类似的步骤。DELETE 的前面图像包含已删除行中的列值，插入项的前面图像包含行位置信息。\n4. 查询返回行\n5. DML 语句记录更改\n6. 提交可确保事务恢复\n\n## 执行 SELECT\n\n1. 搜索共享池\n2. 验证语句\n3. 验证数据源\n5. 获取锁\n6. 检查权限\n7. 解析语句\n8. 执行语句\n9. 从游标获取值\n\n","slug":"Oracle-DBA","published":1,"updated":"2023-06-23T01:04:24.256Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5ut0034lv9eeepv0bf3","content":"<h1 id=\"Oracle-DBA\"><a href=\"#Oracle-DBA\" class=\"headerlink\" title=\"Oracle DBA\"></a>Oracle DBA</h1><h2 id=\"Oracle-DB-架构\"><a href=\"#Oracle-DB-架构\" class=\"headerlink\" title=\"Oracle DB 架构\"></a>Oracle DB 架构</h2><p><img src=\"/2023/03/24/Oracle-DBA/2023-05-07-17-11-39.png\"></p>\n<p>主要组件概述</p>\n<ul>\n<li><p>Oracle 服务器：Oracle 服务器中有多个文件、进程和内存结构;但是，在处理 SQL 语句时，并非所有方法都使用它们。有些用于提高数据库的性能，确保在发生软件或硬件错误时可以恢复数据库，或执行维护数据库所需的其他任务。Oracle 服务器由 Oracle 实例和 Oracle 数据库组成。</p>\n</li>\n<li><p>Oracle 实例：Oracle 实例是后台进程和内存结构的组合。必须启动实例才能访问数据库中的数据。每次启动实例时，都会分配一个系统全局区域 （SGA） 并启动 Oracle 后台进程。后台进程代表调用进程执行功能。它们整合了原本由为每个用户运行的多个 Oracle 程序处理的功能。后台进程执行输入&#x2F;输出 （I&#x2F;O） 并监视其他 Oracle 进程，以提供更高的并行性，从而提高性能和可靠性。</p>\n</li>\n<li><p>Oracle 数据库：Oracle 数据库由操作系统文件（也称为数据库文件）组成，这些文件为数据库信息提供实际的物理存储。数据库文件用于确保数据保持一致，并且可以在实例发生故障时恢复。</p>\n</li>\n<li><p>其他密钥文件：非数据库文件用于配置实例、对特权用户进行身份验证以及在发生磁盘故障时恢复数据库。</p>\n</li>\n<li><p>用户和服务器进程：用户和服务器进程是执行 SQL 语句时涉及的主要进程;但是，其他进程可以帮助服务器完成 SQL 语句的处理。</p>\n</li>\n<li><p>其他进程：Oracle 中的其他选项也存在许多其他进程，例如高级队列、实际应用程序群集、共享服务器、高级复制等。这些过程在各自的课程中讨论。</p>\n</li>\n</ul>\n<h2 id=\"Oracle-Instance\"><a href=\"#Oracle-Instance\" class=\"headerlink\" title=\"Oracle Instance\"></a>Oracle Instance</h2><p><img src=\"/2023/03/24/Oracle-DBA/2023-05-07-17-15-34.png\"></p>\n<p>Oracle 实例由系统全局区域 （SGA） 内存结构和用于管理数据库的后台进程组成。实例是使用特定于每个操作系统的方法标识的。实例一次只能打开和使用一个数据库。</p>\n<h2 id=\"建立连接和会话\"><a href=\"#建立连接和会话\" class=\"headerlink\" title=\"建立连接和会话\"></a>建立连接和会话</h2><h3 id=\"连接到Oracle-Instance\"><a href=\"#连接到Oracle-Instance\" class=\"headerlink\" title=\"连接到Oracle Instance\"></a>连接到Oracle Instance</h3><p>用户启动 SQL*Plus 等工具开发的应用程序。此应用程序或工具作为<strong>用户进程</strong>执行。</p>\n<p>当用户登录到 Oracle 服务器时，将在运行 Oracle 服务器的计算机上创建一个<strong>服务器进程</strong>。</p>\n<p>服务器进程代表客户端上运行的用户进程与 Oracle 实例通信。服务器进程代表用户执行 SQL 语句。</p>\n<h3 id=\"连接\"><a href=\"#连接\" class=\"headerlink\" title=\"连接\"></a>连接</h3><p>连接是用户进程和 Oracle 服务器之间的通信路径。数据库用户可以通过以下三种方式之一连接到 Oracle 服务器：</p>\n<ol>\n<li>用户登录到运行 Oracle 实例的操作系统，并启动访问该系统上的数据库的应用程序或工具。通信路径是使用主机操作系统上可用的进程间通信机制建立的。</li>\n<li>用户在本地计算机上启动应用程序或工具，并通过网络连接到运行 Oracle 实例的计算机。在这种称为客户端-服务器（C&#x2F;S）的配置中，网络软件用于在用户和 Oracle 服务器之间进行通信。</li>\n<li>在三层连接中，用户的计算机通过网络与应用程序或网络服务器通信，应用程序或网络服务器通过网络连接到运行 Oracle 实例的计算机。例如，用户在网络上的计算机上运行浏览器，以使用驻留在 NT 服务器上的应用程序，该应用程序从 UNIX 主机上运行的 Oracle 数据库中检索数据。</li>\n</ol>\n<h3 id=\"会话\"><a href=\"#会话\" class=\"headerlink\" title=\"会话\"></a>会话</h3><p>会话是用户与 Oracle 服务器的特定连接。会话在 Oracle 服务器验证用户时开始，在用户注销或异常终止时结束。对于给定的数据库用户，如果用户同时从许多工具、应用程序或终端登录，则可能出现许多并发会话。除了某些专用的数据库管理工具外，启动数据库会话需要 Oracle 服务器可供使用。</p>\n<p>注意：此处介绍的连接类型（用户和服务器进程之间存在一对一的对应关系）称为专用服务器连接。使用共享服务器配置时，多个用户进程可以共享服务器进程。</p>\n<h2 id=\"Oracle-Database\"><a href=\"#Oracle-Database\" class=\"headerlink\" title=\"Oracle Database\"></a>Oracle Database</h2><p><img src=\"/2023/03/24/Oracle-DBA/2023-05-07-17-21-09.png\"></p>\n<p>数据库的一般用途是存储和检索相关信息。Oracle 数据库具有逻辑结构和物理结构。数据库的物理结构是数据库中的一组操作系统文件。</p>\n<p>Oracle 数据库由三种文件类型组成。</p>\n<ul>\n<li><p><strong>数据文件</strong>(Data files): 包含数据库中实际数据</p>\n</li>\n<li><p><strong>重做日志</strong>(Redo logs): 包含对数据库所做的更改的记录，以便在发生故障时恢复数据</p>\n</li>\n<li><p><strong>控制文件</strong>(Control files): 包含维护和验证数据库完整性所需信息</p>\n</li>\n</ul>\n<p>其他关键文件结构<br>Oracle 服务器还使用不属于数据库的其他文件：</p>\n<ol>\n<li><strong>参数文件</strong>(parameter file)定义了 Oracle 实例的特征。例如，它包含调整 SGA 中某些内存结构大小的参数。</li>\n<li><strong>密码文件</strong>(password file)对有权启动和关闭 Oracle 实例的用户进行身份验证。</li>\n<li><strong>存档的重做日志文件</strong>(Archived redo log files)是从介质故障中恢复可能需要的重做日志文件的脱机副本。</li>\n</ol>\n<h2 id=\"Physical-Structure\"><a href=\"#Physical-Structure\" class=\"headerlink\" title=\"Physical Structure\"></a>Physical Structure</h2><p>Oracle 数据库的物理结构仅包含三种类型的文件：</p>\n<ol>\n<li>数据文件</li>\n<li>重做日志文件</li>\n<li>控制文件</li>\n</ol>\n<h2 id=\"Memory-Structure\"><a href=\"#Memory-Structure\" class=\"headerlink\" title=\"Memory Structure\"></a>Memory Structure</h2><ol>\n<li>系统全局区域 （SGA）：在实例启动时分配，是 Oracle 实例的基本组件</li>\n<li>程序全局区域 （PGA）：在服务器进程启动时分配</li>\n</ol>\n<h3 id=\"系统全局区-SGA\"><a href=\"#系统全局区-SGA\" class=\"headerlink\" title=\"系统全局区(SGA)\"></a>系统全局区(SGA)</h3><p>它用于存储由数据库进程共享的数据库信息。它包含Oracle服务器的数据和控制信息，并被分配在Oracle所在的计算机的虚拟内存中。</p>\n<p>SGA 的大小由几个初始化参数确定。对 SGA 大小影响最大的参数是：</p>\n<ul>\n<li>DB_CACHE_SIZE：标准块的缓存大小。</li>\n<li>LOG_BUFFER：为重做日志缓冲区缓存分配的字节数。</li>\n<li>SHARED_POOL_SIZE：专用于共享 SQL 和 PL&#x2F;SQL 的区域的大小（以字节为单位）。</li>\n<li>LARGE_POOL_SIZE：大型游泳池的大小;默认值为零。</li>\n</ul>\n<p>由下面几个内存区域组成：</p>\n<ul>\n<li>Shared pool</li>\n<li>Database buffer cache</li>\n<li>Redo log buffer cache</li>\n<li>Large pool(optional)</li>\n<li>Java pool (optional)</li>\n</ul>\n<h4 id=\"Shared-pool\"><a href=\"#Shared-pool\" class=\"headerlink\" title=\"Shared pool\"></a>Shared pool</h4><p>存储最近的执行的 SQL 语句和最近使用的数据定义(DD)</p>\n<p>由两部分组成：</p>\n<ol>\n<li>Library cache (LRU,SQL,PL&#x2F;SQL)</li>\n<li>Data dictionary cache ()</li>\n</ol>\n<p>调整</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">SYSTEM</span> <span class=\"keyword\">SET</span> SHARED_POOL_SIZE <span class=\"operator\">=</span> <span class=\"number\">64</span>M;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Database-Buffer-Cache\"><a href=\"#Database-Buffer-Cache\" class=\"headerlink\" title=\"Database Buffer Cache\"></a>Database Buffer Cache</h3><p>数据库缓冲缓存存储数据副本,即已从数据文件中检索的块。<br>获取和更新数据时，它可以极大地提高性能。<br>它通过最近最少使用的 （LRU） 算法进行管理。<br>DB_BLOCK_SIZE确定主块大小。</p>\n<p>处理查询时，Oracle 服务器进程会在数据库缓冲区缓存中查找所需的任何块。如果在数据库缓冲区高速缓存中找不到该块，服务器进程将从数据文件中读取该块，并将副本放在数据库缓冲区高速缓存中。由于对同一块的后续请求可能会在内存中找到该块，因此请求可能不需要物理读取。Oracle 服务器使用最近最少使用的算法来老化最近未访问的缓冲区，以便为数据库缓冲区缓存中的新块腾出空间。</p>\n<p>调整大小<br>缓冲区缓存中每个缓冲区的大小等于 Oracle 块的大小，由 DB_BLOCK_SIZE 参数指定。<br>数据库缓冲区高速缓存由用于缓冲池和多个块大小的独立子高速缓存组成。<br>参数 DB_BLOCK_SIZE 确定用于 SYSTEM 表空间的主块大小。<br>三个参数定义缓冲区缓存的大小：</p>\n<ol>\n<li>DB_CACHE_SIZE：仅调整默认缓冲区缓存大小的大小，它始终存在且不能设置为零。</li>\n<li>DB_KEEP_CACHE_SIZE：调整保留缓冲区缓存的大小，该缓存用于在内存中保留可能重复使用的块。</li>\n<li>DB_RECYCLE_CACHE_SIZE：调整回收缓冲区缓存的大小，用于从内存中消除重用变化不大的块。</li>\n</ol>\n<p>可以使用标准块大小和最多四个非标准块大小创建 Oracle 数据库。非标准块大小可以具有介于 2 KB 和 32 KB 之间的任何 2 次方值。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">SYSTEM</span> <span class=\"keyword\">SET</span> DB_CACHE_SIZE <span class=\"operator\">=</span> <span class=\"number\">96</span>M;</span><br></pre></td></tr></table></figure>\n\n<p>DB_CACHE_ADVICE 收集统计信息以预测不同的缓存大小行为</p>\n<h3 id=\"Redo-Log-Buffer-Cache\"><a href=\"#Redo-Log-Buffer-Cache\" class=\"headerlink\" title=\"Redo Log Buffer Cache\"></a>Redo Log Buffer Cache</h3><p>重做日志缓冲区缓存记录所有对数据库数据块进行的更改</p>\n<p>其主要目的是恢复。<br>中记录的更改称为重做条目（redo entries）。<br>重做条目包含用于重建或重做更改的信息。</p>\n<p>重做日志缓冲区缓存是一个循环缓冲区，其中包含对数据文件块所做的更改。此信息存储在重做条目中。重做条目包含在通过插入、更新、删除、创建、更改或删除操作进行更改之前重新创建数据所需的信息。</p>\n<p>大小由下式定义：<br>LOG_BUFFER</p>\n<h3 id=\"Large-pool\"><a href=\"#Large-pool\" class=\"headerlink\" title=\"Large pool\"></a>Large pool</h3><p>当用户通过共享服务器进行连接时，Oracle 需要在共享池中分配额外的空间，用于存储有关用户进程、调度程序和服务器之间连接的信息。Large pool 减轻了shared pool内区域的负担。共享池不必放弃内存来缓存 SQL 分析树，转而使用共享服务器会话信息、I&#x2F;O 以及备份和恢复进程。性能提升来自共享 SQL 缓存的增加和收缩带来的开销的减少。</p>\n<p>调整大型池的大小<br>大型池的大小以 LARGE_POOL_SIZE 参数定义的字节为单位。</p>\n<h3 id=\"Java-pool\"><a href=\"#Java-pool\" class=\"headerlink\" title=\"Java pool\"></a>Java pool</h3><p>如果安装和使用 Java，则为必需。</p>\n<p>它在数据库表中的存储方式与PL&#x2F;SQL大致相同。</p>\n<p>它的大小由 JAVA_POOL_SIZE 参数调整。</p>\n<h2 id=\"PGA\"><a href=\"#PGA\" class=\"headerlink\" title=\"PGA\"></a>PGA</h2><p><img src=\"/2023/03/24/Oracle-DBA/2023-05-07-17-44-18.png\"></p>\n<p>Program Global Area<br>程序全局区域或进程全局区域 （PGA） 是一个内存区域，其中包含单个服务器进程或单个后台进程的数据和控制信息。</p>\n<p>PGA 在创建进程时分配，在进程终止时解除分配。与由多个进程共享的 SGA 相比，PGA 是一个仅由一个进程使用的区域。</p>\n<p>在专用服务器配置中，PGA 包括以下组件：</p>\n<ul>\n<li>排序区域：用于处理 SQL 语句可能需要的任何排序</li>\n<li>会话信息：包括会话的用户权限和性能统计信息</li>\n<li>游标状态：指示会话当前使用的 SQL 语句处理阶段</li>\n<li>堆栈空间：包含其他会话变量<br>注： 使用共享服务器配置时，其中一些结构存储在 SGA 中。<br>如果使用共享服务器配置，则多个用户进程可以共享服务器进程。<br>如果创建了大型池，则结构将存储在大型池中;否则，它们将存储在共享池中。</li>\n</ul>\n<h2 id=\"Oracle-Process\"><a href=\"#Oracle-Process\" class=\"headerlink\" title=\"Oracle Process\"></a>Oracle Process</h2><ul>\n<li>用户进程：在数据库用户请求连接到 Oracle 服务器时启动</li>\n<li>服务器进程：连接到 Oracle 实例，并在用户建立会话时启动。</li>\n<li>后台进程：启动 Oracle 实例时可用</li>\n</ul>\n<h3 id=\"用户进程\"><a href=\"#用户进程\" class=\"headerlink\" title=\"用户进程\"></a>用户进程</h3><p>需要从数据库请求信息的数据库用户必须首先与 Oracle 服务器建立连接。<br>使用数据库接口工具（如 SQL*Plus）请求连接，并开始用户进程。<br>用户进程不直接与 Oracle 服务器交互。<br>相反，它通过用户帐户接口 （UPI） 生成调用，该接口创建会话并启动服务器进程。</p>\n<h3 id=\"服务器进程\"><a href=\"#服务器进程\" class=\"headerlink\" title=\"服务器进程\"></a>服务器进程</h3><p>是与甲骨文服务器直接交互的程序</p>\n<ol>\n<li>它完成生成的调用并返回结果。</li>\n<li>可以是专用服务器或共享服务器。</li>\n</ol>\n<p>用户建立连接后，将启动服务器进程来处理用户进程请求。<br>服务器进程可以是专用服务器进程，也可以是共享服务器进程。<br>在专用服务器环境中，服务器进程处理单个用户进程的请求。一<br>旦用户进程断开连接，服务器进程就会终止。<br>在共享服务器环境中，服务器进程处理多个用户进程的请求。<br>服务器进程使用 Oracle 程序接口 （OPI） 与 Oracle Server通信。</p>\n<h3 id=\"后台进程\"><a href=\"#后台进程\" class=\"headerlink\" title=\"后台进程\"></a>后台进程</h3><p>Oracle 体系结构有五个必需的后台进程：</p>\n<ol>\n<li>DBWn\t\t\t</li>\n<li>PMON\t\t</li>\n<li>CKPT</li>\n<li>LGWR\t\t\t</li>\n<li>SMON</li>\n</ol>\n<p>\t</p>\n<p>除了必需列表之外，Oracle 还有许多可选的后台进程，这些进程在使用其选项时启动。</p>\n<p>以下是一些可选后台进程的列表：</p>\n<ul>\n<li>RECO：恢复器</li>\n<li>QMNn：高级排队</li>\n<li>ARCn：存档器</li>\n<li>LCKn：RAC 锁管理器 — 实例锁</li>\n<li>LMON：RAC DLM 监视器 — 全局锁</li>\n<li>LMDn：RAC DLM 监视器 — 远程锁定</li>\n<li>CJQ0：快照刷新</li>\n<li>Dnnn：调度程序</li>\n<li>SNNN：共享服务器</li>\n<li>Pnnn：并行查询从属</li>\n</ul>\n<h4 id=\"数据库写进程-（DBWn）\"><a href=\"#数据库写进程-（DBWn）\" class=\"headerlink\" title=\"数据库写进程 （DBWn）\"></a>数据库写进程 （DBWn）</h4><p>服务器进程在缓冲区缓存中记录对回滚和数据块的更改。<br>DBWn 将数据库缓冲区缓存中的脏缓冲区写入数据文件。<br>它确保数据库缓冲区缓存中提供足够数量的可用缓冲区（当服务器进程需要从数据文件中读取块时可以覆盖的缓冲区）。<br>数据库性能得到提高，因为服务器进程仅在缓冲区高速缓存中进行更改。</p>\n<p>DBWn 延迟写入数据文件，直到发生以下事件之一：</p>\n<ul>\n<li>检查点</li>\n<li>脏缓冲区数达到阈值</li>\n<li>进程在扫描可用缓冲区时扫描指定数量的块No free buffers</li>\n<li>发生超时</li>\n<li>实际应用程序群集环境中的 ping 请求</li>\n<li>将普通表空间或临时表空间置于脱机状态</li>\n<li>将表空间置于只读模式</li>\n<li>删除或截断表</li>\n<li>ALTER TABLESPACE tablespace name BEGIN BACKUP</li>\n</ul>\n<h4 id=\"Log-Writer-LGWR\"><a href=\"#Log-Writer-LGWR\" class=\"headerlink\" title=\"Log Writer (LGWR)\"></a>Log Writer (LGWR)</h4><p>在以下情况下，LGWR 会执行从重做日志缓冲区缓存到重做日志文件的顺序写入：</p>\n<ul>\n<li>当事务提交时</li>\n<li>当重做日志缓冲区缓存已满三分之一时</li>\n<li>当重做日志缓冲区缓存中的更改记录超过 1 MB 时</li>\n<li>在 DBWn 之前，将数据库缓冲区缓存中修改的块写入数据文件</li>\n<li>每 3 秒一次。</li>\n<li>由于恢复需要重做，因此 LGWR 仅在将重做写入磁盘后确认提交。</li>\n<li>LGWR 还可以调用 DBWn 来写入数据文件。<br>注意：DBWn 不会写入联机重做日志（online redo logs）。</li>\n</ul>\n<h4 id=\"System-Monitor-SMON\"><a href=\"#System-Monitor-SMON\" class=\"headerlink\" title=\"System Monitor (SMON)\"></a>System Monitor (SMON)</h4><p>如果 Oracle 实例出现故障，SGA 中尚未写入磁盘的任何信息都将丢失。<br>例如，操作系统故障会导致实例故障。实例丢失后，后台进程 SMON 会在重新打开数据库时自动执行实例恢复。</p>\n<p><strong>实例恢复</strong>包括以下步骤：  </p>\n<ol>\n<li>前滚以恢复尚未记录在数据文件中但已记录在联机重做日志中的数据。由于实例故障期间 SGA 丢失，此数据尚未写入磁盘。在此过程中，SMON 读取重做日志文件，并将重做日志中记录的更改应用于数据块。由于所有已提交的事务都已写入重做日志，因此此过程将完全恢复这些事务。</li>\n<li>打开数据库，以便用户可以登录。未被未恢复的事务锁定的任何数据都立即可用。</li>\n<li>回滚未提交的事务。它们在访问锁定数据时由 SMON 或单个服务器进程回滚。</li>\n</ol>\n<p>SMON 还执行一些空间维护功能：<br>它合并或合并数据文件中可用空间的相邻区域。<br>它解除分配临时段以将其作为数据文件中的可用空间返回。<br>临时段用于在 SQL 语句处理期间存储数据。</p>\n<h4 id=\"Process-Monitor-PMON\"><a href=\"#Process-Monitor-PMON\" class=\"headerlink\" title=\"Process Monitor (PMON)\"></a>Process Monitor (PMON)</h4><p><strong>事务恢复</strong></p>\n<p>后台进程 PMON 在进程失败后通过以下方式清理：</p>\n<ol>\n<li>回滚用户的当前事务</li>\n<li>释放所有当前持有的表锁或行锁</li>\n<li>释放用户当前保留的其他资源</li>\n<li>重新启动失效调度程序</li>\n</ol>\n<h4 id=\"Checkpoint-CKPT\"><a href=\"#Checkpoint-CKPT\" class=\"headerlink\" title=\"Checkpoint (CKPT)\"></a>Checkpoint (CKPT)</h4><p>当 Oracle 后台进程 DBWn 将 SGA 中所有已修改的数据库缓冲区（包括已提交和未提交的数据）写入数据文件时，会发生称为检查点的事件。</p>\n<p>实施检查点的原因如下：</p>\n<ol>\n<li>检查点确保内存中频繁更改的数据块定期写入数据文件。由于 DBWn 的LRU算法，频繁更改的数据块可能永远不会符合最近最少使用的块的条件，因此，如果未发生检查点，则可能永远不会写入磁盘。</li>\n<li>由于检查点之前的所有数据库更改都已记录在数据文件中，因此如果需要实例恢复，则不再需要将检查点之前的重做日志条目应用于数据文件。因此，检查点非常有用，因为它们可以加快实例恢复。</li>\n</ol>\n<p>在检查点，将写入以下信息：</p>\n<ul>\n<li>检查点编号到数据文件头中</li>\n<li>检查点编号、日志序列号、存档的日志名称和系统更改编号到控制文件中。</li>\n<li>CKPT 不会将数据块写入磁盘或将块重做到联机重做日志。<br>注： 不应将 CKPT 过程与管理重做日志文件课程中讨论的检查点操作混淆。</li>\n</ul>\n<h3 id=\"Archiver-ARCn\"><a href=\"#Archiver-ARCn\" class=\"headerlink\" title=\"Archiver (ARCn)\"></a>Archiver (ARCn)</h3><p><img src=\"/2023/03/24/Oracle-DBA/2023-05-07-18-03-58.png\"><br>存档程序进程<br>所有其他后台进程都是可选的，具体取决于数据库的配置;<br>但是，其中之一 ARCn 对于在磁盘丢失后恢复数据库至关重要。<br>当联机重做日志文件填满时，Oracle 服务器开始写入下一个联机重做日志文件。<br>从一个重做日志切换到另一个重做日志的过程称为日志切换。<br>ARCn 进程在每个日志切换时启动已填充日志组的备份或存档。<br>它会自动存档联机重做日志，然后才能重用日志，以便保留对数据库所做的所有更改。<br>这使 DBA 能够将数据库恢复到故障点，即使磁盘驱动器已损坏也是如此。</p>\n<p>存档重做日志文件<br>DBA 必须做出的重要决策之一是将数据库配置为在 ARCHIVELOG 或 NOARCHIVELOG 模式下运行。</p>\n<ol>\n<li><strong>NOARCHIVELOG 模式</strong>：在 NOARCHIVELOG 模式下，每次发生日志切换时，都会覆盖联机重做日志文件。<br>LGWR 不会覆盖重做日志组，直到该组的检查点完成。<br>这可确保在发生实例崩溃时可以恢复已提交的数据。<br>在实例崩溃期间，只有 SGA 丢失。<br>没有磁盘丢失，只有内存。<br>例如，操作系统崩溃会导致实例崩溃。</li>\n<li><strong>ARCHIVELOG 模式</strong>：如果数据库配置为在存档日志模式下运行，<br>则必须先存档已填充联机重做日志文件的非活动组，然后才能再次使用它们。<br>由于对数据库所做的更改记录在联机重做日志文件中，<br>因此数据库管理员可以使用数据文件的物理备份和存档的联机重做日志文件来恢复数据库，<br>而不会因任何单点故障（包括磁盘丢失）而丢失任何已提交的数据。<br>通常，生产数据库配置为在 ARCHIVELOG 模式下运行。</li>\n</ol>\n<h2 id=\"Logical-Structure\"><a href=\"#Logical-Structure\" class=\"headerlink\" title=\"Logical Structure\"></a>Logical Structure</h2><p><img src=\"/2023/03/24/Oracle-DBA/2023-05-07-18-04-36.png\"></p>\n<p>逻辑结构层次结构如下：</p>\n<ol>\n<li><strong>Oracle DB</strong>是一组<strong>表空间</strong>(Tablespace)。</li>\n<li><strong>表空间</strong>可以由一个或多个<strong>段</strong>(Segment)组成。</li>\n<li><strong>段</strong>由<strong>区</strong>(Extent)组成。</li>\n<li><strong>区</strong>由<strong>逻辑块</strong>(Block)组成。</li>\n<li>块是读取和写入操作的最小单位。</li>\n</ol>\n<h2 id=\"SQL执行过程\"><a href=\"#SQL执行过程\" class=\"headerlink\" title=\"SQL执行过程\"></a>SQL执行过程</h2><p>SQL -&gt; 连接器 -&gt; 语法分析器 -&gt; 语义分析与优化器 -&gt; 执行引擎</p>\n<h2 id=\"执行DML\"><a href=\"#执行DML\" class=\"headerlink\" title=\"执行DML\"></a>执行DML</h2><ol>\n<li>连接到实例</li>\n<li>处理 DML 语句<ol>\n<li>解析与用于处理查询的解析阶段相同。</li>\n<li>执行需要额外的处理才能进行数据更改。</li>\n</ol>\n</li>\n<li>DML 执行阶段<ol>\n<li>如果数据和回滚块尚未在缓冲区缓存中，则服务器进程会将它们从数据文件读取到缓冲区缓存中。</li>\n<li>服务器进程对要修改的行放置锁。回滚块用于存储数据的先前映像，以便在必要时可以回滚 DML 语句。</li>\n<li>数据块记录数据的新值。</li>\n<li>服务器进程将之前的图像记录到撤消块并更新数据块。这两项更改都是在数据库缓冲区高速缓存中完成的。缓冲区缓存中任何更改的块都将标记为脏缓冲区。也就是说，缓冲区与磁盘上的相应块不同。</li>\n<li>处理 DELETE 或 INSERT 命令使用类似的步骤。DELETE 的前面图像包含已删除行中的列值，插入项的前面图像包含行位置信息。</li>\n</ol>\n</li>\n<li>查询返回行</li>\n<li>DML 语句记录更改</li>\n<li>提交可确保事务恢复</li>\n</ol>\n<h2 id=\"执行-SELECT\"><a href=\"#执行-SELECT\" class=\"headerlink\" title=\"执行 SELECT\"></a>执行 SELECT</h2><ol>\n<li>搜索共享池</li>\n<li>验证语句</li>\n<li>验证数据源</li>\n<li>获取锁</li>\n<li>检查权限</li>\n<li>解析语句</li>\n<li>执行语句</li>\n<li>从游标获取值</li>\n</ol>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h1 id=\"Oracle-DBA\"><a href=\"#Oracle-DBA\" class=\"headerlink\" title=\"Oracle DBA\"></a>Oracle DBA</h1><h2 id=\"Oracle-DB-架构\"><a href=\"#Oracle-DB-架构\" class=\"headerlink\" title=\"Oracle DB 架构\"></a>Oracle DB 架构</h2><p><img src=\"/2023/03/24/Oracle-DBA/2023-05-07-17-11-39.png\"></p>\n<p>主要组件概述</p>\n<ul>\n<li><p>Oracle 服务器：Oracle 服务器中有多个文件、进程和内存结构;但是，在处理 SQL 语句时，并非所有方法都使用它们。有些用于提高数据库的性能，确保在发生软件或硬件错误时可以恢复数据库，或执行维护数据库所需的其他任务。Oracle 服务器由 Oracle 实例和 Oracle 数据库组成。</p>\n</li>\n<li><p>Oracle 实例：Oracle 实例是后台进程和内存结构的组合。必须启动实例才能访问数据库中的数据。每次启动实例时，都会分配一个系统全局区域 （SGA） 并启动 Oracle 后台进程。后台进程代表调用进程执行功能。它们整合了原本由为每个用户运行的多个 Oracle 程序处理的功能。后台进程执行输入&#x2F;输出 （I&#x2F;O） 并监视其他 Oracle 进程，以提供更高的并行性，从而提高性能和可靠性。</p>\n</li>\n<li><p>Oracle 数据库：Oracle 数据库由操作系统文件（也称为数据库文件）组成，这些文件为数据库信息提供实际的物理存储。数据库文件用于确保数据保持一致，并且可以在实例发生故障时恢复。</p>\n</li>\n<li><p>其他密钥文件：非数据库文件用于配置实例、对特权用户进行身份验证以及在发生磁盘故障时恢复数据库。</p>\n</li>\n<li><p>用户和服务器进程：用户和服务器进程是执行 SQL 语句时涉及的主要进程;但是，其他进程可以帮助服务器完成 SQL 语句的处理。</p>\n</li>\n<li><p>其他进程：Oracle 中的其他选项也存在许多其他进程，例如高级队列、实际应用程序群集、共享服务器、高级复制等。这些过程在各自的课程中讨论。</p>\n</li>\n</ul>\n<h2 id=\"Oracle-Instance\"><a href=\"#Oracle-Instance\" class=\"headerlink\" title=\"Oracle Instance\"></a>Oracle Instance</h2><p><img src=\"/2023/03/24/Oracle-DBA/2023-05-07-17-15-34.png\"></p>\n<p>Oracle 实例由系统全局区域 （SGA） 内存结构和用于管理数据库的后台进程组成。实例是使用特定于每个操作系统的方法标识的。实例一次只能打开和使用一个数据库。</p>\n<h2 id=\"建立连接和会话\"><a href=\"#建立连接和会话\" class=\"headerlink\" title=\"建立连接和会话\"></a>建立连接和会话</h2><h3 id=\"连接到Oracle-Instance\"><a href=\"#连接到Oracle-Instance\" class=\"headerlink\" title=\"连接到Oracle Instance\"></a>连接到Oracle Instance</h3><p>用户启动 SQL*Plus 等工具开发的应用程序。此应用程序或工具作为<strong>用户进程</strong>执行。</p>\n<p>当用户登录到 Oracle 服务器时，将在运行 Oracle 服务器的计算机上创建一个<strong>服务器进程</strong>。</p>\n<p>服务器进程代表客户端上运行的用户进程与 Oracle 实例通信。服务器进程代表用户执行 SQL 语句。</p>\n<h3 id=\"连接\"><a href=\"#连接\" class=\"headerlink\" title=\"连接\"></a>连接</h3><p>连接是用户进程和 Oracle 服务器之间的通信路径。数据库用户可以通过以下三种方式之一连接到 Oracle 服务器：</p>\n<ol>\n<li>用户登录到运行 Oracle 实例的操作系统，并启动访问该系统上的数据库的应用程序或工具。通信路径是使用主机操作系统上可用的进程间通信机制建立的。</li>\n<li>用户在本地计算机上启动应用程序或工具，并通过网络连接到运行 Oracle 实例的计算机。在这种称为客户端-服务器（C&#x2F;S）的配置中，网络软件用于在用户和 Oracle 服务器之间进行通信。</li>\n<li>在三层连接中，用户的计算机通过网络与应用程序或网络服务器通信，应用程序或网络服务器通过网络连接到运行 Oracle 实例的计算机。例如，用户在网络上的计算机上运行浏览器，以使用驻留在 NT 服务器上的应用程序，该应用程序从 UNIX 主机上运行的 Oracle 数据库中检索数据。</li>\n</ol>\n<h3 id=\"会话\"><a href=\"#会话\" class=\"headerlink\" title=\"会话\"></a>会话</h3><p>会话是用户与 Oracle 服务器的特定连接。会话在 Oracle 服务器验证用户时开始，在用户注销或异常终止时结束。对于给定的数据库用户，如果用户同时从许多工具、应用程序或终端登录，则可能出现许多并发会话。除了某些专用的数据库管理工具外，启动数据库会话需要 Oracle 服务器可供使用。</p>\n<p>注意：此处介绍的连接类型（用户和服务器进程之间存在一对一的对应关系）称为专用服务器连接。使用共享服务器配置时，多个用户进程可以共享服务器进程。</p>\n<h2 id=\"Oracle-Database\"><a href=\"#Oracle-Database\" class=\"headerlink\" title=\"Oracle Database\"></a>Oracle Database</h2><p><img src=\"/2023/03/24/Oracle-DBA/2023-05-07-17-21-09.png\"></p>\n<p>数据库的一般用途是存储和检索相关信息。Oracle 数据库具有逻辑结构和物理结构。数据库的物理结构是数据库中的一组操作系统文件。</p>\n<p>Oracle 数据库由三种文件类型组成。</p>\n<ul>\n<li><p><strong>数据文件</strong>(Data files): 包含数据库中实际数据</p>\n</li>\n<li><p><strong>重做日志</strong>(Redo logs): 包含对数据库所做的更改的记录，以便在发生故障时恢复数据</p>\n</li>\n<li><p><strong>控制文件</strong>(Control files): 包含维护和验证数据库完整性所需信息</p>\n</li>\n</ul>\n<p>其他关键文件结构<br>Oracle 服务器还使用不属于数据库的其他文件：</p>\n<ol>\n<li><strong>参数文件</strong>(parameter file)定义了 Oracle 实例的特征。例如，它包含调整 SGA 中某些内存结构大小的参数。</li>\n<li><strong>密码文件</strong>(password file)对有权启动和关闭 Oracle 实例的用户进行身份验证。</li>\n<li><strong>存档的重做日志文件</strong>(Archived redo log files)是从介质故障中恢复可能需要的重做日志文件的脱机副本。</li>\n</ol>\n<h2 id=\"Physical-Structure\"><a href=\"#Physical-Structure\" class=\"headerlink\" title=\"Physical Structure\"></a>Physical Structure</h2><p>Oracle 数据库的物理结构仅包含三种类型的文件：</p>\n<ol>\n<li>数据文件</li>\n<li>重做日志文件</li>\n<li>控制文件</li>\n</ol>\n<h2 id=\"Memory-Structure\"><a href=\"#Memory-Structure\" class=\"headerlink\" title=\"Memory Structure\"></a>Memory Structure</h2><ol>\n<li>系统全局区域 （SGA）：在实例启动时分配，是 Oracle 实例的基本组件</li>\n<li>程序全局区域 （PGA）：在服务器进程启动时分配</li>\n</ol>\n<h3 id=\"系统全局区-SGA\"><a href=\"#系统全局区-SGA\" class=\"headerlink\" title=\"系统全局区(SGA)\"></a>系统全局区(SGA)</h3><p>它用于存储由数据库进程共享的数据库信息。它包含Oracle服务器的数据和控制信息，并被分配在Oracle所在的计算机的虚拟内存中。</p>\n<p>SGA 的大小由几个初始化参数确定。对 SGA 大小影响最大的参数是：</p>\n<ul>\n<li>DB_CACHE_SIZE：标准块的缓存大小。</li>\n<li>LOG_BUFFER：为重做日志缓冲区缓存分配的字节数。</li>\n<li>SHARED_POOL_SIZE：专用于共享 SQL 和 PL&#x2F;SQL 的区域的大小（以字节为单位）。</li>\n<li>LARGE_POOL_SIZE：大型游泳池的大小;默认值为零。</li>\n</ul>\n<p>由下面几个内存区域组成：</p>\n<ul>\n<li>Shared pool</li>\n<li>Database buffer cache</li>\n<li>Redo log buffer cache</li>\n<li>Large pool(optional)</li>\n<li>Java pool (optional)</li>\n</ul>\n<h4 id=\"Shared-pool\"><a href=\"#Shared-pool\" class=\"headerlink\" title=\"Shared pool\"></a>Shared pool</h4><p>存储最近的执行的 SQL 语句和最近使用的数据定义(DD)</p>\n<p>由两部分组成：</p>\n<ol>\n<li>Library cache (LRU,SQL,PL&#x2F;SQL)</li>\n<li>Data dictionary cache ()</li>\n</ol>\n<p>调整</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">SYSTEM</span> <span class=\"keyword\">SET</span> SHARED_POOL_SIZE <span class=\"operator\">=</span> <span class=\"number\">64</span>M;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Database-Buffer-Cache\"><a href=\"#Database-Buffer-Cache\" class=\"headerlink\" title=\"Database Buffer Cache\"></a>Database Buffer Cache</h3><p>数据库缓冲缓存存储数据副本,即已从数据文件中检索的块。<br>获取和更新数据时，它可以极大地提高性能。<br>它通过最近最少使用的 （LRU） 算法进行管理。<br>DB_BLOCK_SIZE确定主块大小。</p>\n<p>处理查询时，Oracle 服务器进程会在数据库缓冲区缓存中查找所需的任何块。如果在数据库缓冲区高速缓存中找不到该块，服务器进程将从数据文件中读取该块，并将副本放在数据库缓冲区高速缓存中。由于对同一块的后续请求可能会在内存中找到该块，因此请求可能不需要物理读取。Oracle 服务器使用最近最少使用的算法来老化最近未访问的缓冲区，以便为数据库缓冲区缓存中的新块腾出空间。</p>\n<p>调整大小<br>缓冲区缓存中每个缓冲区的大小等于 Oracle 块的大小，由 DB_BLOCK_SIZE 参数指定。<br>数据库缓冲区高速缓存由用于缓冲池和多个块大小的独立子高速缓存组成。<br>参数 DB_BLOCK_SIZE 确定用于 SYSTEM 表空间的主块大小。<br>三个参数定义缓冲区缓存的大小：</p>\n<ol>\n<li>DB_CACHE_SIZE：仅调整默认缓冲区缓存大小的大小，它始终存在且不能设置为零。</li>\n<li>DB_KEEP_CACHE_SIZE：调整保留缓冲区缓存的大小，该缓存用于在内存中保留可能重复使用的块。</li>\n<li>DB_RECYCLE_CACHE_SIZE：调整回收缓冲区缓存的大小，用于从内存中消除重用变化不大的块。</li>\n</ol>\n<p>可以使用标准块大小和最多四个非标准块大小创建 Oracle 数据库。非标准块大小可以具有介于 2 KB 和 32 KB 之间的任何 2 次方值。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">SYSTEM</span> <span class=\"keyword\">SET</span> DB_CACHE_SIZE <span class=\"operator\">=</span> <span class=\"number\">96</span>M;</span><br></pre></td></tr></table></figure>\n\n<p>DB_CACHE_ADVICE 收集统计信息以预测不同的缓存大小行为</p>\n<h3 id=\"Redo-Log-Buffer-Cache\"><a href=\"#Redo-Log-Buffer-Cache\" class=\"headerlink\" title=\"Redo Log Buffer Cache\"></a>Redo Log Buffer Cache</h3><p>重做日志缓冲区缓存记录所有对数据库数据块进行的更改</p>\n<p>其主要目的是恢复。<br>中记录的更改称为重做条目（redo entries）。<br>重做条目包含用于重建或重做更改的信息。</p>\n<p>重做日志缓冲区缓存是一个循环缓冲区，其中包含对数据文件块所做的更改。此信息存储在重做条目中。重做条目包含在通过插入、更新、删除、创建、更改或删除操作进行更改之前重新创建数据所需的信息。</p>\n<p>大小由下式定义：<br>LOG_BUFFER</p>\n<h3 id=\"Large-pool\"><a href=\"#Large-pool\" class=\"headerlink\" title=\"Large pool\"></a>Large pool</h3><p>当用户通过共享服务器进行连接时，Oracle 需要在共享池中分配额外的空间，用于存储有关用户进程、调度程序和服务器之间连接的信息。Large pool 减轻了shared pool内区域的负担。共享池不必放弃内存来缓存 SQL 分析树，转而使用共享服务器会话信息、I&#x2F;O 以及备份和恢复进程。性能提升来自共享 SQL 缓存的增加和收缩带来的开销的减少。</p>\n<p>调整大型池的大小<br>大型池的大小以 LARGE_POOL_SIZE 参数定义的字节为单位。</p>\n<h3 id=\"Java-pool\"><a href=\"#Java-pool\" class=\"headerlink\" title=\"Java pool\"></a>Java pool</h3><p>如果安装和使用 Java，则为必需。</p>\n<p>它在数据库表中的存储方式与PL&#x2F;SQL大致相同。</p>\n<p>它的大小由 JAVA_POOL_SIZE 参数调整。</p>\n<h2 id=\"PGA\"><a href=\"#PGA\" class=\"headerlink\" title=\"PGA\"></a>PGA</h2><p><img src=\"/2023/03/24/Oracle-DBA/2023-05-07-17-44-18.png\"></p>\n<p>Program Global Area<br>程序全局区域或进程全局区域 （PGA） 是一个内存区域，其中包含单个服务器进程或单个后台进程的数据和控制信息。</p>\n<p>PGA 在创建进程时分配，在进程终止时解除分配。与由多个进程共享的 SGA 相比，PGA 是一个仅由一个进程使用的区域。</p>\n<p>在专用服务器配置中，PGA 包括以下组件：</p>\n<ul>\n<li>排序区域：用于处理 SQL 语句可能需要的任何排序</li>\n<li>会话信息：包括会话的用户权限和性能统计信息</li>\n<li>游标状态：指示会话当前使用的 SQL 语句处理阶段</li>\n<li>堆栈空间：包含其他会话变量<br>注： 使用共享服务器配置时，其中一些结构存储在 SGA 中。<br>如果使用共享服务器配置，则多个用户进程可以共享服务器进程。<br>如果创建了大型池，则结构将存储在大型池中;否则，它们将存储在共享池中。</li>\n</ul>\n<h2 id=\"Oracle-Process\"><a href=\"#Oracle-Process\" class=\"headerlink\" title=\"Oracle Process\"></a>Oracle Process</h2><ul>\n<li>用户进程：在数据库用户请求连接到 Oracle 服务器时启动</li>\n<li>服务器进程：连接到 Oracle 实例，并在用户建立会话时启动。</li>\n<li>后台进程：启动 Oracle 实例时可用</li>\n</ul>\n<h3 id=\"用户进程\"><a href=\"#用户进程\" class=\"headerlink\" title=\"用户进程\"></a>用户进程</h3><p>需要从数据库请求信息的数据库用户必须首先与 Oracle 服务器建立连接。<br>使用数据库接口工具（如 SQL*Plus）请求连接，并开始用户进程。<br>用户进程不直接与 Oracle 服务器交互。<br>相反，它通过用户帐户接口 （UPI） 生成调用，该接口创建会话并启动服务器进程。</p>\n<h3 id=\"服务器进程\"><a href=\"#服务器进程\" class=\"headerlink\" title=\"服务器进程\"></a>服务器进程</h3><p>是与甲骨文服务器直接交互的程序</p>\n<ol>\n<li>它完成生成的调用并返回结果。</li>\n<li>可以是专用服务器或共享服务器。</li>\n</ol>\n<p>用户建立连接后，将启动服务器进程来处理用户进程请求。<br>服务器进程可以是专用服务器进程，也可以是共享服务器进程。<br>在专用服务器环境中，服务器进程处理单个用户进程的请求。一<br>旦用户进程断开连接，服务器进程就会终止。<br>在共享服务器环境中，服务器进程处理多个用户进程的请求。<br>服务器进程使用 Oracle 程序接口 （OPI） 与 Oracle Server通信。</p>\n<h3 id=\"后台进程\"><a href=\"#后台进程\" class=\"headerlink\" title=\"后台进程\"></a>后台进程</h3><p>Oracle 体系结构有五个必需的后台进程：</p>\n<ol>\n<li>DBWn\t\t\t</li>\n<li>PMON\t\t</li>\n<li>CKPT</li>\n<li>LGWR\t\t\t</li>\n<li>SMON</li>\n</ol>\n<p>\t</p>\n<p>除了必需列表之外，Oracle 还有许多可选的后台进程，这些进程在使用其选项时启动。</p>\n<p>以下是一些可选后台进程的列表：</p>\n<ul>\n<li>RECO：恢复器</li>\n<li>QMNn：高级排队</li>\n<li>ARCn：存档器</li>\n<li>LCKn：RAC 锁管理器 — 实例锁</li>\n<li>LMON：RAC DLM 监视器 — 全局锁</li>\n<li>LMDn：RAC DLM 监视器 — 远程锁定</li>\n<li>CJQ0：快照刷新</li>\n<li>Dnnn：调度程序</li>\n<li>SNNN：共享服务器</li>\n<li>Pnnn：并行查询从属</li>\n</ul>\n<h4 id=\"数据库写进程-（DBWn）\"><a href=\"#数据库写进程-（DBWn）\" class=\"headerlink\" title=\"数据库写进程 （DBWn）\"></a>数据库写进程 （DBWn）</h4><p>服务器进程在缓冲区缓存中记录对回滚和数据块的更改。<br>DBWn 将数据库缓冲区缓存中的脏缓冲区写入数据文件。<br>它确保数据库缓冲区缓存中提供足够数量的可用缓冲区（当服务器进程需要从数据文件中读取块时可以覆盖的缓冲区）。<br>数据库性能得到提高，因为服务器进程仅在缓冲区高速缓存中进行更改。</p>\n<p>DBWn 延迟写入数据文件，直到发生以下事件之一：</p>\n<ul>\n<li>检查点</li>\n<li>脏缓冲区数达到阈值</li>\n<li>进程在扫描可用缓冲区时扫描指定数量的块No free buffers</li>\n<li>发生超时</li>\n<li>实际应用程序群集环境中的 ping 请求</li>\n<li>将普通表空间或临时表空间置于脱机状态</li>\n<li>将表空间置于只读模式</li>\n<li>删除或截断表</li>\n<li>ALTER TABLESPACE tablespace name BEGIN BACKUP</li>\n</ul>\n<h4 id=\"Log-Writer-LGWR\"><a href=\"#Log-Writer-LGWR\" class=\"headerlink\" title=\"Log Writer (LGWR)\"></a>Log Writer (LGWR)</h4><p>在以下情况下，LGWR 会执行从重做日志缓冲区缓存到重做日志文件的顺序写入：</p>\n<ul>\n<li>当事务提交时</li>\n<li>当重做日志缓冲区缓存已满三分之一时</li>\n<li>当重做日志缓冲区缓存中的更改记录超过 1 MB 时</li>\n<li>在 DBWn 之前，将数据库缓冲区缓存中修改的块写入数据文件</li>\n<li>每 3 秒一次。</li>\n<li>由于恢复需要重做，因此 LGWR 仅在将重做写入磁盘后确认提交。</li>\n<li>LGWR 还可以调用 DBWn 来写入数据文件。<br>注意：DBWn 不会写入联机重做日志（online redo logs）。</li>\n</ul>\n<h4 id=\"System-Monitor-SMON\"><a href=\"#System-Monitor-SMON\" class=\"headerlink\" title=\"System Monitor (SMON)\"></a>System Monitor (SMON)</h4><p>如果 Oracle 实例出现故障，SGA 中尚未写入磁盘的任何信息都将丢失。<br>例如，操作系统故障会导致实例故障。实例丢失后，后台进程 SMON 会在重新打开数据库时自动执行实例恢复。</p>\n<p><strong>实例恢复</strong>包括以下步骤：  </p>\n<ol>\n<li>前滚以恢复尚未记录在数据文件中但已记录在联机重做日志中的数据。由于实例故障期间 SGA 丢失，此数据尚未写入磁盘。在此过程中，SMON 读取重做日志文件，并将重做日志中记录的更改应用于数据块。由于所有已提交的事务都已写入重做日志，因此此过程将完全恢复这些事务。</li>\n<li>打开数据库，以便用户可以登录。未被未恢复的事务锁定的任何数据都立即可用。</li>\n<li>回滚未提交的事务。它们在访问锁定数据时由 SMON 或单个服务器进程回滚。</li>\n</ol>\n<p>SMON 还执行一些空间维护功能：<br>它合并或合并数据文件中可用空间的相邻区域。<br>它解除分配临时段以将其作为数据文件中的可用空间返回。<br>临时段用于在 SQL 语句处理期间存储数据。</p>\n<h4 id=\"Process-Monitor-PMON\"><a href=\"#Process-Monitor-PMON\" class=\"headerlink\" title=\"Process Monitor (PMON)\"></a>Process Monitor (PMON)</h4><p><strong>事务恢复</strong></p>\n<p>后台进程 PMON 在进程失败后通过以下方式清理：</p>\n<ol>\n<li>回滚用户的当前事务</li>\n<li>释放所有当前持有的表锁或行锁</li>\n<li>释放用户当前保留的其他资源</li>\n<li>重新启动失效调度程序</li>\n</ol>\n<h4 id=\"Checkpoint-CKPT\"><a href=\"#Checkpoint-CKPT\" class=\"headerlink\" title=\"Checkpoint (CKPT)\"></a>Checkpoint (CKPT)</h4><p>当 Oracle 后台进程 DBWn 将 SGA 中所有已修改的数据库缓冲区（包括已提交和未提交的数据）写入数据文件时，会发生称为检查点的事件。</p>\n<p>实施检查点的原因如下：</p>\n<ol>\n<li>检查点确保内存中频繁更改的数据块定期写入数据文件。由于 DBWn 的LRU算法，频繁更改的数据块可能永远不会符合最近最少使用的块的条件，因此，如果未发生检查点，则可能永远不会写入磁盘。</li>\n<li>由于检查点之前的所有数据库更改都已记录在数据文件中，因此如果需要实例恢复，则不再需要将检查点之前的重做日志条目应用于数据文件。因此，检查点非常有用，因为它们可以加快实例恢复。</li>\n</ol>\n<p>在检查点，将写入以下信息：</p>\n<ul>\n<li>检查点编号到数据文件头中</li>\n<li>检查点编号、日志序列号、存档的日志名称和系统更改编号到控制文件中。</li>\n<li>CKPT 不会将数据块写入磁盘或将块重做到联机重做日志。<br>注： 不应将 CKPT 过程与管理重做日志文件课程中讨论的检查点操作混淆。</li>\n</ul>\n<h3 id=\"Archiver-ARCn\"><a href=\"#Archiver-ARCn\" class=\"headerlink\" title=\"Archiver (ARCn)\"></a>Archiver (ARCn)</h3><p><img src=\"/2023/03/24/Oracle-DBA/2023-05-07-18-03-58.png\"><br>存档程序进程<br>所有其他后台进程都是可选的，具体取决于数据库的配置;<br>但是，其中之一 ARCn 对于在磁盘丢失后恢复数据库至关重要。<br>当联机重做日志文件填满时，Oracle 服务器开始写入下一个联机重做日志文件。<br>从一个重做日志切换到另一个重做日志的过程称为日志切换。<br>ARCn 进程在每个日志切换时启动已填充日志组的备份或存档。<br>它会自动存档联机重做日志，然后才能重用日志，以便保留对数据库所做的所有更改。<br>这使 DBA 能够将数据库恢复到故障点，即使磁盘驱动器已损坏也是如此。</p>\n<p>存档重做日志文件<br>DBA 必须做出的重要决策之一是将数据库配置为在 ARCHIVELOG 或 NOARCHIVELOG 模式下运行。</p>\n<ol>\n<li><strong>NOARCHIVELOG 模式</strong>：在 NOARCHIVELOG 模式下，每次发生日志切换时，都会覆盖联机重做日志文件。<br>LGWR 不会覆盖重做日志组，直到该组的检查点完成。<br>这可确保在发生实例崩溃时可以恢复已提交的数据。<br>在实例崩溃期间，只有 SGA 丢失。<br>没有磁盘丢失，只有内存。<br>例如，操作系统崩溃会导致实例崩溃。</li>\n<li><strong>ARCHIVELOG 模式</strong>：如果数据库配置为在存档日志模式下运行，<br>则必须先存档已填充联机重做日志文件的非活动组，然后才能再次使用它们。<br>由于对数据库所做的更改记录在联机重做日志文件中，<br>因此数据库管理员可以使用数据文件的物理备份和存档的联机重做日志文件来恢复数据库，<br>而不会因任何单点故障（包括磁盘丢失）而丢失任何已提交的数据。<br>通常，生产数据库配置为在 ARCHIVELOG 模式下运行。</li>\n</ol>\n<h2 id=\"Logical-Structure\"><a href=\"#Logical-Structure\" class=\"headerlink\" title=\"Logical Structure\"></a>Logical Structure</h2><p><img src=\"/2023/03/24/Oracle-DBA/2023-05-07-18-04-36.png\"></p>\n<p>逻辑结构层次结构如下：</p>\n<ol>\n<li><strong>Oracle DB</strong>是一组<strong>表空间</strong>(Tablespace)。</li>\n<li><strong>表空间</strong>可以由一个或多个<strong>段</strong>(Segment)组成。</li>\n<li><strong>段</strong>由<strong>区</strong>(Extent)组成。</li>\n<li><strong>区</strong>由<strong>逻辑块</strong>(Block)组成。</li>\n<li>块是读取和写入操作的最小单位。</li>\n</ol>\n<h2 id=\"SQL执行过程\"><a href=\"#SQL执行过程\" class=\"headerlink\" title=\"SQL执行过程\"></a>SQL执行过程</h2><p>SQL -&gt; 连接器 -&gt; 语法分析器 -&gt; 语义分析与优化器 -&gt; 执行引擎</p>\n<h2 id=\"执行DML\"><a href=\"#执行DML\" class=\"headerlink\" title=\"执行DML\"></a>执行DML</h2><ol>\n<li>连接到实例</li>\n<li>处理 DML 语句<ol>\n<li>解析与用于处理查询的解析阶段相同。</li>\n<li>执行需要额外的处理才能进行数据更改。</li>\n</ol>\n</li>\n<li>DML 执行阶段<ol>\n<li>如果数据和回滚块尚未在缓冲区缓存中，则服务器进程会将它们从数据文件读取到缓冲区缓存中。</li>\n<li>服务器进程对要修改的行放置锁。回滚块用于存储数据的先前映像，以便在必要时可以回滚 DML 语句。</li>\n<li>数据块记录数据的新值。</li>\n<li>服务器进程将之前的图像记录到撤消块并更新数据块。这两项更改都是在数据库缓冲区高速缓存中完成的。缓冲区缓存中任何更改的块都将标记为脏缓冲区。也就是说，缓冲区与磁盘上的相应块不同。</li>\n<li>处理 DELETE 或 INSERT 命令使用类似的步骤。DELETE 的前面图像包含已删除行中的列值，插入项的前面图像包含行位置信息。</li>\n</ol>\n</li>\n<li>查询返回行</li>\n<li>DML 语句记录更改</li>\n<li>提交可确保事务恢复</li>\n</ol>\n<h2 id=\"执行-SELECT\"><a href=\"#执行-SELECT\" class=\"headerlink\" title=\"执行 SELECT\"></a>执行 SELECT</h2><ol>\n<li>搜索共享池</li>\n<li>验证语句</li>\n<li>验证数据源</li>\n<li>获取锁</li>\n<li>检查权限</li>\n<li>解析语句</li>\n<li>执行语句</li>\n<li>从游标获取值</li>\n</ol>\n"},{"title":"Oracle Log File","date":"2023-04-03T12:30:57.000Z","cover":"2023/04/03/Oracle-Log-File/Picture1.png","_content":"\n# Oracle Log File\n\n![log image](Picture1.png)\n\n<!-- more -->\n\n## 重做日志文件(Redo Log Files)\n\n重做日志文件记录对数据所做的所有更改，并提供从系统或介质故障中恢复的机制。\n\n重做日志文件按组(group)进行组织。\n\nOracle 数据库至少需要两个组(group)，因为日志组要循环使用。\n\n组中的每个重做日志称为一个成员(member)。\n\n重做日志文件的用途\n\n重做日志文件提供了在发生数据库故障时重做事务的方法。每个事务都同步写入重做日志文件，以便在介质发生故障时提供恢复机制。例外情况包括：使用 NOLOGGING 选项完成的直接加载和直接读取。 这包括尚未提交的事务、撤消段信息以及架构和对象管理语句。重做日志文件用于实例无法恢复尚未写入数据文件的已提交数据等情况。**重做日志文件仅用于恢复**\n\n## 重做日志文件的结构\n\n![structure](Picture2.png)\n\nDBA 可以设置 Oracle 数据库来维护联机重做日志文件的副本，以避免由于单点故障而丢失数据库信息。\n\n### 在线重做日志组(Online Redo Log Groups)\n\n联机重做日志文件的一组相同副本称为联机重做日志组。\n\nLGWR 后台进程同时将相同的信息写入组中的所有联机重做日志文件。\nOracle 服务器至少需要两个联机重做日志文件组才能使数据库正常运行。\n\n### 在线重做日志成员(Online Redo Log Members)\n\n组中的每个联机重做日志文件称为一个成员。\n\n组中的每个成员具有相同的日志序列号和相同的大小。每次 Oracle 服务器开始写入日志组时，都会分配日志序列号，以唯一标识每个重做日志文件。当前日志序列号存储在控制文件和所有数据文件的标头中。\n\n\n### 创建初始重做日志文件\n\n初始联机重做日志组和成员集是在数据库创建期间创建的。\n\n以下参数限制联机重做日志文件的数量：\n\n创建数据库命令中的 **MAXLOGFILES** 参数指定联机重做日志组的绝对最大值。\n\n**MAXLOGFILE** 的最大值和默认值取决于您的操作系统。\n\n创建数据库命令中使用的 **MAXLOGMEMBERS** 参数确定每个组的最大成员数。\n\n**MAXLOG**成员的最大值和默认值取决于您的操作系统。\n\n## 重做日志的工作原理\n\n* 重做日志以循环(Recycle)方式使用。\n* 当重做日志文件已满时，LGWR 将移动到下一个日志组。\n* 这称为log switch\n* 还会发生检查点操作 \n* 信息写入控制文件\n\nOracle 服务器按顺序将对数据库所做的所有更改记录在重做日志缓冲区中。重做条目从重做日志缓冲区写入 LGWR 进程称为当前联机重做日志组的联机重做日志组之一。\n\nLGWR在以下情况下写入：\n* 当事务提交时\n* 当重做日志缓冲区已满三分之一时\n* 当重做日志缓冲区中更改的记录超过一兆字节(1MB)时\n* 在 DBWn 将数据库缓冲区缓存中修改的块写入数据文件之前\n  \n重做日志以循环方式使用。每个重做日志文件组都由每次重用日志时覆盖的日志序列号标识。\n\nLGWR 按顺序写入联机重做日志文件。 当当前联机重做日志组被填满时，LGWR 开始写入下一个组。这称为日志SWITCH。\n\n当最后一个可用的联机重做日志文件被填满时，LGWR 将返回到第一个联机重做日志组并再次开始写入。\n\n### CHECKPOINT\n\n在检查点期间：\nDBWn 将被检查点的日志覆盖的许多脏数据库缓冲区写入数据文件。DBWn 写入的缓冲区数由 **FAST_START_MTTR_TARGET** 参数（如果指定）确定。\n\n检查点后台进程 CKPT 更新所有数据文件和控制文件的标头，以反映它已成功完成。\n可以对数据库中的所有数据文件或仅对特定数据文件执行检查点。\n例如，在以下情况下会发生检查点：\n* 在每个日志切换时\n* 当实例已使用正常、事务或即时选项关闭时\n* 通过设置初始化参数强制时 FAST_START_MTTR_TARGET。\n* DBA 手动请求时\n* 当 ALTER 表空间 [脱机正常|只读|开始备份]导致对特定数据文件的检查点。\n如果LOG_CHECKPOINTS_TO_ALERT初始化参数设置为 TRUE，则有关每个检查点的信息将记录在alert_SID.log文件中。此参数的默认值 FALSE 不记录检查点。\n\n## 获取日志组和成员信息\n\n查询两个动态视图\n\n```sql\nV$LOG\n\nV$LOGFILE\n```\n\n\n## 手动切换日志&设置检查点\n\n```sql\nALTER SYSTEM SWITCH LOGFILE;\n\nALTER SYSTEM CHECKPOINT;\n```\n\n\n如前所述，日志切换和检查点在数据库操作中的某些点自动完成，但 DBA 可以强制进行日志切换或检查点。\n\n可以使用 **FAST_START_MTTR_TARGET** 参数强制检查点。 \n\nFAST_START_MTTR_TARGET = 600 表示实例恢复时间不应超过 600 秒，数据库将根据此目标调整其他参数。\n\n如果使用FAST_START_MTTR_TARGET，则不得使用FAST_START_IO_TARGET和LOG_CHECKPOINT_TIMEOUT。\n\n\n## 添加重做日志组(Online Redo Log Groups)\n\n```sql\nALTER DATABASE ADD LOGFILE GROUP 3 \n(\n '$HOME/ORADATA/u01/log3a.log',\n '$HOME/ORADATA/u02/log3b.log'\n)\nSIZE 10M;\n```\n![](P3.png)\n\n若要创建新的联机重做日志文件组，请使用以下 SQL 命令：\n\n```sql\nALTER DATABASE [database]\n\t\tADD LOGFILE [GROUP integer] filespec\n\t\t[,          [GROUP integer] filespec]...]\n```\n\n您可以使用文件规范指定成员的名称和位置。可以为每个重做日志文件组选择 GROUP 参数的值。如果省略此参数，Oracle 服务器将自动生成其值。\n\n\n## 添加重做日志成员(Online Redo Log Members)\n\n```sql\nALTER DATABASE ADD LOGFILE MEMBER\n'$HOME/ORADATA/u04/log1c.rdo' TO GROUP 1,\n'$HOME/ORADATA/u04/log2c.rdo' TO GROUP 2,\n'$HOME/ORADATA/u04/log3c.rdo' TO GROUP 3;\n\n```\n\n![](P4.png)\n\n可以使用以下命令将新成员添加到现有重做日志文件组：\n\n```sql\nALTER DATABASE [database]\n  ADD LOGFILE MEMBER\n  [     'filename' [REUSE]\n      [, 'filename' [REUSE]]...\n  TO {GROUP integer\n      |('filename'[, 'filename']...)\n      }\n  ]...\n```\n\n使用日志文件成员的完全指定名称;否则，将在数据库服务器的缺省目录中创建文件。\n如果文件已存在，则它必须具有相同的大小，并且必须指定“REUSE”选项。您可以通过指定组的一个或多个成员或指定组编号来标识目标组。\n\n## 删除重做日志组(Online Redo Log Groups)\n\n```sql\nALTER DATABASE DROP LOGFILE GROUP 3;\n```\n![](P%.png)\n\n要增加或减少联机重做日志组的大小，请添加新的联机重做日志组（具有新大小），然后删除旧日志组。\n\n可以使用以下命令删除整个联机重做日志组：\n```sql\nALTER DATABASE [database]\nDROP LOGFILE {GROUP integer|('filename'[, 'filename']...)}\n      [,{GROUP integer|('filename'[, 'filename']...)}]...\n```\n### 限制\n* 一个实例至少需要两组在线重做日志文件。\n* 无法删除活动组或当前组。\n* 删除联机重做日志组时，不会删除操作系统文件。\n\n## 删除重做日志成员(Online Redo Log Members)\n\n```sql\nALTER DATABASE DROP LOGFILE MEMBER '$HOME/ORADATA/u04/log3c.rdo';\n```\n\n![](P6.png)\n\n\n您可能希望删除联机重做日志成员，因为它无效。如果要删除一个或多个特定的联机重做日志成员，请使用以下“更改数据库删除日志文件成员”命令：\n```sql\nALTER DATABASE [database]\n\tDROP LOGFILE MEMBER 'filename'[, 'filename']...\n```\n### 限制\n*  如果要删除的成员是组中的最后一个有效成员，则无法删除该成员。\n*  如果组是最新的，则必须先强制切换日志文件，然后才能删除成员。\n*  如果数据库在 ARCHIVELOG 模式下运行，并且未归档成员所属的日志文件组，则无法删除该成员。\n*  删除联机重做日志成员时，不会删除操作系统文件。\n\n## 清除联机重做日志文件 (online redo log files)\n\n```sql\nALTER DATABASE CLEAR LOGFILE '$HOME/ORADATA/u01/log2a.rdo';\n```\n\n如果重做日志文件在所有成员中都已损坏，则DBA 可以通过使用 ALTER DATABASE CLEAR 日志文件重新初始化这些日志文件来解决此问题：\n\n```sql\n\tALTER DATABASE [database]\n\tCLEAR [UNARCHIVED] LOGFILE\n\t\t {GROUP integer|('filename'[, 'filename']...)}\n\t\t[,{GROUP integer|('filename'[, 'filename']...)}]...\n```\n\n使用此命令等效于添加和删除联机重做日志文件。但是，即使只有两个日志组，每个日志组一个文件，即使清除的组可用但未存档，也可以发出此命令。\n\n### 限制\n* 您可以清除联机重做日志文件，无论它是否已存档。但是，如果未存档，则必须包含关键字“**UNARCHIVED**”。如果恢复需要联机重做日志文件，则会导致备份不可用。\n* 重新定位和重命名重做日志文件\n* 可以通过添加新日志文件并删除旧日志文件来更改联机重做日志文件的位置。 另一种方法“更改数据库重命名文件”可用，但这需要将数据库置于 MOUNT 模式。 因此，添加新的和删除旧的要容易得多。\n\n\n### 联机重做日志文件数\n\n若要确定数据库实例的适当数量的联机重做日志文件，必须测试不同的配置。\n在某些情况下，一个数据库实例可能只需要两个组。在其他情况下，数据库实例可能需要其他组来保证这些组始终可用于 LGWR。例如，如果 LGWR 跟踪文件或警报文件中的消息指示 LGWR 经常因为检查点尚未完成或组尚未存档而必须等待组，则需要添加组。\n\n尽管使用 Oracle 服务器多路复用组可以包含不同数量的成员，但请尝试构建对称配置。非对称配置应只是异常情况（如磁盘故障）的临时结果。\n\n### 联机重做日志文件的位置\n\n多路复用联机重做日志文件时，请将组的成员放在不同的磁盘上。通过执行此操作，即使一个成员不可用但其他成员可用，实例也不会关闭。\n将归档日志文件和联机重做日志文件分开放在不同的磁盘上，以减少 ARCn 和 LGWR 后台进程之间的争用。\n\n\n## 控制归档\n\n非归档模式 -> 归档模式\n```sql\n查询归档信息\narchive log list\n\nshutdown immediate（注意不能shutdown abort）\n\nstartup mount\n\nalter database archivelog;\n\nalter database open;\n```\n\n```sql\n归档模式 -> 非归档模式\n\narchive log list （查询归档信息）\n\nshutdown immediate\n\nstartup mount\n\nalter database noarchivelog;\n\nalter database open;\n```\n\n```sql\n在实例启动后，启用自动归档功能\nalter system archive log start;\n\n设置最大归档进程数目\nalter system set log_archive_max_processes=3;\n\n在实例启动后，禁用自动归档功能\nalter system archive log stop;\n\n执行手工归档\nalter system archive log all;\n```\n\n","source":"_posts/Oracle-Log-File.md","raw":"---\ntitle: Oracle Log File\ndate: 2023-04-03 20:30:57\ntags: \n- Database\n- Oracle\ncover: Picture1.png\n---\n\n# Oracle Log File\n\n![log image](Picture1.png)\n\n<!-- more -->\n\n## 重做日志文件(Redo Log Files)\n\n重做日志文件记录对数据所做的所有更改，并提供从系统或介质故障中恢复的机制。\n\n重做日志文件按组(group)进行组织。\n\nOracle 数据库至少需要两个组(group)，因为日志组要循环使用。\n\n组中的每个重做日志称为一个成员(member)。\n\n重做日志文件的用途\n\n重做日志文件提供了在发生数据库故障时重做事务的方法。每个事务都同步写入重做日志文件，以便在介质发生故障时提供恢复机制。例外情况包括：使用 NOLOGGING 选项完成的直接加载和直接读取。 这包括尚未提交的事务、撤消段信息以及架构和对象管理语句。重做日志文件用于实例无法恢复尚未写入数据文件的已提交数据等情况。**重做日志文件仅用于恢复**\n\n## 重做日志文件的结构\n\n![structure](Picture2.png)\n\nDBA 可以设置 Oracle 数据库来维护联机重做日志文件的副本，以避免由于单点故障而丢失数据库信息。\n\n### 在线重做日志组(Online Redo Log Groups)\n\n联机重做日志文件的一组相同副本称为联机重做日志组。\n\nLGWR 后台进程同时将相同的信息写入组中的所有联机重做日志文件。\nOracle 服务器至少需要两个联机重做日志文件组才能使数据库正常运行。\n\n### 在线重做日志成员(Online Redo Log Members)\n\n组中的每个联机重做日志文件称为一个成员。\n\n组中的每个成员具有相同的日志序列号和相同的大小。每次 Oracle 服务器开始写入日志组时，都会分配日志序列号，以唯一标识每个重做日志文件。当前日志序列号存储在控制文件和所有数据文件的标头中。\n\n\n### 创建初始重做日志文件\n\n初始联机重做日志组和成员集是在数据库创建期间创建的。\n\n以下参数限制联机重做日志文件的数量：\n\n创建数据库命令中的 **MAXLOGFILES** 参数指定联机重做日志组的绝对最大值。\n\n**MAXLOGFILE** 的最大值和默认值取决于您的操作系统。\n\n创建数据库命令中使用的 **MAXLOGMEMBERS** 参数确定每个组的最大成员数。\n\n**MAXLOG**成员的最大值和默认值取决于您的操作系统。\n\n## 重做日志的工作原理\n\n* 重做日志以循环(Recycle)方式使用。\n* 当重做日志文件已满时，LGWR 将移动到下一个日志组。\n* 这称为log switch\n* 还会发生检查点操作 \n* 信息写入控制文件\n\nOracle 服务器按顺序将对数据库所做的所有更改记录在重做日志缓冲区中。重做条目从重做日志缓冲区写入 LGWR 进程称为当前联机重做日志组的联机重做日志组之一。\n\nLGWR在以下情况下写入：\n* 当事务提交时\n* 当重做日志缓冲区已满三分之一时\n* 当重做日志缓冲区中更改的记录超过一兆字节(1MB)时\n* 在 DBWn 将数据库缓冲区缓存中修改的块写入数据文件之前\n  \n重做日志以循环方式使用。每个重做日志文件组都由每次重用日志时覆盖的日志序列号标识。\n\nLGWR 按顺序写入联机重做日志文件。 当当前联机重做日志组被填满时，LGWR 开始写入下一个组。这称为日志SWITCH。\n\n当最后一个可用的联机重做日志文件被填满时，LGWR 将返回到第一个联机重做日志组并再次开始写入。\n\n### CHECKPOINT\n\n在检查点期间：\nDBWn 将被检查点的日志覆盖的许多脏数据库缓冲区写入数据文件。DBWn 写入的缓冲区数由 **FAST_START_MTTR_TARGET** 参数（如果指定）确定。\n\n检查点后台进程 CKPT 更新所有数据文件和控制文件的标头，以反映它已成功完成。\n可以对数据库中的所有数据文件或仅对特定数据文件执行检查点。\n例如，在以下情况下会发生检查点：\n* 在每个日志切换时\n* 当实例已使用正常、事务或即时选项关闭时\n* 通过设置初始化参数强制时 FAST_START_MTTR_TARGET。\n* DBA 手动请求时\n* 当 ALTER 表空间 [脱机正常|只读|开始备份]导致对特定数据文件的检查点。\n如果LOG_CHECKPOINTS_TO_ALERT初始化参数设置为 TRUE，则有关每个检查点的信息将记录在alert_SID.log文件中。此参数的默认值 FALSE 不记录检查点。\n\n## 获取日志组和成员信息\n\n查询两个动态视图\n\n```sql\nV$LOG\n\nV$LOGFILE\n```\n\n\n## 手动切换日志&设置检查点\n\n```sql\nALTER SYSTEM SWITCH LOGFILE;\n\nALTER SYSTEM CHECKPOINT;\n```\n\n\n如前所述，日志切换和检查点在数据库操作中的某些点自动完成，但 DBA 可以强制进行日志切换或检查点。\n\n可以使用 **FAST_START_MTTR_TARGET** 参数强制检查点。 \n\nFAST_START_MTTR_TARGET = 600 表示实例恢复时间不应超过 600 秒，数据库将根据此目标调整其他参数。\n\n如果使用FAST_START_MTTR_TARGET，则不得使用FAST_START_IO_TARGET和LOG_CHECKPOINT_TIMEOUT。\n\n\n## 添加重做日志组(Online Redo Log Groups)\n\n```sql\nALTER DATABASE ADD LOGFILE GROUP 3 \n(\n '$HOME/ORADATA/u01/log3a.log',\n '$HOME/ORADATA/u02/log3b.log'\n)\nSIZE 10M;\n```\n![](P3.png)\n\n若要创建新的联机重做日志文件组，请使用以下 SQL 命令：\n\n```sql\nALTER DATABASE [database]\n\t\tADD LOGFILE [GROUP integer] filespec\n\t\t[,          [GROUP integer] filespec]...]\n```\n\n您可以使用文件规范指定成员的名称和位置。可以为每个重做日志文件组选择 GROUP 参数的值。如果省略此参数，Oracle 服务器将自动生成其值。\n\n\n## 添加重做日志成员(Online Redo Log Members)\n\n```sql\nALTER DATABASE ADD LOGFILE MEMBER\n'$HOME/ORADATA/u04/log1c.rdo' TO GROUP 1,\n'$HOME/ORADATA/u04/log2c.rdo' TO GROUP 2,\n'$HOME/ORADATA/u04/log3c.rdo' TO GROUP 3;\n\n```\n\n![](P4.png)\n\n可以使用以下命令将新成员添加到现有重做日志文件组：\n\n```sql\nALTER DATABASE [database]\n  ADD LOGFILE MEMBER\n  [     'filename' [REUSE]\n      [, 'filename' [REUSE]]...\n  TO {GROUP integer\n      |('filename'[, 'filename']...)\n      }\n  ]...\n```\n\n使用日志文件成员的完全指定名称;否则，将在数据库服务器的缺省目录中创建文件。\n如果文件已存在，则它必须具有相同的大小，并且必须指定“REUSE”选项。您可以通过指定组的一个或多个成员或指定组编号来标识目标组。\n\n## 删除重做日志组(Online Redo Log Groups)\n\n```sql\nALTER DATABASE DROP LOGFILE GROUP 3;\n```\n![](P%.png)\n\n要增加或减少联机重做日志组的大小，请添加新的联机重做日志组（具有新大小），然后删除旧日志组。\n\n可以使用以下命令删除整个联机重做日志组：\n```sql\nALTER DATABASE [database]\nDROP LOGFILE {GROUP integer|('filename'[, 'filename']...)}\n      [,{GROUP integer|('filename'[, 'filename']...)}]...\n```\n### 限制\n* 一个实例至少需要两组在线重做日志文件。\n* 无法删除活动组或当前组。\n* 删除联机重做日志组时，不会删除操作系统文件。\n\n## 删除重做日志成员(Online Redo Log Members)\n\n```sql\nALTER DATABASE DROP LOGFILE MEMBER '$HOME/ORADATA/u04/log3c.rdo';\n```\n\n![](P6.png)\n\n\n您可能希望删除联机重做日志成员，因为它无效。如果要删除一个或多个特定的联机重做日志成员，请使用以下“更改数据库删除日志文件成员”命令：\n```sql\nALTER DATABASE [database]\n\tDROP LOGFILE MEMBER 'filename'[, 'filename']...\n```\n### 限制\n*  如果要删除的成员是组中的最后一个有效成员，则无法删除该成员。\n*  如果组是最新的，则必须先强制切换日志文件，然后才能删除成员。\n*  如果数据库在 ARCHIVELOG 模式下运行，并且未归档成员所属的日志文件组，则无法删除该成员。\n*  删除联机重做日志成员时，不会删除操作系统文件。\n\n## 清除联机重做日志文件 (online redo log files)\n\n```sql\nALTER DATABASE CLEAR LOGFILE '$HOME/ORADATA/u01/log2a.rdo';\n```\n\n如果重做日志文件在所有成员中都已损坏，则DBA 可以通过使用 ALTER DATABASE CLEAR 日志文件重新初始化这些日志文件来解决此问题：\n\n```sql\n\tALTER DATABASE [database]\n\tCLEAR [UNARCHIVED] LOGFILE\n\t\t {GROUP integer|('filename'[, 'filename']...)}\n\t\t[,{GROUP integer|('filename'[, 'filename']...)}]...\n```\n\n使用此命令等效于添加和删除联机重做日志文件。但是，即使只有两个日志组，每个日志组一个文件，即使清除的组可用但未存档，也可以发出此命令。\n\n### 限制\n* 您可以清除联机重做日志文件，无论它是否已存档。但是，如果未存档，则必须包含关键字“**UNARCHIVED**”。如果恢复需要联机重做日志文件，则会导致备份不可用。\n* 重新定位和重命名重做日志文件\n* 可以通过添加新日志文件并删除旧日志文件来更改联机重做日志文件的位置。 另一种方法“更改数据库重命名文件”可用，但这需要将数据库置于 MOUNT 模式。 因此，添加新的和删除旧的要容易得多。\n\n\n### 联机重做日志文件数\n\n若要确定数据库实例的适当数量的联机重做日志文件，必须测试不同的配置。\n在某些情况下，一个数据库实例可能只需要两个组。在其他情况下，数据库实例可能需要其他组来保证这些组始终可用于 LGWR。例如，如果 LGWR 跟踪文件或警报文件中的消息指示 LGWR 经常因为检查点尚未完成或组尚未存档而必须等待组，则需要添加组。\n\n尽管使用 Oracle 服务器多路复用组可以包含不同数量的成员，但请尝试构建对称配置。非对称配置应只是异常情况（如磁盘故障）的临时结果。\n\n### 联机重做日志文件的位置\n\n多路复用联机重做日志文件时，请将组的成员放在不同的磁盘上。通过执行此操作，即使一个成员不可用但其他成员可用，实例也不会关闭。\n将归档日志文件和联机重做日志文件分开放在不同的磁盘上，以减少 ARCn 和 LGWR 后台进程之间的争用。\n\n\n## 控制归档\n\n非归档模式 -> 归档模式\n```sql\n查询归档信息\narchive log list\n\nshutdown immediate（注意不能shutdown abort）\n\nstartup mount\n\nalter database archivelog;\n\nalter database open;\n```\n\n```sql\n归档模式 -> 非归档模式\n\narchive log list （查询归档信息）\n\nshutdown immediate\n\nstartup mount\n\nalter database noarchivelog;\n\nalter database open;\n```\n\n```sql\n在实例启动后，启用自动归档功能\nalter system archive log start;\n\n设置最大归档进程数目\nalter system set log_archive_max_processes=3;\n\n在实例启动后，禁用自动归档功能\nalter system archive log stop;\n\n执行手工归档\nalter system archive log all;\n```\n\n","slug":"Oracle-Log-File","published":1,"updated":"2023-06-23T01:04:31.576Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5ut0036lv9e3jjh53lo","content":"<h1 id=\"Oracle-Log-File\"><a href=\"#Oracle-Log-File\" class=\"headerlink\" title=\"Oracle Log File\"></a>Oracle Log File</h1><p><img src=\"/2023/04/03/Oracle-Log-File/Picture1.png\" alt=\"log image\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"重做日志文件-Redo-Log-Files\"><a href=\"#重做日志文件-Redo-Log-Files\" class=\"headerlink\" title=\"重做日志文件(Redo Log Files)\"></a>重做日志文件(Redo Log Files)</h2><p>重做日志文件记录对数据所做的所有更改，并提供从系统或介质故障中恢复的机制。</p>\n<p>重做日志文件按组(group)进行组织。</p>\n<p>Oracle 数据库至少需要两个组(group)，因为日志组要循环使用。</p>\n<p>组中的每个重做日志称为一个成员(member)。</p>\n<p>重做日志文件的用途</p>\n<p>重做日志文件提供了在发生数据库故障时重做事务的方法。每个事务都同步写入重做日志文件，以便在介质发生故障时提供恢复机制。例外情况包括：使用 NOLOGGING 选项完成的直接加载和直接读取。 这包括尚未提交的事务、撤消段信息以及架构和对象管理语句。重做日志文件用于实例无法恢复尚未写入数据文件的已提交数据等情况。<strong>重做日志文件仅用于恢复</strong></p>\n<h2 id=\"重做日志文件的结构\"><a href=\"#重做日志文件的结构\" class=\"headerlink\" title=\"重做日志文件的结构\"></a>重做日志文件的结构</h2><p><img src=\"/2023/04/03/Oracle-Log-File/Picture2.png\" alt=\"structure\"></p>\n<p>DBA 可以设置 Oracle 数据库来维护联机重做日志文件的副本，以避免由于单点故障而丢失数据库信息。</p>\n<h3 id=\"在线重做日志组-Online-Redo-Log-Groups\"><a href=\"#在线重做日志组-Online-Redo-Log-Groups\" class=\"headerlink\" title=\"在线重做日志组(Online Redo Log Groups)\"></a>在线重做日志组(Online Redo Log Groups)</h3><p>联机重做日志文件的一组相同副本称为联机重做日志组。</p>\n<p>LGWR 后台进程同时将相同的信息写入组中的所有联机重做日志文件。<br>Oracle 服务器至少需要两个联机重做日志文件组才能使数据库正常运行。</p>\n<h3 id=\"在线重做日志成员-Online-Redo-Log-Members\"><a href=\"#在线重做日志成员-Online-Redo-Log-Members\" class=\"headerlink\" title=\"在线重做日志成员(Online Redo Log Members)\"></a>在线重做日志成员(Online Redo Log Members)</h3><p>组中的每个联机重做日志文件称为一个成员。</p>\n<p>组中的每个成员具有相同的日志序列号和相同的大小。每次 Oracle 服务器开始写入日志组时，都会分配日志序列号，以唯一标识每个重做日志文件。当前日志序列号存储在控制文件和所有数据文件的标头中。</p>\n<h3 id=\"创建初始重做日志文件\"><a href=\"#创建初始重做日志文件\" class=\"headerlink\" title=\"创建初始重做日志文件\"></a>创建初始重做日志文件</h3><p>初始联机重做日志组和成员集是在数据库创建期间创建的。</p>\n<p>以下参数限制联机重做日志文件的数量：</p>\n<p>创建数据库命令中的 <strong>MAXLOGFILES</strong> 参数指定联机重做日志组的绝对最大值。</p>\n<p><strong>MAXLOGFILE</strong> 的最大值和默认值取决于您的操作系统。</p>\n<p>创建数据库命令中使用的 <strong>MAXLOGMEMBERS</strong> 参数确定每个组的最大成员数。</p>\n<p><strong>MAXLOG</strong>成员的最大值和默认值取决于您的操作系统。</p>\n<h2 id=\"重做日志的工作原理\"><a href=\"#重做日志的工作原理\" class=\"headerlink\" title=\"重做日志的工作原理\"></a>重做日志的工作原理</h2><ul>\n<li>重做日志以循环(Recycle)方式使用。</li>\n<li>当重做日志文件已满时，LGWR 将移动到下一个日志组。</li>\n<li>这称为log switch</li>\n<li>还会发生检查点操作 </li>\n<li>信息写入控制文件</li>\n</ul>\n<p>Oracle 服务器按顺序将对数据库所做的所有更改记录在重做日志缓冲区中。重做条目从重做日志缓冲区写入 LGWR 进程称为当前联机重做日志组的联机重做日志组之一。</p>\n<p>LGWR在以下情况下写入：</p>\n<ul>\n<li>当事务提交时</li>\n<li>当重做日志缓冲区已满三分之一时</li>\n<li>当重做日志缓冲区中更改的记录超过一兆字节(1MB)时</li>\n<li>在 DBWn 将数据库缓冲区缓存中修改的块写入数据文件之前</li>\n</ul>\n<p>重做日志以循环方式使用。每个重做日志文件组都由每次重用日志时覆盖的日志序列号标识。</p>\n<p>LGWR 按顺序写入联机重做日志文件。 当当前联机重做日志组被填满时，LGWR 开始写入下一个组。这称为日志SWITCH。</p>\n<p>当最后一个可用的联机重做日志文件被填满时，LGWR 将返回到第一个联机重做日志组并再次开始写入。</p>\n<h3 id=\"CHECKPOINT\"><a href=\"#CHECKPOINT\" class=\"headerlink\" title=\"CHECKPOINT\"></a>CHECKPOINT</h3><p>在检查点期间：<br>DBWn 将被检查点的日志覆盖的许多脏数据库缓冲区写入数据文件。DBWn 写入的缓冲区数由 <strong>FAST_START_MTTR_TARGET</strong> 参数（如果指定）确定。</p>\n<p>检查点后台进程 CKPT 更新所有数据文件和控制文件的标头，以反映它已成功完成。<br>可以对数据库中的所有数据文件或仅对特定数据文件执行检查点。<br>例如，在以下情况下会发生检查点：</p>\n<ul>\n<li>在每个日志切换时</li>\n<li>当实例已使用正常、事务或即时选项关闭时</li>\n<li>通过设置初始化参数强制时 FAST_START_MTTR_TARGET。</li>\n<li>DBA 手动请求时</li>\n<li>当 ALTER 表空间 [脱机正常|只读|开始备份]导致对特定数据文件的检查点。<br>如果LOG_CHECKPOINTS_TO_ALERT初始化参数设置为 TRUE，则有关每个检查点的信息将记录在alert_SID.log文件中。此参数的默认值 FALSE 不记录检查点。</li>\n</ul>\n<h2 id=\"获取日志组和成员信息\"><a href=\"#获取日志组和成员信息\" class=\"headerlink\" title=\"获取日志组和成员信息\"></a>获取日志组和成员信息</h2><p>查询两个动态视图</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">V$LOG</span><br><span class=\"line\"></span><br><span class=\"line\">V$LOGFILE</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"手动切换日志-设置检查点\"><a href=\"#手动切换日志-设置检查点\" class=\"headerlink\" title=\"手动切换日志&amp;设置检查点\"></a>手动切换日志&amp;设置检查点</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">SYSTEM</span> SWITCH LOGFILE;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">SYSTEM</span> CHECKPOINT;</span><br></pre></td></tr></table></figure>\n\n\n<p>如前所述，日志切换和检查点在数据库操作中的某些点自动完成，但 DBA 可以强制进行日志切换或检查点。</p>\n<p>可以使用 <strong>FAST_START_MTTR_TARGET</strong> 参数强制检查点。 </p>\n<p>FAST_START_MTTR_TARGET &#x3D; 600 表示实例恢复时间不应超过 600 秒，数据库将根据此目标调整其他参数。</p>\n<p>如果使用FAST_START_MTTR_TARGET，则不得使用FAST_START_IO_TARGET和LOG_CHECKPOINT_TIMEOUT。</p>\n<h2 id=\"添加重做日志组-Online-Redo-Log-Groups\"><a href=\"#添加重做日志组-Online-Redo-Log-Groups\" class=\"headerlink\" title=\"添加重做日志组(Online Redo Log Groups)\"></a>添加重做日志组(Online Redo Log Groups)</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> DATABASE <span class=\"keyword\">ADD</span> LOGFILE <span class=\"keyword\">GROUP</span> <span class=\"number\">3</span> </span><br><span class=\"line\">(</span><br><span class=\"line\"> <span class=\"string\">&#x27;$HOME/ORADATA/u01/log3a.log&#x27;</span>,</span><br><span class=\"line\"> <span class=\"string\">&#x27;$HOME/ORADATA/u02/log3b.log&#x27;</span></span><br><span class=\"line\">)</span><br><span class=\"line\">SIZE <span class=\"number\">10</span>M;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2023/04/03/Oracle-Log-File/P3.png\"></p>\n<p>若要创建新的联机重做日志文件组，请使用以下 SQL 命令：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> DATABASE [database]</span><br><span class=\"line\">\t\t<span class=\"keyword\">ADD</span> LOGFILE [<span class=\"keyword\">GROUP</span> <span class=\"type\">integer</span>] filespec</span><br><span class=\"line\">\t\t[,          [<span class=\"keyword\">GROUP</span> <span class=\"type\">integer</span>] filespec]...]</span><br></pre></td></tr></table></figure>\n\n<p>您可以使用文件规范指定成员的名称和位置。可以为每个重做日志文件组选择 GROUP 参数的值。如果省略此参数，Oracle 服务器将自动生成其值。</p>\n<h2 id=\"添加重做日志成员-Online-Redo-Log-Members\"><a href=\"#添加重做日志成员-Online-Redo-Log-Members\" class=\"headerlink\" title=\"添加重做日志成员(Online Redo Log Members)\"></a>添加重做日志成员(Online Redo Log Members)</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> DATABASE <span class=\"keyword\">ADD</span> LOGFILE <span class=\"keyword\">MEMBER</span></span><br><span class=\"line\"><span class=\"string\">&#x27;$HOME/ORADATA/u04/log1c.rdo&#x27;</span> <span class=\"keyword\">TO</span> <span class=\"keyword\">GROUP</span> <span class=\"number\">1</span>,</span><br><span class=\"line\"><span class=\"string\">&#x27;$HOME/ORADATA/u04/log2c.rdo&#x27;</span> <span class=\"keyword\">TO</span> <span class=\"keyword\">GROUP</span> <span class=\"number\">2</span>,</span><br><span class=\"line\"><span class=\"string\">&#x27;$HOME/ORADATA/u04/log3c.rdo&#x27;</span> <span class=\"keyword\">TO</span> <span class=\"keyword\">GROUP</span> <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/04/03/Oracle-Log-File/P4.png\"></p>\n<p>可以使用以下命令将新成员添加到现有重做日志文件组：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> DATABASE [database]</span><br><span class=\"line\">  <span class=\"keyword\">ADD</span> LOGFILE <span class=\"keyword\">MEMBER</span></span><br><span class=\"line\">  [     <span class=\"string\">&#x27;filename&#x27;</span> [REUSE]</span><br><span class=\"line\">      [, <span class=\"string\">&#x27;filename&#x27;</span> [REUSE]]...</span><br><span class=\"line\">  <span class=\"keyword\">TO</span> &#123;<span class=\"keyword\">GROUP</span> <span class=\"type\">integer</span></span><br><span class=\"line\">      <span class=\"operator\">|</span>(<span class=\"string\">&#x27;filename&#x27;</span>[, <span class=\"string\">&#x27;filename&#x27;</span>]...)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  ]...</span><br></pre></td></tr></table></figure>\n\n<p>使用日志文件成员的完全指定名称;否则，将在数据库服务器的缺省目录中创建文件。<br>如果文件已存在，则它必须具有相同的大小，并且必须指定“REUSE”选项。您可以通过指定组的一个或多个成员或指定组编号来标识目标组。</p>\n<h2 id=\"删除重做日志组-Online-Redo-Log-Groups\"><a href=\"#删除重做日志组-Online-Redo-Log-Groups\" class=\"headerlink\" title=\"删除重做日志组(Online Redo Log Groups)\"></a>删除重做日志组(Online Redo Log Groups)</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> DATABASE <span class=\"keyword\">DROP</span> LOGFILE <span class=\"keyword\">GROUP</span> <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2023/04/03/Oracle-Log-File/P%25.png\"></p>\n<p>要增加或减少联机重做日志组的大小，请添加新的联机重做日志组（具有新大小），然后删除旧日志组。</p>\n<p>可以使用以下命令删除整个联机重做日志组：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> DATABASE [database]</span><br><span class=\"line\"><span class=\"keyword\">DROP</span> LOGFILE &#123;<span class=\"keyword\">GROUP</span> <span class=\"type\">integer</span><span class=\"operator\">|</span>(<span class=\"string\">&#x27;filename&#x27;</span>[, <span class=\"string\">&#x27;filename&#x27;</span>]...)&#125;</span><br><span class=\"line\">      [,&#123;<span class=\"keyword\">GROUP</span> <span class=\"type\">integer</span><span class=\"operator\">|</span>(<span class=\"string\">&#x27;filename&#x27;</span>[, <span class=\"string\">&#x27;filename&#x27;</span>]...)&#125;]...</span><br></pre></td></tr></table></figure>\n<h3 id=\"限制\"><a href=\"#限制\" class=\"headerlink\" title=\"限制\"></a>限制</h3><ul>\n<li>一个实例至少需要两组在线重做日志文件。</li>\n<li>无法删除活动组或当前组。</li>\n<li>删除联机重做日志组时，不会删除操作系统文件。</li>\n</ul>\n<h2 id=\"删除重做日志成员-Online-Redo-Log-Members\"><a href=\"#删除重做日志成员-Online-Redo-Log-Members\" class=\"headerlink\" title=\"删除重做日志成员(Online Redo Log Members)\"></a>删除重做日志成员(Online Redo Log Members)</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> DATABASE <span class=\"keyword\">DROP</span> LOGFILE <span class=\"keyword\">MEMBER</span> <span class=\"string\">&#x27;$HOME/ORADATA/u04/log3c.rdo&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/04/03/Oracle-Log-File/P6.png\"></p>\n<p>您可能希望删除联机重做日志成员，因为它无效。如果要删除一个或多个特定的联机重做日志成员，请使用以下“更改数据库删除日志文件成员”命令：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> DATABASE [database]</span><br><span class=\"line\">\t<span class=\"keyword\">DROP</span> LOGFILE <span class=\"keyword\">MEMBER</span> <span class=\"string\">&#x27;filename&#x27;</span>[, <span class=\"string\">&#x27;filename&#x27;</span>]...</span><br></pre></td></tr></table></figure>\n<h3 id=\"限制-1\"><a href=\"#限制-1\" class=\"headerlink\" title=\"限制\"></a>限制</h3><ul>\n<li>如果要删除的成员是组中的最后一个有效成员，则无法删除该成员。</li>\n<li>如果组是最新的，则必须先强制切换日志文件，然后才能删除成员。</li>\n<li>如果数据库在 ARCHIVELOG 模式下运行，并且未归档成员所属的日志文件组，则无法删除该成员。</li>\n<li>删除联机重做日志成员时，不会删除操作系统文件。</li>\n</ul>\n<h2 id=\"清除联机重做日志文件-online-redo-log-files\"><a href=\"#清除联机重做日志文件-online-redo-log-files\" class=\"headerlink\" title=\"清除联机重做日志文件 (online redo log files)\"></a>清除联机重做日志文件 (online redo log files)</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> DATABASE CLEAR LOGFILE <span class=\"string\">&#x27;$HOME/ORADATA/u01/log2a.rdo&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>如果重做日志文件在所有成员中都已损坏，则DBA 可以通过使用 ALTER DATABASE CLEAR 日志文件重新初始化这些日志文件来解决此问题：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> DATABASE [database]</span><br><span class=\"line\">CLEAR [UNARCHIVED] LOGFILE</span><br><span class=\"line\">\t &#123;<span class=\"keyword\">GROUP</span> <span class=\"type\">integer</span><span class=\"operator\">|</span>(<span class=\"string\">&#x27;filename&#x27;</span>[, <span class=\"string\">&#x27;filename&#x27;</span>]...)&#125;</span><br><span class=\"line\">\t[,&#123;<span class=\"keyword\">GROUP</span> <span class=\"type\">integer</span><span class=\"operator\">|</span>(<span class=\"string\">&#x27;filename&#x27;</span>[, <span class=\"string\">&#x27;filename&#x27;</span>]...)&#125;]...</span><br></pre></td></tr></table></figure>\n\n<p>使用此命令等效于添加和删除联机重做日志文件。但是，即使只有两个日志组，每个日志组一个文件，即使清除的组可用但未存档，也可以发出此命令。</p>\n<h3 id=\"限制-2\"><a href=\"#限制-2\" class=\"headerlink\" title=\"限制\"></a>限制</h3><ul>\n<li>您可以清除联机重做日志文件，无论它是否已存档。但是，如果未存档，则必须包含关键字“<strong>UNARCHIVED</strong>”。如果恢复需要联机重做日志文件，则会导致备份不可用。</li>\n<li>重新定位和重命名重做日志文件</li>\n<li>可以通过添加新日志文件并删除旧日志文件来更改联机重做日志文件的位置。 另一种方法“更改数据库重命名文件”可用，但这需要将数据库置于 MOUNT 模式。 因此，添加新的和删除旧的要容易得多。</li>\n</ul>\n<h3 id=\"联机重做日志文件数\"><a href=\"#联机重做日志文件数\" class=\"headerlink\" title=\"联机重做日志文件数\"></a>联机重做日志文件数</h3><p>若要确定数据库实例的适当数量的联机重做日志文件，必须测试不同的配置。<br>在某些情况下，一个数据库实例可能只需要两个组。在其他情况下，数据库实例可能需要其他组来保证这些组始终可用于 LGWR。例如，如果 LGWR 跟踪文件或警报文件中的消息指示 LGWR 经常因为检查点尚未完成或组尚未存档而必须等待组，则需要添加组。</p>\n<p>尽管使用 Oracle 服务器多路复用组可以包含不同数量的成员，但请尝试构建对称配置。非对称配置应只是异常情况（如磁盘故障）的临时结果。</p>\n<h3 id=\"联机重做日志文件的位置\"><a href=\"#联机重做日志文件的位置\" class=\"headerlink\" title=\"联机重做日志文件的位置\"></a>联机重做日志文件的位置</h3><p>多路复用联机重做日志文件时，请将组的成员放在不同的磁盘上。通过执行此操作，即使一个成员不可用但其他成员可用，实例也不会关闭。<br>将归档日志文件和联机重做日志文件分开放在不同的磁盘上，以减少 ARCn 和 LGWR 后台进程之间的争用。</p>\n<h2 id=\"控制归档\"><a href=\"#控制归档\" class=\"headerlink\" title=\"控制归档\"></a>控制归档</h2><p>非归档模式 -&gt; 归档模式</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查询归档信息</span><br><span class=\"line\">archive log list</span><br><span class=\"line\"></span><br><span class=\"line\">shutdown immediate（注意不能shutdown abort）</span><br><span class=\"line\"></span><br><span class=\"line\">startup mount</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">alter</span> database archivelog;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">alter</span> database <span class=\"keyword\">open</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">归档模式 <span class=\"operator\">-</span><span class=\"operator\">&gt;</span> 非归档模式</span><br><span class=\"line\"></span><br><span class=\"line\">archive log list （查询归档信息）</span><br><span class=\"line\"></span><br><span class=\"line\">shutdown immediate</span><br><span class=\"line\"></span><br><span class=\"line\">startup mount</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">alter</span> database noarchivelog;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">alter</span> database <span class=\"keyword\">open</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在实例启动后，启用自动归档功能</span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">system</span> archive log <span class=\"keyword\">start</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">设置最大归档进程数目</span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">system</span> <span class=\"keyword\">set</span> log_archive_max_processes<span class=\"operator\">=</span><span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">在实例启动后，禁用自动归档功能</span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">system</span> archive log stop;</span><br><span class=\"line\"></span><br><span class=\"line\">执行手工归档</span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">system</span> archive log <span class=\"keyword\">all</span>;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"cover_type":"img","excerpt":"<h1 id=\"Oracle-Log-File\"><a href=\"#Oracle-Log-File\" class=\"headerlink\" title=\"Oracle Log File\"></a>Oracle Log File</h1><p><img src=\"/2023/04/03/Oracle-Log-File/Picture1.png\" alt=\"log image\"></p>","more":"<h2 id=\"重做日志文件-Redo-Log-Files\"><a href=\"#重做日志文件-Redo-Log-Files\" class=\"headerlink\" title=\"重做日志文件(Redo Log Files)\"></a>重做日志文件(Redo Log Files)</h2><p>重做日志文件记录对数据所做的所有更改，并提供从系统或介质故障中恢复的机制。</p>\n<p>重做日志文件按组(group)进行组织。</p>\n<p>Oracle 数据库至少需要两个组(group)，因为日志组要循环使用。</p>\n<p>组中的每个重做日志称为一个成员(member)。</p>\n<p>重做日志文件的用途</p>\n<p>重做日志文件提供了在发生数据库故障时重做事务的方法。每个事务都同步写入重做日志文件，以便在介质发生故障时提供恢复机制。例外情况包括：使用 NOLOGGING 选项完成的直接加载和直接读取。 这包括尚未提交的事务、撤消段信息以及架构和对象管理语句。重做日志文件用于实例无法恢复尚未写入数据文件的已提交数据等情况。<strong>重做日志文件仅用于恢复</strong></p>\n<h2 id=\"重做日志文件的结构\"><a href=\"#重做日志文件的结构\" class=\"headerlink\" title=\"重做日志文件的结构\"></a>重做日志文件的结构</h2><p><img src=\"/2023/04/03/Oracle-Log-File/Picture2.png\" alt=\"structure\"></p>\n<p>DBA 可以设置 Oracle 数据库来维护联机重做日志文件的副本，以避免由于单点故障而丢失数据库信息。</p>\n<h3 id=\"在线重做日志组-Online-Redo-Log-Groups\"><a href=\"#在线重做日志组-Online-Redo-Log-Groups\" class=\"headerlink\" title=\"在线重做日志组(Online Redo Log Groups)\"></a>在线重做日志组(Online Redo Log Groups)</h3><p>联机重做日志文件的一组相同副本称为联机重做日志组。</p>\n<p>LGWR 后台进程同时将相同的信息写入组中的所有联机重做日志文件。<br>Oracle 服务器至少需要两个联机重做日志文件组才能使数据库正常运行。</p>\n<h3 id=\"在线重做日志成员-Online-Redo-Log-Members\"><a href=\"#在线重做日志成员-Online-Redo-Log-Members\" class=\"headerlink\" title=\"在线重做日志成员(Online Redo Log Members)\"></a>在线重做日志成员(Online Redo Log Members)</h3><p>组中的每个联机重做日志文件称为一个成员。</p>\n<p>组中的每个成员具有相同的日志序列号和相同的大小。每次 Oracle 服务器开始写入日志组时，都会分配日志序列号，以唯一标识每个重做日志文件。当前日志序列号存储在控制文件和所有数据文件的标头中。</p>\n<h3 id=\"创建初始重做日志文件\"><a href=\"#创建初始重做日志文件\" class=\"headerlink\" title=\"创建初始重做日志文件\"></a>创建初始重做日志文件</h3><p>初始联机重做日志组和成员集是在数据库创建期间创建的。</p>\n<p>以下参数限制联机重做日志文件的数量：</p>\n<p>创建数据库命令中的 <strong>MAXLOGFILES</strong> 参数指定联机重做日志组的绝对最大值。</p>\n<p><strong>MAXLOGFILE</strong> 的最大值和默认值取决于您的操作系统。</p>\n<p>创建数据库命令中使用的 <strong>MAXLOGMEMBERS</strong> 参数确定每个组的最大成员数。</p>\n<p><strong>MAXLOG</strong>成员的最大值和默认值取决于您的操作系统。</p>\n<h2 id=\"重做日志的工作原理\"><a href=\"#重做日志的工作原理\" class=\"headerlink\" title=\"重做日志的工作原理\"></a>重做日志的工作原理</h2><ul>\n<li>重做日志以循环(Recycle)方式使用。</li>\n<li>当重做日志文件已满时，LGWR 将移动到下一个日志组。</li>\n<li>这称为log switch</li>\n<li>还会发生检查点操作 </li>\n<li>信息写入控制文件</li>\n</ul>\n<p>Oracle 服务器按顺序将对数据库所做的所有更改记录在重做日志缓冲区中。重做条目从重做日志缓冲区写入 LGWR 进程称为当前联机重做日志组的联机重做日志组之一。</p>\n<p>LGWR在以下情况下写入：</p>\n<ul>\n<li>当事务提交时</li>\n<li>当重做日志缓冲区已满三分之一时</li>\n<li>当重做日志缓冲区中更改的记录超过一兆字节(1MB)时</li>\n<li>在 DBWn 将数据库缓冲区缓存中修改的块写入数据文件之前</li>\n</ul>\n<p>重做日志以循环方式使用。每个重做日志文件组都由每次重用日志时覆盖的日志序列号标识。</p>\n<p>LGWR 按顺序写入联机重做日志文件。 当当前联机重做日志组被填满时，LGWR 开始写入下一个组。这称为日志SWITCH。</p>\n<p>当最后一个可用的联机重做日志文件被填满时，LGWR 将返回到第一个联机重做日志组并再次开始写入。</p>\n<h3 id=\"CHECKPOINT\"><a href=\"#CHECKPOINT\" class=\"headerlink\" title=\"CHECKPOINT\"></a>CHECKPOINT</h3><p>在检查点期间：<br>DBWn 将被检查点的日志覆盖的许多脏数据库缓冲区写入数据文件。DBWn 写入的缓冲区数由 <strong>FAST_START_MTTR_TARGET</strong> 参数（如果指定）确定。</p>\n<p>检查点后台进程 CKPT 更新所有数据文件和控制文件的标头，以反映它已成功完成。<br>可以对数据库中的所有数据文件或仅对特定数据文件执行检查点。<br>例如，在以下情况下会发生检查点：</p>\n<ul>\n<li>在每个日志切换时</li>\n<li>当实例已使用正常、事务或即时选项关闭时</li>\n<li>通过设置初始化参数强制时 FAST_START_MTTR_TARGET。</li>\n<li>DBA 手动请求时</li>\n<li>当 ALTER 表空间 [脱机正常|只读|开始备份]导致对特定数据文件的检查点。<br>如果LOG_CHECKPOINTS_TO_ALERT初始化参数设置为 TRUE，则有关每个检查点的信息将记录在alert_SID.log文件中。此参数的默认值 FALSE 不记录检查点。</li>\n</ul>\n<h2 id=\"获取日志组和成员信息\"><a href=\"#获取日志组和成员信息\" class=\"headerlink\" title=\"获取日志组和成员信息\"></a>获取日志组和成员信息</h2><p>查询两个动态视图</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">V$LOG</span><br><span class=\"line\"></span><br><span class=\"line\">V$LOGFILE</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"手动切换日志-设置检查点\"><a href=\"#手动切换日志-设置检查点\" class=\"headerlink\" title=\"手动切换日志&amp;设置检查点\"></a>手动切换日志&amp;设置检查点</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">SYSTEM</span> SWITCH LOGFILE;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">SYSTEM</span> CHECKPOINT;</span><br></pre></td></tr></table></figure>\n\n\n<p>如前所述，日志切换和检查点在数据库操作中的某些点自动完成，但 DBA 可以强制进行日志切换或检查点。</p>\n<p>可以使用 <strong>FAST_START_MTTR_TARGET</strong> 参数强制检查点。 </p>\n<p>FAST_START_MTTR_TARGET &#x3D; 600 表示实例恢复时间不应超过 600 秒，数据库将根据此目标调整其他参数。</p>\n<p>如果使用FAST_START_MTTR_TARGET，则不得使用FAST_START_IO_TARGET和LOG_CHECKPOINT_TIMEOUT。</p>\n<h2 id=\"添加重做日志组-Online-Redo-Log-Groups\"><a href=\"#添加重做日志组-Online-Redo-Log-Groups\" class=\"headerlink\" title=\"添加重做日志组(Online Redo Log Groups)\"></a>添加重做日志组(Online Redo Log Groups)</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> DATABASE <span class=\"keyword\">ADD</span> LOGFILE <span class=\"keyword\">GROUP</span> <span class=\"number\">3</span> </span><br><span class=\"line\">(</span><br><span class=\"line\"> <span class=\"string\">&#x27;$HOME/ORADATA/u01/log3a.log&#x27;</span>,</span><br><span class=\"line\"> <span class=\"string\">&#x27;$HOME/ORADATA/u02/log3b.log&#x27;</span></span><br><span class=\"line\">)</span><br><span class=\"line\">SIZE <span class=\"number\">10</span>M;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2023/04/03/Oracle-Log-File/P3.png\"></p>\n<p>若要创建新的联机重做日志文件组，请使用以下 SQL 命令：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> DATABASE [database]</span><br><span class=\"line\">\t\t<span class=\"keyword\">ADD</span> LOGFILE [<span class=\"keyword\">GROUP</span> <span class=\"type\">integer</span>] filespec</span><br><span class=\"line\">\t\t[,          [<span class=\"keyword\">GROUP</span> <span class=\"type\">integer</span>] filespec]...]</span><br></pre></td></tr></table></figure>\n\n<p>您可以使用文件规范指定成员的名称和位置。可以为每个重做日志文件组选择 GROUP 参数的值。如果省略此参数，Oracle 服务器将自动生成其值。</p>\n<h2 id=\"添加重做日志成员-Online-Redo-Log-Members\"><a href=\"#添加重做日志成员-Online-Redo-Log-Members\" class=\"headerlink\" title=\"添加重做日志成员(Online Redo Log Members)\"></a>添加重做日志成员(Online Redo Log Members)</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> DATABASE <span class=\"keyword\">ADD</span> LOGFILE <span class=\"keyword\">MEMBER</span></span><br><span class=\"line\"><span class=\"string\">&#x27;$HOME/ORADATA/u04/log1c.rdo&#x27;</span> <span class=\"keyword\">TO</span> <span class=\"keyword\">GROUP</span> <span class=\"number\">1</span>,</span><br><span class=\"line\"><span class=\"string\">&#x27;$HOME/ORADATA/u04/log2c.rdo&#x27;</span> <span class=\"keyword\">TO</span> <span class=\"keyword\">GROUP</span> <span class=\"number\">2</span>,</span><br><span class=\"line\"><span class=\"string\">&#x27;$HOME/ORADATA/u04/log3c.rdo&#x27;</span> <span class=\"keyword\">TO</span> <span class=\"keyword\">GROUP</span> <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/04/03/Oracle-Log-File/P4.png\"></p>\n<p>可以使用以下命令将新成员添加到现有重做日志文件组：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> DATABASE [database]</span><br><span class=\"line\">  <span class=\"keyword\">ADD</span> LOGFILE <span class=\"keyword\">MEMBER</span></span><br><span class=\"line\">  [     <span class=\"string\">&#x27;filename&#x27;</span> [REUSE]</span><br><span class=\"line\">      [, <span class=\"string\">&#x27;filename&#x27;</span> [REUSE]]...</span><br><span class=\"line\">  <span class=\"keyword\">TO</span> &#123;<span class=\"keyword\">GROUP</span> <span class=\"type\">integer</span></span><br><span class=\"line\">      <span class=\"operator\">|</span>(<span class=\"string\">&#x27;filename&#x27;</span>[, <span class=\"string\">&#x27;filename&#x27;</span>]...)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  ]...</span><br></pre></td></tr></table></figure>\n\n<p>使用日志文件成员的完全指定名称;否则，将在数据库服务器的缺省目录中创建文件。<br>如果文件已存在，则它必须具有相同的大小，并且必须指定“REUSE”选项。您可以通过指定组的一个或多个成员或指定组编号来标识目标组。</p>\n<h2 id=\"删除重做日志组-Online-Redo-Log-Groups\"><a href=\"#删除重做日志组-Online-Redo-Log-Groups\" class=\"headerlink\" title=\"删除重做日志组(Online Redo Log Groups)\"></a>删除重做日志组(Online Redo Log Groups)</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> DATABASE <span class=\"keyword\">DROP</span> LOGFILE <span class=\"keyword\">GROUP</span> <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2023/04/03/Oracle-Log-File/P%25.png\"></p>\n<p>要增加或减少联机重做日志组的大小，请添加新的联机重做日志组（具有新大小），然后删除旧日志组。</p>\n<p>可以使用以下命令删除整个联机重做日志组：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> DATABASE [database]</span><br><span class=\"line\"><span class=\"keyword\">DROP</span> LOGFILE &#123;<span class=\"keyword\">GROUP</span> <span class=\"type\">integer</span><span class=\"operator\">|</span>(<span class=\"string\">&#x27;filename&#x27;</span>[, <span class=\"string\">&#x27;filename&#x27;</span>]...)&#125;</span><br><span class=\"line\">      [,&#123;<span class=\"keyword\">GROUP</span> <span class=\"type\">integer</span><span class=\"operator\">|</span>(<span class=\"string\">&#x27;filename&#x27;</span>[, <span class=\"string\">&#x27;filename&#x27;</span>]...)&#125;]...</span><br></pre></td></tr></table></figure>\n<h3 id=\"限制\"><a href=\"#限制\" class=\"headerlink\" title=\"限制\"></a>限制</h3><ul>\n<li>一个实例至少需要两组在线重做日志文件。</li>\n<li>无法删除活动组或当前组。</li>\n<li>删除联机重做日志组时，不会删除操作系统文件。</li>\n</ul>\n<h2 id=\"删除重做日志成员-Online-Redo-Log-Members\"><a href=\"#删除重做日志成员-Online-Redo-Log-Members\" class=\"headerlink\" title=\"删除重做日志成员(Online Redo Log Members)\"></a>删除重做日志成员(Online Redo Log Members)</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> DATABASE <span class=\"keyword\">DROP</span> LOGFILE <span class=\"keyword\">MEMBER</span> <span class=\"string\">&#x27;$HOME/ORADATA/u04/log3c.rdo&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/04/03/Oracle-Log-File/P6.png\"></p>\n<p>您可能希望删除联机重做日志成员，因为它无效。如果要删除一个或多个特定的联机重做日志成员，请使用以下“更改数据库删除日志文件成员”命令：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> DATABASE [database]</span><br><span class=\"line\">\t<span class=\"keyword\">DROP</span> LOGFILE <span class=\"keyword\">MEMBER</span> <span class=\"string\">&#x27;filename&#x27;</span>[, <span class=\"string\">&#x27;filename&#x27;</span>]...</span><br></pre></td></tr></table></figure>\n<h3 id=\"限制-1\"><a href=\"#限制-1\" class=\"headerlink\" title=\"限制\"></a>限制</h3><ul>\n<li>如果要删除的成员是组中的最后一个有效成员，则无法删除该成员。</li>\n<li>如果组是最新的，则必须先强制切换日志文件，然后才能删除成员。</li>\n<li>如果数据库在 ARCHIVELOG 模式下运行，并且未归档成员所属的日志文件组，则无法删除该成员。</li>\n<li>删除联机重做日志成员时，不会删除操作系统文件。</li>\n</ul>\n<h2 id=\"清除联机重做日志文件-online-redo-log-files\"><a href=\"#清除联机重做日志文件-online-redo-log-files\" class=\"headerlink\" title=\"清除联机重做日志文件 (online redo log files)\"></a>清除联机重做日志文件 (online redo log files)</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> DATABASE CLEAR LOGFILE <span class=\"string\">&#x27;$HOME/ORADATA/u01/log2a.rdo&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>如果重做日志文件在所有成员中都已损坏，则DBA 可以通过使用 ALTER DATABASE CLEAR 日志文件重新初始化这些日志文件来解决此问题：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> DATABASE [database]</span><br><span class=\"line\">CLEAR [UNARCHIVED] LOGFILE</span><br><span class=\"line\">\t &#123;<span class=\"keyword\">GROUP</span> <span class=\"type\">integer</span><span class=\"operator\">|</span>(<span class=\"string\">&#x27;filename&#x27;</span>[, <span class=\"string\">&#x27;filename&#x27;</span>]...)&#125;</span><br><span class=\"line\">\t[,&#123;<span class=\"keyword\">GROUP</span> <span class=\"type\">integer</span><span class=\"operator\">|</span>(<span class=\"string\">&#x27;filename&#x27;</span>[, <span class=\"string\">&#x27;filename&#x27;</span>]...)&#125;]...</span><br></pre></td></tr></table></figure>\n\n<p>使用此命令等效于添加和删除联机重做日志文件。但是，即使只有两个日志组，每个日志组一个文件，即使清除的组可用但未存档，也可以发出此命令。</p>\n<h3 id=\"限制-2\"><a href=\"#限制-2\" class=\"headerlink\" title=\"限制\"></a>限制</h3><ul>\n<li>您可以清除联机重做日志文件，无论它是否已存档。但是，如果未存档，则必须包含关键字“<strong>UNARCHIVED</strong>”。如果恢复需要联机重做日志文件，则会导致备份不可用。</li>\n<li>重新定位和重命名重做日志文件</li>\n<li>可以通过添加新日志文件并删除旧日志文件来更改联机重做日志文件的位置。 另一种方法“更改数据库重命名文件”可用，但这需要将数据库置于 MOUNT 模式。 因此，添加新的和删除旧的要容易得多。</li>\n</ul>\n<h3 id=\"联机重做日志文件数\"><a href=\"#联机重做日志文件数\" class=\"headerlink\" title=\"联机重做日志文件数\"></a>联机重做日志文件数</h3><p>若要确定数据库实例的适当数量的联机重做日志文件，必须测试不同的配置。<br>在某些情况下，一个数据库实例可能只需要两个组。在其他情况下，数据库实例可能需要其他组来保证这些组始终可用于 LGWR。例如，如果 LGWR 跟踪文件或警报文件中的消息指示 LGWR 经常因为检查点尚未完成或组尚未存档而必须等待组，则需要添加组。</p>\n<p>尽管使用 Oracle 服务器多路复用组可以包含不同数量的成员，但请尝试构建对称配置。非对称配置应只是异常情况（如磁盘故障）的临时结果。</p>\n<h3 id=\"联机重做日志文件的位置\"><a href=\"#联机重做日志文件的位置\" class=\"headerlink\" title=\"联机重做日志文件的位置\"></a>联机重做日志文件的位置</h3><p>多路复用联机重做日志文件时，请将组的成员放在不同的磁盘上。通过执行此操作，即使一个成员不可用但其他成员可用，实例也不会关闭。<br>将归档日志文件和联机重做日志文件分开放在不同的磁盘上，以减少 ARCn 和 LGWR 后台进程之间的争用。</p>\n<h2 id=\"控制归档\"><a href=\"#控制归档\" class=\"headerlink\" title=\"控制归档\"></a>控制归档</h2><p>非归档模式 -&gt; 归档模式</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查询归档信息</span><br><span class=\"line\">archive log list</span><br><span class=\"line\"></span><br><span class=\"line\">shutdown immediate（注意不能shutdown abort）</span><br><span class=\"line\"></span><br><span class=\"line\">startup mount</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">alter</span> database archivelog;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">alter</span> database <span class=\"keyword\">open</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">归档模式 <span class=\"operator\">-</span><span class=\"operator\">&gt;</span> 非归档模式</span><br><span class=\"line\"></span><br><span class=\"line\">archive log list （查询归档信息）</span><br><span class=\"line\"></span><br><span class=\"line\">shutdown immediate</span><br><span class=\"line\"></span><br><span class=\"line\">startup mount</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">alter</span> database noarchivelog;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">alter</span> database <span class=\"keyword\">open</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在实例启动后，启用自动归档功能</span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">system</span> archive log <span class=\"keyword\">start</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">设置最大归档进程数目</span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">system</span> <span class=\"keyword\">set</span> log_archive_max_processes<span class=\"operator\">=</span><span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">在实例启动后，禁用自动归档功能</span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">system</span> archive log stop;</span><br><span class=\"line\"></span><br><span class=\"line\">执行手工归档</span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">system</span> archive log <span class=\"keyword\">all</span>;</span><br></pre></td></tr></table></figure>"},{"title":"Oracle Object","date":"2023-04-09T01:12:56.000Z","_content":"\n# Oracle Object\n\n## 表\n\n```sql\ncreate table t_<name>;\nselect * from t_<name>;\ndrop table t_<name>;\n```\n\n### 常用数据类型\n\n**varchar2(n)** 可变长的字符串  \n\n    具体定义时指明最大长度n byte，最大字节数都是4000（UTF8 1333个汉字）\n\n**number(precision,scale)** 可变长的数值列，允许浮点数、正值及负值  \n\n    precision [1,38] 是所有有效数字的位数（从左边第一个不为0的数算起，小数点和负号不计入有效位数）\n   scale [-84,127] 是小数点以后的位数，多出来的位数四舍五入\n\n**date 时间日期** \n\n    包括：世纪、年、月、日、时、分、秒\n    sysdate\n    TO_CHAR(SYSDATE, 'yyyy-mm-dd hh24:mi:ss')\n    TO_DATE('2002-10-09 13:23:44', 'yyyy-mm-dd hh24:mi:ss')\n\n**blob** 二进制数据 用来保存较大的图形文件或带格式的文本文件\n\n**clob** 字符型数据\n\n## 视图\n\n视图以经过定制的方式显示来自一个或多个表的数据\n  提供了另外一种级别的表安全性\n  隐藏的数据的复杂性\n  简化的用户的SQL命令\n  隔离基表结构的改变\n  通过重命名列，从另一个角度提供数据\n\n```sql\ncreate view v_<name> as\nselect ...\n\nCREATE [OR REPLACE] [FORCE] VIEW\n  view_name [(alias[, alias]...)] \nAS select_statement\n[WITH CHECK OPTION]\n[WITH READ ONLY];\n```\n视图上的DML语句有如下限制：\n  只能修改一个底层的基表\n  如果修改违反了基表的约束条件，则无法更新视图\n  如果视图包含连接操作符、DISTINCT 关键字、集合操作符、聚合函数或 GROUP BY 子句，则将无法更新视图\n  如果视图包含伪列或表达式，则将无法更新视图\n\n\n\n## 同义词\n\n同义词是现有对象的一个别名\n  简化SQL语句\n  隐藏对象的名称和所有者\n  提供对对象的公共访问\n  公有同义词 可被所有的数据库用户访问。\n  私有同义词 只能在其模式内访问，且不能与当前模式的对象同名\n\n```sql\nCREATE SYNONYM emp FOR SCOTT.emp;\n\nCREATE PUBLIC SYNONYM s_emp FOR SCOTT.emp;\n\nCREATE OR REPLACE SYNONYM s_emp FOR SCOTT.emp;\n\nDROP SYNONYM emp; \n\nDROP PUBLIC SYNONYM s_emp; \n```\n\n## 序列\n\n序列是用于生成唯一、连续序号的对象\n序列可以是升序的，也可以是降序的\n\n通过序列的伪列来访问序列的值\n  NEXTVAL 返回序列的下一个值\n  CURRVAL 返回序列的当前值\n\n\n```sql\n-- 创建\nCREATE SEQUENCE seq_emp\n START WITH 10\n INCREMENT BY 10\n MAXVALUE 2000\n MINVALUE 10\n NOCYCLE\n CACHE 10;\n\n-- 使用\nINSERT INTO emp (empno, ename, job) \n     VALUES ( seq_emp.NEXTVAL, 'quanwei', 'sale');\n\nSELECT seq_emp.CURRVAL FROM dual;\n\n-- 不能更改序列的START WITH参数\nALTER SEQUENCE seq_emp MAXVALUE 5000 CYCLE;\n\n-- 删除\nDROP SEQUENCE seq_emp;\n```\n\n相关参数:\n\n**increment by**：序列每次增加的值，负数表示递减，缺省值为1；\n\n**start with**：序列的初始值，缺省值为1；\n\n**maxvalue**：序列可生成的最大值，缺省值为nomaxvalue，即不设置最大值；系统能产生的最大值为$10^{27}$；\n\n**minvalue**：序列可生成的最小值，缺省值为nominvalue；\n\n**cycle**：定义当序列达到最大/小值后是否循环，缺省值为不循环；**nocycle**：不循环；cycle：循环；如果不使用循环达到限制值后继续产生新值就会出错；使用循环达到最大值后的下一个值为1，和start with设置的值无关，递增还是increment by设置的值；\n\n**cache**：定义缓存序列的个数，缺省值为20，**nocache**表示不设置缓存；使用缓存可以提高序列的性能，但数据库出错时会造成数据丢失使序列不连续；\n\n\n\n## 索引\n\n索引是Oracle自动维护的一个可选结构\n  用以提高 SQL 语句执行的性能\n  减少磁盘I/O\n  在逻辑上和物理上都独立于表的数据\n\n索引应该在SQL语句的\"where\"部分涉及的表列(也称谓词)建立\n\n如果表中列的值占该表中行的20%以内，这个表列就可以作为候选索引表列\n\n如果在SQL语句谓词中多个表列被一起连续引用，则应该考虑将这些表列一起放在一个索引内\n\n\n\n类型：\n  B树索引(默认类型)\n\n  位图索引\n\n  HASH索引\n\n  索引组织表索引\n\n  反转键(reverse key)索引\n\n  基于函数的索引\n\n  分区索引(本地和全局索引)\n\n  位图连接索引\n\n不应该建索引:\n  对于那些在查询中很少使用或者参考的列不应该创建索引\n  对于那些只有很少数据值的列也不应该增加索引\n  对于那些定义为blob数据类型的列不应该增加索引\n  当修改性能远远大于检索性能时，不应该创建索引\n\n\n\n```sql\n\n-- 创建索引\ncreate index [unique | bitmap] [schema.]<idx_name> \n  on [schema.]<tab_name>(<col1>[,<clo2>,...])\n  tablespace <tbs_name>;\n\n-- 查询索引\nselect t.*\n  from dba_indexes t\nwhere t.owner = 'SCOTT'\n  and t.table_name = 'STUDENT_INFO';\n\n-- 修改索引名称 idx_si_sname -> idx_si_sname_new\nalter index [schema.]<idx_name>  rename to <new_idx_name>;\n\n-- 修改索引为无效\nalter index [schema.]<idx_name> unusable;\n\n-- 重建索引\nalter index [schema.]<idx_name> rebuild online;\n\n-- 删除索引\ndrop index [schema.]<idx_name>;\n```\n\n\n## 数据库对象命名规范\n\n| 类型     | 前缀 |\n| -------- | ---- |\n| 表       | t_   |\n| 视图     | v_   |\n| 同义词   | s_   |\n| 簇表     | c_   |\n| 序列     | seq_ |\n| 存储过程 | p_   |\n| 函数     | f_   |\n| 包       | pkg_ |\n| 类       | tp_  |\n| 主键     | pk_  |\n| 外键     | fk_  |\n| 普通索引 | x_   |\n| 唯一索引 | ux_  |\n| 位图索引 | bx_  |\n| 函数索引 | fx_  |","source":"_posts/Oracle-Object.md","raw":"---\ntitle: Oracle Object\ndate: 2023-04-09 09:12:56\ntags: \n- Database\n- Oracle\n---\n\n# Oracle Object\n\n## 表\n\n```sql\ncreate table t_<name>;\nselect * from t_<name>;\ndrop table t_<name>;\n```\n\n### 常用数据类型\n\n**varchar2(n)** 可变长的字符串  \n\n    具体定义时指明最大长度n byte，最大字节数都是4000（UTF8 1333个汉字）\n\n**number(precision,scale)** 可变长的数值列，允许浮点数、正值及负值  \n\n    precision [1,38] 是所有有效数字的位数（从左边第一个不为0的数算起，小数点和负号不计入有效位数）\n   scale [-84,127] 是小数点以后的位数，多出来的位数四舍五入\n\n**date 时间日期** \n\n    包括：世纪、年、月、日、时、分、秒\n    sysdate\n    TO_CHAR(SYSDATE, 'yyyy-mm-dd hh24:mi:ss')\n    TO_DATE('2002-10-09 13:23:44', 'yyyy-mm-dd hh24:mi:ss')\n\n**blob** 二进制数据 用来保存较大的图形文件或带格式的文本文件\n\n**clob** 字符型数据\n\n## 视图\n\n视图以经过定制的方式显示来自一个或多个表的数据\n  提供了另外一种级别的表安全性\n  隐藏的数据的复杂性\n  简化的用户的SQL命令\n  隔离基表结构的改变\n  通过重命名列，从另一个角度提供数据\n\n```sql\ncreate view v_<name> as\nselect ...\n\nCREATE [OR REPLACE] [FORCE] VIEW\n  view_name [(alias[, alias]...)] \nAS select_statement\n[WITH CHECK OPTION]\n[WITH READ ONLY];\n```\n视图上的DML语句有如下限制：\n  只能修改一个底层的基表\n  如果修改违反了基表的约束条件，则无法更新视图\n  如果视图包含连接操作符、DISTINCT 关键字、集合操作符、聚合函数或 GROUP BY 子句，则将无法更新视图\n  如果视图包含伪列或表达式，则将无法更新视图\n\n\n\n## 同义词\n\n同义词是现有对象的一个别名\n  简化SQL语句\n  隐藏对象的名称和所有者\n  提供对对象的公共访问\n  公有同义词 可被所有的数据库用户访问。\n  私有同义词 只能在其模式内访问，且不能与当前模式的对象同名\n\n```sql\nCREATE SYNONYM emp FOR SCOTT.emp;\n\nCREATE PUBLIC SYNONYM s_emp FOR SCOTT.emp;\n\nCREATE OR REPLACE SYNONYM s_emp FOR SCOTT.emp;\n\nDROP SYNONYM emp; \n\nDROP PUBLIC SYNONYM s_emp; \n```\n\n## 序列\n\n序列是用于生成唯一、连续序号的对象\n序列可以是升序的，也可以是降序的\n\n通过序列的伪列来访问序列的值\n  NEXTVAL 返回序列的下一个值\n  CURRVAL 返回序列的当前值\n\n\n```sql\n-- 创建\nCREATE SEQUENCE seq_emp\n START WITH 10\n INCREMENT BY 10\n MAXVALUE 2000\n MINVALUE 10\n NOCYCLE\n CACHE 10;\n\n-- 使用\nINSERT INTO emp (empno, ename, job) \n     VALUES ( seq_emp.NEXTVAL, 'quanwei', 'sale');\n\nSELECT seq_emp.CURRVAL FROM dual;\n\n-- 不能更改序列的START WITH参数\nALTER SEQUENCE seq_emp MAXVALUE 5000 CYCLE;\n\n-- 删除\nDROP SEQUENCE seq_emp;\n```\n\n相关参数:\n\n**increment by**：序列每次增加的值，负数表示递减，缺省值为1；\n\n**start with**：序列的初始值，缺省值为1；\n\n**maxvalue**：序列可生成的最大值，缺省值为nomaxvalue，即不设置最大值；系统能产生的最大值为$10^{27}$；\n\n**minvalue**：序列可生成的最小值，缺省值为nominvalue；\n\n**cycle**：定义当序列达到最大/小值后是否循环，缺省值为不循环；**nocycle**：不循环；cycle：循环；如果不使用循环达到限制值后继续产生新值就会出错；使用循环达到最大值后的下一个值为1，和start with设置的值无关，递增还是increment by设置的值；\n\n**cache**：定义缓存序列的个数，缺省值为20，**nocache**表示不设置缓存；使用缓存可以提高序列的性能，但数据库出错时会造成数据丢失使序列不连续；\n\n\n\n## 索引\n\n索引是Oracle自动维护的一个可选结构\n  用以提高 SQL 语句执行的性能\n  减少磁盘I/O\n  在逻辑上和物理上都独立于表的数据\n\n索引应该在SQL语句的\"where\"部分涉及的表列(也称谓词)建立\n\n如果表中列的值占该表中行的20%以内，这个表列就可以作为候选索引表列\n\n如果在SQL语句谓词中多个表列被一起连续引用，则应该考虑将这些表列一起放在一个索引内\n\n\n\n类型：\n  B树索引(默认类型)\n\n  位图索引\n\n  HASH索引\n\n  索引组织表索引\n\n  反转键(reverse key)索引\n\n  基于函数的索引\n\n  分区索引(本地和全局索引)\n\n  位图连接索引\n\n不应该建索引:\n  对于那些在查询中很少使用或者参考的列不应该创建索引\n  对于那些只有很少数据值的列也不应该增加索引\n  对于那些定义为blob数据类型的列不应该增加索引\n  当修改性能远远大于检索性能时，不应该创建索引\n\n\n\n```sql\n\n-- 创建索引\ncreate index [unique | bitmap] [schema.]<idx_name> \n  on [schema.]<tab_name>(<col1>[,<clo2>,...])\n  tablespace <tbs_name>;\n\n-- 查询索引\nselect t.*\n  from dba_indexes t\nwhere t.owner = 'SCOTT'\n  and t.table_name = 'STUDENT_INFO';\n\n-- 修改索引名称 idx_si_sname -> idx_si_sname_new\nalter index [schema.]<idx_name>  rename to <new_idx_name>;\n\n-- 修改索引为无效\nalter index [schema.]<idx_name> unusable;\n\n-- 重建索引\nalter index [schema.]<idx_name> rebuild online;\n\n-- 删除索引\ndrop index [schema.]<idx_name>;\n```\n\n\n## 数据库对象命名规范\n\n| 类型     | 前缀 |\n| -------- | ---- |\n| 表       | t_   |\n| 视图     | v_   |\n| 同义词   | s_   |\n| 簇表     | c_   |\n| 序列     | seq_ |\n| 存储过程 | p_   |\n| 函数     | f_   |\n| 包       | pkg_ |\n| 类       | tp_  |\n| 主键     | pk_  |\n| 外键     | fk_  |\n| 普通索引 | x_   |\n| 唯一索引 | ux_  |\n| 位图索引 | bx_  |\n| 函数索引 | fx_  |","slug":"Oracle-Object","published":1,"updated":"2023-06-23T01:04:43.321Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5uu0039lv9e7zsx6yva","content":"<h1 id=\"Oracle-Object\"><a href=\"#Oracle-Object\" class=\"headerlink\" title=\"Oracle Object\"></a>Oracle Object</h1><h2 id=\"表\"><a href=\"#表\" class=\"headerlink\" title=\"表\"></a>表</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> t_<span class=\"operator\">&lt;</span>name<span class=\"operator\">&gt;</span>;</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> t_<span class=\"operator\">&lt;</span>name<span class=\"operator\">&gt;</span>;</span><br><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> t_<span class=\"operator\">&lt;</span>name<span class=\"operator\">&gt;</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常用数据类型\"><a href=\"#常用数据类型\" class=\"headerlink\" title=\"常用数据类型\"></a>常用数据类型</h3><p><strong>varchar2(n)</strong> 可变长的字符串  </p>\n<pre><code>具体定义时指明最大长度n byte，最大字节数都是4000（UTF8 1333个汉字）\n</code></pre>\n<p><strong>number(precision,scale)</strong> 可变长的数值列，允许浮点数、正值及负值  </p>\n<pre><code>precision [1,38] 是所有有效数字的位数（从左边第一个不为0的数算起，小数点和负号不计入有效位数）\n</code></pre>\n<p>   scale [-84,127] 是小数点以后的位数，多出来的位数四舍五入</p>\n<p><strong>date 时间日期</strong> </p>\n<pre><code>包括：世纪、年、月、日、时、分、秒\nsysdate\nTO_CHAR(SYSDATE, &#39;yyyy-mm-dd hh24:mi:ss&#39;)\nTO_DATE(&#39;2002-10-09 13:23:44&#39;, &#39;yyyy-mm-dd hh24:mi:ss&#39;)\n</code></pre>\n<p><strong>blob</strong> 二进制数据 用来保存较大的图形文件或带格式的文本文件</p>\n<p><strong>clob</strong> 字符型数据</p>\n<h2 id=\"视图\"><a href=\"#视图\" class=\"headerlink\" title=\"视图\"></a>视图</h2><p>视图以经过定制的方式显示来自一个或多个表的数据<br>  提供了另外一种级别的表安全性<br>  隐藏的数据的复杂性<br>  简化的用户的SQL命令<br>  隔离基表结构的改变<br>  通过重命名列，从另一个角度提供数据</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">view</span> v_<span class=\"operator\">&lt;</span>name<span class=\"operator\">&gt;</span> <span class=\"keyword\">as</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> [<span class=\"keyword\">OR</span> REPLACE] [FORCE] <span class=\"keyword\">VIEW</span></span><br><span class=\"line\">  view_name [(alias[, alias]...)] </span><br><span class=\"line\"><span class=\"keyword\">AS</span> select_statement</span><br><span class=\"line\">[<span class=\"keyword\">WITH</span> <span class=\"keyword\">CHECK</span> OPTION]</span><br><span class=\"line\">[<span class=\"keyword\">WITH</span> READ <span class=\"keyword\">ONLY</span>];</span><br></pre></td></tr></table></figure>\n<p>视图上的DML语句有如下限制：<br>  只能修改一个底层的基表<br>  如果修改违反了基表的约束条件，则无法更新视图<br>  如果视图包含连接操作符、DISTINCT 关键字、集合操作符、聚合函数或 GROUP BY 子句，则将无法更新视图<br>  如果视图包含伪列或表达式，则将无法更新视图</p>\n<h2 id=\"同义词\"><a href=\"#同义词\" class=\"headerlink\" title=\"同义词\"></a>同义词</h2><p>同义词是现有对象的一个别名<br>  简化SQL语句<br>  隐藏对象的名称和所有者<br>  提供对对象的公共访问<br>  公有同义词 可被所有的数据库用户访问。<br>  私有同义词 只能在其模式内访问，且不能与当前模式的对象同名</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> SYNONYM emp <span class=\"keyword\">FOR</span> SCOTT.emp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> PUBLIC SYNONYM s_emp <span class=\"keyword\">FOR</span> SCOTT.emp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">OR</span> REPLACE SYNONYM s_emp <span class=\"keyword\">FOR</span> SCOTT.emp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> SYNONYM emp; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> PUBLIC SYNONYM s_emp; </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"序列\"><a href=\"#序列\" class=\"headerlink\" title=\"序列\"></a>序列</h2><p>序列是用于生成唯一、连续序号的对象<br>序列可以是升序的，也可以是降序的</p>\n<p>通过序列的伪列来访问序列的值<br>  NEXTVAL 返回序列的下一个值<br>  CURRVAL 返回序列的当前值</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> SEQUENCE seq_emp</span><br><span class=\"line\"> <span class=\"keyword\">START</span> <span class=\"keyword\">WITH</span> <span class=\"number\">10</span></span><br><span class=\"line\"> INCREMENT <span class=\"keyword\">BY</span> <span class=\"number\">10</span></span><br><span class=\"line\"> MAXVALUE <span class=\"number\">2000</span></span><br><span class=\"line\"> MINVALUE <span class=\"number\">10</span></span><br><span class=\"line\"> NOCYCLE</span><br><span class=\"line\"> CACHE <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 使用</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> emp (empno, ename, job) </span><br><span class=\"line\">     <span class=\"keyword\">VALUES</span> ( seq_emp.NEXTVAL, <span class=\"string\">&#x27;quanwei&#x27;</span>, <span class=\"string\">&#x27;sale&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> seq_emp.CURRVAL <span class=\"keyword\">FROM</span> dual;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 不能更改序列的START WITH参数</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> SEQUENCE seq_emp MAXVALUE <span class=\"number\">5000</span> <span class=\"keyword\">CYCLE</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 删除</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> SEQUENCE seq_emp;</span><br></pre></td></tr></table></figure>\n\n<p>相关参数:</p>\n<p><strong>increment by</strong>：序列每次增加的值，负数表示递减，缺省值为1；</p>\n<p><strong>start with</strong>：序列的初始值，缺省值为1；</p>\n<p><strong>maxvalue</strong>：序列可生成的最大值，缺省值为nomaxvalue，即不设置最大值；系统能产生的最大值为$10^{27}$；</p>\n<p><strong>minvalue</strong>：序列可生成的最小值，缺省值为nominvalue；</p>\n<p><strong>cycle</strong>：定义当序列达到最大&#x2F;小值后是否循环，缺省值为不循环；<strong>nocycle</strong>：不循环；cycle：循环；如果不使用循环达到限制值后继续产生新值就会出错；使用循环达到最大值后的下一个值为1，和start with设置的值无关，递增还是increment by设置的值；</p>\n<p><strong>cache</strong>：定义缓存序列的个数，缺省值为20，<strong>nocache</strong>表示不设置缓存；使用缓存可以提高序列的性能，但数据库出错时会造成数据丢失使序列不连续；</p>\n<h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><p>索引是Oracle自动维护的一个可选结构<br>  用以提高 SQL 语句执行的性能<br>  减少磁盘I&#x2F;O<br>  在逻辑上和物理上都独立于表的数据</p>\n<p>索引应该在SQL语句的”where”部分涉及的表列(也称谓词)建立</p>\n<p>如果表中列的值占该表中行的20%以内，这个表列就可以作为候选索引表列</p>\n<p>如果在SQL语句谓词中多个表列被一起连续引用，则应该考虑将这些表列一起放在一个索引内</p>\n<p>类型：<br>  B树索引(默认类型)</p>\n<p>  位图索引</p>\n<p>  HASH索引</p>\n<p>  索引组织表索引</p>\n<p>  反转键(reverse key)索引</p>\n<p>  基于函数的索引</p>\n<p>  分区索引(本地和全局索引)</p>\n<p>  位图连接索引</p>\n<p>不应该建索引:<br>  对于那些在查询中很少使用或者参考的列不应该创建索引<br>  对于那些只有很少数据值的列也不应该增加索引<br>  对于那些定义为blob数据类型的列不应该增加索引<br>  当修改性能远远大于检索性能时，不应该创建索引</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 创建索引</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> index [<span class=\"keyword\">unique</span> <span class=\"operator\">|</span> bitmap] [schema.]<span class=\"operator\">&lt;</span>idx_name<span class=\"operator\">&gt;</span> </span><br><span class=\"line\">  <span class=\"keyword\">on</span> [schema.]<span class=\"operator\">&lt;</span>tab_name<span class=\"operator\">&gt;</span>(<span class=\"operator\">&lt;</span>col1<span class=\"operator\">&gt;</span>[,<span class=\"operator\">&lt;</span>clo2<span class=\"operator\">&gt;</span>,...])</span><br><span class=\"line\">  tablespace <span class=\"operator\">&lt;</span>tbs_name<span class=\"operator\">&gt;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查询索引</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> t.<span class=\"operator\">*</span></span><br><span class=\"line\">  <span class=\"keyword\">from</span> dba_indexes t</span><br><span class=\"line\"><span class=\"keyword\">where</span> t.owner <span class=\"operator\">=</span> <span class=\"string\">&#x27;SCOTT&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">and</span> t.table_name <span class=\"operator\">=</span> <span class=\"string\">&#x27;STUDENT_INFO&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 修改索引名称 idx_si_sname -&gt; idx_si_sname_new</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> index [schema.]<span class=\"operator\">&lt;</span>idx_name<span class=\"operator\">&gt;</span>  rename <span class=\"keyword\">to</span> <span class=\"operator\">&lt;</span>new_idx_name<span class=\"operator\">&gt;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 修改索引为无效</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> index [schema.]<span class=\"operator\">&lt;</span>idx_name<span class=\"operator\">&gt;</span> unusable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 重建索引</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> index [schema.]<span class=\"operator\">&lt;</span>idx_name<span class=\"operator\">&gt;</span> rebuild online;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 删除索引</span></span><br><span class=\"line\"><span class=\"keyword\">drop</span> index [schema.]<span class=\"operator\">&lt;</span>idx_name<span class=\"operator\">&gt;</span>;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"数据库对象命名规范\"><a href=\"#数据库对象命名规范\" class=\"headerlink\" title=\"数据库对象命名规范\"></a>数据库对象命名规范</h2><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>前缀</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>表</td>\n<td>t_</td>\n</tr>\n<tr>\n<td>视图</td>\n<td>v_</td>\n</tr>\n<tr>\n<td>同义词</td>\n<td>s_</td>\n</tr>\n<tr>\n<td>簇表</td>\n<td>c_</td>\n</tr>\n<tr>\n<td>序列</td>\n<td>seq_</td>\n</tr>\n<tr>\n<td>存储过程</td>\n<td>p_</td>\n</tr>\n<tr>\n<td>函数</td>\n<td>f_</td>\n</tr>\n<tr>\n<td>包</td>\n<td>pkg_</td>\n</tr>\n<tr>\n<td>类</td>\n<td>tp_</td>\n</tr>\n<tr>\n<td>主键</td>\n<td>pk_</td>\n</tr>\n<tr>\n<td>外键</td>\n<td>fk_</td>\n</tr>\n<tr>\n<td>普通索引</td>\n<td>x_</td>\n</tr>\n<tr>\n<td>唯一索引</td>\n<td>ux_</td>\n</tr>\n<tr>\n<td>位图索引</td>\n<td>bx_</td>\n</tr>\n<tr>\n<td>函数索引</td>\n<td>fx_</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h1 id=\"Oracle-Object\"><a href=\"#Oracle-Object\" class=\"headerlink\" title=\"Oracle Object\"></a>Oracle Object</h1><h2 id=\"表\"><a href=\"#表\" class=\"headerlink\" title=\"表\"></a>表</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> t_<span class=\"operator\">&lt;</span>name<span class=\"operator\">&gt;</span>;</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> t_<span class=\"operator\">&lt;</span>name<span class=\"operator\">&gt;</span>;</span><br><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> t_<span class=\"operator\">&lt;</span>name<span class=\"operator\">&gt;</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常用数据类型\"><a href=\"#常用数据类型\" class=\"headerlink\" title=\"常用数据类型\"></a>常用数据类型</h3><p><strong>varchar2(n)</strong> 可变长的字符串  </p>\n<pre><code>具体定义时指明最大长度n byte，最大字节数都是4000（UTF8 1333个汉字）\n</code></pre>\n<p><strong>number(precision,scale)</strong> 可变长的数值列，允许浮点数、正值及负值  </p>\n<pre><code>precision [1,38] 是所有有效数字的位数（从左边第一个不为0的数算起，小数点和负号不计入有效位数）\n</code></pre>\n<p>   scale [-84,127] 是小数点以后的位数，多出来的位数四舍五入</p>\n<p><strong>date 时间日期</strong> </p>\n<pre><code>包括：世纪、年、月、日、时、分、秒\nsysdate\nTO_CHAR(SYSDATE, &#39;yyyy-mm-dd hh24:mi:ss&#39;)\nTO_DATE(&#39;2002-10-09 13:23:44&#39;, &#39;yyyy-mm-dd hh24:mi:ss&#39;)\n</code></pre>\n<p><strong>blob</strong> 二进制数据 用来保存较大的图形文件或带格式的文本文件</p>\n<p><strong>clob</strong> 字符型数据</p>\n<h2 id=\"视图\"><a href=\"#视图\" class=\"headerlink\" title=\"视图\"></a>视图</h2><p>视图以经过定制的方式显示来自一个或多个表的数据<br>  提供了另外一种级别的表安全性<br>  隐藏的数据的复杂性<br>  简化的用户的SQL命令<br>  隔离基表结构的改变<br>  通过重命名列，从另一个角度提供数据</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">view</span> v_<span class=\"operator\">&lt;</span>name<span class=\"operator\">&gt;</span> <span class=\"keyword\">as</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> [<span class=\"keyword\">OR</span> REPLACE] [FORCE] <span class=\"keyword\">VIEW</span></span><br><span class=\"line\">  view_name [(alias[, alias]...)] </span><br><span class=\"line\"><span class=\"keyword\">AS</span> select_statement</span><br><span class=\"line\">[<span class=\"keyword\">WITH</span> <span class=\"keyword\">CHECK</span> OPTION]</span><br><span class=\"line\">[<span class=\"keyword\">WITH</span> READ <span class=\"keyword\">ONLY</span>];</span><br></pre></td></tr></table></figure>\n<p>视图上的DML语句有如下限制：<br>  只能修改一个底层的基表<br>  如果修改违反了基表的约束条件，则无法更新视图<br>  如果视图包含连接操作符、DISTINCT 关键字、集合操作符、聚合函数或 GROUP BY 子句，则将无法更新视图<br>  如果视图包含伪列或表达式，则将无法更新视图</p>\n<h2 id=\"同义词\"><a href=\"#同义词\" class=\"headerlink\" title=\"同义词\"></a>同义词</h2><p>同义词是现有对象的一个别名<br>  简化SQL语句<br>  隐藏对象的名称和所有者<br>  提供对对象的公共访问<br>  公有同义词 可被所有的数据库用户访问。<br>  私有同义词 只能在其模式内访问，且不能与当前模式的对象同名</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> SYNONYM emp <span class=\"keyword\">FOR</span> SCOTT.emp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> PUBLIC SYNONYM s_emp <span class=\"keyword\">FOR</span> SCOTT.emp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">OR</span> REPLACE SYNONYM s_emp <span class=\"keyword\">FOR</span> SCOTT.emp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> SYNONYM emp; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> PUBLIC SYNONYM s_emp; </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"序列\"><a href=\"#序列\" class=\"headerlink\" title=\"序列\"></a>序列</h2><p>序列是用于生成唯一、连续序号的对象<br>序列可以是升序的，也可以是降序的</p>\n<p>通过序列的伪列来访问序列的值<br>  NEXTVAL 返回序列的下一个值<br>  CURRVAL 返回序列的当前值</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> SEQUENCE seq_emp</span><br><span class=\"line\"> <span class=\"keyword\">START</span> <span class=\"keyword\">WITH</span> <span class=\"number\">10</span></span><br><span class=\"line\"> INCREMENT <span class=\"keyword\">BY</span> <span class=\"number\">10</span></span><br><span class=\"line\"> MAXVALUE <span class=\"number\">2000</span></span><br><span class=\"line\"> MINVALUE <span class=\"number\">10</span></span><br><span class=\"line\"> NOCYCLE</span><br><span class=\"line\"> CACHE <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 使用</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> emp (empno, ename, job) </span><br><span class=\"line\">     <span class=\"keyword\">VALUES</span> ( seq_emp.NEXTVAL, <span class=\"string\">&#x27;quanwei&#x27;</span>, <span class=\"string\">&#x27;sale&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> seq_emp.CURRVAL <span class=\"keyword\">FROM</span> dual;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 不能更改序列的START WITH参数</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> SEQUENCE seq_emp MAXVALUE <span class=\"number\">5000</span> <span class=\"keyword\">CYCLE</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 删除</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> SEQUENCE seq_emp;</span><br></pre></td></tr></table></figure>\n\n<p>相关参数:</p>\n<p><strong>increment by</strong>：序列每次增加的值，负数表示递减，缺省值为1；</p>\n<p><strong>start with</strong>：序列的初始值，缺省值为1；</p>\n<p><strong>maxvalue</strong>：序列可生成的最大值，缺省值为nomaxvalue，即不设置最大值；系统能产生的最大值为$10^{27}$；</p>\n<p><strong>minvalue</strong>：序列可生成的最小值，缺省值为nominvalue；</p>\n<p><strong>cycle</strong>：定义当序列达到最大&#x2F;小值后是否循环，缺省值为不循环；<strong>nocycle</strong>：不循环；cycle：循环；如果不使用循环达到限制值后继续产生新值就会出错；使用循环达到最大值后的下一个值为1，和start with设置的值无关，递增还是increment by设置的值；</p>\n<p><strong>cache</strong>：定义缓存序列的个数，缺省值为20，<strong>nocache</strong>表示不设置缓存；使用缓存可以提高序列的性能，但数据库出错时会造成数据丢失使序列不连续；</p>\n<h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><p>索引是Oracle自动维护的一个可选结构<br>  用以提高 SQL 语句执行的性能<br>  减少磁盘I&#x2F;O<br>  在逻辑上和物理上都独立于表的数据</p>\n<p>索引应该在SQL语句的”where”部分涉及的表列(也称谓词)建立</p>\n<p>如果表中列的值占该表中行的20%以内，这个表列就可以作为候选索引表列</p>\n<p>如果在SQL语句谓词中多个表列被一起连续引用，则应该考虑将这些表列一起放在一个索引内</p>\n<p>类型：<br>  B树索引(默认类型)</p>\n<p>  位图索引</p>\n<p>  HASH索引</p>\n<p>  索引组织表索引</p>\n<p>  反转键(reverse key)索引</p>\n<p>  基于函数的索引</p>\n<p>  分区索引(本地和全局索引)</p>\n<p>  位图连接索引</p>\n<p>不应该建索引:<br>  对于那些在查询中很少使用或者参考的列不应该创建索引<br>  对于那些只有很少数据值的列也不应该增加索引<br>  对于那些定义为blob数据类型的列不应该增加索引<br>  当修改性能远远大于检索性能时，不应该创建索引</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 创建索引</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> index [<span class=\"keyword\">unique</span> <span class=\"operator\">|</span> bitmap] [schema.]<span class=\"operator\">&lt;</span>idx_name<span class=\"operator\">&gt;</span> </span><br><span class=\"line\">  <span class=\"keyword\">on</span> [schema.]<span class=\"operator\">&lt;</span>tab_name<span class=\"operator\">&gt;</span>(<span class=\"operator\">&lt;</span>col1<span class=\"operator\">&gt;</span>[,<span class=\"operator\">&lt;</span>clo2<span class=\"operator\">&gt;</span>,...])</span><br><span class=\"line\">  tablespace <span class=\"operator\">&lt;</span>tbs_name<span class=\"operator\">&gt;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查询索引</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> t.<span class=\"operator\">*</span></span><br><span class=\"line\">  <span class=\"keyword\">from</span> dba_indexes t</span><br><span class=\"line\"><span class=\"keyword\">where</span> t.owner <span class=\"operator\">=</span> <span class=\"string\">&#x27;SCOTT&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">and</span> t.table_name <span class=\"operator\">=</span> <span class=\"string\">&#x27;STUDENT_INFO&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 修改索引名称 idx_si_sname -&gt; idx_si_sname_new</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> index [schema.]<span class=\"operator\">&lt;</span>idx_name<span class=\"operator\">&gt;</span>  rename <span class=\"keyword\">to</span> <span class=\"operator\">&lt;</span>new_idx_name<span class=\"operator\">&gt;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 修改索引为无效</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> index [schema.]<span class=\"operator\">&lt;</span>idx_name<span class=\"operator\">&gt;</span> unusable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 重建索引</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> index [schema.]<span class=\"operator\">&lt;</span>idx_name<span class=\"operator\">&gt;</span> rebuild online;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 删除索引</span></span><br><span class=\"line\"><span class=\"keyword\">drop</span> index [schema.]<span class=\"operator\">&lt;</span>idx_name<span class=\"operator\">&gt;</span>;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"数据库对象命名规范\"><a href=\"#数据库对象命名规范\" class=\"headerlink\" title=\"数据库对象命名规范\"></a>数据库对象命名规范</h2><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>前缀</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>表</td>\n<td>t_</td>\n</tr>\n<tr>\n<td>视图</td>\n<td>v_</td>\n</tr>\n<tr>\n<td>同义词</td>\n<td>s_</td>\n</tr>\n<tr>\n<td>簇表</td>\n<td>c_</td>\n</tr>\n<tr>\n<td>序列</td>\n<td>seq_</td>\n</tr>\n<tr>\n<td>存储过程</td>\n<td>p_</td>\n</tr>\n<tr>\n<td>函数</td>\n<td>f_</td>\n</tr>\n<tr>\n<td>包</td>\n<td>pkg_</td>\n</tr>\n<tr>\n<td>类</td>\n<td>tp_</td>\n</tr>\n<tr>\n<td>主键</td>\n<td>pk_</td>\n</tr>\n<tr>\n<td>外键</td>\n<td>fk_</td>\n</tr>\n<tr>\n<td>普通索引</td>\n<td>x_</td>\n</tr>\n<tr>\n<td>唯一索引</td>\n<td>ux_</td>\n</tr>\n<tr>\n<td>位图索引</td>\n<td>bx_</td>\n</tr>\n<tr>\n<td>函数索引</td>\n<td>fx_</td>\n</tr>\n</tbody></table>\n"},{"title":"Oracle User","date":"2023-04-12T03:39:53.000Z","_content":"\n## 创建用户\n```sql\nCREATE USER user\n\tIDENTIFIED {BY password | EXTERNALLY}\n\t[ DEFAULT TABLESPACE tablespace ]\n\t[ TEMPORARY TABLESPACE tablespace ]\n\t[ QUOTA {integer [K | M ] | UNLIMITED } ON tablespace\n\t[ QUOTA {integer [K | M ] | UNLIMITED } ON tablespace \t]...]\n\t[ PASSWORD EXPIRE ]\n\t[ ACCOUNT { LOCK | UNLOCK }]\n\t[ PROFILE { profile | DEFAULT }]\n```\n\n修该密码\n\nalter  user   scott  identified by \"tiger\";\n\n\n## 删除用户\n\n```sql\nDROP USER user [CASCADE]\n```\nCASCADE 同时删除表\n\n## 查看配额\n\nDBA_USERS\nDBA_TS_QUOTAS\n\n\n## 调整配额\n\n```sql\nALTER USER user\n\t[ DEFAULT TABLESPACE tablespace]\n\t[ TEMPORARY TABLESPACE tablespace]\n\t[ QUOTA {integer [K | M] | UNLIMITED } ON tablespace\n\t[ QUOTA {integer [K | M] | UNLIMITED } ON tablespace ] \t...] \n```\n\n```sql\nSELECT\n  USERNAME,\n  DEFAULT_TABLESPACE\nFROM\n  DBA_USERS;\n```\n\n\n\n## 操作系统身份认证(Operating System Authentication)\n\n```sql\nCREATE USER OPS$QUANWEI IDENTIFIED EXTERNALLY;\n\nGRANT SESSION TO OPS$QUANWEI;\n```\n\n```bash\nusermod -a -G dba quanwei\n\nsu quanwei\n\nsqlplus /\n\nsqlplus / sysdba\n```\n\n## 用户权限\n\n### System Privileges\n\n| Category   | Examples                                                   |\n| ---------- | ---------------------------------------------------------- |\n| INDEX      | CREATE ALTER DROP ANY INDEX                                |\n| TABLE      | CREATE ALTER ANY TABLE DROP SELECT UPDATE DELETE ANY TABLE |\n| SESSION    | CREATE ALTER RESTRICTED SESSION                            |\n| TABLESPACE | CREATE ALTER DROP UNLIMITED TABLESPACE                     |\n\n### SYSDBA and SYSOPER Privileges\n\n| Category | Examples                             |\n| -------- | ------------------------------------ |\n| SYSOPER  | STARTUP                              |\n|          | SHUTDOWN                             |\n|          | ALTER DATABASE OPEN  MOUNT           |\n|          | ALTER DATABASE BACKUP CONTROLFILE TO |\n|          | RECOVER DATABASE                     |\n|          | ALTER DATABASE ARCHIVELOG            |\n| SYSDBA   | SYSOPER PRIVILEGES WITH ADMIN OPTION |\n|          | CREATE DATABASE                      |\n|          | ALTER DATABASE BEGIN/END BACKUP      |\n|          | RESTRICTED SESSEION                  |\n|          | RECOVER DATABASE UNTIL               |\n\n\n### 授权\n```sql\nGRANT {system_privilege|role}\n\t   [, {system_privilege|role} ]...\n\tTO    {user|role|PUBLIC}\t\n\t   [, {user|role|PUBLIC} ]...\n\t[WITH ADMIN OPTION]\n\n```\nPUBLIC\t\t        :grants system privilege to all users\nWITH ADMIN OPTION\t:enables the grantee to further grant the privilege or role\tto other users or roles\n\n### 取消授权\n\n```sql\nREVOKE {system_privilege|role}\n    [, {system_privilege|role} ]...\nFROM   {user|role|PUBLIC}\n    [, {user|role|PUBLIC} ]...\n```\n\n### 权限信息\n\n| table         | role                                                          |\n| ------------- | ------------------------------------------------------------- |\n| DBA_SYS_PRIVS | lists system privileges granted to users and roles            |\n| SESSION_PRIVS | lists the privileges that are currently available to the user |\n| DBA_TAB_PRIVS | lists all grants on all objects in the database               |\n| DBA_COL_PRIVS | describes all object column grants in the database.           |\n","source":"_posts/Oracle-User.md","raw":"---\ntitle: Oracle User\ndate: 2023-04-12 11:39:53\ntags: \n- Database\n- Oracle\n- PL/SQL\n---\n\n## 创建用户\n```sql\nCREATE USER user\n\tIDENTIFIED {BY password | EXTERNALLY}\n\t[ DEFAULT TABLESPACE tablespace ]\n\t[ TEMPORARY TABLESPACE tablespace ]\n\t[ QUOTA {integer [K | M ] | UNLIMITED } ON tablespace\n\t[ QUOTA {integer [K | M ] | UNLIMITED } ON tablespace \t]...]\n\t[ PASSWORD EXPIRE ]\n\t[ ACCOUNT { LOCK | UNLOCK }]\n\t[ PROFILE { profile | DEFAULT }]\n```\n\n修该密码\n\nalter  user   scott  identified by \"tiger\";\n\n\n## 删除用户\n\n```sql\nDROP USER user [CASCADE]\n```\nCASCADE 同时删除表\n\n## 查看配额\n\nDBA_USERS\nDBA_TS_QUOTAS\n\n\n## 调整配额\n\n```sql\nALTER USER user\n\t[ DEFAULT TABLESPACE tablespace]\n\t[ TEMPORARY TABLESPACE tablespace]\n\t[ QUOTA {integer [K | M] | UNLIMITED } ON tablespace\n\t[ QUOTA {integer [K | M] | UNLIMITED } ON tablespace ] \t...] \n```\n\n```sql\nSELECT\n  USERNAME,\n  DEFAULT_TABLESPACE\nFROM\n  DBA_USERS;\n```\n\n\n\n## 操作系统身份认证(Operating System Authentication)\n\n```sql\nCREATE USER OPS$QUANWEI IDENTIFIED EXTERNALLY;\n\nGRANT SESSION TO OPS$QUANWEI;\n```\n\n```bash\nusermod -a -G dba quanwei\n\nsu quanwei\n\nsqlplus /\n\nsqlplus / sysdba\n```\n\n## 用户权限\n\n### System Privileges\n\n| Category   | Examples                                                   |\n| ---------- | ---------------------------------------------------------- |\n| INDEX      | CREATE ALTER DROP ANY INDEX                                |\n| TABLE      | CREATE ALTER ANY TABLE DROP SELECT UPDATE DELETE ANY TABLE |\n| SESSION    | CREATE ALTER RESTRICTED SESSION                            |\n| TABLESPACE | CREATE ALTER DROP UNLIMITED TABLESPACE                     |\n\n### SYSDBA and SYSOPER Privileges\n\n| Category | Examples                             |\n| -------- | ------------------------------------ |\n| SYSOPER  | STARTUP                              |\n|          | SHUTDOWN                             |\n|          | ALTER DATABASE OPEN  MOUNT           |\n|          | ALTER DATABASE BACKUP CONTROLFILE TO |\n|          | RECOVER DATABASE                     |\n|          | ALTER DATABASE ARCHIVELOG            |\n| SYSDBA   | SYSOPER PRIVILEGES WITH ADMIN OPTION |\n|          | CREATE DATABASE                      |\n|          | ALTER DATABASE BEGIN/END BACKUP      |\n|          | RESTRICTED SESSEION                  |\n|          | RECOVER DATABASE UNTIL               |\n\n\n### 授权\n```sql\nGRANT {system_privilege|role}\n\t   [, {system_privilege|role} ]...\n\tTO    {user|role|PUBLIC}\t\n\t   [, {user|role|PUBLIC} ]...\n\t[WITH ADMIN OPTION]\n\n```\nPUBLIC\t\t        :grants system privilege to all users\nWITH ADMIN OPTION\t:enables the grantee to further grant the privilege or role\tto other users or roles\n\n### 取消授权\n\n```sql\nREVOKE {system_privilege|role}\n    [, {system_privilege|role} ]...\nFROM   {user|role|PUBLIC}\n    [, {user|role|PUBLIC} ]...\n```\n\n### 权限信息\n\n| table         | role                                                          |\n| ------------- | ------------------------------------------------------------- |\n| DBA_SYS_PRIVS | lists system privileges granted to users and roles            |\n| SESSION_PRIVS | lists the privileges that are currently available to the user |\n| DBA_TAB_PRIVS | lists all grants on all objects in the database               |\n| DBA_COL_PRIVS | describes all object column grants in the database.           |\n","slug":"Oracle-User","published":1,"updated":"2023-06-23T01:05:25.524Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5uv003blv9e0k8p7idk","content":"<h2 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">USER</span> <span class=\"keyword\">user</span></span><br><span class=\"line\">\tIDENTIFIED &#123;<span class=\"keyword\">BY</span> password <span class=\"operator\">|</span> EXTERNALLY&#125;</span><br><span class=\"line\">\t[ <span class=\"keyword\">DEFAULT</span> TABLESPACE tablespace ]</span><br><span class=\"line\">\t[ TEMPORARY TABLESPACE tablespace ]</span><br><span class=\"line\">\t[ QUOTA &#123;<span class=\"type\">integer</span> [K <span class=\"operator\">|</span> M ] <span class=\"operator\">|</span> UNLIMITED &#125; <span class=\"keyword\">ON</span> tablespace</span><br><span class=\"line\">\t[ QUOTA &#123;<span class=\"type\">integer</span> [K <span class=\"operator\">|</span> M ] <span class=\"operator\">|</span> UNLIMITED &#125; <span class=\"keyword\">ON</span> tablespace \t]...]</span><br><span class=\"line\">\t[ PASSWORD EXPIRE ]</span><br><span class=\"line\">\t[ ACCOUNT &#123; LOCK <span class=\"operator\">|</span> UNLOCK &#125;]</span><br><span class=\"line\">\t[ PROFILE &#123; profile <span class=\"operator\">|</span> <span class=\"keyword\">DEFAULT</span> &#125;]</span><br></pre></td></tr></table></figure>\n\n<p>修该密码</p>\n<p>alter  user   scott  identified by “tiger”;</p>\n<h2 id=\"删除用户\"><a href=\"#删除用户\" class=\"headerlink\" title=\"删除用户\"></a>删除用户</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">USER</span> <span class=\"keyword\">user</span> [CASCADE]</span><br></pre></td></tr></table></figure>\n<p>CASCADE 同时删除表</p>\n<h2 id=\"查看配额\"><a href=\"#查看配额\" class=\"headerlink\" title=\"查看配额\"></a>查看配额</h2><p>DBA_USERS<br>DBA_TS_QUOTAS</p>\n<h2 id=\"调整配额\"><a href=\"#调整配额\" class=\"headerlink\" title=\"调整配额\"></a>调整配额</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">USER</span> <span class=\"keyword\">user</span></span><br><span class=\"line\">\t[ <span class=\"keyword\">DEFAULT</span> TABLESPACE tablespace]</span><br><span class=\"line\">\t[ TEMPORARY TABLESPACE tablespace]</span><br><span class=\"line\">\t[ QUOTA &#123;<span class=\"type\">integer</span> [K <span class=\"operator\">|</span> M] <span class=\"operator\">|</span> UNLIMITED &#125; <span class=\"keyword\">ON</span> tablespace</span><br><span class=\"line\">\t[ QUOTA &#123;<span class=\"type\">integer</span> [K <span class=\"operator\">|</span> M] <span class=\"operator\">|</span> UNLIMITED &#125; <span class=\"keyword\">ON</span> tablespace ] \t...] </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">  USERNAME,</span><br><span class=\"line\">  DEFAULT_TABLESPACE</span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">  DBA_USERS;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"操作系统身份认证-Operating-System-Authentication\"><a href=\"#操作系统身份认证-Operating-System-Authentication\" class=\"headerlink\" title=\"操作系统身份认证(Operating System Authentication)\"></a>操作系统身份认证(Operating System Authentication)</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">USER</span> OPS$QUANWEI IDENTIFIED EXTERNALLY;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> SESSION <span class=\"keyword\">TO</span> OPS$QUANWEI;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">usermod -a -G dba quanwei</span><br><span class=\"line\"></span><br><span class=\"line\">su quanwei</span><br><span class=\"line\"></span><br><span class=\"line\">sqlplus /</span><br><span class=\"line\"></span><br><span class=\"line\">sqlplus / sysdba</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"用户权限\"><a href=\"#用户权限\" class=\"headerlink\" title=\"用户权限\"></a>用户权限</h2><h3 id=\"System-Privileges\"><a href=\"#System-Privileges\" class=\"headerlink\" title=\"System Privileges\"></a>System Privileges</h3><table>\n<thead>\n<tr>\n<th>Category</th>\n<th>Examples</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>INDEX</td>\n<td>CREATE ALTER DROP ANY INDEX</td>\n</tr>\n<tr>\n<td>TABLE</td>\n<td>CREATE ALTER ANY TABLE DROP SELECT UPDATE DELETE ANY TABLE</td>\n</tr>\n<tr>\n<td>SESSION</td>\n<td>CREATE ALTER RESTRICTED SESSION</td>\n</tr>\n<tr>\n<td>TABLESPACE</td>\n<td>CREATE ALTER DROP UNLIMITED TABLESPACE</td>\n</tr>\n</tbody></table>\n<h3 id=\"SYSDBA-and-SYSOPER-Privileges\"><a href=\"#SYSDBA-and-SYSOPER-Privileges\" class=\"headerlink\" title=\"SYSDBA and SYSOPER Privileges\"></a>SYSDBA and SYSOPER Privileges</h3><table>\n<thead>\n<tr>\n<th>Category</th>\n<th>Examples</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>SYSOPER</td>\n<td>STARTUP</td>\n</tr>\n<tr>\n<td></td>\n<td>SHUTDOWN</td>\n</tr>\n<tr>\n<td></td>\n<td>ALTER DATABASE OPEN  MOUNT</td>\n</tr>\n<tr>\n<td></td>\n<td>ALTER DATABASE BACKUP CONTROLFILE TO</td>\n</tr>\n<tr>\n<td></td>\n<td>RECOVER DATABASE</td>\n</tr>\n<tr>\n<td></td>\n<td>ALTER DATABASE ARCHIVELOG</td>\n</tr>\n<tr>\n<td>SYSDBA</td>\n<td>SYSOPER PRIVILEGES WITH ADMIN OPTION</td>\n</tr>\n<tr>\n<td></td>\n<td>CREATE DATABASE</td>\n</tr>\n<tr>\n<td></td>\n<td>ALTER DATABASE BEGIN&#x2F;END BACKUP</td>\n</tr>\n<tr>\n<td></td>\n<td>RESTRICTED SESSEION</td>\n</tr>\n<tr>\n<td></td>\n<td>RECOVER DATABASE UNTIL</td>\n</tr>\n</tbody></table>\n<h3 id=\"授权\"><a href=\"#授权\" class=\"headerlink\" title=\"授权\"></a>授权</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">GRANT</span> &#123;system_privilege<span class=\"operator\">|</span>role&#125;</span><br><span class=\"line\">\t   [, &#123;system_privilege<span class=\"operator\">|</span>role&#125; ]...</span><br><span class=\"line\">\t<span class=\"keyword\">TO</span>    &#123;<span class=\"keyword\">user</span><span class=\"operator\">|</span>role<span class=\"operator\">|</span>PUBLIC&#125;\t</span><br><span class=\"line\">\t   [, &#123;<span class=\"keyword\">user</span><span class=\"operator\">|</span>role<span class=\"operator\">|</span>PUBLIC&#125; ]...</span><br><span class=\"line\">\t[<span class=\"keyword\">WITH</span> ADMIN OPTION]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>PUBLIC\t\t        :grants system privilege to all users<br>WITH ADMIN OPTION\t:enables the grantee to further grant the privilege or role\tto other users or roles</p>\n<h3 id=\"取消授权\"><a href=\"#取消授权\" class=\"headerlink\" title=\"取消授权\"></a>取消授权</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">REVOKE</span> &#123;system_privilege<span class=\"operator\">|</span>role&#125;</span><br><span class=\"line\">    [, &#123;system_privilege<span class=\"operator\">|</span>role&#125; ]...</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>   &#123;<span class=\"keyword\">user</span><span class=\"operator\">|</span>role<span class=\"operator\">|</span>PUBLIC&#125;</span><br><span class=\"line\">    [, &#123;<span class=\"keyword\">user</span><span class=\"operator\">|</span>role<span class=\"operator\">|</span>PUBLIC&#125; ]...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"权限信息\"><a href=\"#权限信息\" class=\"headerlink\" title=\"权限信息\"></a>权限信息</h3><table>\n<thead>\n<tr>\n<th>table</th>\n<th>role</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>DBA_SYS_PRIVS</td>\n<td>lists system privileges granted to users and roles</td>\n</tr>\n<tr>\n<td>SESSION_PRIVS</td>\n<td>lists the privileges that are currently available to the user</td>\n</tr>\n<tr>\n<td>DBA_TAB_PRIVS</td>\n<td>lists all grants on all objects in the database</td>\n</tr>\n<tr>\n<td>DBA_COL_PRIVS</td>\n<td>describes all object column grants in the database.</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h2 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">USER</span> <span class=\"keyword\">user</span></span><br><span class=\"line\">\tIDENTIFIED &#123;<span class=\"keyword\">BY</span> password <span class=\"operator\">|</span> EXTERNALLY&#125;</span><br><span class=\"line\">\t[ <span class=\"keyword\">DEFAULT</span> TABLESPACE tablespace ]</span><br><span class=\"line\">\t[ TEMPORARY TABLESPACE tablespace ]</span><br><span class=\"line\">\t[ QUOTA &#123;<span class=\"type\">integer</span> [K <span class=\"operator\">|</span> M ] <span class=\"operator\">|</span> UNLIMITED &#125; <span class=\"keyword\">ON</span> tablespace</span><br><span class=\"line\">\t[ QUOTA &#123;<span class=\"type\">integer</span> [K <span class=\"operator\">|</span> M ] <span class=\"operator\">|</span> UNLIMITED &#125; <span class=\"keyword\">ON</span> tablespace \t]...]</span><br><span class=\"line\">\t[ PASSWORD EXPIRE ]</span><br><span class=\"line\">\t[ ACCOUNT &#123; LOCK <span class=\"operator\">|</span> UNLOCK &#125;]</span><br><span class=\"line\">\t[ PROFILE &#123; profile <span class=\"operator\">|</span> <span class=\"keyword\">DEFAULT</span> &#125;]</span><br></pre></td></tr></table></figure>\n\n<p>修该密码</p>\n<p>alter  user   scott  identified by “tiger”;</p>\n<h2 id=\"删除用户\"><a href=\"#删除用户\" class=\"headerlink\" title=\"删除用户\"></a>删除用户</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">USER</span> <span class=\"keyword\">user</span> [CASCADE]</span><br></pre></td></tr></table></figure>\n<p>CASCADE 同时删除表</p>\n<h2 id=\"查看配额\"><a href=\"#查看配额\" class=\"headerlink\" title=\"查看配额\"></a>查看配额</h2><p>DBA_USERS<br>DBA_TS_QUOTAS</p>\n<h2 id=\"调整配额\"><a href=\"#调整配额\" class=\"headerlink\" title=\"调整配额\"></a>调整配额</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">USER</span> <span class=\"keyword\">user</span></span><br><span class=\"line\">\t[ <span class=\"keyword\">DEFAULT</span> TABLESPACE tablespace]</span><br><span class=\"line\">\t[ TEMPORARY TABLESPACE tablespace]</span><br><span class=\"line\">\t[ QUOTA &#123;<span class=\"type\">integer</span> [K <span class=\"operator\">|</span> M] <span class=\"operator\">|</span> UNLIMITED &#125; <span class=\"keyword\">ON</span> tablespace</span><br><span class=\"line\">\t[ QUOTA &#123;<span class=\"type\">integer</span> [K <span class=\"operator\">|</span> M] <span class=\"operator\">|</span> UNLIMITED &#125; <span class=\"keyword\">ON</span> tablespace ] \t...] </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">  USERNAME,</span><br><span class=\"line\">  DEFAULT_TABLESPACE</span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">  DBA_USERS;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"操作系统身份认证-Operating-System-Authentication\"><a href=\"#操作系统身份认证-Operating-System-Authentication\" class=\"headerlink\" title=\"操作系统身份认证(Operating System Authentication)\"></a>操作系统身份认证(Operating System Authentication)</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">USER</span> OPS$QUANWEI IDENTIFIED EXTERNALLY;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> SESSION <span class=\"keyword\">TO</span> OPS$QUANWEI;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">usermod -a -G dba quanwei</span><br><span class=\"line\"></span><br><span class=\"line\">su quanwei</span><br><span class=\"line\"></span><br><span class=\"line\">sqlplus /</span><br><span class=\"line\"></span><br><span class=\"line\">sqlplus / sysdba</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"用户权限\"><a href=\"#用户权限\" class=\"headerlink\" title=\"用户权限\"></a>用户权限</h2><h3 id=\"System-Privileges\"><a href=\"#System-Privileges\" class=\"headerlink\" title=\"System Privileges\"></a>System Privileges</h3><table>\n<thead>\n<tr>\n<th>Category</th>\n<th>Examples</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>INDEX</td>\n<td>CREATE ALTER DROP ANY INDEX</td>\n</tr>\n<tr>\n<td>TABLE</td>\n<td>CREATE ALTER ANY TABLE DROP SELECT UPDATE DELETE ANY TABLE</td>\n</tr>\n<tr>\n<td>SESSION</td>\n<td>CREATE ALTER RESTRICTED SESSION</td>\n</tr>\n<tr>\n<td>TABLESPACE</td>\n<td>CREATE ALTER DROP UNLIMITED TABLESPACE</td>\n</tr>\n</tbody></table>\n<h3 id=\"SYSDBA-and-SYSOPER-Privileges\"><a href=\"#SYSDBA-and-SYSOPER-Privileges\" class=\"headerlink\" title=\"SYSDBA and SYSOPER Privileges\"></a>SYSDBA and SYSOPER Privileges</h3><table>\n<thead>\n<tr>\n<th>Category</th>\n<th>Examples</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>SYSOPER</td>\n<td>STARTUP</td>\n</tr>\n<tr>\n<td></td>\n<td>SHUTDOWN</td>\n</tr>\n<tr>\n<td></td>\n<td>ALTER DATABASE OPEN  MOUNT</td>\n</tr>\n<tr>\n<td></td>\n<td>ALTER DATABASE BACKUP CONTROLFILE TO</td>\n</tr>\n<tr>\n<td></td>\n<td>RECOVER DATABASE</td>\n</tr>\n<tr>\n<td></td>\n<td>ALTER DATABASE ARCHIVELOG</td>\n</tr>\n<tr>\n<td>SYSDBA</td>\n<td>SYSOPER PRIVILEGES WITH ADMIN OPTION</td>\n</tr>\n<tr>\n<td></td>\n<td>CREATE DATABASE</td>\n</tr>\n<tr>\n<td></td>\n<td>ALTER DATABASE BEGIN&#x2F;END BACKUP</td>\n</tr>\n<tr>\n<td></td>\n<td>RESTRICTED SESSEION</td>\n</tr>\n<tr>\n<td></td>\n<td>RECOVER DATABASE UNTIL</td>\n</tr>\n</tbody></table>\n<h3 id=\"授权\"><a href=\"#授权\" class=\"headerlink\" title=\"授权\"></a>授权</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">GRANT</span> &#123;system_privilege<span class=\"operator\">|</span>role&#125;</span><br><span class=\"line\">\t   [, &#123;system_privilege<span class=\"operator\">|</span>role&#125; ]...</span><br><span class=\"line\">\t<span class=\"keyword\">TO</span>    &#123;<span class=\"keyword\">user</span><span class=\"operator\">|</span>role<span class=\"operator\">|</span>PUBLIC&#125;\t</span><br><span class=\"line\">\t   [, &#123;<span class=\"keyword\">user</span><span class=\"operator\">|</span>role<span class=\"operator\">|</span>PUBLIC&#125; ]...</span><br><span class=\"line\">\t[<span class=\"keyword\">WITH</span> ADMIN OPTION]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>PUBLIC\t\t        :grants system privilege to all users<br>WITH ADMIN OPTION\t:enables the grantee to further grant the privilege or role\tto other users or roles</p>\n<h3 id=\"取消授权\"><a href=\"#取消授权\" class=\"headerlink\" title=\"取消授权\"></a>取消授权</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">REVOKE</span> &#123;system_privilege<span class=\"operator\">|</span>role&#125;</span><br><span class=\"line\">    [, &#123;system_privilege<span class=\"operator\">|</span>role&#125; ]...</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>   &#123;<span class=\"keyword\">user</span><span class=\"operator\">|</span>role<span class=\"operator\">|</span>PUBLIC&#125;</span><br><span class=\"line\">    [, &#123;<span class=\"keyword\">user</span><span class=\"operator\">|</span>role<span class=\"operator\">|</span>PUBLIC&#125; ]...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"权限信息\"><a href=\"#权限信息\" class=\"headerlink\" title=\"权限信息\"></a>权限信息</h3><table>\n<thead>\n<tr>\n<th>table</th>\n<th>role</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>DBA_SYS_PRIVS</td>\n<td>lists system privileges granted to users and roles</td>\n</tr>\n<tr>\n<td>SESSION_PRIVS</td>\n<td>lists the privileges that are currently available to the user</td>\n</tr>\n<tr>\n<td>DBA_TAB_PRIVS</td>\n<td>lists all grants on all objects in the database</td>\n</tr>\n<tr>\n<td>DBA_COL_PRIVS</td>\n<td>describes all object column grants in the database.</td>\n</tr>\n</tbody></table>\n"},{"title":"OracleDB 最佳实践","date":"2022-09-24T08:14:33.000Z","_content":"\n# OracleDB 最佳实践\n\n### 1. 创建表空间、用户\n\n```sql\n-- 创建表空间  \nCREATE TABLESPACE tang \n\tDATAFILE '/u01/app/oracle/oradata/xe/tang.dbf' \n\tSIZE 32 M \n\tAUTOEXTEND ON \n\tNEXT 32 M;\n```\n\n<!-- more -->\n\n```sql\n-- 新建用户并选择刚创建的表空间 \nCREATE USER quanwei  \n\tIDENTIFIED BY 123456          \n\t\tACCOUNT UNLOCK          \n\t\tDEFAULT TABLESPACE tang;\n```\n\n```sql\n-- connect,resource,dba权限赋予 quanwei用户\nGRANT CONNECT,RESOURCE,DBA TO quanwei;\n\n-- 多权限授权\nGRANT \nCREATE USER,\nDROP USER,\nALTER USER ,\nCREATE ANY VIEW ,\nDROP ANY VIEW,\nEXP_FULL_DATABASE,\nIMP_FULL_DATABASE,\nDBA,\nCONNECT,\nRESOURCE,\nCREATE SESSION \nTO quanwei;\n```\n\n## 2. 常用命令操作\n\n```sql\n--首先查询一下用户的profile的类型\nSELECT username, profile FROM dba_users;\n\n--查看制定概要文件（默认为DEFAULT）的密码有效期:\nSELECT * FROM dba_profiles WHERE profile='DEFAULT' AND resource_name='PASSWORD_LIFE_TIME';\n\n--然后将密码的有效期有180天设置为“无限制”;\nALTER PROFILE DEFAULT LIMIT PASSWORD_LIFE_TIME UNLIMITED;\n\n-- 修改密码\nALTER USER scott IDENTIFIED BY 123456;\n\n-- 查询所有用户\nSELECT * FROM ALL_USERS;\n\n-- 创建账户\nCREATE USER quanwei IDENTIFIED BY 123456;\n\n--  给用户授予权限\nGRANT CONNECT, RESOURCE, DBA TO quawnei;\nGRANT CREATE  SESSION  TO  quanwei;\n\n-- 解除锁定\nALTER USER quanwei ACCOUNT UNLOCK;\n```\n\n## 3. 主键自增\n\nSQL不区分大小写\n\n```sql\n---自增序列\nCREATE SEQUENCE jcd_user_seq\n    MINVALUE 1\n    NOMAXVALUE\n    INCREMENT BY 1\n    START WITH\n        1 NOCACHE ;\n\n--创建触发器\ncreate or replace trigger JCD_USER_ID_TRIGGER\n    before insert on JCD_USER\n    for each row\nbegin\n    select jcd_user_seq.nextval into: JCD_USER.U_ID from dual;\nend jcd_USER_ID_TRIGGER;\n```\n\n## 4. 简单的表操作\n\n```sql\n-- 创建表\nCREATE TABLE person (\n\tp_id NUMBER(6) PRIMARY KEY,\n\tp_name varchar(20) NOT NULL,\n\tp_other NUMBER(6),\n\tCONSTRAINT p_fk FOREIGN KEY (p_other) REFERENCES person(p_id)\n);\n \n\n-- 查询用户的所有表\nSELECT * FROM USER_TABLES;\n\n-- 查询表中内容\nSELECT * FROM PERSON;\n\n-- 修改表\n\n-- 添加新属性（列）\nALTER TABLE PERSON  \nADD p_birthday date NOT NULL;\n\n-- 修改以有属性的数据类型\nALTER TABLE PERSON \nMODIFY p_birthday timestamp;\n\n-- 将属性设置成unused\nALTER TABLE PERSON \nSET unused COLUMN  p_birthday;\n\n-- 查看\nSELECT * FROM PERSON; -- p_birthda这一列不在了\n\n-- 删除指定列\nALTER TABLE PERSON \nDROP COLUMN p_name;\n\n-- 删除unused状态的列\nALTER TABLE PERSON \nDROP unused COLUMN;\n\n-- 重命名属性\nALTER TABLE PERSON \nRENAME COLUMN p_id TO persion_id;\n\n-- 重命名表\nALTER TABLE PERSON \nRENAME TO test;\n\n-- 查看发现原来的表没有了\nSELECT * FROM user_tables;\n\n-- 删除表\nDROP TABLE test;\n```\n\n## 数据库对象命名规范\n\n| 类型 | 前缀 |\n|         -|   -|\n|表前缀     | t_ |\n|视图前缀   | v_ |\n|同义词前缀  | s_ |\n|簇表前缀    | c_ |\n|序列前缀    | seq_ |\n|存储过程前缀| p_ |\n|函数前缀    | f_ |\n|包前缀     | pkg_ |\n|类前缀     | tp_ |\n|主键前缀    | pk_ |\n|外键前缀    | fk_ |\n|唯一索引前缀| ux_ |\n|普通索引前缀| idx_ |\n|位图索引前缀| bx_ |\n|函数索引前缀| fx_ |","source":"_posts/OracleDB-最佳实践.md","raw":"---\ntitle: OracleDB 最佳实践\ndate: 2022-09-24 16:14:33\ntags: \n- Database\n- Oracle\n- PL/SQL\n---\n\n# OracleDB 最佳实践\n\n### 1. 创建表空间、用户\n\n```sql\n-- 创建表空间  \nCREATE TABLESPACE tang \n\tDATAFILE '/u01/app/oracle/oradata/xe/tang.dbf' \n\tSIZE 32 M \n\tAUTOEXTEND ON \n\tNEXT 32 M;\n```\n\n<!-- more -->\n\n```sql\n-- 新建用户并选择刚创建的表空间 \nCREATE USER quanwei  \n\tIDENTIFIED BY 123456          \n\t\tACCOUNT UNLOCK          \n\t\tDEFAULT TABLESPACE tang;\n```\n\n```sql\n-- connect,resource,dba权限赋予 quanwei用户\nGRANT CONNECT,RESOURCE,DBA TO quanwei;\n\n-- 多权限授权\nGRANT \nCREATE USER,\nDROP USER,\nALTER USER ,\nCREATE ANY VIEW ,\nDROP ANY VIEW,\nEXP_FULL_DATABASE,\nIMP_FULL_DATABASE,\nDBA,\nCONNECT,\nRESOURCE,\nCREATE SESSION \nTO quanwei;\n```\n\n## 2. 常用命令操作\n\n```sql\n--首先查询一下用户的profile的类型\nSELECT username, profile FROM dba_users;\n\n--查看制定概要文件（默认为DEFAULT）的密码有效期:\nSELECT * FROM dba_profiles WHERE profile='DEFAULT' AND resource_name='PASSWORD_LIFE_TIME';\n\n--然后将密码的有效期有180天设置为“无限制”;\nALTER PROFILE DEFAULT LIMIT PASSWORD_LIFE_TIME UNLIMITED;\n\n-- 修改密码\nALTER USER scott IDENTIFIED BY 123456;\n\n-- 查询所有用户\nSELECT * FROM ALL_USERS;\n\n-- 创建账户\nCREATE USER quanwei IDENTIFIED BY 123456;\n\n--  给用户授予权限\nGRANT CONNECT, RESOURCE, DBA TO quawnei;\nGRANT CREATE  SESSION  TO  quanwei;\n\n-- 解除锁定\nALTER USER quanwei ACCOUNT UNLOCK;\n```\n\n## 3. 主键自增\n\nSQL不区分大小写\n\n```sql\n---自增序列\nCREATE SEQUENCE jcd_user_seq\n    MINVALUE 1\n    NOMAXVALUE\n    INCREMENT BY 1\n    START WITH\n        1 NOCACHE ;\n\n--创建触发器\ncreate or replace trigger JCD_USER_ID_TRIGGER\n    before insert on JCD_USER\n    for each row\nbegin\n    select jcd_user_seq.nextval into: JCD_USER.U_ID from dual;\nend jcd_USER_ID_TRIGGER;\n```\n\n## 4. 简单的表操作\n\n```sql\n-- 创建表\nCREATE TABLE person (\n\tp_id NUMBER(6) PRIMARY KEY,\n\tp_name varchar(20) NOT NULL,\n\tp_other NUMBER(6),\n\tCONSTRAINT p_fk FOREIGN KEY (p_other) REFERENCES person(p_id)\n);\n \n\n-- 查询用户的所有表\nSELECT * FROM USER_TABLES;\n\n-- 查询表中内容\nSELECT * FROM PERSON;\n\n-- 修改表\n\n-- 添加新属性（列）\nALTER TABLE PERSON  \nADD p_birthday date NOT NULL;\n\n-- 修改以有属性的数据类型\nALTER TABLE PERSON \nMODIFY p_birthday timestamp;\n\n-- 将属性设置成unused\nALTER TABLE PERSON \nSET unused COLUMN  p_birthday;\n\n-- 查看\nSELECT * FROM PERSON; -- p_birthda这一列不在了\n\n-- 删除指定列\nALTER TABLE PERSON \nDROP COLUMN p_name;\n\n-- 删除unused状态的列\nALTER TABLE PERSON \nDROP unused COLUMN;\n\n-- 重命名属性\nALTER TABLE PERSON \nRENAME COLUMN p_id TO persion_id;\n\n-- 重命名表\nALTER TABLE PERSON \nRENAME TO test;\n\n-- 查看发现原来的表没有了\nSELECT * FROM user_tables;\n\n-- 删除表\nDROP TABLE test;\n```\n\n## 数据库对象命名规范\n\n| 类型 | 前缀 |\n|         -|   -|\n|表前缀     | t_ |\n|视图前缀   | v_ |\n|同义词前缀  | s_ |\n|簇表前缀    | c_ |\n|序列前缀    | seq_ |\n|存储过程前缀| p_ |\n|函数前缀    | f_ |\n|包前缀     | pkg_ |\n|类前缀     | tp_ |\n|主键前缀    | pk_ |\n|外键前缀    | fk_ |\n|唯一索引前缀| ux_ |\n|普通索引前缀| idx_ |\n|位图索引前缀| bx_ |\n|函数索引前缀| fx_ |","slug":"OracleDB-最佳实践","published":1,"updated":"2023-06-23T01:05:29.590Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5uv003elv9e35oie02j","content":"<h1 id=\"OracleDB-最佳实践\"><a href=\"#OracleDB-最佳实践\" class=\"headerlink\" title=\"OracleDB 最佳实践\"></a>OracleDB 最佳实践</h1><h3 id=\"1-创建表空间、用户\"><a href=\"#1-创建表空间、用户\" class=\"headerlink\" title=\"1. 创建表空间、用户\"></a>1. 创建表空间、用户</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建表空间  </span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span>SPACE tang </span><br><span class=\"line\">\tDATAFILE <span class=\"string\">&#x27;/u01/app/oracle/oradata/xe/tang.dbf&#x27;</span> </span><br><span class=\"line\">\tSIZE <span class=\"number\">32</span> M </span><br><span class=\"line\">\tAUTOEXTEND <span class=\"keyword\">ON</span> </span><br><span class=\"line\">\tNEXT <span class=\"number\">32</span> M;</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 新建用户并选择刚创建的表空间 </span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">USER</span> quanwei  </span><br><span class=\"line\">\tIDENTIFIED <span class=\"keyword\">BY</span> <span class=\"number\">123456</span>          </span><br><span class=\"line\">\t\tACCOUNT UNLOCK          </span><br><span class=\"line\">\t\t<span class=\"keyword\">DEFAULT</span> TABLESPACE tang;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- connect,resource,dba权限赋予 quanwei用户</span></span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">CONNECT</span>,RESOURCE,DBA <span class=\"keyword\">TO</span> quanwei;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 多权限授权</span></span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> </span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">USER</span>,</span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">USER</span>,</span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">USER</span> ,</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">ANY</span> <span class=\"keyword\">VIEW</span> ,</span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">ANY</span> <span class=\"keyword\">VIEW</span>,</span><br><span class=\"line\">EXP_FULL_DATABASE,</span><br><span class=\"line\">IMP_FULL_DATABASE,</span><br><span class=\"line\">DBA,</span><br><span class=\"line\"><span class=\"keyword\">CONNECT</span>,</span><br><span class=\"line\">RESOURCE,</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> SESSION </span><br><span class=\"line\"><span class=\"keyword\">TO</span> quanwei;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-常用命令操作\"><a href=\"#2-常用命令操作\" class=\"headerlink\" title=\"2. 常用命令操作\"></a>2. 常用命令操作</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--首先查询一下用户的profile的类型</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> username, profile <span class=\"keyword\">FROM</span> dba_users;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--查看制定概要文件（默认为DEFAULT）的密码有效期:</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> dba_profiles <span class=\"keyword\">WHERE</span> profile<span class=\"operator\">=</span><span class=\"string\">&#x27;DEFAULT&#x27;</span> <span class=\"keyword\">AND</span> resource_name<span class=\"operator\">=</span><span class=\"string\">&#x27;PASSWORD_LIFE_TIME&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--然后将密码的有效期有180天设置为“无限制”;</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> PROFILE <span class=\"keyword\">DEFAULT</span> LIMIT PASSWORD_LIFE_TIME UNLIMITED;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 修改密码</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">USER</span> scott IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"number\">123456</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查询所有用户</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> ALL_USERS;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 创建账户</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">USER</span> quanwei IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"number\">123456</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--  给用户授予权限</span></span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">CONNECT</span>, RESOURCE, DBA <span class=\"keyword\">TO</span> quawnei;</span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">CREATE</span>  SESSION  <span class=\"keyword\">TO</span>  quanwei;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 解除锁定</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">USER</span> quanwei ACCOUNT UNLOCK;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-主键自增\"><a href=\"#3-主键自增\" class=\"headerlink\" title=\"3. 主键自增\"></a>3. 主键自增</h2><p>SQL不区分大小写</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">---自增序列</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> SEQUENCE jcd_user_seq</span><br><span class=\"line\">    MINVALUE <span class=\"number\">1</span></span><br><span class=\"line\">    NOMAXVALUE</span><br><span class=\"line\">    INCREMENT <span class=\"keyword\">BY</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">START</span> <span class=\"keyword\">WITH</span></span><br><span class=\"line\">        <span class=\"number\">1</span> NOCACHE ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--创建触发器</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">or</span> replace <span class=\"keyword\">trigger</span> JCD_USER_ID_TRIGGER</span><br><span class=\"line\">    before <span class=\"keyword\">insert</span> <span class=\"keyword\">on</span> JCD_USER</span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"keyword\">each</span> <span class=\"type\">row</span></span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">    <span class=\"keyword\">select</span> jcd_user_seq.nextval <span class=\"keyword\">into</span>: JCD_USER.U_ID <span class=\"keyword\">from</span> dual;</span><br><span class=\"line\"><span class=\"keyword\">end</span> jcd_USER_ID_TRIGGER;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-简单的表操作\"><a href=\"#4-简单的表操作\" class=\"headerlink\" title=\"4. 简单的表操作\"></a>4. 简单的表操作</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建表</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> person (</span><br><span class=\"line\">\tp_id NUMBER(<span class=\"number\">6</span>) <span class=\"keyword\">PRIMARY</span> KEY,</span><br><span class=\"line\">\tp_name <span class=\"type\">varchar</span>(<span class=\"number\">20</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">\tp_other NUMBER(<span class=\"number\">6</span>),</span><br><span class=\"line\">\t<span class=\"keyword\">CONSTRAINT</span> p_fk <span class=\"keyword\">FOREIGN</span> KEY (p_other) <span class=\"keyword\">REFERENCES</span> person(p_id)</span><br><span class=\"line\">);</span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查询用户的所有表</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> USER_TABLES;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查询表中内容</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> PERSON;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 修改表</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 添加新属性（列）</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> PERSON  </span><br><span class=\"line\"><span class=\"keyword\">ADD</span> p_birthday <span class=\"type\">date</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 修改以有属性的数据类型</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> PERSON </span><br><span class=\"line\">MODIFY p_birthday <span class=\"type\">timestamp</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 将属性设置成unused</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> PERSON </span><br><span class=\"line\"><span class=\"keyword\">SET</span> unused <span class=\"keyword\">COLUMN</span>  p_birthday;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查看</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> PERSON; <span class=\"comment\">-- p_birthda这一列不在了</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 删除指定列</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> PERSON </span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">COLUMN</span> p_name;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 删除unused状态的列</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> PERSON </span><br><span class=\"line\"><span class=\"keyword\">DROP</span> unused <span class=\"keyword\">COLUMN</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 重命名属性</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> PERSON </span><br><span class=\"line\">RENAME <span class=\"keyword\">COLUMN</span> p_id <span class=\"keyword\">TO</span> persion_id;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 重命名表</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> PERSON </span><br><span class=\"line\">RENAME <span class=\"keyword\">TO</span> test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查看发现原来的表没有了</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> user_tables;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 删除表</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> test;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数据库对象命名规范\"><a href=\"#数据库对象命名规范\" class=\"headerlink\" title=\"数据库对象命名规范\"></a>数据库对象命名规范</h2><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>前缀</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>表前缀</td>\n<td>t_</td>\n</tr>\n<tr>\n<td>视图前缀</td>\n<td>v_</td>\n</tr>\n<tr>\n<td>同义词前缀</td>\n<td>s_</td>\n</tr>\n<tr>\n<td>簇表前缀</td>\n<td>c_</td>\n</tr>\n<tr>\n<td>序列前缀</td>\n<td>seq_</td>\n</tr>\n<tr>\n<td>存储过程前缀</td>\n<td>p_</td>\n</tr>\n<tr>\n<td>函数前缀</td>\n<td>f_</td>\n</tr>\n<tr>\n<td>包前缀</td>\n<td>pkg_</td>\n</tr>\n<tr>\n<td>类前缀</td>\n<td>tp_</td>\n</tr>\n<tr>\n<td>主键前缀</td>\n<td>pk_</td>\n</tr>\n<tr>\n<td>外键前缀</td>\n<td>fk_</td>\n</tr>\n<tr>\n<td>唯一索引前缀</td>\n<td>ux_</td>\n</tr>\n<tr>\n<td>普通索引前缀</td>\n<td>idx_</td>\n</tr>\n<tr>\n<td>位图索引前缀</td>\n<td>bx_</td>\n</tr>\n<tr>\n<td>函数索引前缀</td>\n<td>fx_</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"cover":false,"excerpt":"<h1 id=\"OracleDB-最佳实践\"><a href=\"#OracleDB-最佳实践\" class=\"headerlink\" title=\"OracleDB 最佳实践\"></a>OracleDB 最佳实践</h1><h3 id=\"1-创建表空间、用户\"><a href=\"#1-创建表空间、用户\" class=\"headerlink\" title=\"1. 创建表空间、用户\"></a>1. 创建表空间、用户</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建表空间  </span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span>SPACE tang </span><br><span class=\"line\">\tDATAFILE <span class=\"string\">&#x27;/u01/app/oracle/oradata/xe/tang.dbf&#x27;</span> </span><br><span class=\"line\">\tSIZE <span class=\"number\">32</span> M </span><br><span class=\"line\">\tAUTOEXTEND <span class=\"keyword\">ON</span> </span><br><span class=\"line\">\tNEXT <span class=\"number\">32</span> M;</span><br></pre></td></tr></table></figure>","more":"<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 新建用户并选择刚创建的表空间 </span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">USER</span> quanwei  </span><br><span class=\"line\">\tIDENTIFIED <span class=\"keyword\">BY</span> <span class=\"number\">123456</span>          </span><br><span class=\"line\">\t\tACCOUNT UNLOCK          </span><br><span class=\"line\">\t\t<span class=\"keyword\">DEFAULT</span> TABLESPACE tang;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- connect,resource,dba权限赋予 quanwei用户</span></span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">CONNECT</span>,RESOURCE,DBA <span class=\"keyword\">TO</span> quanwei;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 多权限授权</span></span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> </span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">USER</span>,</span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">USER</span>,</span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">USER</span> ,</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">ANY</span> <span class=\"keyword\">VIEW</span> ,</span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">ANY</span> <span class=\"keyword\">VIEW</span>,</span><br><span class=\"line\">EXP_FULL_DATABASE,</span><br><span class=\"line\">IMP_FULL_DATABASE,</span><br><span class=\"line\">DBA,</span><br><span class=\"line\"><span class=\"keyword\">CONNECT</span>,</span><br><span class=\"line\">RESOURCE,</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> SESSION </span><br><span class=\"line\"><span class=\"keyword\">TO</span> quanwei;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-常用命令操作\"><a href=\"#2-常用命令操作\" class=\"headerlink\" title=\"2. 常用命令操作\"></a>2. 常用命令操作</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--首先查询一下用户的profile的类型</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> username, profile <span class=\"keyword\">FROM</span> dba_users;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--查看制定概要文件（默认为DEFAULT）的密码有效期:</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> dba_profiles <span class=\"keyword\">WHERE</span> profile<span class=\"operator\">=</span><span class=\"string\">&#x27;DEFAULT&#x27;</span> <span class=\"keyword\">AND</span> resource_name<span class=\"operator\">=</span><span class=\"string\">&#x27;PASSWORD_LIFE_TIME&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--然后将密码的有效期有180天设置为“无限制”;</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> PROFILE <span class=\"keyword\">DEFAULT</span> LIMIT PASSWORD_LIFE_TIME UNLIMITED;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 修改密码</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">USER</span> scott IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"number\">123456</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查询所有用户</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> ALL_USERS;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 创建账户</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">USER</span> quanwei IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"number\">123456</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--  给用户授予权限</span></span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">CONNECT</span>, RESOURCE, DBA <span class=\"keyword\">TO</span> quawnei;</span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">CREATE</span>  SESSION  <span class=\"keyword\">TO</span>  quanwei;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 解除锁定</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">USER</span> quanwei ACCOUNT UNLOCK;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-主键自增\"><a href=\"#3-主键自增\" class=\"headerlink\" title=\"3. 主键自增\"></a>3. 主键自增</h2><p>SQL不区分大小写</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">---自增序列</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> SEQUENCE jcd_user_seq</span><br><span class=\"line\">    MINVALUE <span class=\"number\">1</span></span><br><span class=\"line\">    NOMAXVALUE</span><br><span class=\"line\">    INCREMENT <span class=\"keyword\">BY</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">START</span> <span class=\"keyword\">WITH</span></span><br><span class=\"line\">        <span class=\"number\">1</span> NOCACHE ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--创建触发器</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">or</span> replace <span class=\"keyword\">trigger</span> JCD_USER_ID_TRIGGER</span><br><span class=\"line\">    before <span class=\"keyword\">insert</span> <span class=\"keyword\">on</span> JCD_USER</span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"keyword\">each</span> <span class=\"type\">row</span></span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">    <span class=\"keyword\">select</span> jcd_user_seq.nextval <span class=\"keyword\">into</span>: JCD_USER.U_ID <span class=\"keyword\">from</span> dual;</span><br><span class=\"line\"><span class=\"keyword\">end</span> jcd_USER_ID_TRIGGER;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-简单的表操作\"><a href=\"#4-简单的表操作\" class=\"headerlink\" title=\"4. 简单的表操作\"></a>4. 简单的表操作</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建表</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> person (</span><br><span class=\"line\">\tp_id NUMBER(<span class=\"number\">6</span>) <span class=\"keyword\">PRIMARY</span> KEY,</span><br><span class=\"line\">\tp_name <span class=\"type\">varchar</span>(<span class=\"number\">20</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">\tp_other NUMBER(<span class=\"number\">6</span>),</span><br><span class=\"line\">\t<span class=\"keyword\">CONSTRAINT</span> p_fk <span class=\"keyword\">FOREIGN</span> KEY (p_other) <span class=\"keyword\">REFERENCES</span> person(p_id)</span><br><span class=\"line\">);</span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查询用户的所有表</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> USER_TABLES;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查询表中内容</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> PERSON;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 修改表</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 添加新属性（列）</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> PERSON  </span><br><span class=\"line\"><span class=\"keyword\">ADD</span> p_birthday <span class=\"type\">date</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 修改以有属性的数据类型</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> PERSON </span><br><span class=\"line\">MODIFY p_birthday <span class=\"type\">timestamp</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 将属性设置成unused</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> PERSON </span><br><span class=\"line\"><span class=\"keyword\">SET</span> unused <span class=\"keyword\">COLUMN</span>  p_birthday;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查看</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> PERSON; <span class=\"comment\">-- p_birthda这一列不在了</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 删除指定列</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> PERSON </span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">COLUMN</span> p_name;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 删除unused状态的列</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> PERSON </span><br><span class=\"line\"><span class=\"keyword\">DROP</span> unused <span class=\"keyword\">COLUMN</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 重命名属性</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> PERSON </span><br><span class=\"line\">RENAME <span class=\"keyword\">COLUMN</span> p_id <span class=\"keyword\">TO</span> persion_id;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 重命名表</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> PERSON </span><br><span class=\"line\">RENAME <span class=\"keyword\">TO</span> test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查看发现原来的表没有了</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> user_tables;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 删除表</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> test;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数据库对象命名规范\"><a href=\"#数据库对象命名规范\" class=\"headerlink\" title=\"数据库对象命名规范\"></a>数据库对象命名规范</h2><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>前缀</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>表前缀</td>\n<td>t_</td>\n</tr>\n<tr>\n<td>视图前缀</td>\n<td>v_</td>\n</tr>\n<tr>\n<td>同义词前缀</td>\n<td>s_</td>\n</tr>\n<tr>\n<td>簇表前缀</td>\n<td>c_</td>\n</tr>\n<tr>\n<td>序列前缀</td>\n<td>seq_</td>\n</tr>\n<tr>\n<td>存储过程前缀</td>\n<td>p_</td>\n</tr>\n<tr>\n<td>函数前缀</td>\n<td>f_</td>\n</tr>\n<tr>\n<td>包前缀</td>\n<td>pkg_</td>\n</tr>\n<tr>\n<td>类前缀</td>\n<td>tp_</td>\n</tr>\n<tr>\n<td>主键前缀</td>\n<td>pk_</td>\n</tr>\n<tr>\n<td>外键前缀</td>\n<td>fk_</td>\n</tr>\n<tr>\n<td>唯一索引前缀</td>\n<td>ux_</td>\n</tr>\n<tr>\n<td>普通索引前缀</td>\n<td>idx_</td>\n</tr>\n<tr>\n<td>位图索引前缀</td>\n<td>bx_</td>\n</tr>\n<tr>\n<td>函数索引前缀</td>\n<td>fx_</td>\n</tr>\n</tbody></table>"},{"title":"PostgreSQL 快速入门","date":"2023-08-02T12:31:35.000Z","cover":false,"_content":"\n## PostgreSQL命令\n\n1. 连接到数据库：\n\n```shell\npsql -U username -d database_name\n```\n\n请将`username`替换为您的用户名，`database_name`替换为您要连接的数据库名称。\n\n2. 显示数据库列表：\n\n```shell\n\\l\n```\n\n这将列出所有可用的数据库。\n\n3. 切换到特定数据库：\n\n```shell\n\\c database_name\n```\n\n请将`database_name`替换为您要切换到的数据库名称。\n\n4. 显示表列表：\n\n```shell\n\\dt\n```\n\n这将列出当前数据库中的所有表。\n\n5. 显示表结构：\n\n```shell\n\\d table_name\n```\n\n请将`table_name`替换为您要查看结构的表名称。\n\n6. 执行SQL查询：\n\n```shell\nSELECT * FROM table_name;\n```\n\n请将`table_name`替换为您要查询的表名称。\n\n7. 退出psql：\n\n```shell\n\\q\n```\n\n这将退出psql命令行界面。\n\n\n## 常用对象\n\n在PostgreSQL中，有多种类型的数据库对象可用于组织和管理数据。以下是一些常见的数据库对象：\n\n1. 表（Table）：表是存储数据的基本单位。它由行和列组成，每个列定义了表中的一个属性。\n\n2. 视图（View）：视图是基于一个或多个表的查询结果的虚拟表。它可以简化复杂的查询，并提供一种抽象的方式来访问数据。\n\n3. 索引（Index）：索引是一种数据结构，用于加快对表中数据的访问速度。它可以根据一个或多个列的值快速定位到匹配的行。\n\n4. 序列（Sequence）：序列是一种生成唯一数值的对象。它通常用于为表的主键列生成自增的唯一标识符。\n\n5. 函数（Function）：函数是一段可重复使用的代码，接受输入参数并返回一个值或结果集。它可以用于执行特定的计算或操作。\n\n6. 存储过程（Stored Procedure）：存储过程是一组预定义的SQL语句，可以在数据库中进行调用。它可以接受输入参数，并根据需要执行一系列操作。\n\n7. 触发器（Trigger）：触发器是与表相关联的一段代码，当满足特定条件时自动执行。它可以用于在数据插入、更新或删除时执行额外的逻辑操作。\n\n8. 模式（Schema）：模式是用于组织和管理数据库对象的命名空间。它可以将数据库对象分组到逻辑上独立的单元中，以便更好地管理和控制访问权限。\n\n## 常用数据类型\n\n在PostgreSQL中，有多种常用的数据类型可用于存储和处理不同类型的数据。以下是一些常见的数据类型：\n\n1. 整数类型（Integer Types）：用于存储整数值，如`integer`、`smallint`、`bigint`等。\n\n2. 浮点数类型（Floating-Point Types）：用于存储浮点数值，如`real`、`double precision`等。\n\n3. 字符串类型（Character Types）：用于存储文本数据，如`character varying`、`text`等。\n\n4. 日期和时间类型（Date and Time Types）：用于存储日期、时间和时间戳，如`date`、`time`、`timestamp`等。\n\n5. 布尔类型（Boolean Type）：用于存储布尔值，即`true`或`false`。\n\n6. 数组类型（Array Types）：用于存储多个相同类型的值的数组，如`integer[]`、`text[]`等。\n\n7. JSON类型（JSON Type）：用于存储JSON格式的数据，如`json`、`jsonb`等。\n\n8.  UUID类型（UUID Type）：用于存储唯一标识符，如`uuid`。\n\n## 表操作\n\n在PostgreSQL中，可以使用SQL语句对表进行各种操作。以下是一些常见的表操作：\n\n1. 创建表（Create Table）：使用CREATE TABLE语句创建一个新的表，并指定表的名称和列的定义。例如：\n\n```sql\nCREATE TABLE table_name (\n    id serial PRIMARY KEY, -- 主键自增\n    table1_id integer REFERENCES table1(id),\n    column1 datatype DEFAULT default_value,\n    ...\n    column3 datatype,\n    column2 datatype,\n    PRIMARY KEY (column1, column2),--复合主键（Composite Primary Key）\n    ...\n);\n\n--外部表（Foreign Table）\nCREATE FOREIGN TABLE table_name (\n    column1 datatype,\n    column2 datatype,\n    ...\n) SERVER server_name OPTIONS (option1 'value1', option2 'value2', ...);\n```\n\n`SERIAL`是PostgreSQL中的一种伪类型，它实际上是一个自增长的整数列。\n\n使用`SERIAL`数据类型可以简化自增长列的创建过程。当我们将列的数据类型设置为`SERIAL`时，PostgreSQL会自动创建一个序列（sequence），并将其与该列关联起来。每次插入新行时，序列会自动递增，并将递增后的值赋给`SERIAL`列。\n\n\n1. 修改表结构（Alter Table）：使用ALTER TABLE语句修改表的结构，包括添加、修改或删除列，添加或删除约束等。例如：\n\n```sql\n-- 添加列\nALTER TABLE table_name ADD COLUMN column_name datatype;\n\n-- 修改列类型\nALTER TABLE table_name ALTER COLUMN column_name TYPE new_datatype;\n\n-- 删除列\nALTER TABLE table_name DROP COLUMN column_name;\n```\n\n3. 插入数据（Insert Into）：使用INSERT INTO语句向表中插入新的行数据。例如：\n\n```sql\nINSERT INTO table_name (column1, column2, ...)\nVALUES (value1, value2, ...);\n```\n\n4. 更新数据（Update）：使用UPDATE语句更新表中的行数据。例如：\n\n```sql\nUPDATE table_name\nSET column1 = value1, column2 = value2, ...\nWHERE condition;\n```\n\n5. 删除数据（Delete）：使用DELETE语句删除表中的行数据。例如：\n\n```sql\nDELETE FROM table_name\nWHERE condition;\n```\n\n6. 查询数据（Select）：使用SELECT语句从表中检索数据。例如：\n\n```sql\nSELECT column1, column2, ...\nFROM table_name\nWHERE condition;\n```\n\n7. 创建索引（Create Index）：使用CREATE INDEX语句创建索引，以加快对表中数据的访问速度。例如：\n\n```sql\nCREATE INDEX index_name\nON table_name (column1, column2, ...);\n```\n\n\n## 注释\n\n在PostgreSQL中，可以使用注释来为表、列、约束等数据库对象添加说明和描述。注释可以提供有关对象的额外信息，以便于理解和维护数据库结构。以下是在PostgreSQL中添加注释的方法：\n\n1. 表注释（Table Comment）：可以使用COMMENT语句为表添加注释。例如：\n\n```sql\nCOMMENT ON TABLE table_name IS 'This is a table comment.';\n```\n\n2. 列注释（Column Comment）：可以使用COMMENT语句为表中的列添加注释。例如：\n\n```sql\nCOMMENT ON COLUMN table_name.column_name IS 'This is a column comment.';\n```\n\n3. 约束注释（Constraint Comment）：可以使用COMMENT语句为表中的约束添加注释。例如：\n\n```sql\nCOMMENT ON CONSTRAINT constraint_name ON table_name IS 'This is a constraint comment.';\n```\n\n4. 数据库注释（Database Comment）：可以使用COMMENT语句为整个数据库添加注释。例如：\n\n```sql\nCOMMENT ON DATABASE database_name IS 'This is a database comment.';\n```\n\n5. 查看注释（View Comments）：可以使用以下查询语句查看表、列、约束等对象的注释：\n\n```sql\n-- 查看表注释\nSELECT obj_description('table_name'::regclass) AS table_comment;\n\n-- 查看列注释\nSELECT col_description('table_name'::regclass, 'column_name') AS column_comment;\n\n-- 查看约束注释\nSELECT obj_description('constraint_name'::regclass) AS constraint_comment;\n\n-- 查看数据库注释\nSELECT description FROM pg_catalog.pg_shdescription WHERE objoid = 'database_name'::regclass;\n```\n\n注意：在上述查询语句中，将'table_name'、'column_name'、'constraint_name'和'database_name'替换为实际的对象名称。\n\n## 用户操作\n\n在PostgreSQL中，可以使用SQL语句和特定的命令来进行用户操作。以下是一些常见的用户操作：\n\n1. 创建用户（Create User）：使用CREATE USER语句创建一个新的用户，并指定用户名和密码。例如：\n\n```sql\nCREATE USER username WITH PASSWORD 'password';\n```\n\n2. 修改用户密码（Alter User）：使用ALTER USER语句修改用户的密码。例如：\n\n```sql\nALTER USER username WITH PASSWORD 'new_password';\n```\n\n3. 授予角色（Grant Role）：使用GRANT语句将角色授予用户。例如：\n\n```sql\nGRANT role_name TO username;\n```\n\n4. 撤销角色（Revoke Role）：使用REVOKE语句从用户中撤销角色。例如：\n\n```sql\nREVOKE role_name FROM username;\n```\n\n5. 授予权限（Grant Privileges）：使用GRANT语句将特定的权限授予用户。例如：\n\n```sql\nGRANT privilege_name ON table_name TO username;\n```\n\n6. 撤销权限（Revoke Privileges）：使用REVOKE语句从用户中撤销特定的权限。例如：\n\n```sql\nREVOKE privilege_name ON table_name FROM username;\n```\n\n7. 删除用户（Drop User）：使用DROP USER语句删除用户。例如：\n\n```sql\nDROP USER username;\n```\n\n8. 查看用户（View Users）：可以使用以下查询语句查看数据库中的用户列表：\n\n```sql\nSELECT usename FROM pg_user;\n```\n\n## 常用查询\n\n在PostgreSQL中，有许多常用的查询语句可以帮助你检索和操作数据库中的数据。以下是一些常见的查询示例：\n\n1. 查询所有数据（Select All）：使用SELECT语句可以检索表中的所有数据。例如：\n\n```sql\nSELECT * FROM table_name;\n```\n\n2. 条件查询（Conditional Query）：使用WHERE子句可以根据条件过滤数据。例如，查询年龄大于等于18岁的用户：\n\n```sql\nSELECT * FROM users WHERE age >= 18;\n```\n\n3. 排序查询（Ordering Query）：使用ORDER BY子句可以按照指定的列对结果进行排序。例如，按照用户的姓名进行升序排序：\n\n```sql\nSELECT * FROM users ORDER BY name ASC;\n```\n\n4. 聚合查询（Aggregate Query）：使用聚合函数可以对数据进行统计和计算。例如，计算某个列的平均值：\n\n```sql\nSELECT AVG(column_name) FROM table_name;\n```\n\n5. 连接查询（Join Query）：使用JOIN语句可以将多个表连接在一起进行查询。例如，查询订单表和用户表中相关联的数据：\n\n```sql\nSELECT * FROM orders\nJOIN users ON orders.user_id = users.id;\n```\n\n6. 分组查询（Grouping Query）：使用GROUP BY子句可以将数据按照指定的列进行分组。例如，按照用户的性别统计用户数量：\n\n```sql\nSELECT gender, COUNT(*) FROM users GROUP BY gender;\n```\n\n7. 子查询（Subquery）：可以在查询中嵌套使用子查询来获取更复杂的结果。例如，查询年龄大于平均年龄的用户：\n\n```sql\nSELECT * FROM users WHERE age > (SELECT AVG(age) FROM users);\n```\n\n这些是一些常见的查询示例，可以根据具体的需求和数据结构进行相应的查询操作。使用合适的查询语句和条件，可以有效地检索和操作数据库中的数据。\n\n\n","source":"_posts/PostgreSQL-快速入门.md","raw":"---\ntitle: PostgreSQL 快速入门\ntags: \n- PostgreSQL\n- Database\ndate: 2023-08-02 20:31:35\ncover:\n---\n\n## PostgreSQL命令\n\n1. 连接到数据库：\n\n```shell\npsql -U username -d database_name\n```\n\n请将`username`替换为您的用户名，`database_name`替换为您要连接的数据库名称。\n\n2. 显示数据库列表：\n\n```shell\n\\l\n```\n\n这将列出所有可用的数据库。\n\n3. 切换到特定数据库：\n\n```shell\n\\c database_name\n```\n\n请将`database_name`替换为您要切换到的数据库名称。\n\n4. 显示表列表：\n\n```shell\n\\dt\n```\n\n这将列出当前数据库中的所有表。\n\n5. 显示表结构：\n\n```shell\n\\d table_name\n```\n\n请将`table_name`替换为您要查看结构的表名称。\n\n6. 执行SQL查询：\n\n```shell\nSELECT * FROM table_name;\n```\n\n请将`table_name`替换为您要查询的表名称。\n\n7. 退出psql：\n\n```shell\n\\q\n```\n\n这将退出psql命令行界面。\n\n\n## 常用对象\n\n在PostgreSQL中，有多种类型的数据库对象可用于组织和管理数据。以下是一些常见的数据库对象：\n\n1. 表（Table）：表是存储数据的基本单位。它由行和列组成，每个列定义了表中的一个属性。\n\n2. 视图（View）：视图是基于一个或多个表的查询结果的虚拟表。它可以简化复杂的查询，并提供一种抽象的方式来访问数据。\n\n3. 索引（Index）：索引是一种数据结构，用于加快对表中数据的访问速度。它可以根据一个或多个列的值快速定位到匹配的行。\n\n4. 序列（Sequence）：序列是一种生成唯一数值的对象。它通常用于为表的主键列生成自增的唯一标识符。\n\n5. 函数（Function）：函数是一段可重复使用的代码，接受输入参数并返回一个值或结果集。它可以用于执行特定的计算或操作。\n\n6. 存储过程（Stored Procedure）：存储过程是一组预定义的SQL语句，可以在数据库中进行调用。它可以接受输入参数，并根据需要执行一系列操作。\n\n7. 触发器（Trigger）：触发器是与表相关联的一段代码，当满足特定条件时自动执行。它可以用于在数据插入、更新或删除时执行额外的逻辑操作。\n\n8. 模式（Schema）：模式是用于组织和管理数据库对象的命名空间。它可以将数据库对象分组到逻辑上独立的单元中，以便更好地管理和控制访问权限。\n\n## 常用数据类型\n\n在PostgreSQL中，有多种常用的数据类型可用于存储和处理不同类型的数据。以下是一些常见的数据类型：\n\n1. 整数类型（Integer Types）：用于存储整数值，如`integer`、`smallint`、`bigint`等。\n\n2. 浮点数类型（Floating-Point Types）：用于存储浮点数值，如`real`、`double precision`等。\n\n3. 字符串类型（Character Types）：用于存储文本数据，如`character varying`、`text`等。\n\n4. 日期和时间类型（Date and Time Types）：用于存储日期、时间和时间戳，如`date`、`time`、`timestamp`等。\n\n5. 布尔类型（Boolean Type）：用于存储布尔值，即`true`或`false`。\n\n6. 数组类型（Array Types）：用于存储多个相同类型的值的数组，如`integer[]`、`text[]`等。\n\n7. JSON类型（JSON Type）：用于存储JSON格式的数据，如`json`、`jsonb`等。\n\n8.  UUID类型（UUID Type）：用于存储唯一标识符，如`uuid`。\n\n## 表操作\n\n在PostgreSQL中，可以使用SQL语句对表进行各种操作。以下是一些常见的表操作：\n\n1. 创建表（Create Table）：使用CREATE TABLE语句创建一个新的表，并指定表的名称和列的定义。例如：\n\n```sql\nCREATE TABLE table_name (\n    id serial PRIMARY KEY, -- 主键自增\n    table1_id integer REFERENCES table1(id),\n    column1 datatype DEFAULT default_value,\n    ...\n    column3 datatype,\n    column2 datatype,\n    PRIMARY KEY (column1, column2),--复合主键（Composite Primary Key）\n    ...\n);\n\n--外部表（Foreign Table）\nCREATE FOREIGN TABLE table_name (\n    column1 datatype,\n    column2 datatype,\n    ...\n) SERVER server_name OPTIONS (option1 'value1', option2 'value2', ...);\n```\n\n`SERIAL`是PostgreSQL中的一种伪类型，它实际上是一个自增长的整数列。\n\n使用`SERIAL`数据类型可以简化自增长列的创建过程。当我们将列的数据类型设置为`SERIAL`时，PostgreSQL会自动创建一个序列（sequence），并将其与该列关联起来。每次插入新行时，序列会自动递增，并将递增后的值赋给`SERIAL`列。\n\n\n1. 修改表结构（Alter Table）：使用ALTER TABLE语句修改表的结构，包括添加、修改或删除列，添加或删除约束等。例如：\n\n```sql\n-- 添加列\nALTER TABLE table_name ADD COLUMN column_name datatype;\n\n-- 修改列类型\nALTER TABLE table_name ALTER COLUMN column_name TYPE new_datatype;\n\n-- 删除列\nALTER TABLE table_name DROP COLUMN column_name;\n```\n\n3. 插入数据（Insert Into）：使用INSERT INTO语句向表中插入新的行数据。例如：\n\n```sql\nINSERT INTO table_name (column1, column2, ...)\nVALUES (value1, value2, ...);\n```\n\n4. 更新数据（Update）：使用UPDATE语句更新表中的行数据。例如：\n\n```sql\nUPDATE table_name\nSET column1 = value1, column2 = value2, ...\nWHERE condition;\n```\n\n5. 删除数据（Delete）：使用DELETE语句删除表中的行数据。例如：\n\n```sql\nDELETE FROM table_name\nWHERE condition;\n```\n\n6. 查询数据（Select）：使用SELECT语句从表中检索数据。例如：\n\n```sql\nSELECT column1, column2, ...\nFROM table_name\nWHERE condition;\n```\n\n7. 创建索引（Create Index）：使用CREATE INDEX语句创建索引，以加快对表中数据的访问速度。例如：\n\n```sql\nCREATE INDEX index_name\nON table_name (column1, column2, ...);\n```\n\n\n## 注释\n\n在PostgreSQL中，可以使用注释来为表、列、约束等数据库对象添加说明和描述。注释可以提供有关对象的额外信息，以便于理解和维护数据库结构。以下是在PostgreSQL中添加注释的方法：\n\n1. 表注释（Table Comment）：可以使用COMMENT语句为表添加注释。例如：\n\n```sql\nCOMMENT ON TABLE table_name IS 'This is a table comment.';\n```\n\n2. 列注释（Column Comment）：可以使用COMMENT语句为表中的列添加注释。例如：\n\n```sql\nCOMMENT ON COLUMN table_name.column_name IS 'This is a column comment.';\n```\n\n3. 约束注释（Constraint Comment）：可以使用COMMENT语句为表中的约束添加注释。例如：\n\n```sql\nCOMMENT ON CONSTRAINT constraint_name ON table_name IS 'This is a constraint comment.';\n```\n\n4. 数据库注释（Database Comment）：可以使用COMMENT语句为整个数据库添加注释。例如：\n\n```sql\nCOMMENT ON DATABASE database_name IS 'This is a database comment.';\n```\n\n5. 查看注释（View Comments）：可以使用以下查询语句查看表、列、约束等对象的注释：\n\n```sql\n-- 查看表注释\nSELECT obj_description('table_name'::regclass) AS table_comment;\n\n-- 查看列注释\nSELECT col_description('table_name'::regclass, 'column_name') AS column_comment;\n\n-- 查看约束注释\nSELECT obj_description('constraint_name'::regclass) AS constraint_comment;\n\n-- 查看数据库注释\nSELECT description FROM pg_catalog.pg_shdescription WHERE objoid = 'database_name'::regclass;\n```\n\n注意：在上述查询语句中，将'table_name'、'column_name'、'constraint_name'和'database_name'替换为实际的对象名称。\n\n## 用户操作\n\n在PostgreSQL中，可以使用SQL语句和特定的命令来进行用户操作。以下是一些常见的用户操作：\n\n1. 创建用户（Create User）：使用CREATE USER语句创建一个新的用户，并指定用户名和密码。例如：\n\n```sql\nCREATE USER username WITH PASSWORD 'password';\n```\n\n2. 修改用户密码（Alter User）：使用ALTER USER语句修改用户的密码。例如：\n\n```sql\nALTER USER username WITH PASSWORD 'new_password';\n```\n\n3. 授予角色（Grant Role）：使用GRANT语句将角色授予用户。例如：\n\n```sql\nGRANT role_name TO username;\n```\n\n4. 撤销角色（Revoke Role）：使用REVOKE语句从用户中撤销角色。例如：\n\n```sql\nREVOKE role_name FROM username;\n```\n\n5. 授予权限（Grant Privileges）：使用GRANT语句将特定的权限授予用户。例如：\n\n```sql\nGRANT privilege_name ON table_name TO username;\n```\n\n6. 撤销权限（Revoke Privileges）：使用REVOKE语句从用户中撤销特定的权限。例如：\n\n```sql\nREVOKE privilege_name ON table_name FROM username;\n```\n\n7. 删除用户（Drop User）：使用DROP USER语句删除用户。例如：\n\n```sql\nDROP USER username;\n```\n\n8. 查看用户（View Users）：可以使用以下查询语句查看数据库中的用户列表：\n\n```sql\nSELECT usename FROM pg_user;\n```\n\n## 常用查询\n\n在PostgreSQL中，有许多常用的查询语句可以帮助你检索和操作数据库中的数据。以下是一些常见的查询示例：\n\n1. 查询所有数据（Select All）：使用SELECT语句可以检索表中的所有数据。例如：\n\n```sql\nSELECT * FROM table_name;\n```\n\n2. 条件查询（Conditional Query）：使用WHERE子句可以根据条件过滤数据。例如，查询年龄大于等于18岁的用户：\n\n```sql\nSELECT * FROM users WHERE age >= 18;\n```\n\n3. 排序查询（Ordering Query）：使用ORDER BY子句可以按照指定的列对结果进行排序。例如，按照用户的姓名进行升序排序：\n\n```sql\nSELECT * FROM users ORDER BY name ASC;\n```\n\n4. 聚合查询（Aggregate Query）：使用聚合函数可以对数据进行统计和计算。例如，计算某个列的平均值：\n\n```sql\nSELECT AVG(column_name) FROM table_name;\n```\n\n5. 连接查询（Join Query）：使用JOIN语句可以将多个表连接在一起进行查询。例如，查询订单表和用户表中相关联的数据：\n\n```sql\nSELECT * FROM orders\nJOIN users ON orders.user_id = users.id;\n```\n\n6. 分组查询（Grouping Query）：使用GROUP BY子句可以将数据按照指定的列进行分组。例如，按照用户的性别统计用户数量：\n\n```sql\nSELECT gender, COUNT(*) FROM users GROUP BY gender;\n```\n\n7. 子查询（Subquery）：可以在查询中嵌套使用子查询来获取更复杂的结果。例如，查询年龄大于平均年龄的用户：\n\n```sql\nSELECT * FROM users WHERE age > (SELECT AVG(age) FROM users);\n```\n\n这些是一些常见的查询示例，可以根据具体的需求和数据结构进行相应的查询操作。使用合适的查询语句和条件，可以有效地检索和操作数据库中的数据。\n\n\n","slug":"PostgreSQL-快速入门","published":1,"updated":"2023-08-07T10:00:32.625Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5uw003glv9e8gnggkiy","content":"<h2 id=\"PostgreSQL命令\"><a href=\"#PostgreSQL命令\" class=\"headerlink\" title=\"PostgreSQL命令\"></a>PostgreSQL命令</h2><ol>\n<li>连接到数据库：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">psql -U username -d database_name</span><br></pre></td></tr></table></figure>\n\n<p>请将<code>username</code>替换为您的用户名，<code>database_name</code>替换为您要连接的数据库名称。</p>\n<ol start=\"2\">\n<li>显示数据库列表：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\l</span><br></pre></td></tr></table></figure>\n\n<p>这将列出所有可用的数据库。</p>\n<ol start=\"3\">\n<li>切换到特定数据库：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\c database_name</span><br></pre></td></tr></table></figure>\n\n<p>请将<code>database_name</code>替换为您要切换到的数据库名称。</p>\n<ol start=\"4\">\n<li>显示表列表：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\dt</span><br></pre></td></tr></table></figure>\n\n<p>这将列出当前数据库中的所有表。</p>\n<ol start=\"5\">\n<li>显示表结构：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\d table_name</span><br></pre></td></tr></table></figure>\n\n<p>请将<code>table_name</code>替换为您要查看结构的表名称。</p>\n<ol start=\"6\">\n<li>执行SQL查询：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM table_name;</span><br></pre></td></tr></table></figure>\n\n<p>请将<code>table_name</code>替换为您要查询的表名称。</p>\n<ol start=\"7\">\n<li>退出psql：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\q</span><br></pre></td></tr></table></figure>\n\n<p>这将退出psql命令行界面。</p>\n<h2 id=\"常用对象\"><a href=\"#常用对象\" class=\"headerlink\" title=\"常用对象\"></a>常用对象</h2><p>在PostgreSQL中，有多种类型的数据库对象可用于组织和管理数据。以下是一些常见的数据库对象：</p>\n<ol>\n<li><p>表（Table）：表是存储数据的基本单位。它由行和列组成，每个列定义了表中的一个属性。</p>\n</li>\n<li><p>视图（View）：视图是基于一个或多个表的查询结果的虚拟表。它可以简化复杂的查询，并提供一种抽象的方式来访问数据。</p>\n</li>\n<li><p>索引（Index）：索引是一种数据结构，用于加快对表中数据的访问速度。它可以根据一个或多个列的值快速定位到匹配的行。</p>\n</li>\n<li><p>序列（Sequence）：序列是一种生成唯一数值的对象。它通常用于为表的主键列生成自增的唯一标识符。</p>\n</li>\n<li><p>函数（Function）：函数是一段可重复使用的代码，接受输入参数并返回一个值或结果集。它可以用于执行特定的计算或操作。</p>\n</li>\n<li><p>存储过程（Stored Procedure）：存储过程是一组预定义的SQL语句，可以在数据库中进行调用。它可以接受输入参数，并根据需要执行一系列操作。</p>\n</li>\n<li><p>触发器（Trigger）：触发器是与表相关联的一段代码，当满足特定条件时自动执行。它可以用于在数据插入、更新或删除时执行额外的逻辑操作。</p>\n</li>\n<li><p>模式（Schema）：模式是用于组织和管理数据库对象的命名空间。它可以将数据库对象分组到逻辑上独立的单元中，以便更好地管理和控制访问权限。</p>\n</li>\n</ol>\n<h2 id=\"常用数据类型\"><a href=\"#常用数据类型\" class=\"headerlink\" title=\"常用数据类型\"></a>常用数据类型</h2><p>在PostgreSQL中，有多种常用的数据类型可用于存储和处理不同类型的数据。以下是一些常见的数据类型：</p>\n<ol>\n<li><p>整数类型（Integer Types）：用于存储整数值，如<code>integer</code>、<code>smallint</code>、<code>bigint</code>等。</p>\n</li>\n<li><p>浮点数类型（Floating-Point Types）：用于存储浮点数值，如<code>real</code>、<code>double precision</code>等。</p>\n</li>\n<li><p>字符串类型（Character Types）：用于存储文本数据，如<code>character varying</code>、<code>text</code>等。</p>\n</li>\n<li><p>日期和时间类型（Date and Time Types）：用于存储日期、时间和时间戳，如<code>date</code>、<code>time</code>、<code>timestamp</code>等。</p>\n</li>\n<li><p>布尔类型（Boolean Type）：用于存储布尔值，即<code>true</code>或<code>false</code>。</p>\n</li>\n<li><p>数组类型（Array Types）：用于存储多个相同类型的值的数组，如<code>integer[]</code>、<code>text[]</code>等。</p>\n</li>\n<li><p>JSON类型（JSON Type）：用于存储JSON格式的数据，如<code>json</code>、<code>jsonb</code>等。</p>\n</li>\n<li><p>UUID类型（UUID Type）：用于存储唯一标识符，如<code>uuid</code>。</p>\n</li>\n</ol>\n<h2 id=\"表操作\"><a href=\"#表操作\" class=\"headerlink\" title=\"表操作\"></a>表操作</h2><p>在PostgreSQL中，可以使用SQL语句对表进行各种操作。以下是一些常见的表操作：</p>\n<ol>\n<li>创建表（Create Table）：使用CREATE TABLE语句创建一个新的表，并指定表的名称和列的定义。例如：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> table_name (</span><br><span class=\"line\">    id serial <span class=\"keyword\">PRIMARY</span> KEY, <span class=\"comment\">-- 主键自增</span></span><br><span class=\"line\">    table1_id <span class=\"type\">integer</span> <span class=\"keyword\">REFERENCES</span> table1(id),</span><br><span class=\"line\">    column1 datatype <span class=\"keyword\">DEFAULT</span> default_value,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    column3 datatype,</span><br><span class=\"line\">    column2 datatype,</span><br><span class=\"line\">    <span class=\"keyword\">PRIMARY</span> KEY (column1, column2),<span class=\"comment\">--复合主键（Composite Primary Key）</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--外部表（Foreign Table）</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">FOREIGN</span> <span class=\"keyword\">TABLE</span> table_name (</span><br><span class=\"line\">    column1 datatype,</span><br><span class=\"line\">    column2 datatype,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">) SERVER server_name OPTIONS (option1 <span class=\"string\">&#x27;value1&#x27;</span>, option2 <span class=\"string\">&#x27;value2&#x27;</span>, ...);</span><br></pre></td></tr></table></figure>\n\n<p><code>SERIAL</code>是PostgreSQL中的一种伪类型，它实际上是一个自增长的整数列。</p>\n<p>使用<code>SERIAL</code>数据类型可以简化自增长列的创建过程。当我们将列的数据类型设置为<code>SERIAL</code>时，PostgreSQL会自动创建一个序列（sequence），并将其与该列关联起来。每次插入新行时，序列会自动递增，并将递增后的值赋给<code>SERIAL</code>列。</p>\n<ol>\n<li>修改表结构（Alter Table）：使用ALTER TABLE语句修改表的结构，包括添加、修改或删除列，添加或删除约束等。例如：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 添加列</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">ADD</span> <span class=\"keyword\">COLUMN</span> column_name datatype;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 修改列类型</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">ALTER</span> <span class=\"keyword\">COLUMN</span> column_name TYPE new_datatype;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 删除列</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">DROP</span> <span class=\"keyword\">COLUMN</span> column_name;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>插入数据（Insert Into）：使用INSERT INTO语句向表中插入新的行数据。例如：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> table_name (column1, column2, ...)</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span> (value1, value2, ...);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>更新数据（Update）：使用UPDATE语句更新表中的行数据。例如：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">UPDATE</span> table_name</span><br><span class=\"line\"><span class=\"keyword\">SET</span> column1 <span class=\"operator\">=</span> value1, column2 <span class=\"operator\">=</span> value2, ...</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> <span class=\"keyword\">condition</span>;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>删除数据（Delete）：使用DELETE语句删除表中的行数据。例如：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> <span class=\"keyword\">condition</span>;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>查询数据（Select）：使用SELECT语句从表中检索数据。例如：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2, ...</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> <span class=\"keyword\">condition</span>;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li>创建索引（Create Index）：使用CREATE INDEX语句创建索引，以加快对表中数据的访问速度。例如：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> INDEX index_name</span><br><span class=\"line\"><span class=\"keyword\">ON</span> table_name (column1, column2, ...);</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><p>在PostgreSQL中，可以使用注释来为表、列、约束等数据库对象添加说明和描述。注释可以提供有关对象的额外信息，以便于理解和维护数据库结构。以下是在PostgreSQL中添加注释的方法：</p>\n<ol>\n<li>表注释（Table Comment）：可以使用COMMENT语句为表添加注释。例如：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COMMENT <span class=\"keyword\">ON</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">IS</span> <span class=\"string\">&#x27;This is a table comment.&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>列注释（Column Comment）：可以使用COMMENT语句为表中的列添加注释。例如：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COMMENT <span class=\"keyword\">ON</span> <span class=\"keyword\">COLUMN</span> table_name.column_name <span class=\"keyword\">IS</span> <span class=\"string\">&#x27;This is a column comment.&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>约束注释（Constraint Comment）：可以使用COMMENT语句为表中的约束添加注释。例如：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COMMENT <span class=\"keyword\">ON</span> <span class=\"keyword\">CONSTRAINT</span> constraint_name <span class=\"keyword\">ON</span> table_name <span class=\"keyword\">IS</span> <span class=\"string\">&#x27;This is a constraint comment.&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>数据库注释（Database Comment）：可以使用COMMENT语句为整个数据库添加注释。例如：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COMMENT <span class=\"keyword\">ON</span> DATABASE database_name <span class=\"keyword\">IS</span> <span class=\"string\">&#x27;This is a database comment.&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>查看注释（View Comments）：可以使用以下查询语句查看表、列、约束等对象的注释：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 查看表注释</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> obj_description(<span class=\"string\">&#x27;table_name&#x27;</span>::regclass) <span class=\"keyword\">AS</span> table_comment;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查看列注释</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> col_description(<span class=\"string\">&#x27;table_name&#x27;</span>::regclass, <span class=\"string\">&#x27;column_name&#x27;</span>) <span class=\"keyword\">AS</span> column_comment;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查看约束注释</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> obj_description(<span class=\"string\">&#x27;constraint_name&#x27;</span>::regclass) <span class=\"keyword\">AS</span> constraint_comment;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查看数据库注释</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> description <span class=\"keyword\">FROM</span> pg_catalog.pg_shdescription <span class=\"keyword\">WHERE</span> objoid <span class=\"operator\">=</span> <span class=\"string\">&#x27;database_name&#x27;</span>::regclass;</span><br></pre></td></tr></table></figure>\n\n<p>注意：在上述查询语句中，将’table_name’、’column_name’、’constraint_name’和’database_name’替换为实际的对象名称。</p>\n<h2 id=\"用户操作\"><a href=\"#用户操作\" class=\"headerlink\" title=\"用户操作\"></a>用户操作</h2><p>在PostgreSQL中，可以使用SQL语句和特定的命令来进行用户操作。以下是一些常见的用户操作：</p>\n<ol>\n<li>创建用户（Create User）：使用CREATE USER语句创建一个新的用户，并指定用户名和密码。例如：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">USER</span> username <span class=\"keyword\">WITH</span> PASSWORD <span class=\"string\">&#x27;password&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>修改用户密码（Alter User）：使用ALTER USER语句修改用户的密码。例如：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">USER</span> username <span class=\"keyword\">WITH</span> PASSWORD <span class=\"string\">&#x27;new_password&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>授予角色（Grant Role）：使用GRANT语句将角色授予用户。例如：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">GRANT</span> role_name <span class=\"keyword\">TO</span> username;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>撤销角色（Revoke Role）：使用REVOKE语句从用户中撤销角色。例如：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">REVOKE</span> role_name <span class=\"keyword\">FROM</span> username;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>授予权限（Grant Privileges）：使用GRANT语句将特定的权限授予用户。例如：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">GRANT</span> privilege_name <span class=\"keyword\">ON</span> table_name <span class=\"keyword\">TO</span> username;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>撤销权限（Revoke Privileges）：使用REVOKE语句从用户中撤销特定的权限。例如：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">REVOKE</span> privilege_name <span class=\"keyword\">ON</span> table_name <span class=\"keyword\">FROM</span> username;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li>删除用户（Drop User）：使用DROP USER语句删除用户。例如：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">USER</span> username;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li>查看用户（View Users）：可以使用以下查询语句查看数据库中的用户列表：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> usename <span class=\"keyword\">FROM</span> pg_user;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常用查询\"><a href=\"#常用查询\" class=\"headerlink\" title=\"常用查询\"></a>常用查询</h2><p>在PostgreSQL中，有许多常用的查询语句可以帮助你检索和操作数据库中的数据。以下是一些常见的查询示例：</p>\n<ol>\n<li>查询所有数据（Select All）：使用SELECT语句可以检索表中的所有数据。例如：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> table_name;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>条件查询（Conditional Query）：使用WHERE子句可以根据条件过滤数据。例如，查询年龄大于等于18岁的用户：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> users <span class=\"keyword\">WHERE</span> age <span class=\"operator\">&gt;=</span> <span class=\"number\">18</span>;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>排序查询（Ordering Query）：使用ORDER BY子句可以按照指定的列对结果进行排序。例如，按照用户的姓名进行升序排序：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> users <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> name <span class=\"keyword\">ASC</span>;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>聚合查询（Aggregate Query）：使用聚合函数可以对数据进行统计和计算。例如，计算某个列的平均值：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">AVG</span>(column_name) <span class=\"keyword\">FROM</span> table_name;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>连接查询（Join Query）：使用JOIN语句可以将多个表连接在一起进行查询。例如，查询订单表和用户表中相关联的数据：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> orders</span><br><span class=\"line\"><span class=\"keyword\">JOIN</span> users <span class=\"keyword\">ON</span> orders.user_id <span class=\"operator\">=</span> users.id;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>分组查询（Grouping Query）：使用GROUP BY子句可以将数据按照指定的列进行分组。例如，按照用户的性别统计用户数量：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> gender, <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">FROM</span> users <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> gender;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li>子查询（Subquery）：可以在查询中嵌套使用子查询来获取更复杂的结果。例如，查询年龄大于平均年龄的用户：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> users <span class=\"keyword\">WHERE</span> age <span class=\"operator\">&gt;</span> (<span class=\"keyword\">SELECT</span> <span class=\"built_in\">AVG</span>(age) <span class=\"keyword\">FROM</span> users);</span><br></pre></td></tr></table></figure>\n\n<p>这些是一些常见的查询示例，可以根据具体的需求和数据结构进行相应的查询操作。使用合适的查询语句和条件，可以有效地检索和操作数据库中的数据。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"PostgreSQL命令\"><a href=\"#PostgreSQL命令\" class=\"headerlink\" title=\"PostgreSQL命令\"></a>PostgreSQL命令</h2><ol>\n<li>连接到数据库：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">psql -U username -d database_name</span><br></pre></td></tr></table></figure>\n\n<p>请将<code>username</code>替换为您的用户名，<code>database_name</code>替换为您要连接的数据库名称。</p>\n<ol start=\"2\">\n<li>显示数据库列表：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\l</span><br></pre></td></tr></table></figure>\n\n<p>这将列出所有可用的数据库。</p>\n<ol start=\"3\">\n<li>切换到特定数据库：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\c database_name</span><br></pre></td></tr></table></figure>\n\n<p>请将<code>database_name</code>替换为您要切换到的数据库名称。</p>\n<ol start=\"4\">\n<li>显示表列表：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\dt</span><br></pre></td></tr></table></figure>\n\n<p>这将列出当前数据库中的所有表。</p>\n<ol start=\"5\">\n<li>显示表结构：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\d table_name</span><br></pre></td></tr></table></figure>\n\n<p>请将<code>table_name</code>替换为您要查看结构的表名称。</p>\n<ol start=\"6\">\n<li>执行SQL查询：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM table_name;</span><br></pre></td></tr></table></figure>\n\n<p>请将<code>table_name</code>替换为您要查询的表名称。</p>\n<ol start=\"7\">\n<li>退出psql：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\q</span><br></pre></td></tr></table></figure>\n\n<p>这将退出psql命令行界面。</p>\n<h2 id=\"常用对象\"><a href=\"#常用对象\" class=\"headerlink\" title=\"常用对象\"></a>常用对象</h2><p>在PostgreSQL中，有多种类型的数据库对象可用于组织和管理数据。以下是一些常见的数据库对象：</p>\n<ol>\n<li><p>表（Table）：表是存储数据的基本单位。它由行和列组成，每个列定义了表中的一个属性。</p>\n</li>\n<li><p>视图（View）：视图是基于一个或多个表的查询结果的虚拟表。它可以简化复杂的查询，并提供一种抽象的方式来访问数据。</p>\n</li>\n<li><p>索引（Index）：索引是一种数据结构，用于加快对表中数据的访问速度。它可以根据一个或多个列的值快速定位到匹配的行。</p>\n</li>\n<li><p>序列（Sequence）：序列是一种生成唯一数值的对象。它通常用于为表的主键列生成自增的唯一标识符。</p>\n</li>\n<li><p>函数（Function）：函数是一段可重复使用的代码，接受输入参数并返回一个值或结果集。它可以用于执行特定的计算或操作。</p>\n</li>\n<li><p>存储过程（Stored Procedure）：存储过程是一组预定义的SQL语句，可以在数据库中进行调用。它可以接受输入参数，并根据需要执行一系列操作。</p>\n</li>\n<li><p>触发器（Trigger）：触发器是与表相关联的一段代码，当满足特定条件时自动执行。它可以用于在数据插入、更新或删除时执行额外的逻辑操作。</p>\n</li>\n<li><p>模式（Schema）：模式是用于组织和管理数据库对象的命名空间。它可以将数据库对象分组到逻辑上独立的单元中，以便更好地管理和控制访问权限。</p>\n</li>\n</ol>\n<h2 id=\"常用数据类型\"><a href=\"#常用数据类型\" class=\"headerlink\" title=\"常用数据类型\"></a>常用数据类型</h2><p>在PostgreSQL中，有多种常用的数据类型可用于存储和处理不同类型的数据。以下是一些常见的数据类型：</p>\n<ol>\n<li><p>整数类型（Integer Types）：用于存储整数值，如<code>integer</code>、<code>smallint</code>、<code>bigint</code>等。</p>\n</li>\n<li><p>浮点数类型（Floating-Point Types）：用于存储浮点数值，如<code>real</code>、<code>double precision</code>等。</p>\n</li>\n<li><p>字符串类型（Character Types）：用于存储文本数据，如<code>character varying</code>、<code>text</code>等。</p>\n</li>\n<li><p>日期和时间类型（Date and Time Types）：用于存储日期、时间和时间戳，如<code>date</code>、<code>time</code>、<code>timestamp</code>等。</p>\n</li>\n<li><p>布尔类型（Boolean Type）：用于存储布尔值，即<code>true</code>或<code>false</code>。</p>\n</li>\n<li><p>数组类型（Array Types）：用于存储多个相同类型的值的数组，如<code>integer[]</code>、<code>text[]</code>等。</p>\n</li>\n<li><p>JSON类型（JSON Type）：用于存储JSON格式的数据，如<code>json</code>、<code>jsonb</code>等。</p>\n</li>\n<li><p>UUID类型（UUID Type）：用于存储唯一标识符，如<code>uuid</code>。</p>\n</li>\n</ol>\n<h2 id=\"表操作\"><a href=\"#表操作\" class=\"headerlink\" title=\"表操作\"></a>表操作</h2><p>在PostgreSQL中，可以使用SQL语句对表进行各种操作。以下是一些常见的表操作：</p>\n<ol>\n<li>创建表（Create Table）：使用CREATE TABLE语句创建一个新的表，并指定表的名称和列的定义。例如：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> table_name (</span><br><span class=\"line\">    id serial <span class=\"keyword\">PRIMARY</span> KEY, <span class=\"comment\">-- 主键自增</span></span><br><span class=\"line\">    table1_id <span class=\"type\">integer</span> <span class=\"keyword\">REFERENCES</span> table1(id),</span><br><span class=\"line\">    column1 datatype <span class=\"keyword\">DEFAULT</span> default_value,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    column3 datatype,</span><br><span class=\"line\">    column2 datatype,</span><br><span class=\"line\">    <span class=\"keyword\">PRIMARY</span> KEY (column1, column2),<span class=\"comment\">--复合主键（Composite Primary Key）</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--外部表（Foreign Table）</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">FOREIGN</span> <span class=\"keyword\">TABLE</span> table_name (</span><br><span class=\"line\">    column1 datatype,</span><br><span class=\"line\">    column2 datatype,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">) SERVER server_name OPTIONS (option1 <span class=\"string\">&#x27;value1&#x27;</span>, option2 <span class=\"string\">&#x27;value2&#x27;</span>, ...);</span><br></pre></td></tr></table></figure>\n\n<p><code>SERIAL</code>是PostgreSQL中的一种伪类型，它实际上是一个自增长的整数列。</p>\n<p>使用<code>SERIAL</code>数据类型可以简化自增长列的创建过程。当我们将列的数据类型设置为<code>SERIAL</code>时，PostgreSQL会自动创建一个序列（sequence），并将其与该列关联起来。每次插入新行时，序列会自动递增，并将递增后的值赋给<code>SERIAL</code>列。</p>\n<ol>\n<li>修改表结构（Alter Table）：使用ALTER TABLE语句修改表的结构，包括添加、修改或删除列，添加或删除约束等。例如：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 添加列</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">ADD</span> <span class=\"keyword\">COLUMN</span> column_name datatype;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 修改列类型</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">ALTER</span> <span class=\"keyword\">COLUMN</span> column_name TYPE new_datatype;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 删除列</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">DROP</span> <span class=\"keyword\">COLUMN</span> column_name;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>插入数据（Insert Into）：使用INSERT INTO语句向表中插入新的行数据。例如：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> table_name (column1, column2, ...)</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span> (value1, value2, ...);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>更新数据（Update）：使用UPDATE语句更新表中的行数据。例如：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">UPDATE</span> table_name</span><br><span class=\"line\"><span class=\"keyword\">SET</span> column1 <span class=\"operator\">=</span> value1, column2 <span class=\"operator\">=</span> value2, ...</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> <span class=\"keyword\">condition</span>;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>删除数据（Delete）：使用DELETE语句删除表中的行数据。例如：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> <span class=\"keyword\">condition</span>;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>查询数据（Select）：使用SELECT语句从表中检索数据。例如：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2, ...</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> <span class=\"keyword\">condition</span>;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li>创建索引（Create Index）：使用CREATE INDEX语句创建索引，以加快对表中数据的访问速度。例如：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> INDEX index_name</span><br><span class=\"line\"><span class=\"keyword\">ON</span> table_name (column1, column2, ...);</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><p>在PostgreSQL中，可以使用注释来为表、列、约束等数据库对象添加说明和描述。注释可以提供有关对象的额外信息，以便于理解和维护数据库结构。以下是在PostgreSQL中添加注释的方法：</p>\n<ol>\n<li>表注释（Table Comment）：可以使用COMMENT语句为表添加注释。例如：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COMMENT <span class=\"keyword\">ON</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">IS</span> <span class=\"string\">&#x27;This is a table comment.&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>列注释（Column Comment）：可以使用COMMENT语句为表中的列添加注释。例如：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COMMENT <span class=\"keyword\">ON</span> <span class=\"keyword\">COLUMN</span> table_name.column_name <span class=\"keyword\">IS</span> <span class=\"string\">&#x27;This is a column comment.&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>约束注释（Constraint Comment）：可以使用COMMENT语句为表中的约束添加注释。例如：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COMMENT <span class=\"keyword\">ON</span> <span class=\"keyword\">CONSTRAINT</span> constraint_name <span class=\"keyword\">ON</span> table_name <span class=\"keyword\">IS</span> <span class=\"string\">&#x27;This is a constraint comment.&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>数据库注释（Database Comment）：可以使用COMMENT语句为整个数据库添加注释。例如：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COMMENT <span class=\"keyword\">ON</span> DATABASE database_name <span class=\"keyword\">IS</span> <span class=\"string\">&#x27;This is a database comment.&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>查看注释（View Comments）：可以使用以下查询语句查看表、列、约束等对象的注释：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 查看表注释</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> obj_description(<span class=\"string\">&#x27;table_name&#x27;</span>::regclass) <span class=\"keyword\">AS</span> table_comment;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查看列注释</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> col_description(<span class=\"string\">&#x27;table_name&#x27;</span>::regclass, <span class=\"string\">&#x27;column_name&#x27;</span>) <span class=\"keyword\">AS</span> column_comment;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查看约束注释</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> obj_description(<span class=\"string\">&#x27;constraint_name&#x27;</span>::regclass) <span class=\"keyword\">AS</span> constraint_comment;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查看数据库注释</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> description <span class=\"keyword\">FROM</span> pg_catalog.pg_shdescription <span class=\"keyword\">WHERE</span> objoid <span class=\"operator\">=</span> <span class=\"string\">&#x27;database_name&#x27;</span>::regclass;</span><br></pre></td></tr></table></figure>\n\n<p>注意：在上述查询语句中，将’table_name’、’column_name’、’constraint_name’和’database_name’替换为实际的对象名称。</p>\n<h2 id=\"用户操作\"><a href=\"#用户操作\" class=\"headerlink\" title=\"用户操作\"></a>用户操作</h2><p>在PostgreSQL中，可以使用SQL语句和特定的命令来进行用户操作。以下是一些常见的用户操作：</p>\n<ol>\n<li>创建用户（Create User）：使用CREATE USER语句创建一个新的用户，并指定用户名和密码。例如：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">USER</span> username <span class=\"keyword\">WITH</span> PASSWORD <span class=\"string\">&#x27;password&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>修改用户密码（Alter User）：使用ALTER USER语句修改用户的密码。例如：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">USER</span> username <span class=\"keyword\">WITH</span> PASSWORD <span class=\"string\">&#x27;new_password&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>授予角色（Grant Role）：使用GRANT语句将角色授予用户。例如：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">GRANT</span> role_name <span class=\"keyword\">TO</span> username;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>撤销角色（Revoke Role）：使用REVOKE语句从用户中撤销角色。例如：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">REVOKE</span> role_name <span class=\"keyword\">FROM</span> username;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>授予权限（Grant Privileges）：使用GRANT语句将特定的权限授予用户。例如：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">GRANT</span> privilege_name <span class=\"keyword\">ON</span> table_name <span class=\"keyword\">TO</span> username;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>撤销权限（Revoke Privileges）：使用REVOKE语句从用户中撤销特定的权限。例如：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">REVOKE</span> privilege_name <span class=\"keyword\">ON</span> table_name <span class=\"keyword\">FROM</span> username;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li>删除用户（Drop User）：使用DROP USER语句删除用户。例如：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">USER</span> username;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li>查看用户（View Users）：可以使用以下查询语句查看数据库中的用户列表：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> usename <span class=\"keyword\">FROM</span> pg_user;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常用查询\"><a href=\"#常用查询\" class=\"headerlink\" title=\"常用查询\"></a>常用查询</h2><p>在PostgreSQL中，有许多常用的查询语句可以帮助你检索和操作数据库中的数据。以下是一些常见的查询示例：</p>\n<ol>\n<li>查询所有数据（Select All）：使用SELECT语句可以检索表中的所有数据。例如：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> table_name;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>条件查询（Conditional Query）：使用WHERE子句可以根据条件过滤数据。例如，查询年龄大于等于18岁的用户：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> users <span class=\"keyword\">WHERE</span> age <span class=\"operator\">&gt;=</span> <span class=\"number\">18</span>;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>排序查询（Ordering Query）：使用ORDER BY子句可以按照指定的列对结果进行排序。例如，按照用户的姓名进行升序排序：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> users <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> name <span class=\"keyword\">ASC</span>;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>聚合查询（Aggregate Query）：使用聚合函数可以对数据进行统计和计算。例如，计算某个列的平均值：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">AVG</span>(column_name) <span class=\"keyword\">FROM</span> table_name;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>连接查询（Join Query）：使用JOIN语句可以将多个表连接在一起进行查询。例如，查询订单表和用户表中相关联的数据：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> orders</span><br><span class=\"line\"><span class=\"keyword\">JOIN</span> users <span class=\"keyword\">ON</span> orders.user_id <span class=\"operator\">=</span> users.id;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>分组查询（Grouping Query）：使用GROUP BY子句可以将数据按照指定的列进行分组。例如，按照用户的性别统计用户数量：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> gender, <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">FROM</span> users <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> gender;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li>子查询（Subquery）：可以在查询中嵌套使用子查询来获取更复杂的结果。例如，查询年龄大于平均年龄的用户：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> users <span class=\"keyword\">WHERE</span> age <span class=\"operator\">&gt;</span> (<span class=\"keyword\">SELECT</span> <span class=\"built_in\">AVG</span>(age) <span class=\"keyword\">FROM</span> users);</span><br></pre></td></tr></table></figure>\n\n<p>这些是一些常见的查询示例，可以根据具体的需求和数据结构进行相应的查询操作。使用合适的查询语句和条件，可以有效地检索和操作数据库中的数据。</p>\n"},{"title":"RESTful API","date":"2023-06-21T13:22:36.000Z","cover":"2023/06/21/RESTful-API/2023-06-21-21-23-36.png","_content":"\n## 什么是 RESTful API\n\nRESTful API 是一种软件架构风格、设计风格，可以让软件更加清晰，更简洁，更有层次，可维护性更好\n\nREST 是 Representational State Transfer 的缩写 \n\n即表现层状态转移,uri只是描述那里有数据,而数据怎么解释原来由服务端决定,现在REST API中由客户端决定,\n即资源的表现层状态由服务端转移到了客户端\n\n## 如何使用\n\n### RESTful API 请求\n\n    请求 = 动词 + 宾语\n\n动词 使用五种 HTTP 方法，对应 CRUD 操作\n\n宾语 URL 应该全部使用名词复数\n\n过滤信息（Filtering） 如果记录数量很多，API应该提供参数，过滤返回结果。 \n?limit=10 指定返回记录的数量 ?offset=10 指定返回记录的开始位置。\n\n\n| method | uri                   | 语义                       |\n| ------ | --------------------- | -------------------------- |\n| GET    | /users                | 获取所有用户               |\n| POST   | /users                | 创建一个用户               |\n| GET    | /users/:id            | 获取某个指定用户的信息     |\n| PUT    | /users/:id            | 更新某个指定用户的全部信息 |\n| PATCH  | /users/:id            | 更新某个指定用户的部分信息 |\n| DELETE | /users/:id            | 删除某个用户               |\n| GET    | /users/:id/orders     | 获取某个指定用户的所有订单 |\n| DELETE | /users/:id/orders/:id | 删除某个指定用户的指定订单 |\n\n### RESTful API 响应\n\n包括 **HTTP 状态码**和**数据**两部分\n\n| code | 语义                 |\n| ---- | -------------------- |\n| 1xx  | 相关信息(API 不需要) |\n| 2xx  | 操作成功             |\n| 3xx  | 重定向               |\n| 4xx  | 客户端错误           |\n| 5xx  | 服务器错误           |\n\n\n客户端请求的 HTTP 头的 ACCEPT 属性设成 application/json\n\n服务端返回一个 JSON 对象, 回应的 HTTP 头的 Content-Type 属性设为 application/json\n\n错误处理 如果状态码是4xx，就应该向用户返回出错信息。\n\n返回的信息中将 error 作为键名，出错信息作为键值即可。 {error: \"Invalid API key\"}\n\n认证 RESTful API 应该是无状态，每个请求应该带有一些认证凭证。推荐使用 JWT 认证，并且使用 SSL\n\n","source":"_posts/RESTful-API.md","raw":"---\ntitle: RESTful API\ndate: 2023-06-21 21:22:36\ntags: RESTful\ncover: 2023-06-21-21-23-36.png\n---\n\n## 什么是 RESTful API\n\nRESTful API 是一种软件架构风格、设计风格，可以让软件更加清晰，更简洁，更有层次，可维护性更好\n\nREST 是 Representational State Transfer 的缩写 \n\n即表现层状态转移,uri只是描述那里有数据,而数据怎么解释原来由服务端决定,现在REST API中由客户端决定,\n即资源的表现层状态由服务端转移到了客户端\n\n## 如何使用\n\n### RESTful API 请求\n\n    请求 = 动词 + 宾语\n\n动词 使用五种 HTTP 方法，对应 CRUD 操作\n\n宾语 URL 应该全部使用名词复数\n\n过滤信息（Filtering） 如果记录数量很多，API应该提供参数，过滤返回结果。 \n?limit=10 指定返回记录的数量 ?offset=10 指定返回记录的开始位置。\n\n\n| method | uri                   | 语义                       |\n| ------ | --------------------- | -------------------------- |\n| GET    | /users                | 获取所有用户               |\n| POST   | /users                | 创建一个用户               |\n| GET    | /users/:id            | 获取某个指定用户的信息     |\n| PUT    | /users/:id            | 更新某个指定用户的全部信息 |\n| PATCH  | /users/:id            | 更新某个指定用户的部分信息 |\n| DELETE | /users/:id            | 删除某个用户               |\n| GET    | /users/:id/orders     | 获取某个指定用户的所有订单 |\n| DELETE | /users/:id/orders/:id | 删除某个指定用户的指定订单 |\n\n### RESTful API 响应\n\n包括 **HTTP 状态码**和**数据**两部分\n\n| code | 语义                 |\n| ---- | -------------------- |\n| 1xx  | 相关信息(API 不需要) |\n| 2xx  | 操作成功             |\n| 3xx  | 重定向               |\n| 4xx  | 客户端错误           |\n| 5xx  | 服务器错误           |\n\n\n客户端请求的 HTTP 头的 ACCEPT 属性设成 application/json\n\n服务端返回一个 JSON 对象, 回应的 HTTP 头的 Content-Type 属性设为 application/json\n\n错误处理 如果状态码是4xx，就应该向用户返回出错信息。\n\n返回的信息中将 error 作为键名，出错信息作为键值即可。 {error: \"Invalid API key\"}\n\n认证 RESTful API 应该是无状态，每个请求应该带有一些认证凭证。推荐使用 JWT 认证，并且使用 SSL\n\n","slug":"RESTful-API","published":1,"updated":"2023-06-23T01:06:22.431Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5uw003jlv9eb283hiot","content":"<h2 id=\"什么是-RESTful-API\"><a href=\"#什么是-RESTful-API\" class=\"headerlink\" title=\"什么是 RESTful API\"></a>什么是 RESTful API</h2><p>RESTful API 是一种软件架构风格、设计风格，可以让软件更加清晰，更简洁，更有层次，可维护性更好</p>\n<p>REST 是 Representational State Transfer 的缩写 </p>\n<p>即表现层状态转移,uri只是描述那里有数据,而数据怎么解释原来由服务端决定,现在REST API中由客户端决定,<br>即资源的表现层状态由服务端转移到了客户端</p>\n<h2 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h2><h3 id=\"RESTful-API-请求\"><a href=\"#RESTful-API-请求\" class=\"headerlink\" title=\"RESTful API 请求\"></a>RESTful API 请求</h3><pre><code>请求 = 动词 + 宾语\n</code></pre>\n<p>动词 使用五种 HTTP 方法，对应 CRUD 操作</p>\n<p>宾语 URL 应该全部使用名词复数</p>\n<p>过滤信息（Filtering） 如果记录数量很多，API应该提供参数，过滤返回结果。<br>?limit&#x3D;10 指定返回记录的数量 ?offset&#x3D;10 指定返回记录的开始位置。</p>\n<table>\n<thead>\n<tr>\n<th>method</th>\n<th>uri</th>\n<th>语义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>GET</td>\n<td>&#x2F;users</td>\n<td>获取所有用户</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>&#x2F;users</td>\n<td>创建一个用户</td>\n</tr>\n<tr>\n<td>GET</td>\n<td>&#x2F;users&#x2F;:id</td>\n<td>获取某个指定用户的信息</td>\n</tr>\n<tr>\n<td>PUT</td>\n<td>&#x2F;users&#x2F;:id</td>\n<td>更新某个指定用户的全部信息</td>\n</tr>\n<tr>\n<td>PATCH</td>\n<td>&#x2F;users&#x2F;:id</td>\n<td>更新某个指定用户的部分信息</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>&#x2F;users&#x2F;:id</td>\n<td>删除某个用户</td>\n</tr>\n<tr>\n<td>GET</td>\n<td>&#x2F;users&#x2F;:id&#x2F;orders</td>\n<td>获取某个指定用户的所有订单</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>&#x2F;users&#x2F;:id&#x2F;orders&#x2F;:id</td>\n<td>删除某个指定用户的指定订单</td>\n</tr>\n</tbody></table>\n<h3 id=\"RESTful-API-响应\"><a href=\"#RESTful-API-响应\" class=\"headerlink\" title=\"RESTful API 响应\"></a>RESTful API 响应</h3><p>包括 <strong>HTTP 状态码</strong>和<strong>数据</strong>两部分</p>\n<table>\n<thead>\n<tr>\n<th>code</th>\n<th>语义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1xx</td>\n<td>相关信息(API 不需要)</td>\n</tr>\n<tr>\n<td>2xx</td>\n<td>操作成功</td>\n</tr>\n<tr>\n<td>3xx</td>\n<td>重定向</td>\n</tr>\n<tr>\n<td>4xx</td>\n<td>客户端错误</td>\n</tr>\n<tr>\n<td>5xx</td>\n<td>服务器错误</td>\n</tr>\n</tbody></table>\n<p>客户端请求的 HTTP 头的 ACCEPT 属性设成 application&#x2F;json</p>\n<p>服务端返回一个 JSON 对象, 回应的 HTTP 头的 Content-Type 属性设为 application&#x2F;json</p>\n<p>错误处理 如果状态码是4xx，就应该向用户返回出错信息。</p>\n<p>返回的信息中将 error 作为键名，出错信息作为键值即可。 {error: “Invalid API key”}</p>\n<p>认证 RESTful API 应该是无状态，每个请求应该带有一些认证凭证。推荐使用 JWT 认证，并且使用 SSL</p>\n","site":{"data":{}},"cover_type":"img","excerpt":"","more":"<h2 id=\"什么是-RESTful-API\"><a href=\"#什么是-RESTful-API\" class=\"headerlink\" title=\"什么是 RESTful API\"></a>什么是 RESTful API</h2><p>RESTful API 是一种软件架构风格、设计风格，可以让软件更加清晰，更简洁，更有层次，可维护性更好</p>\n<p>REST 是 Representational State Transfer 的缩写 </p>\n<p>即表现层状态转移,uri只是描述那里有数据,而数据怎么解释原来由服务端决定,现在REST API中由客户端决定,<br>即资源的表现层状态由服务端转移到了客户端</p>\n<h2 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h2><h3 id=\"RESTful-API-请求\"><a href=\"#RESTful-API-请求\" class=\"headerlink\" title=\"RESTful API 请求\"></a>RESTful API 请求</h3><pre><code>请求 = 动词 + 宾语\n</code></pre>\n<p>动词 使用五种 HTTP 方法，对应 CRUD 操作</p>\n<p>宾语 URL 应该全部使用名词复数</p>\n<p>过滤信息（Filtering） 如果记录数量很多，API应该提供参数，过滤返回结果。<br>?limit&#x3D;10 指定返回记录的数量 ?offset&#x3D;10 指定返回记录的开始位置。</p>\n<table>\n<thead>\n<tr>\n<th>method</th>\n<th>uri</th>\n<th>语义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>GET</td>\n<td>&#x2F;users</td>\n<td>获取所有用户</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>&#x2F;users</td>\n<td>创建一个用户</td>\n</tr>\n<tr>\n<td>GET</td>\n<td>&#x2F;users&#x2F;:id</td>\n<td>获取某个指定用户的信息</td>\n</tr>\n<tr>\n<td>PUT</td>\n<td>&#x2F;users&#x2F;:id</td>\n<td>更新某个指定用户的全部信息</td>\n</tr>\n<tr>\n<td>PATCH</td>\n<td>&#x2F;users&#x2F;:id</td>\n<td>更新某个指定用户的部分信息</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>&#x2F;users&#x2F;:id</td>\n<td>删除某个用户</td>\n</tr>\n<tr>\n<td>GET</td>\n<td>&#x2F;users&#x2F;:id&#x2F;orders</td>\n<td>获取某个指定用户的所有订单</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>&#x2F;users&#x2F;:id&#x2F;orders&#x2F;:id</td>\n<td>删除某个指定用户的指定订单</td>\n</tr>\n</tbody></table>\n<h3 id=\"RESTful-API-响应\"><a href=\"#RESTful-API-响应\" class=\"headerlink\" title=\"RESTful API 响应\"></a>RESTful API 响应</h3><p>包括 <strong>HTTP 状态码</strong>和<strong>数据</strong>两部分</p>\n<table>\n<thead>\n<tr>\n<th>code</th>\n<th>语义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1xx</td>\n<td>相关信息(API 不需要)</td>\n</tr>\n<tr>\n<td>2xx</td>\n<td>操作成功</td>\n</tr>\n<tr>\n<td>3xx</td>\n<td>重定向</td>\n</tr>\n<tr>\n<td>4xx</td>\n<td>客户端错误</td>\n</tr>\n<tr>\n<td>5xx</td>\n<td>服务器错误</td>\n</tr>\n</tbody></table>\n<p>客户端请求的 HTTP 头的 ACCEPT 属性设成 application&#x2F;json</p>\n<p>服务端返回一个 JSON 对象, 回应的 HTTP 头的 Content-Type 属性设为 application&#x2F;json</p>\n<p>错误处理 如果状态码是4xx，就应该向用户返回出错信息。</p>\n<p>返回的信息中将 error 作为键名，出错信息作为键值即可。 {error: “Invalid API key”}</p>\n<p>认证 RESTful API 应该是无状态，每个请求应该带有一些认证凭证。推荐使用 JWT 认证，并且使用 SSL</p>\n"},{"title":"RHEL RPM 软件包管理","date":"2023-05-18T02:33:35.000Z","_content":"\n## RPM 命令\n```bash\n\n```\n\n### 安装\n```bash\nrpm -ivh <rpm_package_name>\n```\n![](2023-05-18-10-39-54.png)\n\nrpm命令不能自己处理依赖\n\n所以换个没有其他依赖的\n\n![](2023-05-18-10-46-24.png)\n\n### 删除\n\n```bash\nrpm -e {<rpm_package_name>|<name>}\n```\n\n![](2023-05-18-10-41-18.png)\n\n没有抛出异常说明执行成功\n\n### 查询\n\n```bash\nrpm -qa | grep <name>           所有\nrpm -q  <rpm_package_name>      指定\nrpm -qp <rpm_package_file_name> 安装前了解\nrpm -qi <rpm_package_name>      infomation\nrpm -ql <rpm_package_name>      包含的文件\nrpm -qf <file_name>             文件属于哪个包\nrpm -qd <rpm_package_name>      文档\nrpm -qc <rpm_package_name>      配置\nrpm -qip <rpm_package_name>     安装前了解信息\n```\n![](2023-05-18-11-02-55.png)\n\n![](2023-05-18-11-04-40.png)\n\n![](2023-05-18-11-05-26.png)\n\n![](2023-05-18-11-05-53.png)\n\n![](2023-05-18-11-07-13.png)\n\n![](2023-05-18-11-08-52.png)\n\n![](2023-05-18-11-09-38.png)\n\neg. 通过rpm找出vimrc的注释符号\n```bash\nrpm -qc vim-common | xargs vim\n```\n![](2023-05-18-11-13-57.png)\n\n不难看出\"就是vim的注释符\n\n### 升级\n\n```bash\nrpm -Uvh <rpm_package_name>\n```\n\n### 验证\n\n```bash\nrpm -V [args] {<rpm_package_name>|<name>}\n```\n对/etc/vimrc稍作修改\n![](2023-05-18-11-16-17.png)\n\n验证\n![](2023-05-18-11-15-25.png)\n\n查查man page\n![](2023-05-18-11-18-14.png)","source":"_posts/RHEL-RPM-软件包管理.md","raw":"---\ntitle: RHEL RPM 软件包管理\ndate: 2023-05-18 10:33:35\ntags: Linux\n---\n\n## RPM 命令\n```bash\n\n```\n\n### 安装\n```bash\nrpm -ivh <rpm_package_name>\n```\n![](2023-05-18-10-39-54.png)\n\nrpm命令不能自己处理依赖\n\n所以换个没有其他依赖的\n\n![](2023-05-18-10-46-24.png)\n\n### 删除\n\n```bash\nrpm -e {<rpm_package_name>|<name>}\n```\n\n![](2023-05-18-10-41-18.png)\n\n没有抛出异常说明执行成功\n\n### 查询\n\n```bash\nrpm -qa | grep <name>           所有\nrpm -q  <rpm_package_name>      指定\nrpm -qp <rpm_package_file_name> 安装前了解\nrpm -qi <rpm_package_name>      infomation\nrpm -ql <rpm_package_name>      包含的文件\nrpm -qf <file_name>             文件属于哪个包\nrpm -qd <rpm_package_name>      文档\nrpm -qc <rpm_package_name>      配置\nrpm -qip <rpm_package_name>     安装前了解信息\n```\n![](2023-05-18-11-02-55.png)\n\n![](2023-05-18-11-04-40.png)\n\n![](2023-05-18-11-05-26.png)\n\n![](2023-05-18-11-05-53.png)\n\n![](2023-05-18-11-07-13.png)\n\n![](2023-05-18-11-08-52.png)\n\n![](2023-05-18-11-09-38.png)\n\neg. 通过rpm找出vimrc的注释符号\n```bash\nrpm -qc vim-common | xargs vim\n```\n![](2023-05-18-11-13-57.png)\n\n不难看出\"就是vim的注释符\n\n### 升级\n\n```bash\nrpm -Uvh <rpm_package_name>\n```\n\n### 验证\n\n```bash\nrpm -V [args] {<rpm_package_name>|<name>}\n```\n对/etc/vimrc稍作修改\n![](2023-05-18-11-16-17.png)\n\n验证\n![](2023-05-18-11-15-25.png)\n\n查查man page\n![](2023-05-18-11-18-14.png)","slug":"RHEL-RPM-软件包管理","published":1,"updated":"2023-05-18T03:18:19.352Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5ux003llv9e3d5i29ls","content":"<h2 id=\"RPM-命令\"><a href=\"#RPM-命令\" class=\"headerlink\" title=\"RPM 命令\"></a>RPM 命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ivh &lt;rpm_package_name&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2023/05/18/RHEL-RPM-%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86/2023-05-18-10-39-54.png\"></p>\n<p>rpm命令不能自己处理依赖</p>\n<p>所以换个没有其他依赖的</p>\n<p><img src=\"/2023/05/18/RHEL-RPM-%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86/2023-05-18-10-46-24.png\"></p>\n<h3 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -e &#123;&lt;rpm_package_name&gt;|&lt;name&gt;&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/05/18/RHEL-RPM-%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86/2023-05-18-10-41-18.png\"></p>\n<p>没有抛出异常说明执行成功</p>\n<h3 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -qa | grep &lt;name&gt;           所有</span><br><span class=\"line\">rpm -q  &lt;rpm_package_name&gt;      指定</span><br><span class=\"line\">rpm -qp &lt;rpm_package_file_name&gt; 安装前了解</span><br><span class=\"line\">rpm -qi &lt;rpm_package_name&gt;      infomation</span><br><span class=\"line\">rpm -ql &lt;rpm_package_name&gt;      包含的文件</span><br><span class=\"line\">rpm -qf &lt;file_name&gt;             文件属于哪个包</span><br><span class=\"line\">rpm -qd &lt;rpm_package_name&gt;      文档</span><br><span class=\"line\">rpm -qc &lt;rpm_package_name&gt;      配置</span><br><span class=\"line\">rpm -qip &lt;rpm_package_name&gt;     安装前了解信息</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2023/05/18/RHEL-RPM-%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86/2023-05-18-11-02-55.png\"></p>\n<p><img src=\"/2023/05/18/RHEL-RPM-%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86/2023-05-18-11-04-40.png\"></p>\n<p><img src=\"/2023/05/18/RHEL-RPM-%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86/2023-05-18-11-05-26.png\"></p>\n<p><img src=\"/2023/05/18/RHEL-RPM-%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86/2023-05-18-11-05-53.png\"></p>\n<p><img src=\"/2023/05/18/RHEL-RPM-%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86/2023-05-18-11-07-13.png\"></p>\n<p><img src=\"/2023/05/18/RHEL-RPM-%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86/2023-05-18-11-08-52.png\"></p>\n<p><img src=\"/2023/05/18/RHEL-RPM-%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86/2023-05-18-11-09-38.png\"></p>\n<p>eg. 通过rpm找出vimrc的注释符号</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -qc vim-common | xargs vim</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2023/05/18/RHEL-RPM-%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86/2023-05-18-11-13-57.png\"></p>\n<p>不难看出”就是vim的注释符</p>\n<h3 id=\"升级\"><a href=\"#升级\" class=\"headerlink\" title=\"升级\"></a>升级</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -Uvh &lt;rpm_package_name&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -V [args] &#123;&lt;rpm_package_name&gt;|&lt;name&gt;&#125;</span><br></pre></td></tr></table></figure>\n<p>对&#x2F;etc&#x2F;vimrc稍作修改<br><img src=\"/2023/05/18/RHEL-RPM-%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86/2023-05-18-11-16-17.png\"></p>\n<p>验证<br><img src=\"/2023/05/18/RHEL-RPM-%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86/2023-05-18-11-15-25.png\"></p>\n<p>查查man page<br><img src=\"/2023/05/18/RHEL-RPM-%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86/2023-05-18-11-18-14.png\"></p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h2 id=\"RPM-命令\"><a href=\"#RPM-命令\" class=\"headerlink\" title=\"RPM 命令\"></a>RPM 命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ivh &lt;rpm_package_name&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2023/05/18/RHEL-RPM-%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86/2023-05-18-10-39-54.png\"></p>\n<p>rpm命令不能自己处理依赖</p>\n<p>所以换个没有其他依赖的</p>\n<p><img src=\"/2023/05/18/RHEL-RPM-%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86/2023-05-18-10-46-24.png\"></p>\n<h3 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -e &#123;&lt;rpm_package_name&gt;|&lt;name&gt;&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/05/18/RHEL-RPM-%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86/2023-05-18-10-41-18.png\"></p>\n<p>没有抛出异常说明执行成功</p>\n<h3 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -qa | grep &lt;name&gt;           所有</span><br><span class=\"line\">rpm -q  &lt;rpm_package_name&gt;      指定</span><br><span class=\"line\">rpm -qp &lt;rpm_package_file_name&gt; 安装前了解</span><br><span class=\"line\">rpm -qi &lt;rpm_package_name&gt;      infomation</span><br><span class=\"line\">rpm -ql &lt;rpm_package_name&gt;      包含的文件</span><br><span class=\"line\">rpm -qf &lt;file_name&gt;             文件属于哪个包</span><br><span class=\"line\">rpm -qd &lt;rpm_package_name&gt;      文档</span><br><span class=\"line\">rpm -qc &lt;rpm_package_name&gt;      配置</span><br><span class=\"line\">rpm -qip &lt;rpm_package_name&gt;     安装前了解信息</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2023/05/18/RHEL-RPM-%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86/2023-05-18-11-02-55.png\"></p>\n<p><img src=\"/2023/05/18/RHEL-RPM-%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86/2023-05-18-11-04-40.png\"></p>\n<p><img src=\"/2023/05/18/RHEL-RPM-%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86/2023-05-18-11-05-26.png\"></p>\n<p><img src=\"/2023/05/18/RHEL-RPM-%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86/2023-05-18-11-05-53.png\"></p>\n<p><img src=\"/2023/05/18/RHEL-RPM-%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86/2023-05-18-11-07-13.png\"></p>\n<p><img src=\"/2023/05/18/RHEL-RPM-%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86/2023-05-18-11-08-52.png\"></p>\n<p><img src=\"/2023/05/18/RHEL-RPM-%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86/2023-05-18-11-09-38.png\"></p>\n<p>eg. 通过rpm找出vimrc的注释符号</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -qc vim-common | xargs vim</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2023/05/18/RHEL-RPM-%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86/2023-05-18-11-13-57.png\"></p>\n<p>不难看出”就是vim的注释符</p>\n<h3 id=\"升级\"><a href=\"#升级\" class=\"headerlink\" title=\"升级\"></a>升级</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -Uvh &lt;rpm_package_name&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -V [args] &#123;&lt;rpm_package_name&gt;|&lt;name&gt;&#125;</span><br></pre></td></tr></table></figure>\n<p>对&#x2F;etc&#x2F;vimrc稍作修改<br><img src=\"/2023/05/18/RHEL-RPM-%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86/2023-05-18-11-16-17.png\"></p>\n<p>验证<br><img src=\"/2023/05/18/RHEL-RPM-%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86/2023-05-18-11-15-25.png\"></p>\n<p>查查man page<br><img src=\"/2023/05/18/RHEL-RPM-%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86/2023-05-18-11-18-14.png\"></p>\n"},{"title":"RHEL YUM 本地源配置","date":"2023-05-18T02:04:09.000Z","_content":"\n# RHEL YUM 本地源配置\n\n## 挂载本地源\n\n```bash\n# 查看挂载的iso\nmount | grep iso\n\n# 查看挂载文件（块）\nl /dev/sr0\n\n# 创建文件（这里是普通用户）\nsudo mkdir /mnt/cdrom\n\n# 挂载\nsudo mount /dev/sr0 /mnt/cdrom/\n\n# 查看被挂载的目录\nls /mnt/cdrom/\n```\n\n![](2023-05-18-10-04-26.png)\n\n## 备份\n\n下面的命令以root身份执行\n```bash\nmkdir /root/yum.repo\n\nmv /etc/yum.repos.d/* /root/yum.repo\n\n```\n\n## 配置本地源\n\n```bash\nvim /etc/yum.repos.d/local.repo\n```\n写入了：\n```\n[local]\nname=quanwei_local\nbaseurl=file:///mnt/cdrom/AppStream\nenabled=1\ngpgcheck=0\n```\n![](2023-05-18-10-10-50.png)\n如果没写AppStream的话会说找不到matadata\n\n完整配置\n![](2023-05-18-10-45-28.png)\n## 清除缓存\n\n![](2023-05-18-10-15-20.png)\n\n## 测试安装\n![](2023-05-18-10-28-51.png)","source":"_posts/RHEL-YUM-本地源配置.md","raw":"---\ntitle: RHEL YUM 本地源配置\ndate: 2023-05-18 10:04:09\ntags: LINUX\n---\n\n# RHEL YUM 本地源配置\n\n## 挂载本地源\n\n```bash\n# 查看挂载的iso\nmount | grep iso\n\n# 查看挂载文件（块）\nl /dev/sr0\n\n# 创建文件（这里是普通用户）\nsudo mkdir /mnt/cdrom\n\n# 挂载\nsudo mount /dev/sr0 /mnt/cdrom/\n\n# 查看被挂载的目录\nls /mnt/cdrom/\n```\n\n![](2023-05-18-10-04-26.png)\n\n## 备份\n\n下面的命令以root身份执行\n```bash\nmkdir /root/yum.repo\n\nmv /etc/yum.repos.d/* /root/yum.repo\n\n```\n\n## 配置本地源\n\n```bash\nvim /etc/yum.repos.d/local.repo\n```\n写入了：\n```\n[local]\nname=quanwei_local\nbaseurl=file:///mnt/cdrom/AppStream\nenabled=1\ngpgcheck=0\n```\n![](2023-05-18-10-10-50.png)\n如果没写AppStream的话会说找不到matadata\n\n完整配置\n![](2023-05-18-10-45-28.png)\n## 清除缓存\n\n![](2023-05-18-10-15-20.png)\n\n## 测试安装\n![](2023-05-18-10-28-51.png)","slug":"RHEL-YUM-本地源配置","published":1,"updated":"2023-05-18T02:45:37.797Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5uy003olv9e9ezy5meg","content":"<h1 id=\"RHEL-YUM-本地源配置\"><a href=\"#RHEL-YUM-本地源配置\" class=\"headerlink\" title=\"RHEL YUM 本地源配置\"></a>RHEL YUM 本地源配置</h1><h2 id=\"挂载本地源\"><a href=\"#挂载本地源\" class=\"headerlink\" title=\"挂载本地源\"></a>挂载本地源</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看挂载的iso</span></span><br><span class=\"line\">mount | grep iso</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看挂载文件（块）</span></span><br><span class=\"line\">l /dev/sr0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建文件（这里是普通用户）</span></span><br><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> /mnt/cdrom</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 挂载</span></span><br><span class=\"line\">sudo mount /dev/sr0 /mnt/cdrom/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看被挂载的目录</span></span><br><span class=\"line\"><span class=\"built_in\">ls</span> /mnt/cdrom/</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/05/18/RHEL-YUM-%E6%9C%AC%E5%9C%B0%E6%BA%90%E9%85%8D%E7%BD%AE/2023-05-18-10-04-26.png\"></p>\n<h2 id=\"备份\"><a href=\"#备份\" class=\"headerlink\" title=\"备份\"></a>备份</h2><p>下面的命令以root身份执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> /root/yum.repo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">mv</span> /etc/yum.repos.d/* /root/yum.repo</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置本地源\"><a href=\"#配置本地源\" class=\"headerlink\" title=\"配置本地源\"></a>配置本地源</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/yum.repos.d/local.repo</span><br></pre></td></tr></table></figure>\n<p>写入了：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[local]</span><br><span class=\"line\">name=quanwei_local</span><br><span class=\"line\">baseurl=file:///mnt/cdrom/AppStream</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgcheck=0</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2023/05/18/RHEL-YUM-%E6%9C%AC%E5%9C%B0%E6%BA%90%E9%85%8D%E7%BD%AE/2023-05-18-10-10-50.png\"><br>如果没写AppStream的话会说找不到matadata</p>\n<p>完整配置<br><img src=\"/2023/05/18/RHEL-YUM-%E6%9C%AC%E5%9C%B0%E6%BA%90%E9%85%8D%E7%BD%AE/2023-05-18-10-45-28.png\"></p>\n<h2 id=\"清除缓存\"><a href=\"#清除缓存\" class=\"headerlink\" title=\"清除缓存\"></a>清除缓存</h2><p><img src=\"/2023/05/18/RHEL-YUM-%E6%9C%AC%E5%9C%B0%E6%BA%90%E9%85%8D%E7%BD%AE/2023-05-18-10-15-20.png\"></p>\n<h2 id=\"测试安装\"><a href=\"#测试安装\" class=\"headerlink\" title=\"测试安装\"></a>测试安装</h2><p><img src=\"/2023/05/18/RHEL-YUM-%E6%9C%AC%E5%9C%B0%E6%BA%90%E9%85%8D%E7%BD%AE/2023-05-18-10-28-51.png\"></p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h1 id=\"RHEL-YUM-本地源配置\"><a href=\"#RHEL-YUM-本地源配置\" class=\"headerlink\" title=\"RHEL YUM 本地源配置\"></a>RHEL YUM 本地源配置</h1><h2 id=\"挂载本地源\"><a href=\"#挂载本地源\" class=\"headerlink\" title=\"挂载本地源\"></a>挂载本地源</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看挂载的iso</span></span><br><span class=\"line\">mount | grep iso</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看挂载文件（块）</span></span><br><span class=\"line\">l /dev/sr0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建文件（这里是普通用户）</span></span><br><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> /mnt/cdrom</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 挂载</span></span><br><span class=\"line\">sudo mount /dev/sr0 /mnt/cdrom/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看被挂载的目录</span></span><br><span class=\"line\"><span class=\"built_in\">ls</span> /mnt/cdrom/</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/05/18/RHEL-YUM-%E6%9C%AC%E5%9C%B0%E6%BA%90%E9%85%8D%E7%BD%AE/2023-05-18-10-04-26.png\"></p>\n<h2 id=\"备份\"><a href=\"#备份\" class=\"headerlink\" title=\"备份\"></a>备份</h2><p>下面的命令以root身份执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> /root/yum.repo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">mv</span> /etc/yum.repos.d/* /root/yum.repo</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置本地源\"><a href=\"#配置本地源\" class=\"headerlink\" title=\"配置本地源\"></a>配置本地源</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/yum.repos.d/local.repo</span><br></pre></td></tr></table></figure>\n<p>写入了：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[local]</span><br><span class=\"line\">name=quanwei_local</span><br><span class=\"line\">baseurl=file:///mnt/cdrom/AppStream</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgcheck=0</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2023/05/18/RHEL-YUM-%E6%9C%AC%E5%9C%B0%E6%BA%90%E9%85%8D%E7%BD%AE/2023-05-18-10-10-50.png\"><br>如果没写AppStream的话会说找不到matadata</p>\n<p>完整配置<br><img src=\"/2023/05/18/RHEL-YUM-%E6%9C%AC%E5%9C%B0%E6%BA%90%E9%85%8D%E7%BD%AE/2023-05-18-10-45-28.png\"></p>\n<h2 id=\"清除缓存\"><a href=\"#清除缓存\" class=\"headerlink\" title=\"清除缓存\"></a>清除缓存</h2><p><img src=\"/2023/05/18/RHEL-YUM-%E6%9C%AC%E5%9C%B0%E6%BA%90%E9%85%8D%E7%BD%AE/2023-05-18-10-15-20.png\"></p>\n<h2 id=\"测试安装\"><a href=\"#测试安装\" class=\"headerlink\" title=\"测试安装\"></a>测试安装</h2><p><img src=\"/2023/05/18/RHEL-YUM-%E6%9C%AC%E5%9C%B0%E6%BA%90%E9%85%8D%E7%BD%AE/2023-05-18-10-28-51.png\"></p>\n"},{"title":"React + Websocket 实现网络聊天室","date":"2023-02-09T07:23:37.000Z","cover":false,"_content":"\n## 需求\n\n1. 注册\n2. 登陆\n3. 群聊\n4. 私聊\n5. 发送文件\n\n## 设计\n\n### 技术栈\n\n使用 Oracle 数据库存储数据\n\n使用 SpringBoot 搭建 Websocket 服务器\n\n使用 Websocket 协议传输数据\n\n使用 React.js 编写前端页面\n\n\n### 数据对象\n\n用户登陆信息 LoginInfo\n{\n  id :number(10),\n  password :varchar(20),\n\n}\n\n用户信息LoginInfo\n{\n  name  :varchar(20),\n  avatar:\n  email :\n  phone:\n  ...\n}\n\n消息 Message\n{\n  from:\n  to:\n  data:\n  dataType:\n  date:\n}\n\nDataType\n{\n  TEXT,\n  IMAGE,\n  VIDEO,\n}\n\n\n\n\n## 前端实现\n\n### 将 UI 拆解为组件层级结构 \n\n![](2023-06-09-16-16-42.png)\n\n### 使用 React 构建一个静态版本\n![](2023-06-11-20-41-29.png)\n\n## 后端实现\n\n\n## 测试\n\n使用 Postman 进行接口测试\n\n## 部署\n\n使用 Docker 部署服务到腾讯云\n\n聊天静态文件用 Nginx \n\n","source":"_posts/React-Websocket-实现网络聊天室.md","raw":"---\ntitle: React + Websocket 实现网络聊天室\ndate: 2023-02-09 15:23:37\ntags: \n- JavaScript\n- React\n- WebScoket\ncover:\n---\n\n## 需求\n\n1. 注册\n2. 登陆\n3. 群聊\n4. 私聊\n5. 发送文件\n\n## 设计\n\n### 技术栈\n\n使用 Oracle 数据库存储数据\n\n使用 SpringBoot 搭建 Websocket 服务器\n\n使用 Websocket 协议传输数据\n\n使用 React.js 编写前端页面\n\n\n### 数据对象\n\n用户登陆信息 LoginInfo\n{\n  id :number(10),\n  password :varchar(20),\n\n}\n\n用户信息LoginInfo\n{\n  name  :varchar(20),\n  avatar:\n  email :\n  phone:\n  ...\n}\n\n消息 Message\n{\n  from:\n  to:\n  data:\n  dataType:\n  date:\n}\n\nDataType\n{\n  TEXT,\n  IMAGE,\n  VIDEO,\n}\n\n\n\n\n## 前端实现\n\n### 将 UI 拆解为组件层级结构 \n\n![](2023-06-09-16-16-42.png)\n\n### 使用 React 构建一个静态版本\n![](2023-06-11-20-41-29.png)\n\n## 后端实现\n\n\n## 测试\n\n使用 Postman 进行接口测试\n\n## 部署\n\n使用 Docker 部署服务到腾讯云\n\n聊天静态文件用 Nginx \n\n","slug":"React-Websocket-实现网络聊天室","published":1,"updated":"2023-06-23T01:06:01.646Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5uy003qlv9e7l6v02gf","content":"<h2 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h2><ol>\n<li>注册</li>\n<li>登陆</li>\n<li>群聊</li>\n<li>私聊</li>\n<li>发送文件</li>\n</ol>\n<h2 id=\"设计\"><a href=\"#设计\" class=\"headerlink\" title=\"设计\"></a>设计</h2><h3 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a>技术栈</h3><p>使用 Oracle 数据库存储数据</p>\n<p>使用 SpringBoot 搭建 Websocket 服务器</p>\n<p>使用 Websocket 协议传输数据</p>\n<p>使用 React.js 编写前端页面</p>\n<h3 id=\"数据对象\"><a href=\"#数据对象\" class=\"headerlink\" title=\"数据对象\"></a>数据对象</h3><p>用户登陆信息 LoginInfo<br>{<br>  id :number(10),<br>  password :varchar(20),</p>\n<p>}</p>\n<p>用户信息LoginInfo<br>{<br>  name  :varchar(20),<br>  avatar:<br>  email :<br>  phone:<br>  …<br>}</p>\n<p>消息 Message<br>{<br>  from:<br>  to:<br>  data:<br>  dataType:<br>  date:<br>}</p>\n<p>DataType<br>{<br>  TEXT,<br>  IMAGE,<br>  VIDEO,<br>}</p>\n<h2 id=\"前端实现\"><a href=\"#前端实现\" class=\"headerlink\" title=\"前端实现\"></a>前端实现</h2><h3 id=\"将-UI-拆解为组件层级结构\"><a href=\"#将-UI-拆解为组件层级结构\" class=\"headerlink\" title=\"将 UI 拆解为组件层级结构\"></a>将 UI 拆解为组件层级结构</h3><p><img src=\"/2023/02/09/React-Websocket-%E5%AE%9E%E7%8E%B0%E7%BD%91%E7%BB%9C%E8%81%8A%E5%A4%A9%E5%AE%A4/2023-06-09-16-16-42.png\"></p>\n<h3 id=\"使用-React-构建一个静态版本\"><a href=\"#使用-React-构建一个静态版本\" class=\"headerlink\" title=\"使用 React 构建一个静态版本\"></a>使用 React 构建一个静态版本</h3><p><img src=\"/2023/02/09/React-Websocket-%E5%AE%9E%E7%8E%B0%E7%BD%91%E7%BB%9C%E8%81%8A%E5%A4%A9%E5%AE%A4/2023-06-11-20-41-29.png\"></p>\n<h2 id=\"后端实现\"><a href=\"#后端实现\" class=\"headerlink\" title=\"后端实现\"></a>后端实现</h2><h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>使用 Postman 进行接口测试</p>\n<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><p>使用 Docker 部署服务到腾讯云</p>\n<p>聊天静态文件用 Nginx </p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h2><ol>\n<li>注册</li>\n<li>登陆</li>\n<li>群聊</li>\n<li>私聊</li>\n<li>发送文件</li>\n</ol>\n<h2 id=\"设计\"><a href=\"#设计\" class=\"headerlink\" title=\"设计\"></a>设计</h2><h3 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a>技术栈</h3><p>使用 Oracle 数据库存储数据</p>\n<p>使用 SpringBoot 搭建 Websocket 服务器</p>\n<p>使用 Websocket 协议传输数据</p>\n<p>使用 React.js 编写前端页面</p>\n<h3 id=\"数据对象\"><a href=\"#数据对象\" class=\"headerlink\" title=\"数据对象\"></a>数据对象</h3><p>用户登陆信息 LoginInfo<br>{<br>  id :number(10),<br>  password :varchar(20),</p>\n<p>}</p>\n<p>用户信息LoginInfo<br>{<br>  name  :varchar(20),<br>  avatar:<br>  email :<br>  phone:<br>  …<br>}</p>\n<p>消息 Message<br>{<br>  from:<br>  to:<br>  data:<br>  dataType:<br>  date:<br>}</p>\n<p>DataType<br>{<br>  TEXT,<br>  IMAGE,<br>  VIDEO,<br>}</p>\n<h2 id=\"前端实现\"><a href=\"#前端实现\" class=\"headerlink\" title=\"前端实现\"></a>前端实现</h2><h3 id=\"将-UI-拆解为组件层级结构\"><a href=\"#将-UI-拆解为组件层级结构\" class=\"headerlink\" title=\"将 UI 拆解为组件层级结构\"></a>将 UI 拆解为组件层级结构</h3><p><img src=\"/2023/02/09/React-Websocket-%E5%AE%9E%E7%8E%B0%E7%BD%91%E7%BB%9C%E8%81%8A%E5%A4%A9%E5%AE%A4/2023-06-09-16-16-42.png\"></p>\n<h3 id=\"使用-React-构建一个静态版本\"><a href=\"#使用-React-构建一个静态版本\" class=\"headerlink\" title=\"使用 React 构建一个静态版本\"></a>使用 React 构建一个静态版本</h3><p><img src=\"/2023/02/09/React-Websocket-%E5%AE%9E%E7%8E%B0%E7%BD%91%E7%BB%9C%E8%81%8A%E5%A4%A9%E5%AE%A4/2023-06-11-20-41-29.png\"></p>\n<h2 id=\"后端实现\"><a href=\"#后端实现\" class=\"headerlink\" title=\"后端实现\"></a>后端实现</h2><h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>使用 Postman 进行接口测试</p>\n<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><p>使用 Docker 部署服务到腾讯云</p>\n<p>聊天静态文件用 Nginx </p>\n"},{"title":"React 中的 hook","date":"2023-06-04T09:03:42.000Z","cover":"2023/06/04/React-中的hook/2023-06-04-17-08-49.png","_content":"\n# Hook\n\nReact中的Hook是React 16.8版本引入的新特性，它可以让函数组件拥有类组件的一些特性，例如状态管理和生命周期方法。使用Hook可以使代码更加简洁、易于理解和维护。\n\nReact中常用的Hook包括：\n\n    useState：用于在函数组件中添加状态管理功能。\n    useEffect：用于在函数组件中添加生命周期方法。\n    useContext：用于在函数组件中使用上下文。\n    useReducer：用于在函数组件中使用Reducer进行状态管理。\n    useCallback：用于在函数组件中缓存回调函数，避免不必要的重新渲染。\n    useMemo：用于在函数组件中缓存计算结果，避免不必要的重复计算。\n    useRef：用于在函数组件中创建可变的引用对象。\n\n使用Hook可以使函数组件具有更多的能力，同时也可以提高代码的可读性和可维护性。\n\n## useState\n\nuseState是React中最基础的Hook之一，它可以让函数组件拥有状态管理的能力。使用useState需要先导入：\n\n```javascript\n\nimport React, { useState } from 'react';\n```\n然后在函数组件中使用：\n\n```javascript\n\nfunction Example() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n```\nuseState接受一个初始值作为参数，并返回一个数组，第一个元素是当前状态的值，第二个元素是更新状态的函数。在上面的例子中，count是当前状态的值，setCount是更新状态的函数。当点击按钮时，调用setCount函数更新count的值。\n\n## useEffect\n\nuseEffect是React中用于添加生命周期方法的Hook。使用useEffect需要先导入：\n\n```javascript\n\nimport React, { useState, useEffect } from 'react';\n```\n然后在函数组件中使用：\n\n```javascript\n\nfunction Example() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    document.title = `You clicked ${count} times`;\n  });\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n```\nuseEffect接受一个回调函数作为参数，这个回调函数会在组件渲染完成后执行。在上面的例子中，我们在回调函数中修改了document.title的值，每次count的值发生变化时都会触发这个回调函数。\n\n## useContext\n\nuseContext是React中用于使用上下文的Hook。使用useContext需要先导入上下文对象：\n\n```javascript\n\nimport React, { useContext } from 'react';\nimport MyContext from './MyContext';\n```\n然后在函数组件中使用：\n\n```javascript\n\nfunction Example() {\n  const value = useContext(MyContext);\n\n  return <div>{value}</div>;\n}\n```\n在上面的例子中，我们通过useContext获取了MyContext中的值，并将其渲染到页面上。\n\n## useReducer\n\nuseReducer是React中用于使用Reducer进行状态管理的Hook。使用useReducer需要先定义Reducer函数：\n\n```javascript\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'increment':\n      return { count: state.count + 1 };\n    case 'decrement':\n      return { count: state.count - 1 };\n    default:\n      throw new Error();\n  }\n}\n```\n然后在函数组件中使用：\n\n```javascript\n\nfunction Example() {\n  const [state, dispatch] = useReducer(reducer, { count: 0 });\n\n  return (\n    <div>\n      Count: {state.count}\n      <button onClick={() => dispatch({ type: 'increment' })}>+</button>\n      <button onClick={() => dispatch({ type: 'decrement' })}>-</button>\n    </div>\n  );\n}\n```\n在上面的例子中，我们使用useReducer创建了一个状态对象和一个dispatch函数，每次调用dispatch函数时都会触发reducer函数，根据传入的action.type来更新状态对象。\n\n## useCallback\n\nuseCallback是React中用于缓存回调函数的Hook。使用useCallback需要先导入：\n\n```javascript\n\nimport React, { useState, useCallback } from 'react';\n```\n然后在函数组件中使用：\n\n```javascript\n\nfunction Example() {\n  const [count, setCount] = useState(0);\n  const handleClick = useCallback(() => {\n    console.log('Clicked');\n  }, []);\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n      <button onClick={handleClick}>\n        Log click\n      </button>\n    </div>\n  );\n}\n```\n\n在上面的例子中，我们使用useCallback缓存了一个回调函数handleClick，避免在每次渲染时都重新创建这个函数。\n\n## useMemo\n\nuseMemo是React中用于缓存计算结果的Hook。使用useMemo需要先导入：\n\n```javascript\n\nimport React, { useState, useMemo } from 'react';\n```\n然后在函数组件中使用：\n\n```javascript\n\nfunction Example() {\n  const [count, setCount] = useState(0);\n  const expensiveValue = useMemo(() => {\n    console.log('Calculating expensive value');\n    let result = 0;\n    for (let i = 0; i < count * 1000000; i++) {\n      result += i;\n    }\n    return result;\n  }, [count]);\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <p>Expensive value: {expensiveValue}</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n```\n在上面的例子中，我们使用useMemo缓存了一个计算结果expensiveValue，只有当count的值发生变化时才会重新计算这个结果。\n\n## useRef\n\nuseRef是React中用于创建可变引用对象的Hook。使用useRef需要先导入：\n\n```javascript\n\nimport React, { useRef } from 'react';\n```\n然后在函数组件中使用：\n\n```javascript\n\nfunction Example() {\n  const inputRef = useRef(null);\n\n  function handleClick() {\n    inputRef.current.focus();\n  }\n\n  return (\n    <div>\n      <input ref={inputRef} />\n      <button onClick={handleClick}>\n        Focus input\n      </button>\n    </div>\n  );\n}\n```\n在上面的例子中，我们使用useRef创建了一个可变引用对象inputRef，并将其赋值给input元素的ref属性。在handleClick函数中，我们调用inputRef.current.focus()来聚焦到input元素上。","source":"_posts/React-中的hook.md","raw":"---\ntitle: React 中的 hook\ndate: 2023-06-04 17:03:42\ntags:\n- JavaScript\n- React\ncover: 2023-06-04-17-08-49.png\n---\n\n# Hook\n\nReact中的Hook是React 16.8版本引入的新特性，它可以让函数组件拥有类组件的一些特性，例如状态管理和生命周期方法。使用Hook可以使代码更加简洁、易于理解和维护。\n\nReact中常用的Hook包括：\n\n    useState：用于在函数组件中添加状态管理功能。\n    useEffect：用于在函数组件中添加生命周期方法。\n    useContext：用于在函数组件中使用上下文。\n    useReducer：用于在函数组件中使用Reducer进行状态管理。\n    useCallback：用于在函数组件中缓存回调函数，避免不必要的重新渲染。\n    useMemo：用于在函数组件中缓存计算结果，避免不必要的重复计算。\n    useRef：用于在函数组件中创建可变的引用对象。\n\n使用Hook可以使函数组件具有更多的能力，同时也可以提高代码的可读性和可维护性。\n\n## useState\n\nuseState是React中最基础的Hook之一，它可以让函数组件拥有状态管理的能力。使用useState需要先导入：\n\n```javascript\n\nimport React, { useState } from 'react';\n```\n然后在函数组件中使用：\n\n```javascript\n\nfunction Example() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n```\nuseState接受一个初始值作为参数，并返回一个数组，第一个元素是当前状态的值，第二个元素是更新状态的函数。在上面的例子中，count是当前状态的值，setCount是更新状态的函数。当点击按钮时，调用setCount函数更新count的值。\n\n## useEffect\n\nuseEffect是React中用于添加生命周期方法的Hook。使用useEffect需要先导入：\n\n```javascript\n\nimport React, { useState, useEffect } from 'react';\n```\n然后在函数组件中使用：\n\n```javascript\n\nfunction Example() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    document.title = `You clicked ${count} times`;\n  });\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n```\nuseEffect接受一个回调函数作为参数，这个回调函数会在组件渲染完成后执行。在上面的例子中，我们在回调函数中修改了document.title的值，每次count的值发生变化时都会触发这个回调函数。\n\n## useContext\n\nuseContext是React中用于使用上下文的Hook。使用useContext需要先导入上下文对象：\n\n```javascript\n\nimport React, { useContext } from 'react';\nimport MyContext from './MyContext';\n```\n然后在函数组件中使用：\n\n```javascript\n\nfunction Example() {\n  const value = useContext(MyContext);\n\n  return <div>{value}</div>;\n}\n```\n在上面的例子中，我们通过useContext获取了MyContext中的值，并将其渲染到页面上。\n\n## useReducer\n\nuseReducer是React中用于使用Reducer进行状态管理的Hook。使用useReducer需要先定义Reducer函数：\n\n```javascript\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'increment':\n      return { count: state.count + 1 };\n    case 'decrement':\n      return { count: state.count - 1 };\n    default:\n      throw new Error();\n  }\n}\n```\n然后在函数组件中使用：\n\n```javascript\n\nfunction Example() {\n  const [state, dispatch] = useReducer(reducer, { count: 0 });\n\n  return (\n    <div>\n      Count: {state.count}\n      <button onClick={() => dispatch({ type: 'increment' })}>+</button>\n      <button onClick={() => dispatch({ type: 'decrement' })}>-</button>\n    </div>\n  );\n}\n```\n在上面的例子中，我们使用useReducer创建了一个状态对象和一个dispatch函数，每次调用dispatch函数时都会触发reducer函数，根据传入的action.type来更新状态对象。\n\n## useCallback\n\nuseCallback是React中用于缓存回调函数的Hook。使用useCallback需要先导入：\n\n```javascript\n\nimport React, { useState, useCallback } from 'react';\n```\n然后在函数组件中使用：\n\n```javascript\n\nfunction Example() {\n  const [count, setCount] = useState(0);\n  const handleClick = useCallback(() => {\n    console.log('Clicked');\n  }, []);\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n      <button onClick={handleClick}>\n        Log click\n      </button>\n    </div>\n  );\n}\n```\n\n在上面的例子中，我们使用useCallback缓存了一个回调函数handleClick，避免在每次渲染时都重新创建这个函数。\n\n## useMemo\n\nuseMemo是React中用于缓存计算结果的Hook。使用useMemo需要先导入：\n\n```javascript\n\nimport React, { useState, useMemo } from 'react';\n```\n然后在函数组件中使用：\n\n```javascript\n\nfunction Example() {\n  const [count, setCount] = useState(0);\n  const expensiveValue = useMemo(() => {\n    console.log('Calculating expensive value');\n    let result = 0;\n    for (let i = 0; i < count * 1000000; i++) {\n      result += i;\n    }\n    return result;\n  }, [count]);\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <p>Expensive value: {expensiveValue}</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n```\n在上面的例子中，我们使用useMemo缓存了一个计算结果expensiveValue，只有当count的值发生变化时才会重新计算这个结果。\n\n## useRef\n\nuseRef是React中用于创建可变引用对象的Hook。使用useRef需要先导入：\n\n```javascript\n\nimport React, { useRef } from 'react';\n```\n然后在函数组件中使用：\n\n```javascript\n\nfunction Example() {\n  const inputRef = useRef(null);\n\n  function handleClick() {\n    inputRef.current.focus();\n  }\n\n  return (\n    <div>\n      <input ref={inputRef} />\n      <button onClick={handleClick}>\n        Focus input\n      </button>\n    </div>\n  );\n}\n```\n在上面的例子中，我们使用useRef创建了一个可变引用对象inputRef，并将其赋值给input元素的ref属性。在handleClick函数中，我们调用inputRef.current.focus()来聚焦到input元素上。","slug":"React-中的hook","published":1,"updated":"2023-06-23T01:06:11.397Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5uz003slv9efbsfc063","content":"<h1 id=\"Hook\"><a href=\"#Hook\" class=\"headerlink\" title=\"Hook\"></a>Hook</h1><p>React中的Hook是React 16.8版本引入的新特性，它可以让函数组件拥有类组件的一些特性，例如状态管理和生命周期方法。使用Hook可以使代码更加简洁、易于理解和维护。</p>\n<p>React中常用的Hook包括：</p>\n<pre><code>useState：用于在函数组件中添加状态管理功能。\nuseEffect：用于在函数组件中添加生命周期方法。\nuseContext：用于在函数组件中使用上下文。\nuseReducer：用于在函数组件中使用Reducer进行状态管理。\nuseCallback：用于在函数组件中缓存回调函数，避免不必要的重新渲染。\nuseMemo：用于在函数组件中缓存计算结果，避免不必要的重复计算。\nuseRef：用于在函数组件中创建可变的引用对象。\n</code></pre>\n<p>使用Hook可以使函数组件具有更多的能力，同时也可以提高代码的可读性和可维护性。</p>\n<h2 id=\"useState\"><a href=\"#useState\" class=\"headerlink\" title=\"useState\"></a>useState</h2><p>useState是React中最基础的Hook之一，它可以让函数组件拥有状态管理的能力。使用useState需要先导入：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>然后在函数组件中使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Example</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>You clicked &#123;count&#125; times<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">        Click me</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>useState接受一个初始值作为参数，并返回一个数组，第一个元素是当前状态的值，第二个元素是更新状态的函数。在上面的例子中，count是当前状态的值，setCount是更新状态的函数。当点击按钮时，调用setCount函数更新count的值。</p>\n<h2 id=\"useEffect\"><a href=\"#useEffect\" class=\"headerlink\" title=\"useEffect\"></a>useEffect</h2><p>useEffect是React中用于添加生命周期方法的Hook。使用useEffect需要先导入：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; useState, useEffect &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>然后在函数组件中使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Example</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"property\">title</span> = <span class=\"string\">`You clicked <span class=\"subst\">$&#123;count&#125;</span> times`</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>You clicked &#123;count&#125; times<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">        Click me</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>useEffect接受一个回调函数作为参数，这个回调函数会在组件渲染完成后执行。在上面的例子中，我们在回调函数中修改了document.title的值，每次count的值发生变化时都会触发这个回调函数。</p>\n<h2 id=\"useContext\"><a href=\"#useContext\" class=\"headerlink\" title=\"useContext\"></a>useContext</h2><p>useContext是React中用于使用上下文的Hook。使用useContext需要先导入上下文对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; useContext &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">MyContext</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./MyContext&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>然后在函数组件中使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Example</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> value = <span class=\"title function_\">useContext</span>(<span class=\"title class_\">MyContext</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;value&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上面的例子中，我们通过useContext获取了MyContext中的值，并将其渲染到页面上。</p>\n<h2 id=\"useReducer\"><a href=\"#useReducer\" class=\"headerlink\" title=\"useReducer\"></a>useReducer</h2><p>useReducer是React中用于使用Reducer进行状态管理的Hook。使用useReducer需要先定义Reducer函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reducer</span>(<span class=\"params\">state, action</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (action.<span class=\"property\">type</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;increment&#x27;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">count</span>: state.<span class=\"property\">count</span> + <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;decrement&#x27;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">count</span>: state.<span class=\"property\">count</span> - <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\">    <span class=\"attr\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在函数组件中使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Example</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [state, dispatch] = <span class=\"title function_\">useReducer</span>(reducer, &#123; <span class=\"attr\">count</span>: <span class=\"number\">0</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      Count: &#123;state.count&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> dispatch(&#123; type: &#x27;increment&#x27; &#125;)&#125;&gt;+<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> dispatch(&#123; type: &#x27;decrement&#x27; &#125;)&#125;&gt;-<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上面的例子中，我们使用useReducer创建了一个状态对象和一个dispatch函数，每次调用dispatch函数时都会触发reducer函数，根据传入的action.type来更新状态对象。</p>\n<h2 id=\"useCallback\"><a href=\"#useCallback\" class=\"headerlink\" title=\"useCallback\"></a>useCallback</h2><p>useCallback是React中用于缓存回调函数的Hook。使用useCallback需要先导入：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; useState, useCallback &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>然后在函数组件中使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Example</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleClick = <span class=\"title function_\">useCallback</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Clicked&#x27;</span>);</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>You clicked &#123;count&#125; times<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">        Click me</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;handleClick&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        Log click</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上面的例子中，我们使用useCallback缓存了一个回调函数handleClick，避免在每次渲染时都重新创建这个函数。</p>\n<h2 id=\"useMemo\"><a href=\"#useMemo\" class=\"headerlink\" title=\"useMemo\"></a>useMemo</h2><p>useMemo是React中用于缓存计算结果的Hook。使用useMemo需要先导入：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; useState, useMemo &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>然后在函数组件中使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Example</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> expensiveValue = <span class=\"title function_\">useMemo</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Calculating expensive value&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; count * <span class=\"number\">1000000</span>; i++) &#123;</span><br><span class=\"line\">      result += i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;, [count]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>You clicked &#123;count&#125; times<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Expensive value: &#123;expensiveValue&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">        Click me</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上面的例子中，我们使用useMemo缓存了一个计算结果expensiveValue，只有当count的值发生变化时才会重新计算这个结果。</p>\n<h2 id=\"useRef\"><a href=\"#useRef\" class=\"headerlink\" title=\"useRef\"></a>useRef</h2><p>useRef是React中用于创建可变引用对象的Hook。使用useRef需要先导入：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; useRef &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>然后在函数组件中使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Example</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> inputRef = <span class=\"title function_\">useRef</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">handleClick</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    inputRef.<span class=\"property\">current</span>.<span class=\"title function_\">focus</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;inputRef&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;handleClick&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        Focus input</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上面的例子中，我们使用useRef创建了一个可变引用对象inputRef，并将其赋值给input元素的ref属性。在handleClick函数中，我们调用inputRef.current.focus()来聚焦到input元素上。</p>\n","site":{"data":{}},"cover_type":"img","excerpt":"","more":"<h1 id=\"Hook\"><a href=\"#Hook\" class=\"headerlink\" title=\"Hook\"></a>Hook</h1><p>React中的Hook是React 16.8版本引入的新特性，它可以让函数组件拥有类组件的一些特性，例如状态管理和生命周期方法。使用Hook可以使代码更加简洁、易于理解和维护。</p>\n<p>React中常用的Hook包括：</p>\n<pre><code>useState：用于在函数组件中添加状态管理功能。\nuseEffect：用于在函数组件中添加生命周期方法。\nuseContext：用于在函数组件中使用上下文。\nuseReducer：用于在函数组件中使用Reducer进行状态管理。\nuseCallback：用于在函数组件中缓存回调函数，避免不必要的重新渲染。\nuseMemo：用于在函数组件中缓存计算结果，避免不必要的重复计算。\nuseRef：用于在函数组件中创建可变的引用对象。\n</code></pre>\n<p>使用Hook可以使函数组件具有更多的能力，同时也可以提高代码的可读性和可维护性。</p>\n<h2 id=\"useState\"><a href=\"#useState\" class=\"headerlink\" title=\"useState\"></a>useState</h2><p>useState是React中最基础的Hook之一，它可以让函数组件拥有状态管理的能力。使用useState需要先导入：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>然后在函数组件中使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Example</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>You clicked &#123;count&#125; times<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">        Click me</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>useState接受一个初始值作为参数，并返回一个数组，第一个元素是当前状态的值，第二个元素是更新状态的函数。在上面的例子中，count是当前状态的值，setCount是更新状态的函数。当点击按钮时，调用setCount函数更新count的值。</p>\n<h2 id=\"useEffect\"><a href=\"#useEffect\" class=\"headerlink\" title=\"useEffect\"></a>useEffect</h2><p>useEffect是React中用于添加生命周期方法的Hook。使用useEffect需要先导入：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; useState, useEffect &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>然后在函数组件中使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Example</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"property\">title</span> = <span class=\"string\">`You clicked <span class=\"subst\">$&#123;count&#125;</span> times`</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>You clicked &#123;count&#125; times<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">        Click me</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>useEffect接受一个回调函数作为参数，这个回调函数会在组件渲染完成后执行。在上面的例子中，我们在回调函数中修改了document.title的值，每次count的值发生变化时都会触发这个回调函数。</p>\n<h2 id=\"useContext\"><a href=\"#useContext\" class=\"headerlink\" title=\"useContext\"></a>useContext</h2><p>useContext是React中用于使用上下文的Hook。使用useContext需要先导入上下文对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; useContext &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">MyContext</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./MyContext&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>然后在函数组件中使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Example</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> value = <span class=\"title function_\">useContext</span>(<span class=\"title class_\">MyContext</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;value&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上面的例子中，我们通过useContext获取了MyContext中的值，并将其渲染到页面上。</p>\n<h2 id=\"useReducer\"><a href=\"#useReducer\" class=\"headerlink\" title=\"useReducer\"></a>useReducer</h2><p>useReducer是React中用于使用Reducer进行状态管理的Hook。使用useReducer需要先定义Reducer函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reducer</span>(<span class=\"params\">state, action</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (action.<span class=\"property\">type</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;increment&#x27;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">count</span>: state.<span class=\"property\">count</span> + <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;decrement&#x27;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">count</span>: state.<span class=\"property\">count</span> - <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\">    <span class=\"attr\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在函数组件中使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Example</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [state, dispatch] = <span class=\"title function_\">useReducer</span>(reducer, &#123; <span class=\"attr\">count</span>: <span class=\"number\">0</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      Count: &#123;state.count&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> dispatch(&#123; type: &#x27;increment&#x27; &#125;)&#125;&gt;+<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> dispatch(&#123; type: &#x27;decrement&#x27; &#125;)&#125;&gt;-<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上面的例子中，我们使用useReducer创建了一个状态对象和一个dispatch函数，每次调用dispatch函数时都会触发reducer函数，根据传入的action.type来更新状态对象。</p>\n<h2 id=\"useCallback\"><a href=\"#useCallback\" class=\"headerlink\" title=\"useCallback\"></a>useCallback</h2><p>useCallback是React中用于缓存回调函数的Hook。使用useCallback需要先导入：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; useState, useCallback &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>然后在函数组件中使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Example</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleClick = <span class=\"title function_\">useCallback</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Clicked&#x27;</span>);</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>You clicked &#123;count&#125; times<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">        Click me</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;handleClick&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        Log click</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上面的例子中，我们使用useCallback缓存了一个回调函数handleClick，避免在每次渲染时都重新创建这个函数。</p>\n<h2 id=\"useMemo\"><a href=\"#useMemo\" class=\"headerlink\" title=\"useMemo\"></a>useMemo</h2><p>useMemo是React中用于缓存计算结果的Hook。使用useMemo需要先导入：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; useState, useMemo &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>然后在函数组件中使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Example</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> expensiveValue = <span class=\"title function_\">useMemo</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Calculating expensive value&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; count * <span class=\"number\">1000000</span>; i++) &#123;</span><br><span class=\"line\">      result += i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;, [count]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>You clicked &#123;count&#125; times<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Expensive value: &#123;expensiveValue&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">        Click me</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上面的例子中，我们使用useMemo缓存了一个计算结果expensiveValue，只有当count的值发生变化时才会重新计算这个结果。</p>\n<h2 id=\"useRef\"><a href=\"#useRef\" class=\"headerlink\" title=\"useRef\"></a>useRef</h2><p>useRef是React中用于创建可变引用对象的Hook。使用useRef需要先导入：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; useRef &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>然后在函数组件中使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Example</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> inputRef = <span class=\"title function_\">useRef</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">handleClick</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    inputRef.<span class=\"property\">current</span>.<span class=\"title function_\">focus</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;inputRef&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;handleClick&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        Focus input</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上面的例子中，我们使用useRef创建了一个可变引用对象inputRef，并将其赋值给input元素的ref属性。在handleClick函数中，我们调用inputRef.current.focus()来聚焦到input元素上。</p>\n"},{"title":"Postman 但是 React","date":"2023-06-06T10:35:28.000Z","cover":"2023/06/06/React-版-Postman/2023-06-09-18-40-16.png","_content":"\n## 0x00要求\n\n创建一个前后端分离项目，并使用Postman测试后端API\n\n## 0x01 分析\n\n开始之前\n\nPostman的大名早有所耳闻，以前没有使用它只因为觉得它的功能有些许鸡肋（请求响应而已）\n\n所以我决定写一个Postman的子集（t4t-api），并用它来做一些简单的接口测试。\n\n创建一个前后端项目，为了快速创建项目，前端使用React框架，后端使用SpringBoot。\n\nPostman的界面主要分为三个区域：\n（1）请求发起区域\n（2）结果显示区域\n（3）历史记录区域\n\n![](2023-06-09-18-41-35.png)\n\n下面的前端项目也采用这种功能布局。\n\n## 0x02 前端\n\n1.创建一个React项目\n![](2023-06-09-18-41-59.png)\n\n2.经过一晚上的努力，看看效果\n![](2023-06-09-18-42-30.png)\n\n![](2023-06-09-18-42-36.png)\n\n## 0x03 后端项目\n\n这里的后端项目采用我以前写好的几个项目：\n\n1.文件上传下载项目（还没写完）\n\n页面大概长这样\n\n![](2023-06-09-18-43-47.png)\n\n用手机扫描二维码就可以打开网页，然后点击“Browse”就可以选择要上传的文件，然后点击“UPLOAD”上传。\n\n要测的主要就是这两个接口：\n\nGET请求返回二维码\n![](2023-06-09-18-44-04.png)\n\nGET请求返回html\n![](2023-06-09-18-44-13.png)\n\n![](2023-06-09-18-44-26.png)\n\n2.SpringMVC 学习项目\n\n前面测了GET,这里测试POST：\n![](2023-06-09-18-44-45.png)\n\n![](2023-06-09-18-44-50.png)\n\n## 0x04 使用Postman测试API\n\n1.测试返回二维码（流）\n\n![](2023-06-09-18-45-09.png)\n结果不但获取到了还自动解析成图片。\n\n2.测试返回HTML\n![](2023-06-09-18-45-27.png)\n\n![](2023-06-09-18-45-34.png)\n\n为什么图片没有加载出来？\n\n因为图片使用fetch api（类似ajax）获取的，显然这段JavaScript没有执行。\n\n![](2023-06-09-18-45-47.png)\n\n3.获取JSON\n\n![](2023-06-09-18-45-59.png)\n为啥age：null？因为我们提交的JSON里面就没有age，因此数据库里也没有。\n\n## 0x05 使用t4t-api测试\n\n1.测试返回二维码（流）\n\n![](2023-06-09-18-46-22.png)\n\n是滴！我也实现了解析流。\n\n流->Blob->img\n\n![](2023-06-09-18-46-31.png)\n\n![](2023-06-09-18-46-36.png)\n\n2.测试返回HTML\n![](2023-06-09-18-46-59.png)\n\n看起来很普通，其实我笨拙地实现了HTML代码格式化和代码高亮。\n\n![](2023-06-09-18-47-10.png)\n\n![](2023-06-09-18-47-14.png)\n\n个人认为我的JSON格式化比Postman的好看。\n![](2023-06-09-18-47-29.png)\n\n## 0x06 使用Curl测试API\n\n![](2023-06-09-18-47-48.png)\n\n![](2023-06-09-18-47-53.png)\n\n为啥是-128？ 因为age是用byte存储的","source":"_posts/React-版-Postman.md","raw":"---\ntitle: Postman 但是 React\ndate: 2023-06-06 18:35:28\ntags: \n- JavaScript\n- React\ncover: 2023-06-09-18-40-16.png\n---\n\n## 0x00要求\n\n创建一个前后端分离项目，并使用Postman测试后端API\n\n## 0x01 分析\n\n开始之前\n\nPostman的大名早有所耳闻，以前没有使用它只因为觉得它的功能有些许鸡肋（请求响应而已）\n\n所以我决定写一个Postman的子集（t4t-api），并用它来做一些简单的接口测试。\n\n创建一个前后端项目，为了快速创建项目，前端使用React框架，后端使用SpringBoot。\n\nPostman的界面主要分为三个区域：\n（1）请求发起区域\n（2）结果显示区域\n（3）历史记录区域\n\n![](2023-06-09-18-41-35.png)\n\n下面的前端项目也采用这种功能布局。\n\n## 0x02 前端\n\n1.创建一个React项目\n![](2023-06-09-18-41-59.png)\n\n2.经过一晚上的努力，看看效果\n![](2023-06-09-18-42-30.png)\n\n![](2023-06-09-18-42-36.png)\n\n## 0x03 后端项目\n\n这里的后端项目采用我以前写好的几个项目：\n\n1.文件上传下载项目（还没写完）\n\n页面大概长这样\n\n![](2023-06-09-18-43-47.png)\n\n用手机扫描二维码就可以打开网页，然后点击“Browse”就可以选择要上传的文件，然后点击“UPLOAD”上传。\n\n要测的主要就是这两个接口：\n\nGET请求返回二维码\n![](2023-06-09-18-44-04.png)\n\nGET请求返回html\n![](2023-06-09-18-44-13.png)\n\n![](2023-06-09-18-44-26.png)\n\n2.SpringMVC 学习项目\n\n前面测了GET,这里测试POST：\n![](2023-06-09-18-44-45.png)\n\n![](2023-06-09-18-44-50.png)\n\n## 0x04 使用Postman测试API\n\n1.测试返回二维码（流）\n\n![](2023-06-09-18-45-09.png)\n结果不但获取到了还自动解析成图片。\n\n2.测试返回HTML\n![](2023-06-09-18-45-27.png)\n\n![](2023-06-09-18-45-34.png)\n\n为什么图片没有加载出来？\n\n因为图片使用fetch api（类似ajax）获取的，显然这段JavaScript没有执行。\n\n![](2023-06-09-18-45-47.png)\n\n3.获取JSON\n\n![](2023-06-09-18-45-59.png)\n为啥age：null？因为我们提交的JSON里面就没有age，因此数据库里也没有。\n\n## 0x05 使用t4t-api测试\n\n1.测试返回二维码（流）\n\n![](2023-06-09-18-46-22.png)\n\n是滴！我也实现了解析流。\n\n流->Blob->img\n\n![](2023-06-09-18-46-31.png)\n\n![](2023-06-09-18-46-36.png)\n\n2.测试返回HTML\n![](2023-06-09-18-46-59.png)\n\n看起来很普通，其实我笨拙地实现了HTML代码格式化和代码高亮。\n\n![](2023-06-09-18-47-10.png)\n\n![](2023-06-09-18-47-14.png)\n\n个人认为我的JSON格式化比Postman的好看。\n![](2023-06-09-18-47-29.png)\n\n## 0x06 使用Curl测试API\n\n![](2023-06-09-18-47-48.png)\n\n![](2023-06-09-18-47-53.png)\n\n为啥是-128？ 因为age是用byte存储的","slug":"React-版-Postman","published":1,"updated":"2023-06-23T01:06:15.867Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5vb006clv9eh14690o1","content":"<h2 id=\"0x00要求\"><a href=\"#0x00要求\" class=\"headerlink\" title=\"0x00要求\"></a>0x00要求</h2><p>创建一个前后端分离项目，并使用Postman测试后端API</p>\n<h2 id=\"0x01-分析\"><a href=\"#0x01-分析\" class=\"headerlink\" title=\"0x01 分析\"></a>0x01 分析</h2><p>开始之前</p>\n<p>Postman的大名早有所耳闻，以前没有使用它只因为觉得它的功能有些许鸡肋（请求响应而已）</p>\n<p>所以我决定写一个Postman的子集（t4t-api），并用它来做一些简单的接口测试。</p>\n<p>创建一个前后端项目，为了快速创建项目，前端使用React框架，后端使用SpringBoot。</p>\n<p>Postman的界面主要分为三个区域：<br>（1）请求发起区域<br>（2）结果显示区域<br>（3）历史记录区域</p>\n<p><img src=\"/2023/06/06/React-%E7%89%88-Postman/2023-06-09-18-41-35.png\"></p>\n<p>下面的前端项目也采用这种功能布局。</p>\n<h2 id=\"0x02-前端\"><a href=\"#0x02-前端\" class=\"headerlink\" title=\"0x02 前端\"></a>0x02 前端</h2><p>1.创建一个React项目<br><img src=\"/2023/06/06/React-%E7%89%88-Postman/2023-06-09-18-41-59.png\"></p>\n<p>2.经过一晚上的努力，看看效果<br><img src=\"/2023/06/06/React-%E7%89%88-Postman/2023-06-09-18-42-30.png\"></p>\n<p><img src=\"/2023/06/06/React-%E7%89%88-Postman/2023-06-09-18-42-36.png\"></p>\n<h2 id=\"0x03-后端项目\"><a href=\"#0x03-后端项目\" class=\"headerlink\" title=\"0x03 后端项目\"></a>0x03 后端项目</h2><p>这里的后端项目采用我以前写好的几个项目：</p>\n<p>1.文件上传下载项目（还没写完）</p>\n<p>页面大概长这样</p>\n<p><img src=\"/2023/06/06/React-%E7%89%88-Postman/2023-06-09-18-43-47.png\"></p>\n<p>用手机扫描二维码就可以打开网页，然后点击“Browse”就可以选择要上传的文件，然后点击“UPLOAD”上传。</p>\n<p>要测的主要就是这两个接口：</p>\n<p>GET请求返回二维码<br><img src=\"/2023/06/06/React-%E7%89%88-Postman/2023-06-09-18-44-04.png\"></p>\n<p>GET请求返回html<br><img src=\"/2023/06/06/React-%E7%89%88-Postman/2023-06-09-18-44-13.png\"></p>\n<p><img src=\"/2023/06/06/React-%E7%89%88-Postman/2023-06-09-18-44-26.png\"></p>\n<p>2.SpringMVC 学习项目</p>\n<p>前面测了GET,这里测试POST：<br><img src=\"/2023/06/06/React-%E7%89%88-Postman/2023-06-09-18-44-45.png\"></p>\n<p><img src=\"/2023/06/06/React-%E7%89%88-Postman/2023-06-09-18-44-50.png\"></p>\n<h2 id=\"0x04-使用Postman测试API\"><a href=\"#0x04-使用Postman测试API\" class=\"headerlink\" title=\"0x04 使用Postman测试API\"></a>0x04 使用Postman测试API</h2><p>1.测试返回二维码（流）</p>\n<p><img src=\"/2023/06/06/React-%E7%89%88-Postman/2023-06-09-18-45-09.png\"><br>结果不但获取到了还自动解析成图片。</p>\n<p>2.测试返回HTML<br><img src=\"/2023/06/06/React-%E7%89%88-Postman/2023-06-09-18-45-27.png\"></p>\n<p><img src=\"/2023/06/06/React-%E7%89%88-Postman/2023-06-09-18-45-34.png\"></p>\n<p>为什么图片没有加载出来？</p>\n<p>因为图片使用fetch api（类似ajax）获取的，显然这段JavaScript没有执行。</p>\n<p><img src=\"/2023/06/06/React-%E7%89%88-Postman/2023-06-09-18-45-47.png\"></p>\n<p>3.获取JSON</p>\n<p><img src=\"/2023/06/06/React-%E7%89%88-Postman/2023-06-09-18-45-59.png\"><br>为啥age：null？因为我们提交的JSON里面就没有age，因此数据库里也没有。</p>\n<h2 id=\"0x05-使用t4t-api测试\"><a href=\"#0x05-使用t4t-api测试\" class=\"headerlink\" title=\"0x05 使用t4t-api测试\"></a>0x05 使用t4t-api测试</h2><p>1.测试返回二维码（流）</p>\n<p><img src=\"/2023/06/06/React-%E7%89%88-Postman/2023-06-09-18-46-22.png\"></p>\n<p>是滴！我也实现了解析流。</p>\n<p>流-&gt;Blob-&gt;img</p>\n<p><img src=\"/2023/06/06/React-%E7%89%88-Postman/2023-06-09-18-46-31.png\"></p>\n<p><img src=\"/2023/06/06/React-%E7%89%88-Postman/2023-06-09-18-46-36.png\"></p>\n<p>2.测试返回HTML<br><img src=\"/2023/06/06/React-%E7%89%88-Postman/2023-06-09-18-46-59.png\"></p>\n<p>看起来很普通，其实我笨拙地实现了HTML代码格式化和代码高亮。</p>\n<p><img src=\"/2023/06/06/React-%E7%89%88-Postman/2023-06-09-18-47-10.png\"></p>\n<p><img src=\"/2023/06/06/React-%E7%89%88-Postman/2023-06-09-18-47-14.png\"></p>\n<p>个人认为我的JSON格式化比Postman的好看。<br><img src=\"/2023/06/06/React-%E7%89%88-Postman/2023-06-09-18-47-29.png\"></p>\n<h2 id=\"0x06-使用Curl测试API\"><a href=\"#0x06-使用Curl测试API\" class=\"headerlink\" title=\"0x06 使用Curl测试API\"></a>0x06 使用Curl测试API</h2><p><img src=\"/2023/06/06/React-%E7%89%88-Postman/2023-06-09-18-47-48.png\"></p>\n<p><img src=\"/2023/06/06/React-%E7%89%88-Postman/2023-06-09-18-47-53.png\"></p>\n<p>为啥是-128？ 因为age是用byte存储的</p>\n","site":{"data":{}},"cover_type":"img","excerpt":"","more":"<h2 id=\"0x00要求\"><a href=\"#0x00要求\" class=\"headerlink\" title=\"0x00要求\"></a>0x00要求</h2><p>创建一个前后端分离项目，并使用Postman测试后端API</p>\n<h2 id=\"0x01-分析\"><a href=\"#0x01-分析\" class=\"headerlink\" title=\"0x01 分析\"></a>0x01 分析</h2><p>开始之前</p>\n<p>Postman的大名早有所耳闻，以前没有使用它只因为觉得它的功能有些许鸡肋（请求响应而已）</p>\n<p>所以我决定写一个Postman的子集（t4t-api），并用它来做一些简单的接口测试。</p>\n<p>创建一个前后端项目，为了快速创建项目，前端使用React框架，后端使用SpringBoot。</p>\n<p>Postman的界面主要分为三个区域：<br>（1）请求发起区域<br>（2）结果显示区域<br>（3）历史记录区域</p>\n<p><img src=\"/2023/06/06/React-%E7%89%88-Postman/2023-06-09-18-41-35.png\"></p>\n<p>下面的前端项目也采用这种功能布局。</p>\n<h2 id=\"0x02-前端\"><a href=\"#0x02-前端\" class=\"headerlink\" title=\"0x02 前端\"></a>0x02 前端</h2><p>1.创建一个React项目<br><img src=\"/2023/06/06/React-%E7%89%88-Postman/2023-06-09-18-41-59.png\"></p>\n<p>2.经过一晚上的努力，看看效果<br><img src=\"/2023/06/06/React-%E7%89%88-Postman/2023-06-09-18-42-30.png\"></p>\n<p><img src=\"/2023/06/06/React-%E7%89%88-Postman/2023-06-09-18-42-36.png\"></p>\n<h2 id=\"0x03-后端项目\"><a href=\"#0x03-后端项目\" class=\"headerlink\" title=\"0x03 后端项目\"></a>0x03 后端项目</h2><p>这里的后端项目采用我以前写好的几个项目：</p>\n<p>1.文件上传下载项目（还没写完）</p>\n<p>页面大概长这样</p>\n<p><img src=\"/2023/06/06/React-%E7%89%88-Postman/2023-06-09-18-43-47.png\"></p>\n<p>用手机扫描二维码就可以打开网页，然后点击“Browse”就可以选择要上传的文件，然后点击“UPLOAD”上传。</p>\n<p>要测的主要就是这两个接口：</p>\n<p>GET请求返回二维码<br><img src=\"/2023/06/06/React-%E7%89%88-Postman/2023-06-09-18-44-04.png\"></p>\n<p>GET请求返回html<br><img src=\"/2023/06/06/React-%E7%89%88-Postman/2023-06-09-18-44-13.png\"></p>\n<p><img src=\"/2023/06/06/React-%E7%89%88-Postman/2023-06-09-18-44-26.png\"></p>\n<p>2.SpringMVC 学习项目</p>\n<p>前面测了GET,这里测试POST：<br><img src=\"/2023/06/06/React-%E7%89%88-Postman/2023-06-09-18-44-45.png\"></p>\n<p><img src=\"/2023/06/06/React-%E7%89%88-Postman/2023-06-09-18-44-50.png\"></p>\n<h2 id=\"0x04-使用Postman测试API\"><a href=\"#0x04-使用Postman测试API\" class=\"headerlink\" title=\"0x04 使用Postman测试API\"></a>0x04 使用Postman测试API</h2><p>1.测试返回二维码（流）</p>\n<p><img src=\"/2023/06/06/React-%E7%89%88-Postman/2023-06-09-18-45-09.png\"><br>结果不但获取到了还自动解析成图片。</p>\n<p>2.测试返回HTML<br><img src=\"/2023/06/06/React-%E7%89%88-Postman/2023-06-09-18-45-27.png\"></p>\n<p><img src=\"/2023/06/06/React-%E7%89%88-Postman/2023-06-09-18-45-34.png\"></p>\n<p>为什么图片没有加载出来？</p>\n<p>因为图片使用fetch api（类似ajax）获取的，显然这段JavaScript没有执行。</p>\n<p><img src=\"/2023/06/06/React-%E7%89%88-Postman/2023-06-09-18-45-47.png\"></p>\n<p>3.获取JSON</p>\n<p><img src=\"/2023/06/06/React-%E7%89%88-Postman/2023-06-09-18-45-59.png\"><br>为啥age：null？因为我们提交的JSON里面就没有age，因此数据库里也没有。</p>\n<h2 id=\"0x05-使用t4t-api测试\"><a href=\"#0x05-使用t4t-api测试\" class=\"headerlink\" title=\"0x05 使用t4t-api测试\"></a>0x05 使用t4t-api测试</h2><p>1.测试返回二维码（流）</p>\n<p><img src=\"/2023/06/06/React-%E7%89%88-Postman/2023-06-09-18-46-22.png\"></p>\n<p>是滴！我也实现了解析流。</p>\n<p>流-&gt;Blob-&gt;img</p>\n<p><img src=\"/2023/06/06/React-%E7%89%88-Postman/2023-06-09-18-46-31.png\"></p>\n<p><img src=\"/2023/06/06/React-%E7%89%88-Postman/2023-06-09-18-46-36.png\"></p>\n<p>2.测试返回HTML<br><img src=\"/2023/06/06/React-%E7%89%88-Postman/2023-06-09-18-46-59.png\"></p>\n<p>看起来很普通，其实我笨拙地实现了HTML代码格式化和代码高亮。</p>\n<p><img src=\"/2023/06/06/React-%E7%89%88-Postman/2023-06-09-18-47-10.png\"></p>\n<p><img src=\"/2023/06/06/React-%E7%89%88-Postman/2023-06-09-18-47-14.png\"></p>\n<p>个人认为我的JSON格式化比Postman的好看。<br><img src=\"/2023/06/06/React-%E7%89%88-Postman/2023-06-09-18-47-29.png\"></p>\n<h2 id=\"0x06-使用Curl测试API\"><a href=\"#0x06-使用Curl测试API\" class=\"headerlink\" title=\"0x06 使用Curl测试API\"></a>0x06 使用Curl测试API</h2><p><img src=\"/2023/06/06/React-%E7%89%88-Postman/2023-06-09-18-47-48.png\"></p>\n<p><img src=\"/2023/06/06/React-%E7%89%88-Postman/2023-06-09-18-47-53.png\"></p>\n<p>为啥是-128？ 因为age是用byte存储的</p>\n"},{"title":"Webscoket 核心","date":"2023-06-11T03:17:03.000Z","cover":false,"_content":"\n\n# Webscoket 核心\n\n## 是什么\n\n一种服务端/浏览器端双向推送技术\n\n## 为什么\n\n因为 HTTP 协议有一个缺陷：通信只能由客户端发起\n\n## 怎么用\n\n构造函数（返回一个 WebSocket 对象）\n\n```js\nWebSocket(url[, protocols])\n```\n\n| Constant             | Value |\n| -------------------- | ----- |\n| WebSocket.CONNECTING | 0     |\n| WebSocket.OPEN       | 1     |\n| WebSocket.CLOSING    | 2     |\n| WebSocket.CLOSED     | 3     |\n\n| 属性           | 解释                                       |\n| -------------- | ------------------------------------------ |\n| binaryType     | 使用二进制的数据类型连接。                 |\n| bufferedAmount | 只读 未发送至服务器的字节数。              |\n| extensions     | 只读 服务器选择的扩展。                    |\n| onclose        | 用于指定连接关闭后的回调函数。             |\n| onerror        | 用于指定连接失败后的回调函数。             |\n| onmessage      | 用于指定当从服务器接受到信息时的回调函数。 |\n| onopen         | 用于指定连接成功后的回调函数。             |\n| protocol       | 只读 服务器选择的下属协议。                |\n| readyState     | 只读 当前的链接状态。                      |\n| url            | 只读 WebSocket 的绝对路径。                |\n\n| 方法                    | 解释                     |\n| ----------------------- | ------------------------ |\n| close([code[, reason]]) | 关闭当前链接。           |\n| send(data)              | 对要传输的数据进行排队。 |\n\n使用 addEventListener() 或将一个事件监听器赋值给本接口的 on<eventname> 属性，来监听下面的事件。\n\n| 事件    | 解释                                                          |\n| ------- | ------------------------------------------------------------- |\n| close   | 当一个 WebSocket 连接被关闭时触发。                           |\n| error   | 当一个 WebSocket 连接因错误而关闭时触发，例如无法发送数据时。 |\n| message | 当通过 WebSocket 收到数据时触发。                             |\n| open    | 当一个 WebSocket 连接成功时触发。                             |\n\n### 客户端\n\n```js\nvar ws = new WebSocket(\"wss://echo.websocket.org\");\n\nws.onopen = function(evt) { \n  console.log(\"Connection open ...\"); \n  ws.send(\"Hello WebSockets!\");\n};\n\nws.onmessage = function(evt) {\n  console.log( \"Received Message: \" + evt.data);\n  ws.close();\n};\n\nws.onclose = function(evt) {\n  console.log(\"Connection closed.\");\n};      \n```\n\n### 服务端\n\n\n## STOMP\n\nWebSocket协议定义了两种类型的消息，即文本和二进制，但它们的内容却没有定义。该协议定义了一种机制，供客户端和服务器协商子协议--即更高级别的消息传输协议，在WebSocket之上使用，以定义各自可以发送何种消息、每种消息的格式和内容，等等。子协议的使用是可选的，但无论如何，客户和服务器都需要就定义消息内容的一些协议达成一致。\n\nSTOMP是一个基于帧的协议，其帧是以HTTP为模型。一个STOMP帧的结构：\n\n    COMMAND\n    header1:value1\n    header2:value2\n\n    Body^@\n\n## 参考资料\n\n[WebSocket - Web API 接口参考 | MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket)\n\n[HTML5 WebSocket | 菜鸟教程](https://www.runoob.com/html/html5-websocket.html)\n\n[WebSocket 教程 - 阮一峰的网络日志](http://ruanyifeng.com/blog/2017/05/websocket.html)\n\n[WebSocket - 廖雪峰的官方网站](https://www.liaoxuefeng.com/wiki/1022910821149312/1103303693824096)","source":"_posts/Webscoket-核心.md","raw":"---\ntitle: Webscoket 核心\ndate: 2023-06-11 11:17:03\ntags: \n- JavaScript\n- WebSocket\ncover:\n---\n\n\n# Webscoket 核心\n\n## 是什么\n\n一种服务端/浏览器端双向推送技术\n\n## 为什么\n\n因为 HTTP 协议有一个缺陷：通信只能由客户端发起\n\n## 怎么用\n\n构造函数（返回一个 WebSocket 对象）\n\n```js\nWebSocket(url[, protocols])\n```\n\n| Constant             | Value |\n| -------------------- | ----- |\n| WebSocket.CONNECTING | 0     |\n| WebSocket.OPEN       | 1     |\n| WebSocket.CLOSING    | 2     |\n| WebSocket.CLOSED     | 3     |\n\n| 属性           | 解释                                       |\n| -------------- | ------------------------------------------ |\n| binaryType     | 使用二进制的数据类型连接。                 |\n| bufferedAmount | 只读 未发送至服务器的字节数。              |\n| extensions     | 只读 服务器选择的扩展。                    |\n| onclose        | 用于指定连接关闭后的回调函数。             |\n| onerror        | 用于指定连接失败后的回调函数。             |\n| onmessage      | 用于指定当从服务器接受到信息时的回调函数。 |\n| onopen         | 用于指定连接成功后的回调函数。             |\n| protocol       | 只读 服务器选择的下属协议。                |\n| readyState     | 只读 当前的链接状态。                      |\n| url            | 只读 WebSocket 的绝对路径。                |\n\n| 方法                    | 解释                     |\n| ----------------------- | ------------------------ |\n| close([code[, reason]]) | 关闭当前链接。           |\n| send(data)              | 对要传输的数据进行排队。 |\n\n使用 addEventListener() 或将一个事件监听器赋值给本接口的 on<eventname> 属性，来监听下面的事件。\n\n| 事件    | 解释                                                          |\n| ------- | ------------------------------------------------------------- |\n| close   | 当一个 WebSocket 连接被关闭时触发。                           |\n| error   | 当一个 WebSocket 连接因错误而关闭时触发，例如无法发送数据时。 |\n| message | 当通过 WebSocket 收到数据时触发。                             |\n| open    | 当一个 WebSocket 连接成功时触发。                             |\n\n### 客户端\n\n```js\nvar ws = new WebSocket(\"wss://echo.websocket.org\");\n\nws.onopen = function(evt) { \n  console.log(\"Connection open ...\"); \n  ws.send(\"Hello WebSockets!\");\n};\n\nws.onmessage = function(evt) {\n  console.log( \"Received Message: \" + evt.data);\n  ws.close();\n};\n\nws.onclose = function(evt) {\n  console.log(\"Connection closed.\");\n};      \n```\n\n### 服务端\n\n\n## STOMP\n\nWebSocket协议定义了两种类型的消息，即文本和二进制，但它们的内容却没有定义。该协议定义了一种机制，供客户端和服务器协商子协议--即更高级别的消息传输协议，在WebSocket之上使用，以定义各自可以发送何种消息、每种消息的格式和内容，等等。子协议的使用是可选的，但无论如何，客户和服务器都需要就定义消息内容的一些协议达成一致。\n\nSTOMP是一个基于帧的协议，其帧是以HTTP为模型。一个STOMP帧的结构：\n\n    COMMAND\n    header1:value1\n    header2:value2\n\n    Body^@\n\n## 参考资料\n\n[WebSocket - Web API 接口参考 | MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket)\n\n[HTML5 WebSocket | 菜鸟教程](https://www.runoob.com/html/html5-websocket.html)\n\n[WebSocket 教程 - 阮一峰的网络日志](http://ruanyifeng.com/blog/2017/05/websocket.html)\n\n[WebSocket - 廖雪峰的官方网站](https://www.liaoxuefeng.com/wiki/1022910821149312/1103303693824096)","slug":"Webscoket-核心","published":1,"updated":"2023-06-23T01:06:49.989Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5vb006dlv9edsig5puv","content":"<h1 id=\"Webscoket-核心\"><a href=\"#Webscoket-核心\" class=\"headerlink\" title=\"Webscoket 核心\"></a>Webscoket 核心</h1><h2 id=\"是什么\"><a href=\"#是什么\" class=\"headerlink\" title=\"是什么\"></a>是什么</h2><p>一种服务端&#x2F;浏览器端双向推送技术</p>\n<h2 id=\"为什么\"><a href=\"#为什么\" class=\"headerlink\" title=\"为什么\"></a>为什么</h2><p>因为 HTTP 协议有一个缺陷：通信只能由客户端发起</p>\n<h2 id=\"怎么用\"><a href=\"#怎么用\" class=\"headerlink\" title=\"怎么用\"></a>怎么用</h2><p>构造函数（返回一个 WebSocket 对象）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">WebSocket</span>(url[, protocols])</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>Constant</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WebSocket.CONNECTING</td>\n<td>0</td>\n</tr>\n<tr>\n<td>WebSocket.OPEN</td>\n<td>1</td>\n</tr>\n<tr>\n<td>WebSocket.CLOSING</td>\n<td>2</td>\n</tr>\n<tr>\n<td>WebSocket.CLOSED</td>\n<td>3</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>binaryType</td>\n<td>使用二进制的数据类型连接。</td>\n</tr>\n<tr>\n<td>bufferedAmount</td>\n<td>只读 未发送至服务器的字节数。</td>\n</tr>\n<tr>\n<td>extensions</td>\n<td>只读 服务器选择的扩展。</td>\n</tr>\n<tr>\n<td>onclose</td>\n<td>用于指定连接关闭后的回调函数。</td>\n</tr>\n<tr>\n<td>onerror</td>\n<td>用于指定连接失败后的回调函数。</td>\n</tr>\n<tr>\n<td>onmessage</td>\n<td>用于指定当从服务器接受到信息时的回调函数。</td>\n</tr>\n<tr>\n<td>onopen</td>\n<td>用于指定连接成功后的回调函数。</td>\n</tr>\n<tr>\n<td>protocol</td>\n<td>只读 服务器选择的下属协议。</td>\n</tr>\n<tr>\n<td>readyState</td>\n<td>只读 当前的链接状态。</td>\n</tr>\n<tr>\n<td>url</td>\n<td>只读 WebSocket 的绝对路径。</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>close([code[, reason]])</td>\n<td>关闭当前链接。</td>\n</tr>\n<tr>\n<td>send(data)</td>\n<td>对要传输的数据进行排队。</td>\n</tr>\n</tbody></table>\n<p>使用 addEventListener() 或将一个事件监听器赋值给本接口的 on<eventname> 属性，来监听下面的事件。</p>\n<table>\n<thead>\n<tr>\n<th>事件</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>close</td>\n<td>当一个 WebSocket 连接被关闭时触发。</td>\n</tr>\n<tr>\n<td>error</td>\n<td>当一个 WebSocket 连接因错误而关闭时触发，例如无法发送数据时。</td>\n</tr>\n<tr>\n<td>message</td>\n<td>当通过 WebSocket 收到数据时触发。</td>\n</tr>\n<tr>\n<td>open</td>\n<td>当一个 WebSocket 连接成功时触发。</td>\n</tr>\n</tbody></table>\n<h3 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ws = <span class=\"keyword\">new</span> <span class=\"title class_\">WebSocket</span>(<span class=\"string\">&quot;wss://echo.websocket.org&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">ws.<span class=\"property\">onopen</span> = <span class=\"keyword\">function</span>(<span class=\"params\">evt</span>) &#123; </span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Connection open ...&quot;</span>); </span><br><span class=\"line\">  ws.<span class=\"title function_\">send</span>(<span class=\"string\">&quot;Hello WebSockets!&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">ws.<span class=\"property\">onmessage</span> = <span class=\"keyword\">function</span>(<span class=\"params\">evt</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( <span class=\"string\">&quot;Received Message: &quot;</span> + evt.<span class=\"property\">data</span>);</span><br><span class=\"line\">  ws.<span class=\"title function_\">close</span>();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">ws.<span class=\"property\">onclose</span> = <span class=\"keyword\">function</span>(<span class=\"params\">evt</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Connection closed.&quot;</span>);</span><br><span class=\"line\">&#125;;      </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h3><h2 id=\"STOMP\"><a href=\"#STOMP\" class=\"headerlink\" title=\"STOMP\"></a>STOMP</h2><p>WebSocket协议定义了两种类型的消息，即文本和二进制，但它们的内容却没有定义。该协议定义了一种机制，供客户端和服务器协商子协议–即更高级别的消息传输协议，在WebSocket之上使用，以定义各自可以发送何种消息、每种消息的格式和内容，等等。子协议的使用是可选的，但无论如何，客户和服务器都需要就定义消息内容的一些协议达成一致。</p>\n<p>STOMP是一个基于帧的协议，其帧是以HTTP为模型。一个STOMP帧的结构：</p>\n<pre><code>COMMAND\nheader1:value1\nheader2:value2\n\nBody^@\n</code></pre>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket\">WebSocket - Web API 接口参考 | MDN</a></p>\n<p><a href=\"https://www.runoob.com/html/html5-websocket.html\">HTML5 WebSocket | 菜鸟教程</a></p>\n<p><a href=\"http://ruanyifeng.com/blog/2017/05/websocket.html\">WebSocket 教程 - 阮一峰的网络日志</a></p>\n<p><a href=\"https://www.liaoxuefeng.com/wiki/1022910821149312/1103303693824096\">WebSocket - 廖雪峰的官方网站</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Webscoket-核心\"><a href=\"#Webscoket-核心\" class=\"headerlink\" title=\"Webscoket 核心\"></a>Webscoket 核心</h1><h2 id=\"是什么\"><a href=\"#是什么\" class=\"headerlink\" title=\"是什么\"></a>是什么</h2><p>一种服务端&#x2F;浏览器端双向推送技术</p>\n<h2 id=\"为什么\"><a href=\"#为什么\" class=\"headerlink\" title=\"为什么\"></a>为什么</h2><p>因为 HTTP 协议有一个缺陷：通信只能由客户端发起</p>\n<h2 id=\"怎么用\"><a href=\"#怎么用\" class=\"headerlink\" title=\"怎么用\"></a>怎么用</h2><p>构造函数（返回一个 WebSocket 对象）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">WebSocket</span>(url[, protocols])</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>Constant</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WebSocket.CONNECTING</td>\n<td>0</td>\n</tr>\n<tr>\n<td>WebSocket.OPEN</td>\n<td>1</td>\n</tr>\n<tr>\n<td>WebSocket.CLOSING</td>\n<td>2</td>\n</tr>\n<tr>\n<td>WebSocket.CLOSED</td>\n<td>3</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>binaryType</td>\n<td>使用二进制的数据类型连接。</td>\n</tr>\n<tr>\n<td>bufferedAmount</td>\n<td>只读 未发送至服务器的字节数。</td>\n</tr>\n<tr>\n<td>extensions</td>\n<td>只读 服务器选择的扩展。</td>\n</tr>\n<tr>\n<td>onclose</td>\n<td>用于指定连接关闭后的回调函数。</td>\n</tr>\n<tr>\n<td>onerror</td>\n<td>用于指定连接失败后的回调函数。</td>\n</tr>\n<tr>\n<td>onmessage</td>\n<td>用于指定当从服务器接受到信息时的回调函数。</td>\n</tr>\n<tr>\n<td>onopen</td>\n<td>用于指定连接成功后的回调函数。</td>\n</tr>\n<tr>\n<td>protocol</td>\n<td>只读 服务器选择的下属协议。</td>\n</tr>\n<tr>\n<td>readyState</td>\n<td>只读 当前的链接状态。</td>\n</tr>\n<tr>\n<td>url</td>\n<td>只读 WebSocket 的绝对路径。</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>close([code[, reason]])</td>\n<td>关闭当前链接。</td>\n</tr>\n<tr>\n<td>send(data)</td>\n<td>对要传输的数据进行排队。</td>\n</tr>\n</tbody></table>\n<p>使用 addEventListener() 或将一个事件监听器赋值给本接口的 on<eventname> 属性，来监听下面的事件。</p>\n<table>\n<thead>\n<tr>\n<th>事件</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>close</td>\n<td>当一个 WebSocket 连接被关闭时触发。</td>\n</tr>\n<tr>\n<td>error</td>\n<td>当一个 WebSocket 连接因错误而关闭时触发，例如无法发送数据时。</td>\n</tr>\n<tr>\n<td>message</td>\n<td>当通过 WebSocket 收到数据时触发。</td>\n</tr>\n<tr>\n<td>open</td>\n<td>当一个 WebSocket 连接成功时触发。</td>\n</tr>\n</tbody></table>\n<h3 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ws = <span class=\"keyword\">new</span> <span class=\"title class_\">WebSocket</span>(<span class=\"string\">&quot;wss://echo.websocket.org&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">ws.<span class=\"property\">onopen</span> = <span class=\"keyword\">function</span>(<span class=\"params\">evt</span>) &#123; </span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Connection open ...&quot;</span>); </span><br><span class=\"line\">  ws.<span class=\"title function_\">send</span>(<span class=\"string\">&quot;Hello WebSockets!&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">ws.<span class=\"property\">onmessage</span> = <span class=\"keyword\">function</span>(<span class=\"params\">evt</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( <span class=\"string\">&quot;Received Message: &quot;</span> + evt.<span class=\"property\">data</span>);</span><br><span class=\"line\">  ws.<span class=\"title function_\">close</span>();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">ws.<span class=\"property\">onclose</span> = <span class=\"keyword\">function</span>(<span class=\"params\">evt</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Connection closed.&quot;</span>);</span><br><span class=\"line\">&#125;;      </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h3><h2 id=\"STOMP\"><a href=\"#STOMP\" class=\"headerlink\" title=\"STOMP\"></a>STOMP</h2><p>WebSocket协议定义了两种类型的消息，即文本和二进制，但它们的内容却没有定义。该协议定义了一种机制，供客户端和服务器协商子协议–即更高级别的消息传输协议，在WebSocket之上使用，以定义各自可以发送何种消息、每种消息的格式和内容，等等。子协议的使用是可选的，但无论如何，客户和服务器都需要就定义消息内容的一些协议达成一致。</p>\n<p>STOMP是一个基于帧的协议，其帧是以HTTP为模型。一个STOMP帧的结构：</p>\n<pre><code>COMMAND\nheader1:value1\nheader2:value2\n\nBody^@\n</code></pre>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket\">WebSocket - Web API 接口参考 | MDN</a></p>\n<p><a href=\"https://www.runoob.com/html/html5-websocket.html\">HTML5 WebSocket | 菜鸟教程</a></p>\n<p><a href=\"http://ruanyifeng.com/blog/2017/05/websocket.html\">WebSocket 教程 - 阮一峰的网络日志</a></p>\n<p><a href=\"https://www.liaoxuefeng.com/wiki/1022910821149312/1103303693824096\">WebSocket - 廖雪峰的官方网站</a></p>\n"},{"title":"三门问题和贝叶斯定理","date":"2023-05-20T03:53:29.000Z","_content":"\n## 三门问题\n也称为蒙提霍尔问题或蒙提霍尔悖论。这是一个经典的概率问题，最早由美国的数学家及电视主持人蒙提·霍尔（Monty Hall）在20世纪60年代初首次提出。\n\n问题描述：你面前有三扇关闭的门，在其中一扇门后有奖品，另外两扇门后没有奖品。选手先选择其中一扇门，然后，主持人会在另外两扇门中打开一扇没有奖品的门。此时，选手可以选择是否更改自己的选择来获取奖品。请问，是否应该更改选择？\n\n## 解决\n对于三门问题中新事件所提供的信息，也就是主持人打开一扇没有汽车的门后告诉你选择正确概率只有1/2，我们可以将其视为更新先前假设的过程。\n\n在游戏开始前，我们有三个可能性：汽车在门A，汽车在门B，汽车在门C，每个可能性发生的先验概率都是1/3。而当主持人打开了门B，并告诉你选择正确的概率只有1/2时，这相当于给出了一个新的观测值（门B不含汽车），从而更新了我们的先验分布。\n\n具体来说，我们可以根据贝叶斯定理计算更新后的后验分布。在这种情况下，我们需要计算的是汽车真实在门X（其中X=?）的概率，因此我们有：\n\nP(X|B) = P(B|X) * P(X) / P(B)\n\n其中，P(X|B)是在主持人打开了门B后汽车在门X的后验概率，P(B|X)是在汽车真实在门X的前提下，主持人打开门B的概率，P(X)是汽车真实在门X的先验概率，P(B)是主持人打开门B的概率。\n\nP(X|B)表示主持人已经打开了门B并展示它后面没有汽车，此时如果汽车真实在门X，那么主持人有1/2的概率会打开门B；如果汽车不在门X，那么主持人必须选择没有汽车的门来打开。根据随机性原则，我们知道汽车真实在门X的概率是1/3，因此我们有：\n\nP(B|X) = 1/2\n\nP(X) = 1/3\n\nP(B) = P(B|A)P(A) + P(B|B)P(B) + P(B|C)P(C)\n\n其中，P(B|A)表示在汽车真实在门A的前提下，主持人打开门B且门B后面没有汽车的概率，此时主持人只能选择门C打开，因此这个概率是1；P(B|B)表示主持人打开了门B但是发现门B后面确有汽车的概率，这个概率为0；P(B|C)表示在汽车真实在门C的前提下，主持人打开门B且门B后面没有汽车的概率，此时主持人只能选择门A打开，因此这个概率也是1/2。因此，我们有：\n\nP(B) = 1/3 * 0 + 1/3 * 1 + 1/3 * (1/2) = 1/2\n\n带入公式计算得到：\n\nP(A|B) = 1/6\nP(B|B) = 0\nP(C|B) = 2/3\n\n因此，认为汽车在门C的概率最大，为2/3，这意味着更改选择会带来更高的获胜概率。\n","source":"_posts/三门问题和贝叶斯定理.md","raw":"---\ntitle: 三门问题和贝叶斯定理\ndate: 2023-05-20 11:53:29\ntags: \n---\n\n## 三门问题\n也称为蒙提霍尔问题或蒙提霍尔悖论。这是一个经典的概率问题，最早由美国的数学家及电视主持人蒙提·霍尔（Monty Hall）在20世纪60年代初首次提出。\n\n问题描述：你面前有三扇关闭的门，在其中一扇门后有奖品，另外两扇门后没有奖品。选手先选择其中一扇门，然后，主持人会在另外两扇门中打开一扇没有奖品的门。此时，选手可以选择是否更改自己的选择来获取奖品。请问，是否应该更改选择？\n\n## 解决\n对于三门问题中新事件所提供的信息，也就是主持人打开一扇没有汽车的门后告诉你选择正确概率只有1/2，我们可以将其视为更新先前假设的过程。\n\n在游戏开始前，我们有三个可能性：汽车在门A，汽车在门B，汽车在门C，每个可能性发生的先验概率都是1/3。而当主持人打开了门B，并告诉你选择正确的概率只有1/2时，这相当于给出了一个新的观测值（门B不含汽车），从而更新了我们的先验分布。\n\n具体来说，我们可以根据贝叶斯定理计算更新后的后验分布。在这种情况下，我们需要计算的是汽车真实在门X（其中X=?）的概率，因此我们有：\n\nP(X|B) = P(B|X) * P(X) / P(B)\n\n其中，P(X|B)是在主持人打开了门B后汽车在门X的后验概率，P(B|X)是在汽车真实在门X的前提下，主持人打开门B的概率，P(X)是汽车真实在门X的先验概率，P(B)是主持人打开门B的概率。\n\nP(X|B)表示主持人已经打开了门B并展示它后面没有汽车，此时如果汽车真实在门X，那么主持人有1/2的概率会打开门B；如果汽车不在门X，那么主持人必须选择没有汽车的门来打开。根据随机性原则，我们知道汽车真实在门X的概率是1/3，因此我们有：\n\nP(B|X) = 1/2\n\nP(X) = 1/3\n\nP(B) = P(B|A)P(A) + P(B|B)P(B) + P(B|C)P(C)\n\n其中，P(B|A)表示在汽车真实在门A的前提下，主持人打开门B且门B后面没有汽车的概率，此时主持人只能选择门C打开，因此这个概率是1；P(B|B)表示主持人打开了门B但是发现门B后面确有汽车的概率，这个概率为0；P(B|C)表示在汽车真实在门C的前提下，主持人打开门B且门B后面没有汽车的概率，此时主持人只能选择门A打开，因此这个概率也是1/2。因此，我们有：\n\nP(B) = 1/3 * 0 + 1/3 * 1 + 1/3 * (1/2) = 1/2\n\n带入公式计算得到：\n\nP(A|B) = 1/6\nP(B|B) = 0\nP(C|B) = 2/3\n\n因此，认为汽车在门C的概率最大，为2/3，这意味着更改选择会带来更高的获胜概率。\n","slug":"三门问题和贝叶斯定理","published":1,"updated":"2023-05-21T04:30:12.291Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5vc006flv9e49lndlqm","content":"<h2 id=\"三门问题\"><a href=\"#三门问题\" class=\"headerlink\" title=\"三门问题\"></a>三门问题</h2><p>也称为蒙提霍尔问题或蒙提霍尔悖论。这是一个经典的概率问题，最早由美国的数学家及电视主持人蒙提·霍尔（Monty Hall）在20世纪60年代初首次提出。</p>\n<p>问题描述：你面前有三扇关闭的门，在其中一扇门后有奖品，另外两扇门后没有奖品。选手先选择其中一扇门，然后，主持人会在另外两扇门中打开一扇没有奖品的门。此时，选手可以选择是否更改自己的选择来获取奖品。请问，是否应该更改选择？</p>\n<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h2><p>对于三门问题中新事件所提供的信息，也就是主持人打开一扇没有汽车的门后告诉你选择正确概率只有1&#x2F;2，我们可以将其视为更新先前假设的过程。</p>\n<p>在游戏开始前，我们有三个可能性：汽车在门A，汽车在门B，汽车在门C，每个可能性发生的先验概率都是1&#x2F;3。而当主持人打开了门B，并告诉你选择正确的概率只有1&#x2F;2时，这相当于给出了一个新的观测值（门B不含汽车），从而更新了我们的先验分布。</p>\n<p>具体来说，我们可以根据贝叶斯定理计算更新后的后验分布。在这种情况下，我们需要计算的是汽车真实在门X（其中X&#x3D;?）的概率，因此我们有：</p>\n<p>P(X|B) &#x3D; P(B|X) * P(X) &#x2F; P(B)</p>\n<p>其中，P(X|B)是在主持人打开了门B后汽车在门X的后验概率，P(B|X)是在汽车真实在门X的前提下，主持人打开门B的概率，P(X)是汽车真实在门X的先验概率，P(B)是主持人打开门B的概率。</p>\n<p>P(X|B)表示主持人已经打开了门B并展示它后面没有汽车，此时如果汽车真实在门X，那么主持人有1&#x2F;2的概率会打开门B；如果汽车不在门X，那么主持人必须选择没有汽车的门来打开。根据随机性原则，我们知道汽车真实在门X的概率是1&#x2F;3，因此我们有：</p>\n<p>P(B|X) &#x3D; 1&#x2F;2</p>\n<p>P(X) &#x3D; 1&#x2F;3</p>\n<p>P(B) &#x3D; P(B|A)P(A) + P(B|B)P(B) + P(B|C)P(C)</p>\n<p>其中，P(B|A)表示在汽车真实在门A的前提下，主持人打开门B且门B后面没有汽车的概率，此时主持人只能选择门C打开，因此这个概率是1；P(B|B)表示主持人打开了门B但是发现门B后面确有汽车的概率，这个概率为0；P(B|C)表示在汽车真实在门C的前提下，主持人打开门B且门B后面没有汽车的概率，此时主持人只能选择门A打开，因此这个概率也是1&#x2F;2。因此，我们有：</p>\n<p>P(B) &#x3D; 1&#x2F;3 * 0 + 1&#x2F;3 * 1 + 1&#x2F;3 * (1&#x2F;2) &#x3D; 1&#x2F;2</p>\n<p>带入公式计算得到：</p>\n<p>P(A|B) &#x3D; 1&#x2F;6<br>P(B|B) &#x3D; 0<br>P(C|B) &#x3D; 2&#x2F;3</p>\n<p>因此，认为汽车在门C的概率最大，为2&#x2F;3，这意味着更改选择会带来更高的获胜概率。</p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h2 id=\"三门问题\"><a href=\"#三门问题\" class=\"headerlink\" title=\"三门问题\"></a>三门问题</h2><p>也称为蒙提霍尔问题或蒙提霍尔悖论。这是一个经典的概率问题，最早由美国的数学家及电视主持人蒙提·霍尔（Monty Hall）在20世纪60年代初首次提出。</p>\n<p>问题描述：你面前有三扇关闭的门，在其中一扇门后有奖品，另外两扇门后没有奖品。选手先选择其中一扇门，然后，主持人会在另外两扇门中打开一扇没有奖品的门。此时，选手可以选择是否更改自己的选择来获取奖品。请问，是否应该更改选择？</p>\n<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h2><p>对于三门问题中新事件所提供的信息，也就是主持人打开一扇没有汽车的门后告诉你选择正确概率只有1&#x2F;2，我们可以将其视为更新先前假设的过程。</p>\n<p>在游戏开始前，我们有三个可能性：汽车在门A，汽车在门B，汽车在门C，每个可能性发生的先验概率都是1&#x2F;3。而当主持人打开了门B，并告诉你选择正确的概率只有1&#x2F;2时，这相当于给出了一个新的观测值（门B不含汽车），从而更新了我们的先验分布。</p>\n<p>具体来说，我们可以根据贝叶斯定理计算更新后的后验分布。在这种情况下，我们需要计算的是汽车真实在门X（其中X&#x3D;?）的概率，因此我们有：</p>\n<p>P(X|B) &#x3D; P(B|X) * P(X) &#x2F; P(B)</p>\n<p>其中，P(X|B)是在主持人打开了门B后汽车在门X的后验概率，P(B|X)是在汽车真实在门X的前提下，主持人打开门B的概率，P(X)是汽车真实在门X的先验概率，P(B)是主持人打开门B的概率。</p>\n<p>P(X|B)表示主持人已经打开了门B并展示它后面没有汽车，此时如果汽车真实在门X，那么主持人有1&#x2F;2的概率会打开门B；如果汽车不在门X，那么主持人必须选择没有汽车的门来打开。根据随机性原则，我们知道汽车真实在门X的概率是1&#x2F;3，因此我们有：</p>\n<p>P(B|X) &#x3D; 1&#x2F;2</p>\n<p>P(X) &#x3D; 1&#x2F;3</p>\n<p>P(B) &#x3D; P(B|A)P(A) + P(B|B)P(B) + P(B|C)P(C)</p>\n<p>其中，P(B|A)表示在汽车真实在门A的前提下，主持人打开门B且门B后面没有汽车的概率，此时主持人只能选择门C打开，因此这个概率是1；P(B|B)表示主持人打开了门B但是发现门B后面确有汽车的概率，这个概率为0；P(B|C)表示在汽车真实在门C的前提下，主持人打开门B且门B后面没有汽车的概率，此时主持人只能选择门A打开，因此这个概率也是1&#x2F;2。因此，我们有：</p>\n<p>P(B) &#x3D; 1&#x2F;3 * 0 + 1&#x2F;3 * 1 + 1&#x2F;3 * (1&#x2F;2) &#x3D; 1&#x2F;2</p>\n<p>带入公式计算得到：</p>\n<p>P(A|B) &#x3D; 1&#x2F;6<br>P(B|B) &#x3D; 0<br>P(C|B) &#x3D; 2&#x2F;3</p>\n<p>因此，认为汽车在门C的概率最大，为2&#x2F;3，这意味着更改选择会带来更高的获胜概率。</p>\n"},{"title":"基于大语言模型的医药问答研究","date":"2023-12-15T04:45:25.000Z","cover":false,"_content":"\n# 毕业设计题目：基于大语言模型的医药问答研究\n\n## 简介\n\n本毕业设计旨在利用大语言模型技术，构建一个智能医药问答系统。随着人工智能技术的发展，医药领域对于智能化解决方案的需求越来越大。传统的医药问答系统往往只能提供静态的、预先设定好的答案，无法灵活应对复杂的实际问题。而基于大语言模型的医药问答系统则可以通过学习大量的医药相关知识，具备更强的语义理解与推理能力，能够更准确、全面地回答用户提出的问题。\n\n本设计将采用目前较为先进的大语言模型技术，如GLM、Llama等，作为核心模型。通过对大量的医药相关数据进行预训练和微调，使得系统能够具备丰富的医药知识和语义理解能力。同时，设计合适的问答匹配算法和交互界面，使得用户能够方便地提出问题，并获得准确、及时的回答。\n\n本设计的主要目标包括：\n\n1. 构建一个基于大语言模型的医药知识图谱，包括药品信息、疾病诊断、治疗方案等方面的知识，并实现知识的动态更新和扩展。\n2. 开发一个智能问答系统，能够根据用户提出的问题，通过匹配算法和语义理解，准确地回答问题，并提供相关的解释和推荐。\n3. 设计一个友好的交互界面，使得用户能够方便地提问，并获得直观、易懂的答案。\n\n通过完成以上目标，本设计将为医药领域提供一个智能化的问答解决方案，提高医药信息的获取效率和准确性，为医疗工作和患者提供更好的服务和支持。\n\n## 相关技术\n\n1. 大语言模型：选择先进的大语言模型，如GPT-3、BERT等，用于训练和生成医药领域的问答模型。这些模型具备强大的语义理解和生成能力，能够根据输入的问题生成准确的回答。\n\n2. 自然语言处理（NLP）：利用NLP技术对用户提出的问题进行语义分析、实体识别、关键词提取等处理，以便更好地理解用户意图和问题的含义。\n\n3. 语义匹配算法：通过使用语义匹配算法，如词向量匹配、句子相似度计算等，将用户提出的问题与预训练的医药知识进行匹配，找到最相关的答案。\n\n4. 医药知识图谱：构建一个医药领域的知识图谱，包括药品信息、疾病诊断、治疗方案等方面的知识。可以使用图数据库等技术来存储和查询知识图谱。\n\n5. 数据集：收集和整理医药领域的数据集，包括医学文献、药品说明书、疾病诊断标准等，用于训练和验证问答模型的准确性和效果。\n\n6. 用户界面设计：设计一个友好的用户界面，使用户能够方便地输入问题，并获得直观、易懂的答案。可以使用前端开发技术，如HTML、CSS、JavaScript等，来实现用户界面的交互和展示。\n\n7. 模型评估和优化：对问答模型进行评估和优化，包括准确性、响应时间、系统的稳定性等方面。可以使用评估指标，如准确率、召回率、F1值等，来评估模型的性能。\n\n## 开源大模型\n\n1. 清华大学的GLM和ChatGLM\n\n  PyTorch\n  DeepSpeed\n  Apex\n\n2. Meta AI的LLama\n\n3. 斯坦福基于LLama的Alpaca\n\n## 其他模型\n\nSadtalker","source":"_posts/基于大语言模型的医药问答研究.md","raw":"---\ntitle: 基于大语言模型的医药问答研究\ntags: 基于大语言模型的医药问答研究\ndate: 2023-12-15 12:45:25\ncover:\n---\n\n# 毕业设计题目：基于大语言模型的医药问答研究\n\n## 简介\n\n本毕业设计旨在利用大语言模型技术，构建一个智能医药问答系统。随着人工智能技术的发展，医药领域对于智能化解决方案的需求越来越大。传统的医药问答系统往往只能提供静态的、预先设定好的答案，无法灵活应对复杂的实际问题。而基于大语言模型的医药问答系统则可以通过学习大量的医药相关知识，具备更强的语义理解与推理能力，能够更准确、全面地回答用户提出的问题。\n\n本设计将采用目前较为先进的大语言模型技术，如GLM、Llama等，作为核心模型。通过对大量的医药相关数据进行预训练和微调，使得系统能够具备丰富的医药知识和语义理解能力。同时，设计合适的问答匹配算法和交互界面，使得用户能够方便地提出问题，并获得准确、及时的回答。\n\n本设计的主要目标包括：\n\n1. 构建一个基于大语言模型的医药知识图谱，包括药品信息、疾病诊断、治疗方案等方面的知识，并实现知识的动态更新和扩展。\n2. 开发一个智能问答系统，能够根据用户提出的问题，通过匹配算法和语义理解，准确地回答问题，并提供相关的解释和推荐。\n3. 设计一个友好的交互界面，使得用户能够方便地提问，并获得直观、易懂的答案。\n\n通过完成以上目标，本设计将为医药领域提供一个智能化的问答解决方案，提高医药信息的获取效率和准确性，为医疗工作和患者提供更好的服务和支持。\n\n## 相关技术\n\n1. 大语言模型：选择先进的大语言模型，如GPT-3、BERT等，用于训练和生成医药领域的问答模型。这些模型具备强大的语义理解和生成能力，能够根据输入的问题生成准确的回答。\n\n2. 自然语言处理（NLP）：利用NLP技术对用户提出的问题进行语义分析、实体识别、关键词提取等处理，以便更好地理解用户意图和问题的含义。\n\n3. 语义匹配算法：通过使用语义匹配算法，如词向量匹配、句子相似度计算等，将用户提出的问题与预训练的医药知识进行匹配，找到最相关的答案。\n\n4. 医药知识图谱：构建一个医药领域的知识图谱，包括药品信息、疾病诊断、治疗方案等方面的知识。可以使用图数据库等技术来存储和查询知识图谱。\n\n5. 数据集：收集和整理医药领域的数据集，包括医学文献、药品说明书、疾病诊断标准等，用于训练和验证问答模型的准确性和效果。\n\n6. 用户界面设计：设计一个友好的用户界面，使用户能够方便地输入问题，并获得直观、易懂的答案。可以使用前端开发技术，如HTML、CSS、JavaScript等，来实现用户界面的交互和展示。\n\n7. 模型评估和优化：对问答模型进行评估和优化，包括准确性、响应时间、系统的稳定性等方面。可以使用评估指标，如准确率、召回率、F1值等，来评估模型的性能。\n\n## 开源大模型\n\n1. 清华大学的GLM和ChatGLM\n\n  PyTorch\n  DeepSpeed\n  Apex\n\n2. Meta AI的LLama\n\n3. 斯坦福基于LLama的Alpaca\n\n## 其他模型\n\nSadtalker","slug":"基于大语言模型的医药问答研究","published":1,"updated":"2023-12-26T06:27:05.322Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5vd006ilv9e00oxg2c9","content":"<h1 id=\"毕业设计题目：基于大语言模型的医药问答研究\"><a href=\"#毕业设计题目：基于大语言模型的医药问答研究\" class=\"headerlink\" title=\"毕业设计题目：基于大语言模型的医药问答研究\"></a>毕业设计题目：基于大语言模型的医药问答研究</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>本毕业设计旨在利用大语言模型技术，构建一个智能医药问答系统。随着人工智能技术的发展，医药领域对于智能化解决方案的需求越来越大。传统的医药问答系统往往只能提供静态的、预先设定好的答案，无法灵活应对复杂的实际问题。而基于大语言模型的医药问答系统则可以通过学习大量的医药相关知识，具备更强的语义理解与推理能力，能够更准确、全面地回答用户提出的问题。</p>\n<p>本设计将采用目前较为先进的大语言模型技术，如GLM、Llama等，作为核心模型。通过对大量的医药相关数据进行预训练和微调，使得系统能够具备丰富的医药知识和语义理解能力。同时，设计合适的问答匹配算法和交互界面，使得用户能够方便地提出问题，并获得准确、及时的回答。</p>\n<p>本设计的主要目标包括：</p>\n<ol>\n<li>构建一个基于大语言模型的医药知识图谱，包括药品信息、疾病诊断、治疗方案等方面的知识，并实现知识的动态更新和扩展。</li>\n<li>开发一个智能问答系统，能够根据用户提出的问题，通过匹配算法和语义理解，准确地回答问题，并提供相关的解释和推荐。</li>\n<li>设计一个友好的交互界面，使得用户能够方便地提问，并获得直观、易懂的答案。</li>\n</ol>\n<p>通过完成以上目标，本设计将为医药领域提供一个智能化的问答解决方案，提高医药信息的获取效率和准确性，为医疗工作和患者提供更好的服务和支持。</p>\n<h2 id=\"相关技术\"><a href=\"#相关技术\" class=\"headerlink\" title=\"相关技术\"></a>相关技术</h2><ol>\n<li><p>大语言模型：选择先进的大语言模型，如GPT-3、BERT等，用于训练和生成医药领域的问答模型。这些模型具备强大的语义理解和生成能力，能够根据输入的问题生成准确的回答。</p>\n</li>\n<li><p>自然语言处理（NLP）：利用NLP技术对用户提出的问题进行语义分析、实体识别、关键词提取等处理，以便更好地理解用户意图和问题的含义。</p>\n</li>\n<li><p>语义匹配算法：通过使用语义匹配算法，如词向量匹配、句子相似度计算等，将用户提出的问题与预训练的医药知识进行匹配，找到最相关的答案。</p>\n</li>\n<li><p>医药知识图谱：构建一个医药领域的知识图谱，包括药品信息、疾病诊断、治疗方案等方面的知识。可以使用图数据库等技术来存储和查询知识图谱。</p>\n</li>\n<li><p>数据集：收集和整理医药领域的数据集，包括医学文献、药品说明书、疾病诊断标准等，用于训练和验证问答模型的准确性和效果。</p>\n</li>\n<li><p>用户界面设计：设计一个友好的用户界面，使用户能够方便地输入问题，并获得直观、易懂的答案。可以使用前端开发技术，如HTML、CSS、JavaScript等，来实现用户界面的交互和展示。</p>\n</li>\n<li><p>模型评估和优化：对问答模型进行评估和优化，包括准确性、响应时间、系统的稳定性等方面。可以使用评估指标，如准确率、召回率、F1值等，来评估模型的性能。</p>\n</li>\n</ol>\n<h2 id=\"开源大模型\"><a href=\"#开源大模型\" class=\"headerlink\" title=\"开源大模型\"></a>开源大模型</h2><ol>\n<li>清华大学的GLM和ChatGLM</li>\n</ol>\n<p>  PyTorch<br>  DeepSpeed<br>  Apex</p>\n<ol start=\"2\">\n<li><p>Meta AI的LLama</p>\n</li>\n<li><p>斯坦福基于LLama的Alpaca</p>\n</li>\n</ol>\n<h2 id=\"其他模型\"><a href=\"#其他模型\" class=\"headerlink\" title=\"其他模型\"></a>其他模型</h2><p>Sadtalker</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"毕业设计题目：基于大语言模型的医药问答研究\"><a href=\"#毕业设计题目：基于大语言模型的医药问答研究\" class=\"headerlink\" title=\"毕业设计题目：基于大语言模型的医药问答研究\"></a>毕业设计题目：基于大语言模型的医药问答研究</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>本毕业设计旨在利用大语言模型技术，构建一个智能医药问答系统。随着人工智能技术的发展，医药领域对于智能化解决方案的需求越来越大。传统的医药问答系统往往只能提供静态的、预先设定好的答案，无法灵活应对复杂的实际问题。而基于大语言模型的医药问答系统则可以通过学习大量的医药相关知识，具备更强的语义理解与推理能力，能够更准确、全面地回答用户提出的问题。</p>\n<p>本设计将采用目前较为先进的大语言模型技术，如GLM、Llama等，作为核心模型。通过对大量的医药相关数据进行预训练和微调，使得系统能够具备丰富的医药知识和语义理解能力。同时，设计合适的问答匹配算法和交互界面，使得用户能够方便地提出问题，并获得准确、及时的回答。</p>\n<p>本设计的主要目标包括：</p>\n<ol>\n<li>构建一个基于大语言模型的医药知识图谱，包括药品信息、疾病诊断、治疗方案等方面的知识，并实现知识的动态更新和扩展。</li>\n<li>开发一个智能问答系统，能够根据用户提出的问题，通过匹配算法和语义理解，准确地回答问题，并提供相关的解释和推荐。</li>\n<li>设计一个友好的交互界面，使得用户能够方便地提问，并获得直观、易懂的答案。</li>\n</ol>\n<p>通过完成以上目标，本设计将为医药领域提供一个智能化的问答解决方案，提高医药信息的获取效率和准确性，为医疗工作和患者提供更好的服务和支持。</p>\n<h2 id=\"相关技术\"><a href=\"#相关技术\" class=\"headerlink\" title=\"相关技术\"></a>相关技术</h2><ol>\n<li><p>大语言模型：选择先进的大语言模型，如GPT-3、BERT等，用于训练和生成医药领域的问答模型。这些模型具备强大的语义理解和生成能力，能够根据输入的问题生成准确的回答。</p>\n</li>\n<li><p>自然语言处理（NLP）：利用NLP技术对用户提出的问题进行语义分析、实体识别、关键词提取等处理，以便更好地理解用户意图和问题的含义。</p>\n</li>\n<li><p>语义匹配算法：通过使用语义匹配算法，如词向量匹配、句子相似度计算等，将用户提出的问题与预训练的医药知识进行匹配，找到最相关的答案。</p>\n</li>\n<li><p>医药知识图谱：构建一个医药领域的知识图谱，包括药品信息、疾病诊断、治疗方案等方面的知识。可以使用图数据库等技术来存储和查询知识图谱。</p>\n</li>\n<li><p>数据集：收集和整理医药领域的数据集，包括医学文献、药品说明书、疾病诊断标准等，用于训练和验证问答模型的准确性和效果。</p>\n</li>\n<li><p>用户界面设计：设计一个友好的用户界面，使用户能够方便地输入问题，并获得直观、易懂的答案。可以使用前端开发技术，如HTML、CSS、JavaScript等，来实现用户界面的交互和展示。</p>\n</li>\n<li><p>模型评估和优化：对问答模型进行评估和优化，包括准确性、响应时间、系统的稳定性等方面。可以使用评估指标，如准确率、召回率、F1值等，来评估模型的性能。</p>\n</li>\n</ol>\n<h2 id=\"开源大模型\"><a href=\"#开源大模型\" class=\"headerlink\" title=\"开源大模型\"></a>开源大模型</h2><ol>\n<li>清华大学的GLM和ChatGLM</li>\n</ol>\n<p>  PyTorch<br>  DeepSpeed<br>  Apex</p>\n<ol start=\"2\">\n<li><p>Meta AI的LLama</p>\n</li>\n<li><p>斯坦福基于LLama的Alpaca</p>\n</li>\n</ol>\n<h2 id=\"其他模型\"><a href=\"#其他模型\" class=\"headerlink\" title=\"其他模型\"></a>其他模型</h2><p>Sadtalker</p>\n"},{"title":"堆栈","date":"2022-04-12T08:41:08.000Z","_content":"\n# 堆栈 Stack\n\n## 1. 基于数组的堆\n<!-- more -->\n```cpp\n#ifndef __STACH_H__\n#define __STACK_H__\n/**\n * 使用数组实现的Stack\n *\n * a = new T[n];\n *\n * a[++p]=t\n *\n * return a[p--]\n *\n * p?-1\n */\ntemplate <typename T>\nclass Stack {\nprivate:\n\tT* a;\n\tunsigned size;\n\tint p;\n\tconst static unsigned DEFAULE_SIZE = 16;\n\npublic:\n\t/* 初始化 */\n\tStack();\n\t/* 初始化 */\n\tStack(unsigned n);\n\t/* 析构释放数组 */\n\t~Stack();\n\t/* 入栈 */\n\tbool push(T t);\n\t/* 出栈 */\n\tT pop();\n\t/* 取栈顶 */\n\tT top();\n\t/* 判空 */\n\tbool empty();\n};\ntemplate <typename T>\nStack<T>::Stack() {\n\tsize = DEFAULE_SIZE;\n\ta = new T[DEFAULE_SIZE];\n\tmemset(a, 0, DEFAULE_SIZE * sizeof(T));\n\tp = -1;\n}\ntemplate <typename T>\nStack<T>::Stack(unsigned n) {\n\tsize = n;\n\ta = new T[n];\n\tmemset(a, 0, n * sizeof(T));\n\tp = 0;\n}\ntemplate <typename T>\nStack<T>::~Stack() {\n\tdelete[] a;\n\ta = nullptr;\n\tp = size = -1;\n}\ntemplate <typename T>\nbool Stack<T>::push(T t) {\n\tif (p < size - 1) {\n\t\ta[++p] = t;\n\t\treturn true;\n\t}\n\treturn false;\n}\ntemplate <typename T>\nT Stack<T>::pop() {\n\tif (p == -1)\n\t\treturn nullptr;\n\treturn a[p--];\n}\ntemplate <typename T>\nT Stack<T>::top() {\n\tif (p != -1)\n\t\treturn a[p];\n\treturn nullptr;\n}\ntemplate <typename T>\nbool Stack<T>::empty() {\n\treturn p == -1;\n}\n#endif\n```\n\n## 2. 基于链表的堆栈\n```cpp\n#ifndef __LINKEDSTACK_H__\n#define __LINKEDSTACK_H__\ntemplate <typename T>\nclass LSNode {\npublic:\n\tT val;\n\tLSNode<T>* next;\n\tLSNode(T t) : val(t) {}\n};\n\ntemplate <typename T>\nclass LinkedStack {\nprivate:\n\tLSNode<T>* __top;\n\npublic:\n\t/**\n\t * 初始化\n\t */\n\tLinkedStack();\n\t/**\n\t * 析构\n\t */\n\t~LinkedStack();\n\t/**\n\t * 入栈\n\t */\n\tbool push(T t);\n\t/**\n\t * 弹出\n\t */\n\tT pop();\n\t/**\n\t * 取栈顶元素\n\t */\n\tT top();\n\t/**\n\t * 判空\n\t */\n\tbool empty();\n};\ntemplate <typename T>\nLinkedStack<T>::LinkedStack() : __top(nullptr) {}\ntemplate <typename T>\nLinkedStack<T>::~LinkedStack() {\n\twhile (__top != nullptr) {\n\t\tLSNode<T>* node = __top;\n\t\t__top = __top->next;\n\t\tdelete node;\n\t}\n}\ntemplate <typename T>\nbool LinkedStack<T>::push(T t) {\n\tLSNode<T>* node = new LSNode<T>(t);\n\tnode->next = __top;\n\t__top = node;\n\treturn true;\n}\ntemplate <typename T>\nT LinkedStack<T>::pop() {\n\tLSNode<T>* node = __top;\n\tT val = __top->val;\n\t__top = __top->next;\n\tdelete node;\n\treturn val;\n}\ntemplate <typename T>\nT LinkedStack<T>::top() {\n\treturn __top->val;\n}\ntemplate <typename T>\nbool LinkedStack<T>::empty() {\n\treturn __top == nullptr;\n}\n#endif\n```\n## 3. 堆栈的使用\n```cpp\n#include <bits/stdc++.h>\n#include \"LinkedStack.h\"\nusing namespace std;\n/**\n * 反转\n */\ntemplate <class T>\nvoid reverse(const T* a, int n) {\n\tLinkedStack<T>* s = new LinkedStack<T>();\n\tfor (int i = 0; i < n; ++i) {\n\t\ts->push(a[i]);\n\t}\n\twhile (!s->empty()) {\n\t\tstd::cout << s->pop() << ' ';\n\t}\n\tcout << endl;\n\tdelete s;\n}\n/**\n * 进制转换\n * conversion of number systems\n *\n * 10 -> 2\n */\nvoid dec2bin(int n) {\n\tLinkedStack<int> s;\n\twhile (n != 0) {\n\t\ts.push(n % 2);\n\t\tn /= 2;\n\t}\n\twhile (!s.empty()) {\n\t\tcout << s.pop() << ' ';\n\t}\n\tcout << endl;\n}\nvoid dec2bin(double n, int e = 10) {\n\tint z = (int)n;\n\tdouble d = n - z;\n\tLinkedStack<int> s;\n\twhile (z != 0) {\n\t\ts.push(z % 2);\n\t\tz /= 2;\n\t}\n\twhile (!s.empty()) {\n\t\tcout << s.pop();\n\t}\n\tcout << '.';\n\tfor (int i = 0; i < e; ++i) {\n\t\tif (d == 0)\n\t\t\tbreak;\n\t\td *= 2;\n\t\tif (d >= 1) {\n\t\t\tcout << 1;\n\t\t\t--d;\n\t\t}\n\t\telse {\n\t\t\tcout << 0;\n\t\t}\n\t}\n}\n/**\n * 进制转换\n * conversion of number systems\n *\n * 10 -> 8\n */\nvoid dec2oct(int n) {\n\tLinkedStack<int> s;\n\twhile (n != 0) {\n\t\ts.push(n % 8);\n\t\tn /= 8;\n\t}\n\twhile (!s.empty()) {\n\t\tcout << s.pop() << ' ';\n\t}\n\tcout << endl;\n}\n\n/**\n * 进制转换\n * conversion of number systems\n *\n * 10 -> 16\n */\nvoid dec2hex(int n) {\n\tLinkedStack<char> s;\n\twhile (n != 0) {\n\t\tif (n % 16 > 9) {\n\t\t\ts.push('A' + (n % 16) - 10);\n\t\t}\n\t\telse\n\t\t\ts.push('0' + n % 16);\n\t\tn /= 16;\n\t}\n\twhile (!s.empty()) {\n\t\tcout << s.pop() << ' ';\n\t}\n\tcout << endl;\n}\n/**\n * 括号匹配\n */\nbool bracketMatching(const char* a, int n) {\n\tLinkedStack<char> s;\n\tfor (int i = 0; i < n; ++i) {\n\t\tif (a[i] == '(')\n\t\t\ts.push(a[i]);\n\t\tif (a[i] == ')') {\n\t\t\tif (!s.empty())\n\t\t\t\ts.pop();\n\t\t\telse\n\t\t\t\treturn false;\n\t\t}\n\t\tif (a[i] == '[')\n\t\t\ts.push(a[i]);\n\t\tif (a[i] == ']') {\n\t\t\tif (!s.empty())\n\t\t\t\ts.pop();\n\t\t\telse\n\t\t\t\treturn false;\n\t\t}\n\t\tif (a[i] == '{')\n\t\t\ts.push(a[i]);\n\t\tif (a[i] == '}') {\n\t\t\tif (!s.empty())\n\t\t\t\ts.pop();\n\t\t\telse\n\t\t\t\treturn false;\n\t\t}\n\t}\n\tif (!s.empty())return false;\n\treturn true;\n}\n\nint main(int argc, char const* argv[]) {\n\tchar a[] = { 'A', 'B', 'C', 'D', 'E', 'F' };\n\tcout << \"----------\\n反转数组 {'A','B','C','D','E','F'} \\n\";\n\treverse(a, sizeof(a) / sizeof(a[0]));\n\tcout << \"----------\\n17D 转二进制:\\n\";\n\tdec2bin(17);\n\tcout << \"----------\\n17D 转八进制:\\n\";\n\tdec2oct(17);\n\tcout << \"----------\\n17D 转十六进制:\\n\";\n\tdec2hex(17);\n\tcout << \"----------\\n括号匹配 '(a)af((s()fa()())' :\\n\";\n\tchar s[] = \"(a)af((s()fa()())\";\n\tcout << (bracketMatching(s, sizeof(s) / sizeof(s[0])) ? \"True\\n\" : \"False\\n\");\n\tcout << \"----------\\n括号匹配 '(a(()d)(s))()' :\\n\";\n\tchar f[] = \"(a(()d)(s))()\";\n\tcout << (bracketMatching(f, sizeof(f) / sizeof(f[0])) ? \"True\\n\" : \"False\\n\");\n\tcout << \"----------\\n17.256D 转二进制:\\n\";\n\tdec2bin(17.256);\n\treturn 0;\n}\n```","source":"_posts/堆栈.md","raw":"---\ntitle: 堆栈\ndate: 2022-04-12 16:41:08\ntags: Data Structure\n---\n\n# 堆栈 Stack\n\n## 1. 基于数组的堆\n<!-- more -->\n```cpp\n#ifndef __STACH_H__\n#define __STACK_H__\n/**\n * 使用数组实现的Stack\n *\n * a = new T[n];\n *\n * a[++p]=t\n *\n * return a[p--]\n *\n * p?-1\n */\ntemplate <typename T>\nclass Stack {\nprivate:\n\tT* a;\n\tunsigned size;\n\tint p;\n\tconst static unsigned DEFAULE_SIZE = 16;\n\npublic:\n\t/* 初始化 */\n\tStack();\n\t/* 初始化 */\n\tStack(unsigned n);\n\t/* 析构释放数组 */\n\t~Stack();\n\t/* 入栈 */\n\tbool push(T t);\n\t/* 出栈 */\n\tT pop();\n\t/* 取栈顶 */\n\tT top();\n\t/* 判空 */\n\tbool empty();\n};\ntemplate <typename T>\nStack<T>::Stack() {\n\tsize = DEFAULE_SIZE;\n\ta = new T[DEFAULE_SIZE];\n\tmemset(a, 0, DEFAULE_SIZE * sizeof(T));\n\tp = -1;\n}\ntemplate <typename T>\nStack<T>::Stack(unsigned n) {\n\tsize = n;\n\ta = new T[n];\n\tmemset(a, 0, n * sizeof(T));\n\tp = 0;\n}\ntemplate <typename T>\nStack<T>::~Stack() {\n\tdelete[] a;\n\ta = nullptr;\n\tp = size = -1;\n}\ntemplate <typename T>\nbool Stack<T>::push(T t) {\n\tif (p < size - 1) {\n\t\ta[++p] = t;\n\t\treturn true;\n\t}\n\treturn false;\n}\ntemplate <typename T>\nT Stack<T>::pop() {\n\tif (p == -1)\n\t\treturn nullptr;\n\treturn a[p--];\n}\ntemplate <typename T>\nT Stack<T>::top() {\n\tif (p != -1)\n\t\treturn a[p];\n\treturn nullptr;\n}\ntemplate <typename T>\nbool Stack<T>::empty() {\n\treturn p == -1;\n}\n#endif\n```\n\n## 2. 基于链表的堆栈\n```cpp\n#ifndef __LINKEDSTACK_H__\n#define __LINKEDSTACK_H__\ntemplate <typename T>\nclass LSNode {\npublic:\n\tT val;\n\tLSNode<T>* next;\n\tLSNode(T t) : val(t) {}\n};\n\ntemplate <typename T>\nclass LinkedStack {\nprivate:\n\tLSNode<T>* __top;\n\npublic:\n\t/**\n\t * 初始化\n\t */\n\tLinkedStack();\n\t/**\n\t * 析构\n\t */\n\t~LinkedStack();\n\t/**\n\t * 入栈\n\t */\n\tbool push(T t);\n\t/**\n\t * 弹出\n\t */\n\tT pop();\n\t/**\n\t * 取栈顶元素\n\t */\n\tT top();\n\t/**\n\t * 判空\n\t */\n\tbool empty();\n};\ntemplate <typename T>\nLinkedStack<T>::LinkedStack() : __top(nullptr) {}\ntemplate <typename T>\nLinkedStack<T>::~LinkedStack() {\n\twhile (__top != nullptr) {\n\t\tLSNode<T>* node = __top;\n\t\t__top = __top->next;\n\t\tdelete node;\n\t}\n}\ntemplate <typename T>\nbool LinkedStack<T>::push(T t) {\n\tLSNode<T>* node = new LSNode<T>(t);\n\tnode->next = __top;\n\t__top = node;\n\treturn true;\n}\ntemplate <typename T>\nT LinkedStack<T>::pop() {\n\tLSNode<T>* node = __top;\n\tT val = __top->val;\n\t__top = __top->next;\n\tdelete node;\n\treturn val;\n}\ntemplate <typename T>\nT LinkedStack<T>::top() {\n\treturn __top->val;\n}\ntemplate <typename T>\nbool LinkedStack<T>::empty() {\n\treturn __top == nullptr;\n}\n#endif\n```\n## 3. 堆栈的使用\n```cpp\n#include <bits/stdc++.h>\n#include \"LinkedStack.h\"\nusing namespace std;\n/**\n * 反转\n */\ntemplate <class T>\nvoid reverse(const T* a, int n) {\n\tLinkedStack<T>* s = new LinkedStack<T>();\n\tfor (int i = 0; i < n; ++i) {\n\t\ts->push(a[i]);\n\t}\n\twhile (!s->empty()) {\n\t\tstd::cout << s->pop() << ' ';\n\t}\n\tcout << endl;\n\tdelete s;\n}\n/**\n * 进制转换\n * conversion of number systems\n *\n * 10 -> 2\n */\nvoid dec2bin(int n) {\n\tLinkedStack<int> s;\n\twhile (n != 0) {\n\t\ts.push(n % 2);\n\t\tn /= 2;\n\t}\n\twhile (!s.empty()) {\n\t\tcout << s.pop() << ' ';\n\t}\n\tcout << endl;\n}\nvoid dec2bin(double n, int e = 10) {\n\tint z = (int)n;\n\tdouble d = n - z;\n\tLinkedStack<int> s;\n\twhile (z != 0) {\n\t\ts.push(z % 2);\n\t\tz /= 2;\n\t}\n\twhile (!s.empty()) {\n\t\tcout << s.pop();\n\t}\n\tcout << '.';\n\tfor (int i = 0; i < e; ++i) {\n\t\tif (d == 0)\n\t\t\tbreak;\n\t\td *= 2;\n\t\tif (d >= 1) {\n\t\t\tcout << 1;\n\t\t\t--d;\n\t\t}\n\t\telse {\n\t\t\tcout << 0;\n\t\t}\n\t}\n}\n/**\n * 进制转换\n * conversion of number systems\n *\n * 10 -> 8\n */\nvoid dec2oct(int n) {\n\tLinkedStack<int> s;\n\twhile (n != 0) {\n\t\ts.push(n % 8);\n\t\tn /= 8;\n\t}\n\twhile (!s.empty()) {\n\t\tcout << s.pop() << ' ';\n\t}\n\tcout << endl;\n}\n\n/**\n * 进制转换\n * conversion of number systems\n *\n * 10 -> 16\n */\nvoid dec2hex(int n) {\n\tLinkedStack<char> s;\n\twhile (n != 0) {\n\t\tif (n % 16 > 9) {\n\t\t\ts.push('A' + (n % 16) - 10);\n\t\t}\n\t\telse\n\t\t\ts.push('0' + n % 16);\n\t\tn /= 16;\n\t}\n\twhile (!s.empty()) {\n\t\tcout << s.pop() << ' ';\n\t}\n\tcout << endl;\n}\n/**\n * 括号匹配\n */\nbool bracketMatching(const char* a, int n) {\n\tLinkedStack<char> s;\n\tfor (int i = 0; i < n; ++i) {\n\t\tif (a[i] == '(')\n\t\t\ts.push(a[i]);\n\t\tif (a[i] == ')') {\n\t\t\tif (!s.empty())\n\t\t\t\ts.pop();\n\t\t\telse\n\t\t\t\treturn false;\n\t\t}\n\t\tif (a[i] == '[')\n\t\t\ts.push(a[i]);\n\t\tif (a[i] == ']') {\n\t\t\tif (!s.empty())\n\t\t\t\ts.pop();\n\t\t\telse\n\t\t\t\treturn false;\n\t\t}\n\t\tif (a[i] == '{')\n\t\t\ts.push(a[i]);\n\t\tif (a[i] == '}') {\n\t\t\tif (!s.empty())\n\t\t\t\ts.pop();\n\t\t\telse\n\t\t\t\treturn false;\n\t\t}\n\t}\n\tif (!s.empty())return false;\n\treturn true;\n}\n\nint main(int argc, char const* argv[]) {\n\tchar a[] = { 'A', 'B', 'C', 'D', 'E', 'F' };\n\tcout << \"----------\\n反转数组 {'A','B','C','D','E','F'} \\n\";\n\treverse(a, sizeof(a) / sizeof(a[0]));\n\tcout << \"----------\\n17D 转二进制:\\n\";\n\tdec2bin(17);\n\tcout << \"----------\\n17D 转八进制:\\n\";\n\tdec2oct(17);\n\tcout << \"----------\\n17D 转十六进制:\\n\";\n\tdec2hex(17);\n\tcout << \"----------\\n括号匹配 '(a)af((s()fa()())' :\\n\";\n\tchar s[] = \"(a)af((s()fa()())\";\n\tcout << (bracketMatching(s, sizeof(s) / sizeof(s[0])) ? \"True\\n\" : \"False\\n\");\n\tcout << \"----------\\n括号匹配 '(a(()d)(s))()' :\\n\";\n\tchar f[] = \"(a(()d)(s))()\";\n\tcout << (bracketMatching(f, sizeof(f) / sizeof(f[0])) ? \"True\\n\" : \"False\\n\");\n\tcout << \"----------\\n17.256D 转二进制:\\n\";\n\tdec2bin(17.256);\n\treturn 0;\n}\n```","slug":"堆栈","published":1,"updated":"2022-04-15T09:51:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5ve006jlv9ec8z58a0x","content":"<h1 id=\"堆栈-Stack\"><a href=\"#堆栈-Stack\" class=\"headerlink\" title=\"堆栈 Stack\"></a>堆栈 Stack</h1><h2 id=\"1-基于数组的堆\"><a href=\"#1-基于数组的堆\" class=\"headerlink\" title=\"1. 基于数组的堆\"></a>1. 基于数组的堆</h2><span id=\"more\"></span>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> __STACH_H__</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __STACK_H__</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用数组实现的Stack</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * a = new T[n];</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * a[++p]=t</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * return a[p--]</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * p?-1</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Stack</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tT* a;</span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> size;</span><br><span class=\"line\">\t<span class=\"type\">int</span> p;</span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">static</span> <span class=\"type\">unsigned</span> DEFAULE_SIZE = <span class=\"number\">16</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">/* 初始化 */</span></span><br><span class=\"line\">\t<span class=\"built_in\">Stack</span>();</span><br><span class=\"line\">\t<span class=\"comment\">/* 初始化 */</span></span><br><span class=\"line\">\t<span class=\"built_in\">Stack</span>(<span class=\"type\">unsigned</span> n);</span><br><span class=\"line\">\t<span class=\"comment\">/* 析构释放数组 */</span></span><br><span class=\"line\">\t~<span class=\"built_in\">Stack</span>();</span><br><span class=\"line\">\t<span class=\"comment\">/* 入栈 */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">push</span><span class=\"params\">(T t)</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/* 出栈 */</span></span><br><span class=\"line\">\t<span class=\"function\">T <span class=\"title\">pop</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/* 取栈顶 */</span></span><br><span class=\"line\">\t<span class=\"function\">T <span class=\"title\">top</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/* 判空 */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">empty</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">Stack&lt;T&gt;::<span class=\"built_in\">Stack</span>() &#123;</span><br><span class=\"line\">\tsize = DEFAULE_SIZE;</span><br><span class=\"line\">\ta = <span class=\"keyword\">new</span> T[DEFAULE_SIZE];</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(a, <span class=\"number\">0</span>, DEFAULE_SIZE * <span class=\"built_in\">sizeof</span>(T));</span><br><span class=\"line\">\tp = <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">Stack&lt;T&gt;::<span class=\"built_in\">Stack</span>(<span class=\"type\">unsigned</span> n) &#123;</span><br><span class=\"line\">\tsize = n;</span><br><span class=\"line\">\ta = <span class=\"keyword\">new</span> T[n];</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(a, <span class=\"number\">0</span>, n * <span class=\"built_in\">sizeof</span>(T));</span><br><span class=\"line\">\tp = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">Stack&lt;T&gt;::~<span class=\"built_in\">Stack</span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span>[] a;</span><br><span class=\"line\">\ta = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\tp = size = <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"type\">bool</span> Stack&lt;T&gt;::<span class=\"built_in\">push</span>(T t) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p &lt; size - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\ta[++p] = t;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">T Stack&lt;T&gt;::<span class=\"built_in\">pop</span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p == <span class=\"number\">-1</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a[p--];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">T Stack&lt;T&gt;::<span class=\"built_in\">top</span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p != <span class=\"number\">-1</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a[p];</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"type\">bool</span> Stack&lt;T&gt;::<span class=\"built_in\">empty</span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> p == <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-基于链表的堆栈\"><a href=\"#2-基于链表的堆栈\" class=\"headerlink\" title=\"2. 基于链表的堆栈\"></a>2. 基于链表的堆栈</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> __LINKEDSTACK_H__</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __LINKEDSTACK_H__</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LSNode</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tT val;</span><br><span class=\"line\">\tLSNode&lt;T&gt;* next;</span><br><span class=\"line\">\t<span class=\"built_in\">LSNode</span>(T t) : <span class=\"built_in\">val</span>(t) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LinkedStack</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tLSNode&lt;T&gt;* __top;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 初始化</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"built_in\">LinkedStack</span>();</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 析构</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t~<span class=\"built_in\">LinkedStack</span>();</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 入栈</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">push</span><span class=\"params\">(T t)</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 弹出</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\">T <span class=\"title\">pop</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 取栈顶元素</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\">T <span class=\"title\">top</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 判空</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">empty</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">LinkedStack&lt;T&gt;::<span class=\"built_in\">LinkedStack</span>() : __top(<span class=\"literal\">nullptr</span>) &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">LinkedStack&lt;T&gt;::~<span class=\"built_in\">LinkedStack</span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (__top != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">\t\tLSNode&lt;T&gt;* node = __top;</span><br><span class=\"line\">\t\t__top = __top-&gt;next;</span><br><span class=\"line\">\t\t<span class=\"keyword\">delete</span> node;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"type\">bool</span> LinkedStack&lt;T&gt;::<span class=\"built_in\">push</span>(T t) &#123;</span><br><span class=\"line\">\tLSNode&lt;T&gt;* node = <span class=\"keyword\">new</span> <span class=\"built_in\">LSNode</span>&lt;T&gt;(t);</span><br><span class=\"line\">\tnode-&gt;next = __top;</span><br><span class=\"line\">\t__top = node;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">T LinkedStack&lt;T&gt;::<span class=\"built_in\">pop</span>() &#123;</span><br><span class=\"line\">\tLSNode&lt;T&gt;* node = __top;</span><br><span class=\"line\">\tT val = __top-&gt;val;</span><br><span class=\"line\">\t__top = __top-&gt;next;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> node;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> val;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">T LinkedStack&lt;T&gt;::<span class=\"built_in\">top</span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> __top-&gt;val;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"type\">bool</span> LinkedStack&lt;T&gt;::<span class=\"built_in\">empty</span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> __top == <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-堆栈的使用\"><a href=\"#3-堆栈的使用\" class=\"headerlink\" title=\"3. 堆栈的使用\"></a>3. 堆栈的使用</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;LinkedStack.h&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 反转</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"type\">const</span> T* a, <span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">\tLinkedStack&lt;T&gt;* s = <span class=\"keyword\">new</span> <span class=\"built_in\">LinkedStack</span>&lt;T&gt;();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">\t\ts-&gt;<span class=\"built_in\">push</span>(a[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!s-&gt;<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">\t\tstd::cout &lt;&lt; s-&gt;<span class=\"built_in\">pop</span>() &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 进制转换</span></span><br><span class=\"line\"><span class=\"comment\"> * conversion of number systems</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 10 -&gt; 2</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dec2bin</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">\tLinkedStack&lt;<span class=\"type\">int</span>&gt; s;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (n != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\ts.<span class=\"built_in\">push</span>(n % <span class=\"number\">2</span>);</span><br><span class=\"line\">\t\tn /= <span class=\"number\">2</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!s.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; s.<span class=\"built_in\">pop</span>() &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dec2bin</span><span class=\"params\">(<span class=\"type\">double</span> n, <span class=\"type\">int</span> e = <span class=\"number\">10</span>)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> z = (<span class=\"type\">int</span>)n;</span><br><span class=\"line\">\t<span class=\"type\">double</span> d = n - z;</span><br><span class=\"line\">\tLinkedStack&lt;<span class=\"type\">int</span>&gt; s;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (z != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\ts.<span class=\"built_in\">push</span>(z % <span class=\"number\">2</span>);</span><br><span class=\"line\">\t\tz /= <span class=\"number\">2</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!s.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&#x27;.&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; e; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (d == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\td *= <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (d &gt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t--d;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 进制转换</span></span><br><span class=\"line\"><span class=\"comment\"> * conversion of number systems</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 10 -&gt; 8</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dec2oct</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">\tLinkedStack&lt;<span class=\"type\">int</span>&gt; s;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (n != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\ts.<span class=\"built_in\">push</span>(n % <span class=\"number\">8</span>);</span><br><span class=\"line\">\t\tn /= <span class=\"number\">8</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!s.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; s.<span class=\"built_in\">pop</span>() &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 进制转换</span></span><br><span class=\"line\"><span class=\"comment\"> * conversion of number systems</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 10 -&gt; 16</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dec2hex</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">\tLinkedStack&lt;<span class=\"type\">char</span>&gt; s;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (n != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (n % <span class=\"number\">16</span> &gt; <span class=\"number\">9</span>) &#123;</span><br><span class=\"line\">\t\t\ts.<span class=\"built_in\">push</span>(<span class=\"string\">&#x27;A&#x27;</span> + (n % <span class=\"number\">16</span>) - <span class=\"number\">10</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\ts.<span class=\"built_in\">push</span>(<span class=\"string\">&#x27;0&#x27;</span> + n % <span class=\"number\">16</span>);</span><br><span class=\"line\">\t\tn /= <span class=\"number\">16</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!s.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; s.<span class=\"built_in\">pop</span>() &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 括号匹配</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">bracketMatching</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span>* a, <span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">\tLinkedStack&lt;<span class=\"type\">char</span>&gt; s;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (a[i] == <span class=\"string\">&#x27;(&#x27;</span>)</span><br><span class=\"line\">\t\t\ts.<span class=\"built_in\">push</span>(a[i]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (a[i] == <span class=\"string\">&#x27;)&#x27;</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!s.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">\t\t\t\ts.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (a[i] == <span class=\"string\">&#x27;[&#x27;</span>)</span><br><span class=\"line\">\t\t\ts.<span class=\"built_in\">push</span>(a[i]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (a[i] == <span class=\"string\">&#x27;]&#x27;</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!s.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">\t\t\t\ts.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (a[i] == <span class=\"string\">&#x27;&#123;&#x27;</span>)</span><br><span class=\"line\">\t\t\ts.<span class=\"built_in\">push</span>(a[i]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (a[i] == <span class=\"string\">&#x27;&#125;&#x27;</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!s.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">\t\t\t\ts.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!s.<span class=\"built_in\">empty</span>())<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> <span class=\"type\">const</span>* argv[])</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> a[] = &#123; <span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;B&#x27;</span>, <span class=\"string\">&#x27;C&#x27;</span>, <span class=\"string\">&#x27;D&#x27;</span>, <span class=\"string\">&#x27;E&#x27;</span>, <span class=\"string\">&#x27;F&#x27;</span> &#125;;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;----------\\n反转数组 &#123;&#x27;A&#x27;,&#x27;B&#x27;,&#x27;C&#x27;,&#x27;D&#x27;,&#x27;E&#x27;,&#x27;F&#x27;&#125; \\n&quot;</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">reverse</span>(a, <span class=\"built_in\">sizeof</span>(a) / <span class=\"built_in\">sizeof</span>(a[<span class=\"number\">0</span>]));</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;----------\\n17D 转二进制:\\n&quot;</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">dec2bin</span>(<span class=\"number\">17</span>);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;----------\\n17D 转八进制:\\n&quot;</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">dec2oct</span>(<span class=\"number\">17</span>);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;----------\\n17D 转十六进制:\\n&quot;</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">dec2hex</span>(<span class=\"number\">17</span>);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;----------\\n括号匹配 &#x27;(a)af((s()fa()())&#x27; :\\n&quot;</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span> s[] = <span class=\"string\">&quot;(a)af((s()fa()())&quot;</span>;</span><br><span class=\"line\">\tcout &lt;&lt; (<span class=\"built_in\">bracketMatching</span>(s, <span class=\"built_in\">sizeof</span>(s) / <span class=\"built_in\">sizeof</span>(s[<span class=\"number\">0</span>])) ? <span class=\"string\">&quot;True\\n&quot;</span> : <span class=\"string\">&quot;False\\n&quot;</span>);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;----------\\n括号匹配 &#x27;(a(()d)(s))()&#x27; :\\n&quot;</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span> f[] = <span class=\"string\">&quot;(a(()d)(s))()&quot;</span>;</span><br><span class=\"line\">\tcout &lt;&lt; (<span class=\"built_in\">bracketMatching</span>(f, <span class=\"built_in\">sizeof</span>(f) / <span class=\"built_in\">sizeof</span>(f[<span class=\"number\">0</span>])) ? <span class=\"string\">&quot;True\\n&quot;</span> : <span class=\"string\">&quot;False\\n&quot;</span>);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;----------\\n17.256D 转二进制:\\n&quot;</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">dec2bin</span>(<span class=\"number\">17.256</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"cover":false,"excerpt":"<h1 id=\"堆栈-Stack\"><a href=\"#堆栈-Stack\" class=\"headerlink\" title=\"堆栈 Stack\"></a>堆栈 Stack</h1><h2 id=\"1-基于数组的堆\"><a href=\"#1-基于数组的堆\" class=\"headerlink\" title=\"1. 基于数组的堆\"></a>1. 基于数组的堆</h2>","more":"<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> __STACH_H__</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __STACK_H__</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用数组实现的Stack</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * a = new T[n];</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * a[++p]=t</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * return a[p--]</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * p?-1</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Stack</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tT* a;</span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> size;</span><br><span class=\"line\">\t<span class=\"type\">int</span> p;</span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">static</span> <span class=\"type\">unsigned</span> DEFAULE_SIZE = <span class=\"number\">16</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">/* 初始化 */</span></span><br><span class=\"line\">\t<span class=\"built_in\">Stack</span>();</span><br><span class=\"line\">\t<span class=\"comment\">/* 初始化 */</span></span><br><span class=\"line\">\t<span class=\"built_in\">Stack</span>(<span class=\"type\">unsigned</span> n);</span><br><span class=\"line\">\t<span class=\"comment\">/* 析构释放数组 */</span></span><br><span class=\"line\">\t~<span class=\"built_in\">Stack</span>();</span><br><span class=\"line\">\t<span class=\"comment\">/* 入栈 */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">push</span><span class=\"params\">(T t)</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/* 出栈 */</span></span><br><span class=\"line\">\t<span class=\"function\">T <span class=\"title\">pop</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/* 取栈顶 */</span></span><br><span class=\"line\">\t<span class=\"function\">T <span class=\"title\">top</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/* 判空 */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">empty</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">Stack&lt;T&gt;::<span class=\"built_in\">Stack</span>() &#123;</span><br><span class=\"line\">\tsize = DEFAULE_SIZE;</span><br><span class=\"line\">\ta = <span class=\"keyword\">new</span> T[DEFAULE_SIZE];</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(a, <span class=\"number\">0</span>, DEFAULE_SIZE * <span class=\"built_in\">sizeof</span>(T));</span><br><span class=\"line\">\tp = <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">Stack&lt;T&gt;::<span class=\"built_in\">Stack</span>(<span class=\"type\">unsigned</span> n) &#123;</span><br><span class=\"line\">\tsize = n;</span><br><span class=\"line\">\ta = <span class=\"keyword\">new</span> T[n];</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(a, <span class=\"number\">0</span>, n * <span class=\"built_in\">sizeof</span>(T));</span><br><span class=\"line\">\tp = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">Stack&lt;T&gt;::~<span class=\"built_in\">Stack</span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span>[] a;</span><br><span class=\"line\">\ta = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\tp = size = <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"type\">bool</span> Stack&lt;T&gt;::<span class=\"built_in\">push</span>(T t) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p &lt; size - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\ta[++p] = t;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">T Stack&lt;T&gt;::<span class=\"built_in\">pop</span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p == <span class=\"number\">-1</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a[p--];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">T Stack&lt;T&gt;::<span class=\"built_in\">top</span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p != <span class=\"number\">-1</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a[p];</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"type\">bool</span> Stack&lt;T&gt;::<span class=\"built_in\">empty</span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> p == <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-基于链表的堆栈\"><a href=\"#2-基于链表的堆栈\" class=\"headerlink\" title=\"2. 基于链表的堆栈\"></a>2. 基于链表的堆栈</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> __LINKEDSTACK_H__</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __LINKEDSTACK_H__</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LSNode</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tT val;</span><br><span class=\"line\">\tLSNode&lt;T&gt;* next;</span><br><span class=\"line\">\t<span class=\"built_in\">LSNode</span>(T t) : <span class=\"built_in\">val</span>(t) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LinkedStack</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tLSNode&lt;T&gt;* __top;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 初始化</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"built_in\">LinkedStack</span>();</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 析构</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t~<span class=\"built_in\">LinkedStack</span>();</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 入栈</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">push</span><span class=\"params\">(T t)</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 弹出</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\">T <span class=\"title\">pop</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 取栈顶元素</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\">T <span class=\"title\">top</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 判空</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">empty</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">LinkedStack&lt;T&gt;::<span class=\"built_in\">LinkedStack</span>() : __top(<span class=\"literal\">nullptr</span>) &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">LinkedStack&lt;T&gt;::~<span class=\"built_in\">LinkedStack</span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (__top != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">\t\tLSNode&lt;T&gt;* node = __top;</span><br><span class=\"line\">\t\t__top = __top-&gt;next;</span><br><span class=\"line\">\t\t<span class=\"keyword\">delete</span> node;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"type\">bool</span> LinkedStack&lt;T&gt;::<span class=\"built_in\">push</span>(T t) &#123;</span><br><span class=\"line\">\tLSNode&lt;T&gt;* node = <span class=\"keyword\">new</span> <span class=\"built_in\">LSNode</span>&lt;T&gt;(t);</span><br><span class=\"line\">\tnode-&gt;next = __top;</span><br><span class=\"line\">\t__top = node;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">T LinkedStack&lt;T&gt;::<span class=\"built_in\">pop</span>() &#123;</span><br><span class=\"line\">\tLSNode&lt;T&gt;* node = __top;</span><br><span class=\"line\">\tT val = __top-&gt;val;</span><br><span class=\"line\">\t__top = __top-&gt;next;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> node;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> val;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">T LinkedStack&lt;T&gt;::<span class=\"built_in\">top</span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> __top-&gt;val;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"type\">bool</span> LinkedStack&lt;T&gt;::<span class=\"built_in\">empty</span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> __top == <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-堆栈的使用\"><a href=\"#3-堆栈的使用\" class=\"headerlink\" title=\"3. 堆栈的使用\"></a>3. 堆栈的使用</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;LinkedStack.h&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 反转</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"type\">const</span> T* a, <span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">\tLinkedStack&lt;T&gt;* s = <span class=\"keyword\">new</span> <span class=\"built_in\">LinkedStack</span>&lt;T&gt;();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">\t\ts-&gt;<span class=\"built_in\">push</span>(a[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!s-&gt;<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">\t\tstd::cout &lt;&lt; s-&gt;<span class=\"built_in\">pop</span>() &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 进制转换</span></span><br><span class=\"line\"><span class=\"comment\"> * conversion of number systems</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 10 -&gt; 2</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dec2bin</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">\tLinkedStack&lt;<span class=\"type\">int</span>&gt; s;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (n != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\ts.<span class=\"built_in\">push</span>(n % <span class=\"number\">2</span>);</span><br><span class=\"line\">\t\tn /= <span class=\"number\">2</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!s.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; s.<span class=\"built_in\">pop</span>() &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dec2bin</span><span class=\"params\">(<span class=\"type\">double</span> n, <span class=\"type\">int</span> e = <span class=\"number\">10</span>)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> z = (<span class=\"type\">int</span>)n;</span><br><span class=\"line\">\t<span class=\"type\">double</span> d = n - z;</span><br><span class=\"line\">\tLinkedStack&lt;<span class=\"type\">int</span>&gt; s;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (z != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\ts.<span class=\"built_in\">push</span>(z % <span class=\"number\">2</span>);</span><br><span class=\"line\">\t\tz /= <span class=\"number\">2</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!s.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&#x27;.&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; e; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (d == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\td *= <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (d &gt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t--d;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 进制转换</span></span><br><span class=\"line\"><span class=\"comment\"> * conversion of number systems</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 10 -&gt; 8</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dec2oct</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">\tLinkedStack&lt;<span class=\"type\">int</span>&gt; s;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (n != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\ts.<span class=\"built_in\">push</span>(n % <span class=\"number\">8</span>);</span><br><span class=\"line\">\t\tn /= <span class=\"number\">8</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!s.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; s.<span class=\"built_in\">pop</span>() &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 进制转换</span></span><br><span class=\"line\"><span class=\"comment\"> * conversion of number systems</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 10 -&gt; 16</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dec2hex</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">\tLinkedStack&lt;<span class=\"type\">char</span>&gt; s;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (n != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (n % <span class=\"number\">16</span> &gt; <span class=\"number\">9</span>) &#123;</span><br><span class=\"line\">\t\t\ts.<span class=\"built_in\">push</span>(<span class=\"string\">&#x27;A&#x27;</span> + (n % <span class=\"number\">16</span>) - <span class=\"number\">10</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\ts.<span class=\"built_in\">push</span>(<span class=\"string\">&#x27;0&#x27;</span> + n % <span class=\"number\">16</span>);</span><br><span class=\"line\">\t\tn /= <span class=\"number\">16</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!s.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; s.<span class=\"built_in\">pop</span>() &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 括号匹配</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">bracketMatching</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span>* a, <span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">\tLinkedStack&lt;<span class=\"type\">char</span>&gt; s;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (a[i] == <span class=\"string\">&#x27;(&#x27;</span>)</span><br><span class=\"line\">\t\t\ts.<span class=\"built_in\">push</span>(a[i]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (a[i] == <span class=\"string\">&#x27;)&#x27;</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!s.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">\t\t\t\ts.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (a[i] == <span class=\"string\">&#x27;[&#x27;</span>)</span><br><span class=\"line\">\t\t\ts.<span class=\"built_in\">push</span>(a[i]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (a[i] == <span class=\"string\">&#x27;]&#x27;</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!s.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">\t\t\t\ts.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (a[i] == <span class=\"string\">&#x27;&#123;&#x27;</span>)</span><br><span class=\"line\">\t\t\ts.<span class=\"built_in\">push</span>(a[i]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (a[i] == <span class=\"string\">&#x27;&#125;&#x27;</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!s.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">\t\t\t\ts.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!s.<span class=\"built_in\">empty</span>())<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> <span class=\"type\">const</span>* argv[])</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> a[] = &#123; <span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;B&#x27;</span>, <span class=\"string\">&#x27;C&#x27;</span>, <span class=\"string\">&#x27;D&#x27;</span>, <span class=\"string\">&#x27;E&#x27;</span>, <span class=\"string\">&#x27;F&#x27;</span> &#125;;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;----------\\n反转数组 &#123;&#x27;A&#x27;,&#x27;B&#x27;,&#x27;C&#x27;,&#x27;D&#x27;,&#x27;E&#x27;,&#x27;F&#x27;&#125; \\n&quot;</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">reverse</span>(a, <span class=\"built_in\">sizeof</span>(a) / <span class=\"built_in\">sizeof</span>(a[<span class=\"number\">0</span>]));</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;----------\\n17D 转二进制:\\n&quot;</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">dec2bin</span>(<span class=\"number\">17</span>);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;----------\\n17D 转八进制:\\n&quot;</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">dec2oct</span>(<span class=\"number\">17</span>);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;----------\\n17D 转十六进制:\\n&quot;</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">dec2hex</span>(<span class=\"number\">17</span>);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;----------\\n括号匹配 &#x27;(a)af((s()fa()())&#x27; :\\n&quot;</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span> s[] = <span class=\"string\">&quot;(a)af((s()fa()())&quot;</span>;</span><br><span class=\"line\">\tcout &lt;&lt; (<span class=\"built_in\">bracketMatching</span>(s, <span class=\"built_in\">sizeof</span>(s) / <span class=\"built_in\">sizeof</span>(s[<span class=\"number\">0</span>])) ? <span class=\"string\">&quot;True\\n&quot;</span> : <span class=\"string\">&quot;False\\n&quot;</span>);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;----------\\n括号匹配 &#x27;(a(()d)(s))()&#x27; :\\n&quot;</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span> f[] = <span class=\"string\">&quot;(a(()d)(s))()&quot;</span>;</span><br><span class=\"line\">\tcout &lt;&lt; (<span class=\"built_in\">bracketMatching</span>(f, <span class=\"built_in\">sizeof</span>(f) / <span class=\"built_in\">sizeof</span>(f[<span class=\"number\">0</span>])) ? <span class=\"string\">&quot;True\\n&quot;</span> : <span class=\"string\">&quot;False\\n&quot;</span>);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;----------\\n17.256D 转二进制:\\n&quot;</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">dec2bin</span>(<span class=\"number\">17.256</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"如何看论文","date":"2023-10-11T07:14:53.000Z","cover":false,"_content":"\n大量略读，少量精读。带着目的去阅读。\n\n[chatPaper AI用一秒钟总结论文，用户用一分钟阅读AI总结的论文](https://chatwithpaper.org/)\n\n[学术版GPT](https://academic.chatwithpaper.org/)","source":"_posts/如何看论文.md","raw":"---\ntitle: 如何看论文\ntags: 如何看论文\ndate: 2023-10-11 15:14:53\ncover:\n---\n\n大量略读，少量精读。带着目的去阅读。\n\n[chatPaper AI用一秒钟总结论文，用户用一分钟阅读AI总结的论文](https://chatwithpaper.org/)\n\n[学术版GPT](https://academic.chatwithpaper.org/)","slug":"如何看论文","published":1,"updated":"2023-10-11T07:20:25.834Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5vf006klv9eej302xxz","content":"<p>大量略读，少量精读。带着目的去阅读。</p>\n<p><a href=\"https://chatwithpaper.org/\">chatPaper AI用一秒钟总结论文，用户用一分钟阅读AI总结的论文</a></p>\n<p><a href=\"https://academic.chatwithpaper.org/\">学术版GPT</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>大量略读，少量精读。带着目的去阅读。</p>\n<p><a href=\"https://chatwithpaper.org/\">chatPaper AI用一秒钟总结论文，用户用一分钟阅读AI总结的论文</a></p>\n<p><a href=\"https://academic.chatwithpaper.org/\">学术版GPT</a></p>\n"},{"title":"如何阅读","date":"2023-09-29T09:56:24.000Z","cover":false,"_content":"\n阅读存在的问题：\n\n- 读了马上就忘\n- 看过去不知道讲了什么\n\n\n阅读之所以不能只看内容，而要抓论纲，原因主要有两个。第\n一，学术全是围绕论证展开的，学生必须学会批判论证。发现并剖析\n论证（就是我们所说的“论纲”）是你处理任何文本的首要任务。比\n方说，教授安排你读五本关于法国大革命的书。有个国王掉了脑袋，\n这个事实你需要读多少次呢？一次还不够吗？你之所以要看五本不同\n的书，是因为每名作者都对史实有着不同的解读。因此，你的第一项\n任务是确定作者在论纲中表达的具体解读。第二项任务是拆解论纲，\n找到它最薄弱的环节。\n\n你在阅读时的任务本质上是搜寻和批判：你要\n先搜寻论纲，然后你的目标是批判论纲。“批判”部分意味着你要评\n判书的优势和劣势\n\n我们需要搜寻支撑论断的坚实证\n据，如果我们找不到证据，如果作者没有提供证据，或者作者的证据\n的主观性大于客观性，那我们大概就能推翻这个论纲了。\n\n\n如何主动阅读\n第一步：分析主副标题。\n第二步：详读目录。 问一问你自己，作者在每一章中可能想要表达什么\n第三步：先读最后一节。 有心的作者会在末段概括自己的主要思想\n第四步：再读导论。\n第五步：标定书籍或文章里最重要的章节。\n这个过程中最实用的技巧是，用自己的话复述读过的内容，然后\n写下来。\n\n看到这些我能想到些什么，以及为什么想到\n","source":"_posts/如何阅读.md","raw":"---\ntitle: 如何阅读\ntags: 如何阅读\ndate: 2023-09-29 17:56:24\ncover:\n---\n\n阅读存在的问题：\n\n- 读了马上就忘\n- 看过去不知道讲了什么\n\n\n阅读之所以不能只看内容，而要抓论纲，原因主要有两个。第\n一，学术全是围绕论证展开的，学生必须学会批判论证。发现并剖析\n论证（就是我们所说的“论纲”）是你处理任何文本的首要任务。比\n方说，教授安排你读五本关于法国大革命的书。有个国王掉了脑袋，\n这个事实你需要读多少次呢？一次还不够吗？你之所以要看五本不同\n的书，是因为每名作者都对史实有着不同的解读。因此，你的第一项\n任务是确定作者在论纲中表达的具体解读。第二项任务是拆解论纲，\n找到它最薄弱的环节。\n\n你在阅读时的任务本质上是搜寻和批判：你要\n先搜寻论纲，然后你的目标是批判论纲。“批判”部分意味着你要评\n判书的优势和劣势\n\n我们需要搜寻支撑论断的坚实证\n据，如果我们找不到证据，如果作者没有提供证据，或者作者的证据\n的主观性大于客观性，那我们大概就能推翻这个论纲了。\n\n\n如何主动阅读\n第一步：分析主副标题。\n第二步：详读目录。 问一问你自己，作者在每一章中可能想要表达什么\n第三步：先读最后一节。 有心的作者会在末段概括自己的主要思想\n第四步：再读导论。\n第五步：标定书籍或文章里最重要的章节。\n这个过程中最实用的技巧是，用自己的话复述读过的内容，然后\n写下来。\n\n看到这些我能想到些什么，以及为什么想到\n","slug":"如何阅读","published":1,"updated":"2023-09-29T10:09:26.108Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5vf006nlv9e0mez7uxh","content":"<p>阅读存在的问题：</p>\n<ul>\n<li>读了马上就忘</li>\n<li>看过去不知道讲了什么</li>\n</ul>\n<p>阅读之所以不能只看内容，而要抓论纲，原因主要有两个。第<br>一，学术全是围绕论证展开的，学生必须学会批判论证。发现并剖析<br>论证（就是我们所说的“论纲”）是你处理任何文本的首要任务。比<br>方说，教授安排你读五本关于法国大革命的书。有个国王掉了脑袋，<br>这个事实你需要读多少次呢？一次还不够吗？你之所以要看五本不同<br>的书，是因为每名作者都对史实有着不同的解读。因此，你的第一项<br>任务是确定作者在论纲中表达的具体解读。第二项任务是拆解论纲，<br>找到它最薄弱的环节。</p>\n<p>你在阅读时的任务本质上是搜寻和批判：你要<br>先搜寻论纲，然后你的目标是批判论纲。“批判”部分意味着你要评<br>判书的优势和劣势</p>\n<p>我们需要搜寻支撑论断的坚实证<br>据，如果我们找不到证据，如果作者没有提供证据，或者作者的证据<br>的主观性大于客观性，那我们大概就能推翻这个论纲了。</p>\n<p>如何主动阅读<br>第一步：分析主副标题。<br>第二步：详读目录。 问一问你自己，作者在每一章中可能想要表达什么<br>第三步：先读最后一节。 有心的作者会在末段概括自己的主要思想<br>第四步：再读导论。<br>第五步：标定书籍或文章里最重要的章节。<br>这个过程中最实用的技巧是，用自己的话复述读过的内容，然后<br>写下来。</p>\n<p>看到这些我能想到些什么，以及为什么想到</p>\n","site":{"data":{}},"excerpt":"","more":"<p>阅读存在的问题：</p>\n<ul>\n<li>读了马上就忘</li>\n<li>看过去不知道讲了什么</li>\n</ul>\n<p>阅读之所以不能只看内容，而要抓论纲，原因主要有两个。第<br>一，学术全是围绕论证展开的，学生必须学会批判论证。发现并剖析<br>论证（就是我们所说的“论纲”）是你处理任何文本的首要任务。比<br>方说，教授安排你读五本关于法国大革命的书。有个国王掉了脑袋，<br>这个事实你需要读多少次呢？一次还不够吗？你之所以要看五本不同<br>的书，是因为每名作者都对史实有着不同的解读。因此，你的第一项<br>任务是确定作者在论纲中表达的具体解读。第二项任务是拆解论纲，<br>找到它最薄弱的环节。</p>\n<p>你在阅读时的任务本质上是搜寻和批判：你要<br>先搜寻论纲，然后你的目标是批判论纲。“批判”部分意味着你要评<br>判书的优势和劣势</p>\n<p>我们需要搜寻支撑论断的坚实证<br>据，如果我们找不到证据，如果作者没有提供证据，或者作者的证据<br>的主观性大于客观性，那我们大概就能推翻这个论纲了。</p>\n<p>如何主动阅读<br>第一步：分析主副标题。<br>第二步：详读目录。 问一问你自己，作者在每一章中可能想要表达什么<br>第三步：先读最后一节。 有心的作者会在末段概括自己的主要思想<br>第四步：再读导论。<br>第五步：标定书籍或文章里最重要的章节。<br>这个过程中最实用的技巧是，用自己的话复述读过的内容，然后<br>写下来。</p>\n<p>看到这些我能想到些什么，以及为什么想到</p>\n"},{"title":"将Gitee Pages 转移到自己的服务器","date":"2023-05-22T11:18:42.000Z","_content":"\n# 将Gitee Pages 转移到自己的服务器\n\n## 开始之前\n\n我在自己的电脑上用 hexo 框架配置了一个博客。本来一切安好直到最近换了个主题博客访问变得有点慢了（原因应该是js比较多。。。）但是我不想放弃现在的主题，所以就决定转移原来部署在Gitee Pages的博客到自己租的服务器（是的，我有服务器。但是只有一年，用完了还得倒数据，嫌麻烦。。。）\n\n我发现网页所有的资源都在这个文件夹下\n\n![](2023-05-22-19-24-53.png)\n\n而这个文件夹被推送到了gitee\n\n现在就好办了，直接从gitee克隆到自己的服务器就行了。\n\n## 克隆\n\n复制这个链接\n\n![](2023-05-22-19-27-41.png)\n\n在服务器上找个合适的地方执行\n```bash\nquanwei@VM-8-7-ubuntu:~/workplaceFolder$ git clone https://gitee.com/quanw20/quanw20.git\n```\n\n输入密码（因为是私有的）就克隆下来了\n\n![](2023-05-22-19-30-02.png)\n\n\n## 更新\n\n每次推送到gitee之后服务器上的数据都不会自动更新（不知道有没有什么hook之类的）\n\n所以我会在每次更新之后向服务器发送一条命令用来拉取更新,吧结果写入log\n\n```bash\nssh name@host \"cd /dir/quanw20;git pull > ./update.log;date >> ./update.log\"\n```\n\n但是的但是ssh需要输密码就很不优雅,不过ssh有另一种用密钥对来验证的方式：  \n\n就是把本地机的公钥放到服务器\n\n本地机：\n```bash\nssh-keygen -t rsa\n\nls ~/.ssh\n\ncat ~/.ssh/*.pub #复制输出\n```\n\n服务器：\n```bash\nvim ~/.ssh/authorized_keys # 这个文件要有\n# 将上面复制的内容粘贴到文件里面\n```\n\n命令有点长也可以alias取别名\n\nvim ~/.zshrc\n\n```bash\nalias update_blog='ssh name@host \"cd /dir/quanw20;git pull > ./update.log;date >> ./update.log\"'\n```\n![](2023-05-22-19-50-32.png)\n\n![](2023-05-22-19-50-03.png)\n\nOK！ 大功告成\n\n吃饭去 ~ \n","source":"_posts/将Gitee-Pages-转移到自己的服务器.md","raw":"---\ntitle: 将Gitee Pages 转移到自己的服务器\ndate: 2023-05-22 19:18:42\ntags: \n- Linux\n- Git\n---\n\n# 将Gitee Pages 转移到自己的服务器\n\n## 开始之前\n\n我在自己的电脑上用 hexo 框架配置了一个博客。本来一切安好直到最近换了个主题博客访问变得有点慢了（原因应该是js比较多。。。）但是我不想放弃现在的主题，所以就决定转移原来部署在Gitee Pages的博客到自己租的服务器（是的，我有服务器。但是只有一年，用完了还得倒数据，嫌麻烦。。。）\n\n我发现网页所有的资源都在这个文件夹下\n\n![](2023-05-22-19-24-53.png)\n\n而这个文件夹被推送到了gitee\n\n现在就好办了，直接从gitee克隆到自己的服务器就行了。\n\n## 克隆\n\n复制这个链接\n\n![](2023-05-22-19-27-41.png)\n\n在服务器上找个合适的地方执行\n```bash\nquanwei@VM-8-7-ubuntu:~/workplaceFolder$ git clone https://gitee.com/quanw20/quanw20.git\n```\n\n输入密码（因为是私有的）就克隆下来了\n\n![](2023-05-22-19-30-02.png)\n\n\n## 更新\n\n每次推送到gitee之后服务器上的数据都不会自动更新（不知道有没有什么hook之类的）\n\n所以我会在每次更新之后向服务器发送一条命令用来拉取更新,吧结果写入log\n\n```bash\nssh name@host \"cd /dir/quanw20;git pull > ./update.log;date >> ./update.log\"\n```\n\n但是的但是ssh需要输密码就很不优雅,不过ssh有另一种用密钥对来验证的方式：  \n\n就是把本地机的公钥放到服务器\n\n本地机：\n```bash\nssh-keygen -t rsa\n\nls ~/.ssh\n\ncat ~/.ssh/*.pub #复制输出\n```\n\n服务器：\n```bash\nvim ~/.ssh/authorized_keys # 这个文件要有\n# 将上面复制的内容粘贴到文件里面\n```\n\n命令有点长也可以alias取别名\n\nvim ~/.zshrc\n\n```bash\nalias update_blog='ssh name@host \"cd /dir/quanw20;git pull > ./update.log;date >> ./update.log\"'\n```\n![](2023-05-22-19-50-32.png)\n\n![](2023-05-22-19-50-03.png)\n\nOK！ 大功告成\n\n吃饭去 ~ \n","slug":"将Gitee-Pages-转移到自己的服务器","published":1,"updated":"2023-06-23T01:07:04.154Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5vg006plv9e05xw8j9h","content":"<h1 id=\"将Gitee-Pages-转移到自己的服务器\"><a href=\"#将Gitee-Pages-转移到自己的服务器\" class=\"headerlink\" title=\"将Gitee Pages 转移到自己的服务器\"></a>将Gitee Pages 转移到自己的服务器</h1><h2 id=\"开始之前\"><a href=\"#开始之前\" class=\"headerlink\" title=\"开始之前\"></a>开始之前</h2><p>我在自己的电脑上用 hexo 框架配置了一个博客。本来一切安好直到最近换了个主题博客访问变得有点慢了（原因应该是js比较多。。。）但是我不想放弃现在的主题，所以就决定转移原来部署在Gitee Pages的博客到自己租的服务器（是的，我有服务器。但是只有一年，用完了还得倒数据，嫌麻烦。。。）</p>\n<p>我发现网页所有的资源都在这个文件夹下</p>\n<p><img src=\"/2023/05/22/%E5%B0%86Gitee-Pages-%E8%BD%AC%E7%A7%BB%E5%88%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8/2023-05-22-19-24-53.png\"></p>\n<p>而这个文件夹被推送到了gitee</p>\n<p>现在就好办了，直接从gitee克隆到自己的服务器就行了。</p>\n<h2 id=\"克隆\"><a href=\"#克隆\" class=\"headerlink\" title=\"克隆\"></a>克隆</h2><p>复制这个链接</p>\n<p><img src=\"/2023/05/22/%E5%B0%86Gitee-Pages-%E8%BD%AC%E7%A7%BB%E5%88%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8/2023-05-22-19-27-41.png\"></p>\n<p>在服务器上找个合适的地方执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">quanwei@VM-8-7-ubuntu:~/workplaceFolder$ git <span class=\"built_in\">clone</span> https://gitee.com/quanw20/quanw20.git</span><br></pre></td></tr></table></figure>\n\n<p>输入密码（因为是私有的）就克隆下来了</p>\n<p><img src=\"/2023/05/22/%E5%B0%86Gitee-Pages-%E8%BD%AC%E7%A7%BB%E5%88%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8/2023-05-22-19-30-02.png\"></p>\n<h2 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h2><p>每次推送到gitee之后服务器上的数据都不会自动更新（不知道有没有什么hook之类的）</p>\n<p>所以我会在每次更新之后向服务器发送一条命令用来拉取更新,吧结果写入log</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh name@host <span class=\"string\">&quot;cd /dir/quanw20;git pull &gt; ./update.log;date &gt;&gt; ./update.log&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>但是的但是ssh需要输密码就很不优雅,不过ssh有另一种用密钥对来验证的方式：  </p>\n<p>就是把本地机的公钥放到服务器</p>\n<p>本地机：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">ls</span> ~/.ssh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cat</span> ~/.ssh/*.pub <span class=\"comment\">#复制输出</span></span><br></pre></td></tr></table></figure>\n\n<p>服务器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.ssh/authorized_keys <span class=\"comment\"># 这个文件要有</span></span><br><span class=\"line\"><span class=\"comment\"># 将上面复制的内容粘贴到文件里面</span></span><br></pre></td></tr></table></figure>\n\n<p>命令有点长也可以alias取别名</p>\n<p>vim ~&#x2F;.zshrc</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">alias</span> update_blog=<span class=\"string\">&#x27;ssh name@host &quot;cd /dir/quanw20;git pull &gt; ./update.log;date &gt;&gt; ./update.log&quot;&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2023/05/22/%E5%B0%86Gitee-Pages-%E8%BD%AC%E7%A7%BB%E5%88%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8/2023-05-22-19-50-32.png\"></p>\n<p><img src=\"/2023/05/22/%E5%B0%86Gitee-Pages-%E8%BD%AC%E7%A7%BB%E5%88%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8/2023-05-22-19-50-03.png\"></p>\n<p>OK！ 大功告成</p>\n<p>吃饭去 ~ </p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h1 id=\"将Gitee-Pages-转移到自己的服务器\"><a href=\"#将Gitee-Pages-转移到自己的服务器\" class=\"headerlink\" title=\"将Gitee Pages 转移到自己的服务器\"></a>将Gitee Pages 转移到自己的服务器</h1><h2 id=\"开始之前\"><a href=\"#开始之前\" class=\"headerlink\" title=\"开始之前\"></a>开始之前</h2><p>我在自己的电脑上用 hexo 框架配置了一个博客。本来一切安好直到最近换了个主题博客访问变得有点慢了（原因应该是js比较多。。。）但是我不想放弃现在的主题，所以就决定转移原来部署在Gitee Pages的博客到自己租的服务器（是的，我有服务器。但是只有一年，用完了还得倒数据，嫌麻烦。。。）</p>\n<p>我发现网页所有的资源都在这个文件夹下</p>\n<p><img src=\"/2023/05/22/%E5%B0%86Gitee-Pages-%E8%BD%AC%E7%A7%BB%E5%88%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8/2023-05-22-19-24-53.png\"></p>\n<p>而这个文件夹被推送到了gitee</p>\n<p>现在就好办了，直接从gitee克隆到自己的服务器就行了。</p>\n<h2 id=\"克隆\"><a href=\"#克隆\" class=\"headerlink\" title=\"克隆\"></a>克隆</h2><p>复制这个链接</p>\n<p><img src=\"/2023/05/22/%E5%B0%86Gitee-Pages-%E8%BD%AC%E7%A7%BB%E5%88%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8/2023-05-22-19-27-41.png\"></p>\n<p>在服务器上找个合适的地方执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">quanwei@VM-8-7-ubuntu:~/workplaceFolder$ git <span class=\"built_in\">clone</span> https://gitee.com/quanw20/quanw20.git</span><br></pre></td></tr></table></figure>\n\n<p>输入密码（因为是私有的）就克隆下来了</p>\n<p><img src=\"/2023/05/22/%E5%B0%86Gitee-Pages-%E8%BD%AC%E7%A7%BB%E5%88%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8/2023-05-22-19-30-02.png\"></p>\n<h2 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h2><p>每次推送到gitee之后服务器上的数据都不会自动更新（不知道有没有什么hook之类的）</p>\n<p>所以我会在每次更新之后向服务器发送一条命令用来拉取更新,吧结果写入log</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh name@host <span class=\"string\">&quot;cd /dir/quanw20;git pull &gt; ./update.log;date &gt;&gt; ./update.log&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>但是的但是ssh需要输密码就很不优雅,不过ssh有另一种用密钥对来验证的方式：  </p>\n<p>就是把本地机的公钥放到服务器</p>\n<p>本地机：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">ls</span> ~/.ssh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cat</span> ~/.ssh/*.pub <span class=\"comment\">#复制输出</span></span><br></pre></td></tr></table></figure>\n\n<p>服务器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.ssh/authorized_keys <span class=\"comment\"># 这个文件要有</span></span><br><span class=\"line\"><span class=\"comment\"># 将上面复制的内容粘贴到文件里面</span></span><br></pre></td></tr></table></figure>\n\n<p>命令有点长也可以alias取别名</p>\n<p>vim ~&#x2F;.zshrc</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">alias</span> update_blog=<span class=\"string\">&#x27;ssh name@host &quot;cd /dir/quanw20;git pull &gt; ./update.log;date &gt;&gt; ./update.log&quot;&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2023/05/22/%E5%B0%86Gitee-Pages-%E8%BD%AC%E7%A7%BB%E5%88%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8/2023-05-22-19-50-32.png\"></p>\n<p><img src=\"/2023/05/22/%E5%B0%86Gitee-Pages-%E8%BD%AC%E7%A7%BB%E5%88%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8/2023-05-22-19-50-03.png\"></p>\n<p>OK！ 大功告成</p>\n<p>吃饭去 ~ </p>\n"},{"title":"数据结构概念&&算法复杂度","date":"2022-04-15T09:41:50.000Z","_content":"\n# 数据结构概念&&算法复杂度\n\n\n数值问题->数学方程\n\n非数值问题->数据结构\n\n\n## 数据结构概念\n<!-- more -->\n### 数据结构\n\n**数据(data)**,能输入到计算机中并能被计算机识别处理的符号,分为: \n\n1. 数值数据\n\n2. 非数值数据\n\n**数据元素(data element)**,数据的基本单位\n\n**数据项(data item),** 构成数据元素的最小单位\n\n**数据结构(data structure)**, 相互之间存在一定关系的数据元素的集合\n\n数据的**逻辑结构(logical structure),** 数据元素之间的逻辑关系\n\n数据的**存储结构(storage structure)**, 数据及其逻辑结构在计算机内部的表示, 主要有**顺序结构**和**链式结构**\n\n### 抽象数据类型(ADT)\n\n**数据类型(data type)**, 一组值的集合以及定义在这个值集合上的一组操作的总称\n\n**抽象数据类型(abstract data type, ADT), **一个数据以及定义在该模型上的一组操作的总称\n\n二者区别: dt是高级语言的基本数据类型,adt是用户指定的数据\n\n## 算法概念\n\n算法即解决问题的方法\n\n性质:\n\n1. 有穷性\n\n2. 可行性\n\n3. 确定性\n\n好的算法:\n\n1. 正确\n\n2. 健壮\n\n3. 容易理解\n\n4. 步骤不超过9个\n\n5. 高效\n\n算法描述:\n\n1. 伪代码\n\n## 算法分析\n\n### 时间复杂度\n\n使用事前分析估算-- 渐进复杂度(asymptomatic complexity)\n\n算法运行时间T是问题规模n的函数,T(n)\n\n基本语句的执行次数是与整个算法的执行次数成正比的\n\n**算法的时间复杂度(time complexity)**: 当问题规模充分大时,基本语句执行次数在渐进意义下的阶,用O表示\n\n#### 非递归算法时间复杂度\n\n\n```\nfor(int i=1;i<=n;i*=2)\n  ++x;\n\n```\n\n**解: ** ++x;是基本语句设执行次数为T(n),则\n\n2^{T(n)} \\le n, T(n) \\le log_2{n}\n\n#### 递归算法时间复杂度\n\n递归算法通用递归式:\n\nT(n)=\\begin{cases}c& \\text{n=1}\\\\aT(n/b)+cn^k& \\text{n>1}\\end{cases}\n\n结果:\n\n![MommyTalk1646224458244.png](image/MommyTalk1646224458244.png)\n\n\n\n### 空间复杂度\n\n算法的空间复杂度(space complexity): 算法在执行过程中需要的辅助空间的数量\n","source":"_posts/数据结构基本概念.md","raw":"---\ntitle: 数据结构概念&&算法复杂度\ndate: 2022-04-15 17:41:50\ntags: Data Structure\n---\n\n# 数据结构概念&&算法复杂度\n\n\n数值问题->数学方程\n\n非数值问题->数据结构\n\n\n## 数据结构概念\n<!-- more -->\n### 数据结构\n\n**数据(data)**,能输入到计算机中并能被计算机识别处理的符号,分为: \n\n1. 数值数据\n\n2. 非数值数据\n\n**数据元素(data element)**,数据的基本单位\n\n**数据项(data item),** 构成数据元素的最小单位\n\n**数据结构(data structure)**, 相互之间存在一定关系的数据元素的集合\n\n数据的**逻辑结构(logical structure),** 数据元素之间的逻辑关系\n\n数据的**存储结构(storage structure)**, 数据及其逻辑结构在计算机内部的表示, 主要有**顺序结构**和**链式结构**\n\n### 抽象数据类型(ADT)\n\n**数据类型(data type)**, 一组值的集合以及定义在这个值集合上的一组操作的总称\n\n**抽象数据类型(abstract data type, ADT), **一个数据以及定义在该模型上的一组操作的总称\n\n二者区别: dt是高级语言的基本数据类型,adt是用户指定的数据\n\n## 算法概念\n\n算法即解决问题的方法\n\n性质:\n\n1. 有穷性\n\n2. 可行性\n\n3. 确定性\n\n好的算法:\n\n1. 正确\n\n2. 健壮\n\n3. 容易理解\n\n4. 步骤不超过9个\n\n5. 高效\n\n算法描述:\n\n1. 伪代码\n\n## 算法分析\n\n### 时间复杂度\n\n使用事前分析估算-- 渐进复杂度(asymptomatic complexity)\n\n算法运行时间T是问题规模n的函数,T(n)\n\n基本语句的执行次数是与整个算法的执行次数成正比的\n\n**算法的时间复杂度(time complexity)**: 当问题规模充分大时,基本语句执行次数在渐进意义下的阶,用O表示\n\n#### 非递归算法时间复杂度\n\n\n```\nfor(int i=1;i<=n;i*=2)\n  ++x;\n\n```\n\n**解: ** ++x;是基本语句设执行次数为T(n),则\n\n2^{T(n)} \\le n, T(n) \\le log_2{n}\n\n#### 递归算法时间复杂度\n\n递归算法通用递归式:\n\nT(n)=\\begin{cases}c& \\text{n=1}\\\\aT(n/b)+cn^k& \\text{n>1}\\end{cases}\n\n结果:\n\n![MommyTalk1646224458244.png](image/MommyTalk1646224458244.png)\n\n\n\n### 空间复杂度\n\n算法的空间复杂度(space complexity): 算法在执行过程中需要的辅助空间的数量\n","slug":"数据结构基本概念","published":1,"updated":"2022-04-15T10:07:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5vh006rlv9e570jf92v","content":"<h1 id=\"数据结构概念-算法复杂度\"><a href=\"#数据结构概念-算法复杂度\" class=\"headerlink\" title=\"数据结构概念&amp;&amp;算法复杂度\"></a>数据结构概念&amp;&amp;算法复杂度</h1><p>数值问题-&gt;数学方程</p>\n<p>非数值问题-&gt;数据结构</p>\n<h2 id=\"数据结构概念\"><a href=\"#数据结构概念\" class=\"headerlink\" title=\"数据结构概念\"></a>数据结构概念</h2><span id=\"more\"></span>\n<h3 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h3><p><strong>数据(data)</strong>,能输入到计算机中并能被计算机识别处理的符号,分为: </p>\n<ol>\n<li><p>数值数据</p>\n</li>\n<li><p>非数值数据</p>\n</li>\n</ol>\n<p><strong>数据元素(data element)</strong>,数据的基本单位</p>\n<p><strong>数据项(data item),</strong> 构成数据元素的最小单位</p>\n<p><strong>数据结构(data structure)</strong>, 相互之间存在一定关系的数据元素的集合</p>\n<p>数据的<strong>逻辑结构(logical structure),</strong> 数据元素之间的逻辑关系</p>\n<p>数据的<strong>存储结构(storage structure)</strong>, 数据及其逻辑结构在计算机内部的表示, 主要有<strong>顺序结构</strong>和<strong>链式结构</strong></p>\n<h3 id=\"抽象数据类型-ADT\"><a href=\"#抽象数据类型-ADT\" class=\"headerlink\" title=\"抽象数据类型(ADT)\"></a>抽象数据类型(ADT)</h3><p><strong>数据类型(data type)</strong>, 一组值的集合以及定义在这个值集合上的一组操作的总称</p>\n<p>**抽象数据类型(abstract data type, ADT), **一个数据以及定义在该模型上的一组操作的总称</p>\n<p>二者区别: dt是高级语言的基本数据类型,adt是用户指定的数据</p>\n<h2 id=\"算法概念\"><a href=\"#算法概念\" class=\"headerlink\" title=\"算法概念\"></a>算法概念</h2><p>算法即解决问题的方法</p>\n<p>性质:</p>\n<ol>\n<li><p>有穷性</p>\n</li>\n<li><p>可行性</p>\n</li>\n<li><p>确定性</p>\n</li>\n</ol>\n<p>好的算法:</p>\n<ol>\n<li><p>正确</p>\n</li>\n<li><p>健壮</p>\n</li>\n<li><p>容易理解</p>\n</li>\n<li><p>步骤不超过9个</p>\n</li>\n<li><p>高效</p>\n</li>\n</ol>\n<p>算法描述:</p>\n<ol>\n<li>伪代码</li>\n</ol>\n<h2 id=\"算法分析\"><a href=\"#算法分析\" class=\"headerlink\" title=\"算法分析\"></a>算法分析</h2><h3 id=\"时间复杂度\"><a href=\"#时间复杂度\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h3><p>使用事前分析估算– 渐进复杂度(asymptomatic complexity)</p>\n<p>算法运行时间T是问题规模n的函数,T(n)</p>\n<p>基本语句的执行次数是与整个算法的执行次数成正比的</p>\n<p><strong>算法的时间复杂度(time complexity)</strong>: 当问题规模充分大时,基本语句执行次数在渐进意义下的阶,用O表示</p>\n<h4 id=\"非递归算法时间复杂度\"><a href=\"#非递归算法时间复杂度\" class=\"headerlink\" title=\"非递归算法时间复杂度\"></a>非递归算法时间复杂度</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(int i=1;i&lt;=n;i*=2)</span><br><span class=\"line\">  ++x;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>**解: ** ++x;是基本语句设执行次数为T(n),则</p>\n<p>2^{T(n)} \\le n, T(n) \\le log_2{n}</p>\n<h4 id=\"递归算法时间复杂度\"><a href=\"#递归算法时间复杂度\" class=\"headerlink\" title=\"递归算法时间复杂度\"></a>递归算法时间复杂度</h4><p>递归算法通用递归式:</p>\n<p>T(n)&#x3D;\\begin{cases}c&amp; \\text{n&#x3D;1}\\aT(n&#x2F;b)+cn^k&amp; \\text{n&gt;1}\\end{cases}</p>\n<p>结果:</p>\n<p><img src=\"/image/MommyTalk1646224458244.png\" alt=\"MommyTalk1646224458244.png\"></p>\n<h3 id=\"空间复杂度\"><a href=\"#空间复杂度\" class=\"headerlink\" title=\"空间复杂度\"></a>空间复杂度</h3><p>算法的空间复杂度(space complexity): 算法在执行过程中需要的辅助空间的数量</p>\n","site":{"data":{}},"cover":false,"excerpt":"<h1 id=\"数据结构概念-算法复杂度\"><a href=\"#数据结构概念-算法复杂度\" class=\"headerlink\" title=\"数据结构概念&amp;&amp;算法复杂度\"></a>数据结构概念&amp;&amp;算法复杂度</h1><p>数值问题-&gt;数学方程</p>\n<p>非数值问题-&gt;数据结构</p>\n<h2 id=\"数据结构概念\"><a href=\"#数据结构概念\" class=\"headerlink\" title=\"数据结构概念\"></a>数据结构概念</h2>","more":"<h3 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h3><p><strong>数据(data)</strong>,能输入到计算机中并能被计算机识别处理的符号,分为: </p>\n<ol>\n<li><p>数值数据</p>\n</li>\n<li><p>非数值数据</p>\n</li>\n</ol>\n<p><strong>数据元素(data element)</strong>,数据的基本单位</p>\n<p><strong>数据项(data item),</strong> 构成数据元素的最小单位</p>\n<p><strong>数据结构(data structure)</strong>, 相互之间存在一定关系的数据元素的集合</p>\n<p>数据的<strong>逻辑结构(logical structure),</strong> 数据元素之间的逻辑关系</p>\n<p>数据的<strong>存储结构(storage structure)</strong>, 数据及其逻辑结构在计算机内部的表示, 主要有<strong>顺序结构</strong>和<strong>链式结构</strong></p>\n<h3 id=\"抽象数据类型-ADT\"><a href=\"#抽象数据类型-ADT\" class=\"headerlink\" title=\"抽象数据类型(ADT)\"></a>抽象数据类型(ADT)</h3><p><strong>数据类型(data type)</strong>, 一组值的集合以及定义在这个值集合上的一组操作的总称</p>\n<p>**抽象数据类型(abstract data type, ADT), **一个数据以及定义在该模型上的一组操作的总称</p>\n<p>二者区别: dt是高级语言的基本数据类型,adt是用户指定的数据</p>\n<h2 id=\"算法概念\"><a href=\"#算法概念\" class=\"headerlink\" title=\"算法概念\"></a>算法概念</h2><p>算法即解决问题的方法</p>\n<p>性质:</p>\n<ol>\n<li><p>有穷性</p>\n</li>\n<li><p>可行性</p>\n</li>\n<li><p>确定性</p>\n</li>\n</ol>\n<p>好的算法:</p>\n<ol>\n<li><p>正确</p>\n</li>\n<li><p>健壮</p>\n</li>\n<li><p>容易理解</p>\n</li>\n<li><p>步骤不超过9个</p>\n</li>\n<li><p>高效</p>\n</li>\n</ol>\n<p>算法描述:</p>\n<ol>\n<li>伪代码</li>\n</ol>\n<h2 id=\"算法分析\"><a href=\"#算法分析\" class=\"headerlink\" title=\"算法分析\"></a>算法分析</h2><h3 id=\"时间复杂度\"><a href=\"#时间复杂度\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h3><p>使用事前分析估算– 渐进复杂度(asymptomatic complexity)</p>\n<p>算法运行时间T是问题规模n的函数,T(n)</p>\n<p>基本语句的执行次数是与整个算法的执行次数成正比的</p>\n<p><strong>算法的时间复杂度(time complexity)</strong>: 当问题规模充分大时,基本语句执行次数在渐进意义下的阶,用O表示</p>\n<h4 id=\"非递归算法时间复杂度\"><a href=\"#非递归算法时间复杂度\" class=\"headerlink\" title=\"非递归算法时间复杂度\"></a>非递归算法时间复杂度</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(int i=1;i&lt;=n;i*=2)</span><br><span class=\"line\">  ++x;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>**解: ** ++x;是基本语句设执行次数为T(n),则</p>\n<p>2^{T(n)} \\le n, T(n) \\le log_2{n}</p>\n<h4 id=\"递归算法时间复杂度\"><a href=\"#递归算法时间复杂度\" class=\"headerlink\" title=\"递归算法时间复杂度\"></a>递归算法时间复杂度</h4><p>递归算法通用递归式:</p>\n<p>T(n)&#x3D;\\begin{cases}c&amp; \\text{n&#x3D;1}\\aT(n&#x2F;b)+cn^k&amp; \\text{n&gt;1}\\end{cases}</p>\n<p>结果:</p>\n<p><img src=\"/image/MommyTalk1646224458244.png\" alt=\"MommyTalk1646224458244.png\"></p>\n<h3 id=\"空间复杂度\"><a href=\"#空间复杂度\" class=\"headerlink\" title=\"空间复杂度\"></a>空间复杂度</h3><p>算法的空间复杂度(space complexity): 算法在执行过程中需要的辅助空间的数量</p>"},{"title":"线性表 - 数组","date":"2022-03-09T04:39:19.000Z","_content":"\n# 线性表\n\n---\n\n## 1. 数组\n<!-- more -->\n```cpp\n#ifndef __ARRAYLIST_H__\n#define __ARRAYLIST_H__\n#include <ostream> // ostream\n#include <cstring> // memset\n\ntemplate <class T>\nclass ArrayList {\nprivate:\n\tT* __array;\n\n\tsize_t __capacity;\n\n\tsize_t cur;\n\n\tconst static size_t DEFAULT_LENGTH;\n\t/**\n\t * 使用特定值n分配内存\n\t * @param n 初始元素的个数\n\t * @return ArrayList对象的引用\n\t */\n\tArrayList& create(size_t n);\n\t/**\n\t * 使用默认值分配内存\n\t * @return ArrayList对象的引用\n\t */\n\tArrayList& recreate();\n\t/**\n\t * i<->j\n\t * @param i\n\t * @param j\n\t */\n\tvoid swap(int i, int j);\n\npublic:\n\t/**\n\t * 初始化(使用默认值)\n\t *\n\t */\n\tArrayList();\n\n\t/**\n\t * 初始化\n\t *\n\t * @param n 初始化元素的个数\n\t */\n\tArrayList(size_t n);\n\t/**\n\t * 获取当前已经使用的数组大小\n\t *\n\t * @return cur\n\t */\n\tsize_t size();\n\t/**\n\t * 获取分配的数组最大长度\n\t *\n\t * @return __capacity\n\t */\n\tsize_t capacity();\n\t/**\n\t * 获取元素对应的下标(从前到后)\n\t * @param t 待查找的元素\n\t * @return 元素对应的下标, 或者-1(表示没有找到)\n\t */\n\tlong long indexOf(const T& t);\n\t/**\n\t * 获取元素对应的下标(从后到前)\n\t * @param t 待查找的元素\n\t * @return 元素对应的下标, 或者-1(表示没有找到)\n\t */\n\tlong long lastIndexOf(const T& t);\n\t/**\n\t * 获取下标对应的元素\n\t * @param i 下标\n\t * @throws Index out of length\n\t * @return 如果没报错: 下标对应的元素\n\t */\n\tT& at(size_t i);\n\t/**\n\t * 添加新元素\n\t *\n\t * @param t 待添加的元素\n\t */\n\tvoid add(const T& t);\n\t/**\n\t * 插入元素\n\t *\n\t * @param i 待插入的下标\n\t * @param t 待插入的元素\n\t */\n\tvoid insert(size_t i, const T& t);\n\t/**\n\t * 删除指定元素\n\t *\n\t * @param i 待删的元素的下标\n\t * @throws Exception : Index out of range\n\t * @return 被删除的元素\n\t */\n\tT remove(size_t);\n\t/**\n\t * 判断是否为空(没有元素)\n\t * @return true如果为空, 否则false\n\t */\n\tbool empty();\n\t/**\n\t * 释放内存&指针置空\n\t */\n\t~ArrayList();\n\n\t/**\n\t * 对每一个元素做func操作\n\t *\n\t * @param func 消费函数\n\t */\n\tvoid forEach(void (*func)(T));\n\n\t/**\n\t * 判断是否相同\n\t * @param al 需要判断的数组\n\t * @return true 相同, 否则false\n\t */\n\tbool equals(ArrayList<T>& al);\n\t/**\n\t * 反转数组\n\t */\n\tvoid reverse();\n\t/**\n\t * 部分反转数组\n\t * @param i 开始下标(包括)\n\t * @param j 结束下标(包括)\n\t */\n\tvoid reverse(int i, int j);\n\n\tfriend bool operator==(ArrayList<T>& al1, ArrayList<T>& al2);\n\n\tfriend bool operator!=(ArrayList<T>& al1, ArrayList<T>& al2);\n\n\t/**\n\t * 将数组元素输出到标准流\n\t * @param os 标准输出流对象\n\t * @param al 数组对象\n\t * @return 标准输出流对象\n\t */\n\ttemplate <class U>\n\tfriend std::ostream& operator<<(std::ostream& os, const ArrayList<U>& al);\n\t/**\n\t * 将数组元素输出到标准流\n\t * @param os 标准输出流对象\n\t * @param al 数组对象的指针\n\t * @return 标准输出流对象\n\t */\n\ttemplate <class U>\n\tfriend std::ostream& operator<<(std::ostream& os, const ArrayList<U>* al);\n};\n\ntemplate <class T>\nconst size_t ArrayList<T>::DEFAULT_LENGTH = 8;\n\ntemplate <class T>\nArrayList<T>& ArrayList<T>::create(size_t n) {\n\t__capacity = n;\n\tcur = 0;\n\t__array = new T[n];\n\tmemset(__array, 0, n * sizeof(T));\n\treturn *this;\n}\n\ntemplate <class T>\nArrayList<T>& ArrayList<T>::recreate() {\n\tT* a = new T[__capacity * 2];\n\tmemset(a, 0, __capacity * 2 * sizeof(T));\n\tfor (size_t i = 0, l = __capacity; i < l; i++) {\n\t\ta[i] = __array[i];\n\t}\n\t__capacity *= 2;\n\tdelete[] __array;\n\t__array = a;\n\treturn *this;\n}\ntemplate <class T>\nvoid ArrayList<T>::swap(int i, int j) {\n\tT tmp = this->__array[i];\n\tthis->__array[i] = this->__array[j];\n\tthis->__array[j] = tmp;\n}\n\ntemplate <class T>\nArrayList<T>::ArrayList() {\n\tcreate(DEFAULT_LENGTH); // 不接收\n}\n\ntemplate <class T>\nArrayList<T>::ArrayList(size_t n) {\n\tcreate(n);\n}\n\ntemplate <class T>\nsize_t ArrayList<T>::size() {\n\treturn cur;\n}\n\ntemplate <class T>\nsize_t ArrayList<T>::capacity() {\n\treturn __capacity;\n}\n\ntemplate <class T>\nlong long ArrayList<T>::indexOf(const T& t) {\n\tfor (size_t i = 0; i < cur; i++) {\n\t\tif (__array[i] == t)\n\t\t\treturn i;\n\t}\n\treturn -1ll;\n}\n\ntemplate <class T>\nlong long ArrayList<T>::lastIndexOf(const T& t) {\n\tfor (long long i = cur - 1; i >= 0; i--) {\n\t\tif (__array[i] == t)\n\t\t\treturn i;\n\t}\n\treturn -1ll;\n}\n\ntemplate <class T>\nT& ArrayList<T>::at(size_t i) {\n\tif (i >= __capacity || i < 0)\n\t\tthrow \"Exception : Index out of range!\";\n\treturn __array[i];\n}\n\ntemplate <class T>\nvoid ArrayList<T>::add(const T& t) {\n\tif (cur == __capacity)\n\t\trecreate();\n\t__array[cur++] = t;\n}\n\ntemplate <class T>\nvoid ArrayList<T>::insert(size_t i, const T& t) {\n\tif (cur >= __capacity)\n\t\trecreate();\n\tfor (size_t k = cur; k > i; k--) {\n\t\t__array[k] = __array[k - 1];\n\t}\n\t__array[i] = t;\n\tcur++;\n}\n\ntemplate <class T>\nT ArrayList<T>::remove(size_t i) {\n\tif (i >= __capacity || i < 0)\n\t\tthrow \"Exception : Index out of range :(\";\n\tT t = move(__array[i]); // 不能返回引用\n\tfor (size_t k = i; k < cur - 1; k++) {\n\t\t__array[k] = __array[k + 1];\n\t}\n\t--cur;\n\treturn t;\n}\n\ntemplate <class T>\nbool ArrayList<T>::empty() {\n\treturn cur == 0 ? true : false;\n}\n\ntemplate <class T>\nArrayList<T>::~ArrayList() {\n\tdelete[] __array; // 还可以调用?\n\t__array = nullptr;\n}\n\ntemplate <class T>\nvoid ArrayList<T>::forEach(void (*func)(T)) {\n\tfor (size_t i = 0; i < cur; i++) {\n\t\tfunc(__array[i]);\n\t}\n}\ntemplate <class T>\nbool ArrayList<T>::equals(ArrayList<T>& al) {\n\tif (this->cur != al.size())\n\t\treturn false;\n\tfor (size_t i = 0; i < this->cur; i++) {\n\t\tif (__array[i] != al.at(i))\n\t\t\treturn false;\n\t}\n\treturn true;\n}\ntemplate <class T>\nvoid ArrayList<T>::reverse() {\n\treverse(0, cur);\n}\n\ntemplate <class T>\nvoid ArrayList<T>::reverse(int i, int j) {\n\tif (i >= j)\n\t\treturn;\n\tswap(i, j);\n\treverse(++i, --j);\n}\n\n\ntemplate <class U>\nstd::ostream& operator<<(std::ostream& os, const ArrayList<U>& l) {\n\tif (l.__array != nullptr)\n\t\tfor (size_t i = 0; i < l.cur; i++) {\n\t\t\tos << *(l.__array + i) << \" \";\n\t\t}\n\telse\n\t\tos << \"null \";\n\treturn os;\n}\n\ntemplate <class U>\nstd::ostream& operator<<(std::ostream& os, const ArrayList<U>* l) {\n\tif (l->__array != nullptr)\n\t\tfor (size_t i = 0; i < l->cur; i++) {\n\t\t\tos << *(l->__array + i) << \" \";\n\t\t}\n\telse\n\t\tos << \"null \";\n\treturn os;\n}\n#endif\n```\n\n## 2. 数组测试代码\n\n```cpp\n#include <iostream>\n#include \"ArrayList.h\"\n\nusing namespace std;\n\nArrayList<string>* al = nullptr;\nArrayList<string> al1;\n\nvoid init() {\n\tal = new ArrayList<string>();\n\tcout << al->empty() << \"\\n\";\n\tal->add(\"Hello\");\n\tal->add(\"Tang\");\n\tal->add(\"Quanwei\");\n\tal->add(\".\");\n\tal->add(\"How's\");\n\tal->add(\"everything\");\n\tal->add(\"going\");\n\tal->add(\"?\");\n\tal->add(\" :) \");\n}\nvoid testEquals() {\n\tal1.add(\"Hello\");\n\tal1.add(\"Tang\");\n\tal1.add(\"Quanwei\");\n\tal1.add(\".\");\n\tal1.add(\"How's\");\n\tal1.add(\"everything\");\n\tal1.add(\"going\");\n\tal1.add(\"?\");\n\tal1.add(\" :) \");\n\tcout << \"al==al1 \" << al->equals(al1) << \"\\n\";\n\tal1.remove(1);\n\tcout << \"al==al1 \" << al->equals(al1) << \"\\n\";\n}\nint main() {\n\tinit();\n\ttestEquals();\n\tcout << \"forEach:\\n\";\n\tauto func = [](string x) -> void { cout << x << \" \"; };\n\tal->forEach(func);\n\tcout << \"\\n\";\n\tcout << al << \"\\n\";\n\tal->insert(0, \"Hi\");\n\tcout << al << \"\\n\";\n\tal->insert(al->size() - 1, \"Hi\");\n\tcout << al << \"\\n\";\n\tal->insert(al->size(), \"Hi\");\n\tcout << al << \"\\n\";\n\tcout << al->indexOf(\"Hi\") << \"\\n\";\n\tcout << al->indexOf(\"Quanwei\") << \"\\n\";\n\tcout << al->lastIndexOf(\"Quanwei\") << \"\\n\";\n\tcout << al->lastIndexOf(\"Quanwe\") << \"\\n\";\n\tcout << al << \"\\n\";\n\ttry {\n\t\tcout << al->at(3) << \"\\n\";\n\t\tcout << al->at(100) << \"\\n\";\n\t}\n\tcatch (const char* e) {\n\t\tcerr << e << '\\n';\n\t}\n\ttry {\n\t\tcout << \"remove: \" << al->remove(1) << '\\n';\n\t\tcout << \"remove: \" << al->remove(2) << '\\n';\n\t\tcout << \"remove: \" << al->remove(3) << '\\n';\n\t\tcout << \"remove: \" << al->remove(103) << '\\n';\n\t}\n\tcatch (const char* e) {\n\t\tcerr << e << '\\n';\n\t}\n\tcout << al << \"\\n\";\n\tal->~ArrayList();\n\tcout << al << \"\\n\";\n\n\tauto al1 = new ArrayList<int>();\n\tcout << al1;\n\tcout << \"\\n\";\n\tcout << al << \"\\n\";\n\tal->reverse();\n\tcout << al << \"\\n\";\n\n\n\treturn 0;\n}\n\n```\n","source":"_posts/线性表-数组.md","raw":"---\ntitle: 线性表 - 数组\ndate: 2022-03-09 12:39:19\ntags: Data Structure\n---\n\n# 线性表\n\n---\n\n## 1. 数组\n<!-- more -->\n```cpp\n#ifndef __ARRAYLIST_H__\n#define __ARRAYLIST_H__\n#include <ostream> // ostream\n#include <cstring> // memset\n\ntemplate <class T>\nclass ArrayList {\nprivate:\n\tT* __array;\n\n\tsize_t __capacity;\n\n\tsize_t cur;\n\n\tconst static size_t DEFAULT_LENGTH;\n\t/**\n\t * 使用特定值n分配内存\n\t * @param n 初始元素的个数\n\t * @return ArrayList对象的引用\n\t */\n\tArrayList& create(size_t n);\n\t/**\n\t * 使用默认值分配内存\n\t * @return ArrayList对象的引用\n\t */\n\tArrayList& recreate();\n\t/**\n\t * i<->j\n\t * @param i\n\t * @param j\n\t */\n\tvoid swap(int i, int j);\n\npublic:\n\t/**\n\t * 初始化(使用默认值)\n\t *\n\t */\n\tArrayList();\n\n\t/**\n\t * 初始化\n\t *\n\t * @param n 初始化元素的个数\n\t */\n\tArrayList(size_t n);\n\t/**\n\t * 获取当前已经使用的数组大小\n\t *\n\t * @return cur\n\t */\n\tsize_t size();\n\t/**\n\t * 获取分配的数组最大长度\n\t *\n\t * @return __capacity\n\t */\n\tsize_t capacity();\n\t/**\n\t * 获取元素对应的下标(从前到后)\n\t * @param t 待查找的元素\n\t * @return 元素对应的下标, 或者-1(表示没有找到)\n\t */\n\tlong long indexOf(const T& t);\n\t/**\n\t * 获取元素对应的下标(从后到前)\n\t * @param t 待查找的元素\n\t * @return 元素对应的下标, 或者-1(表示没有找到)\n\t */\n\tlong long lastIndexOf(const T& t);\n\t/**\n\t * 获取下标对应的元素\n\t * @param i 下标\n\t * @throws Index out of length\n\t * @return 如果没报错: 下标对应的元素\n\t */\n\tT& at(size_t i);\n\t/**\n\t * 添加新元素\n\t *\n\t * @param t 待添加的元素\n\t */\n\tvoid add(const T& t);\n\t/**\n\t * 插入元素\n\t *\n\t * @param i 待插入的下标\n\t * @param t 待插入的元素\n\t */\n\tvoid insert(size_t i, const T& t);\n\t/**\n\t * 删除指定元素\n\t *\n\t * @param i 待删的元素的下标\n\t * @throws Exception : Index out of range\n\t * @return 被删除的元素\n\t */\n\tT remove(size_t);\n\t/**\n\t * 判断是否为空(没有元素)\n\t * @return true如果为空, 否则false\n\t */\n\tbool empty();\n\t/**\n\t * 释放内存&指针置空\n\t */\n\t~ArrayList();\n\n\t/**\n\t * 对每一个元素做func操作\n\t *\n\t * @param func 消费函数\n\t */\n\tvoid forEach(void (*func)(T));\n\n\t/**\n\t * 判断是否相同\n\t * @param al 需要判断的数组\n\t * @return true 相同, 否则false\n\t */\n\tbool equals(ArrayList<T>& al);\n\t/**\n\t * 反转数组\n\t */\n\tvoid reverse();\n\t/**\n\t * 部分反转数组\n\t * @param i 开始下标(包括)\n\t * @param j 结束下标(包括)\n\t */\n\tvoid reverse(int i, int j);\n\n\tfriend bool operator==(ArrayList<T>& al1, ArrayList<T>& al2);\n\n\tfriend bool operator!=(ArrayList<T>& al1, ArrayList<T>& al2);\n\n\t/**\n\t * 将数组元素输出到标准流\n\t * @param os 标准输出流对象\n\t * @param al 数组对象\n\t * @return 标准输出流对象\n\t */\n\ttemplate <class U>\n\tfriend std::ostream& operator<<(std::ostream& os, const ArrayList<U>& al);\n\t/**\n\t * 将数组元素输出到标准流\n\t * @param os 标准输出流对象\n\t * @param al 数组对象的指针\n\t * @return 标准输出流对象\n\t */\n\ttemplate <class U>\n\tfriend std::ostream& operator<<(std::ostream& os, const ArrayList<U>* al);\n};\n\ntemplate <class T>\nconst size_t ArrayList<T>::DEFAULT_LENGTH = 8;\n\ntemplate <class T>\nArrayList<T>& ArrayList<T>::create(size_t n) {\n\t__capacity = n;\n\tcur = 0;\n\t__array = new T[n];\n\tmemset(__array, 0, n * sizeof(T));\n\treturn *this;\n}\n\ntemplate <class T>\nArrayList<T>& ArrayList<T>::recreate() {\n\tT* a = new T[__capacity * 2];\n\tmemset(a, 0, __capacity * 2 * sizeof(T));\n\tfor (size_t i = 0, l = __capacity; i < l; i++) {\n\t\ta[i] = __array[i];\n\t}\n\t__capacity *= 2;\n\tdelete[] __array;\n\t__array = a;\n\treturn *this;\n}\ntemplate <class T>\nvoid ArrayList<T>::swap(int i, int j) {\n\tT tmp = this->__array[i];\n\tthis->__array[i] = this->__array[j];\n\tthis->__array[j] = tmp;\n}\n\ntemplate <class T>\nArrayList<T>::ArrayList() {\n\tcreate(DEFAULT_LENGTH); // 不接收\n}\n\ntemplate <class T>\nArrayList<T>::ArrayList(size_t n) {\n\tcreate(n);\n}\n\ntemplate <class T>\nsize_t ArrayList<T>::size() {\n\treturn cur;\n}\n\ntemplate <class T>\nsize_t ArrayList<T>::capacity() {\n\treturn __capacity;\n}\n\ntemplate <class T>\nlong long ArrayList<T>::indexOf(const T& t) {\n\tfor (size_t i = 0; i < cur; i++) {\n\t\tif (__array[i] == t)\n\t\t\treturn i;\n\t}\n\treturn -1ll;\n}\n\ntemplate <class T>\nlong long ArrayList<T>::lastIndexOf(const T& t) {\n\tfor (long long i = cur - 1; i >= 0; i--) {\n\t\tif (__array[i] == t)\n\t\t\treturn i;\n\t}\n\treturn -1ll;\n}\n\ntemplate <class T>\nT& ArrayList<T>::at(size_t i) {\n\tif (i >= __capacity || i < 0)\n\t\tthrow \"Exception : Index out of range!\";\n\treturn __array[i];\n}\n\ntemplate <class T>\nvoid ArrayList<T>::add(const T& t) {\n\tif (cur == __capacity)\n\t\trecreate();\n\t__array[cur++] = t;\n}\n\ntemplate <class T>\nvoid ArrayList<T>::insert(size_t i, const T& t) {\n\tif (cur >= __capacity)\n\t\trecreate();\n\tfor (size_t k = cur; k > i; k--) {\n\t\t__array[k] = __array[k - 1];\n\t}\n\t__array[i] = t;\n\tcur++;\n}\n\ntemplate <class T>\nT ArrayList<T>::remove(size_t i) {\n\tif (i >= __capacity || i < 0)\n\t\tthrow \"Exception : Index out of range :(\";\n\tT t = move(__array[i]); // 不能返回引用\n\tfor (size_t k = i; k < cur - 1; k++) {\n\t\t__array[k] = __array[k + 1];\n\t}\n\t--cur;\n\treturn t;\n}\n\ntemplate <class T>\nbool ArrayList<T>::empty() {\n\treturn cur == 0 ? true : false;\n}\n\ntemplate <class T>\nArrayList<T>::~ArrayList() {\n\tdelete[] __array; // 还可以调用?\n\t__array = nullptr;\n}\n\ntemplate <class T>\nvoid ArrayList<T>::forEach(void (*func)(T)) {\n\tfor (size_t i = 0; i < cur; i++) {\n\t\tfunc(__array[i]);\n\t}\n}\ntemplate <class T>\nbool ArrayList<T>::equals(ArrayList<T>& al) {\n\tif (this->cur != al.size())\n\t\treturn false;\n\tfor (size_t i = 0; i < this->cur; i++) {\n\t\tif (__array[i] != al.at(i))\n\t\t\treturn false;\n\t}\n\treturn true;\n}\ntemplate <class T>\nvoid ArrayList<T>::reverse() {\n\treverse(0, cur);\n}\n\ntemplate <class T>\nvoid ArrayList<T>::reverse(int i, int j) {\n\tif (i >= j)\n\t\treturn;\n\tswap(i, j);\n\treverse(++i, --j);\n}\n\n\ntemplate <class U>\nstd::ostream& operator<<(std::ostream& os, const ArrayList<U>& l) {\n\tif (l.__array != nullptr)\n\t\tfor (size_t i = 0; i < l.cur; i++) {\n\t\t\tos << *(l.__array + i) << \" \";\n\t\t}\n\telse\n\t\tos << \"null \";\n\treturn os;\n}\n\ntemplate <class U>\nstd::ostream& operator<<(std::ostream& os, const ArrayList<U>* l) {\n\tif (l->__array != nullptr)\n\t\tfor (size_t i = 0; i < l->cur; i++) {\n\t\t\tos << *(l->__array + i) << \" \";\n\t\t}\n\telse\n\t\tos << \"null \";\n\treturn os;\n}\n#endif\n```\n\n## 2. 数组测试代码\n\n```cpp\n#include <iostream>\n#include \"ArrayList.h\"\n\nusing namespace std;\n\nArrayList<string>* al = nullptr;\nArrayList<string> al1;\n\nvoid init() {\n\tal = new ArrayList<string>();\n\tcout << al->empty() << \"\\n\";\n\tal->add(\"Hello\");\n\tal->add(\"Tang\");\n\tal->add(\"Quanwei\");\n\tal->add(\".\");\n\tal->add(\"How's\");\n\tal->add(\"everything\");\n\tal->add(\"going\");\n\tal->add(\"?\");\n\tal->add(\" :) \");\n}\nvoid testEquals() {\n\tal1.add(\"Hello\");\n\tal1.add(\"Tang\");\n\tal1.add(\"Quanwei\");\n\tal1.add(\".\");\n\tal1.add(\"How's\");\n\tal1.add(\"everything\");\n\tal1.add(\"going\");\n\tal1.add(\"?\");\n\tal1.add(\" :) \");\n\tcout << \"al==al1 \" << al->equals(al1) << \"\\n\";\n\tal1.remove(1);\n\tcout << \"al==al1 \" << al->equals(al1) << \"\\n\";\n}\nint main() {\n\tinit();\n\ttestEquals();\n\tcout << \"forEach:\\n\";\n\tauto func = [](string x) -> void { cout << x << \" \"; };\n\tal->forEach(func);\n\tcout << \"\\n\";\n\tcout << al << \"\\n\";\n\tal->insert(0, \"Hi\");\n\tcout << al << \"\\n\";\n\tal->insert(al->size() - 1, \"Hi\");\n\tcout << al << \"\\n\";\n\tal->insert(al->size(), \"Hi\");\n\tcout << al << \"\\n\";\n\tcout << al->indexOf(\"Hi\") << \"\\n\";\n\tcout << al->indexOf(\"Quanwei\") << \"\\n\";\n\tcout << al->lastIndexOf(\"Quanwei\") << \"\\n\";\n\tcout << al->lastIndexOf(\"Quanwe\") << \"\\n\";\n\tcout << al << \"\\n\";\n\ttry {\n\t\tcout << al->at(3) << \"\\n\";\n\t\tcout << al->at(100) << \"\\n\";\n\t}\n\tcatch (const char* e) {\n\t\tcerr << e << '\\n';\n\t}\n\ttry {\n\t\tcout << \"remove: \" << al->remove(1) << '\\n';\n\t\tcout << \"remove: \" << al->remove(2) << '\\n';\n\t\tcout << \"remove: \" << al->remove(3) << '\\n';\n\t\tcout << \"remove: \" << al->remove(103) << '\\n';\n\t}\n\tcatch (const char* e) {\n\t\tcerr << e << '\\n';\n\t}\n\tcout << al << \"\\n\";\n\tal->~ArrayList();\n\tcout << al << \"\\n\";\n\n\tauto al1 = new ArrayList<int>();\n\tcout << al1;\n\tcout << \"\\n\";\n\tcout << al << \"\\n\";\n\tal->reverse();\n\tcout << al << \"\\n\";\n\n\n\treturn 0;\n}\n\n```\n","slug":"线性表-数组","published":1,"updated":"2022-04-15T09:57:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5vi006tlv9e5aps81pt","content":"<h1 id=\"线性表\"><a href=\"#线性表\" class=\"headerlink\" title=\"线性表\"></a>线性表</h1><hr>\n<h2 id=\"1-数组\"><a href=\"#1-数组\" class=\"headerlink\" title=\"1. 数组\"></a>1. 数组</h2><span id=\"more\"></span>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> __ARRAYLIST_H__</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __ARRAYLIST_H__</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ostream&gt;</span> <span class=\"comment\">// ostream</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span> <span class=\"comment\">// memset</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ArrayList</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tT* __array;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">size_t</span> __capacity;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">size_t</span> cur;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">static</span> <span class=\"type\">size_t</span> DEFAULT_LENGTH;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 使用特定值n分配内存</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param n 初始元素的个数</span></span><br><span class=\"line\"><span class=\"comment\">\t * @return ArrayList对象的引用</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\">ArrayList&amp; <span class=\"title\">create</span><span class=\"params\">(<span class=\"type\">size_t</span> n)</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 使用默认值分配内存</span></span><br><span class=\"line\"><span class=\"comment\">\t * @return ArrayList对象的引用</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\">ArrayList&amp; <span class=\"title\">recreate</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * i&lt;-&gt;j</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param i</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param j</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 初始化(使用默认值)</span></span><br><span class=\"line\"><span class=\"comment\">\t *</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"built_in\">ArrayList</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 初始化</span></span><br><span class=\"line\"><span class=\"comment\">\t *</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param n 初始化元素的个数</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"built_in\">ArrayList</span>(<span class=\"type\">size_t</span> n);</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 获取当前已经使用的数组大小</span></span><br><span class=\"line\"><span class=\"comment\">\t *</span></span><br><span class=\"line\"><span class=\"comment\">\t * @return cur</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">size_t</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 获取分配的数组最大长度</span></span><br><span class=\"line\"><span class=\"comment\">\t *</span></span><br><span class=\"line\"><span class=\"comment\">\t * @return __capacity</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">size_t</span> <span class=\"title\">capacity</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 获取元素对应的下标(从前到后)</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param t 待查找的元素</span></span><br><span class=\"line\"><span class=\"comment\">\t * @return 元素对应的下标, 或者-1(表示没有找到)</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">indexOf</span><span class=\"params\">(<span class=\"type\">const</span> T&amp; t)</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 获取元素对应的下标(从后到前)</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param t 待查找的元素</span></span><br><span class=\"line\"><span class=\"comment\">\t * @return 元素对应的下标, 或者-1(表示没有找到)</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">lastIndexOf</span><span class=\"params\">(<span class=\"type\">const</span> T&amp; t)</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 获取下标对应的元素</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param i 下标</span></span><br><span class=\"line\"><span class=\"comment\">\t * @throws Index out of length</span></span><br><span class=\"line\"><span class=\"comment\">\t * @return 如果没报错: 下标对应的元素</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\">T&amp; <span class=\"title\">at</span><span class=\"params\">(<span class=\"type\">size_t</span> i)</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 添加新元素</span></span><br><span class=\"line\"><span class=\"comment\">\t *</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param t 待添加的元素</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">const</span> T&amp; t)</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 插入元素</span></span><br><span class=\"line\"><span class=\"comment\">\t *</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param i 待插入的下标</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param t 待插入的元素</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"type\">size_t</span> i, <span class=\"type\">const</span> T&amp; t)</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 删除指定元素</span></span><br><span class=\"line\"><span class=\"comment\">\t *</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param i 待删的元素的下标</span></span><br><span class=\"line\"><span class=\"comment\">\t * @throws Exception : Index out of range</span></span><br><span class=\"line\"><span class=\"comment\">\t * @return 被删除的元素</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\">T <span class=\"title\">remove</span><span class=\"params\">(<span class=\"type\">size_t</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 判断是否为空(没有元素)</span></span><br><span class=\"line\"><span class=\"comment\">\t * @return true如果为空, 否则false</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">empty</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 释放内存&amp;指针置空</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t~<span class=\"built_in\">ArrayList</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 对每一个元素做func操作</span></span><br><span class=\"line\"><span class=\"comment\">\t *</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param func 消费函数</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">forEach</span><span class=\"params\">(<span class=\"type\">void</span> (*func)(T))</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 判断是否相同</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param al 需要判断的数组</span></span><br><span class=\"line\"><span class=\"comment\">\t * @return true 相同, 否则false</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">equals</span><span class=\"params\">(ArrayList&lt;T&gt;&amp; al)</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 反转数组</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">reverse</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 部分反转数组</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param i 开始下标(包括)</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param j 结束下标(包括)</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">friend</span> <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>==(ArrayList&lt;T&gt;&amp; al1, ArrayList&lt;T&gt;&amp; al2);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">friend</span> <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>!=(ArrayList&lt;T&gt;&amp; al1, ArrayList&lt;T&gt;&amp; al2);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 将数组元素输出到标准流</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param os 标准输出流对象</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param al 数组对象</span></span><br><span class=\"line\"><span class=\"comment\">\t * @return 标准输出流对象</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">U</span>&gt;</span><br><span class=\"line\">\t<span class=\"keyword\">friend</span> std::ostream&amp; <span class=\"keyword\">operator</span>&lt;&lt;(std::ostream&amp; os, <span class=\"type\">const</span> ArrayList&lt;U&gt;&amp; al);</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 将数组元素输出到标准流</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param os 标准输出流对象</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param al 数组对象的指针</span></span><br><span class=\"line\"><span class=\"comment\">\t * @return 标准输出流对象</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">U</span>&gt;</span><br><span class=\"line\">\t<span class=\"keyword\">friend</span> std::ostream&amp; <span class=\"keyword\">operator</span>&lt;&lt;(std::ostream&amp; os, <span class=\"type\">const</span> ArrayList&lt;U&gt;* al);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">size_t</span> ArrayList&lt;T&gt;::DEFAULT_LENGTH = <span class=\"number\">8</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">ArrayList&lt;T&gt;&amp; ArrayList&lt;T&gt;::<span class=\"built_in\">create</span>(<span class=\"type\">size_t</span> n) &#123;</span><br><span class=\"line\">\t__capacity = n;</span><br><span class=\"line\">\tcur = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t__array = <span class=\"keyword\">new</span> T[n];</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(__array, <span class=\"number\">0</span>, n * <span class=\"built_in\">sizeof</span>(T));</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">ArrayList&lt;T&gt;&amp; ArrayList&lt;T&gt;::<span class=\"built_in\">recreate</span>() &#123;</span><br><span class=\"line\">\tT* a = <span class=\"keyword\">new</span> T[__capacity * <span class=\"number\">2</span>];</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(a, <span class=\"number\">0</span>, __capacity * <span class=\"number\">2</span> * <span class=\"built_in\">sizeof</span>(T));</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>, l = __capacity; i &lt; l; i++) &#123;</span><br><span class=\"line\">\t\ta[i] = __array[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t__capacity *= <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span>[] __array;</span><br><span class=\"line\">\t__array = a;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> ArrayList&lt;T&gt;::<span class=\"built_in\">swap</span>(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j) &#123;</span><br><span class=\"line\">\tT tmp = <span class=\"keyword\">this</span>-&gt;__array[i];</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;__array[i] = <span class=\"keyword\">this</span>-&gt;__array[j];</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;__array[j] = tmp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">ArrayList&lt;T&gt;::<span class=\"built_in\">ArrayList</span>() &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">create</span>(DEFAULT_LENGTH); <span class=\"comment\">// 不接收</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">ArrayList&lt;T&gt;::<span class=\"built_in\">ArrayList</span>(<span class=\"type\">size_t</span> n) &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">create</span>(n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">size_t</span> ArrayList&lt;T&gt;::<span class=\"built_in\">size</span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> cur;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">size_t</span> ArrayList&lt;T&gt;::<span class=\"built_in\">capacity</span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> __capacity;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> ArrayList&lt;T&gt;::<span class=\"built_in\">indexOf</span>(<span class=\"type\">const</span> T&amp; t) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; cur; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (__array[i] == t)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1ll</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> ArrayList&lt;T&gt;::<span class=\"built_in\">lastIndexOf</span>(<span class=\"type\">const</span> T&amp; t) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">long</span> <span class=\"type\">long</span> i = cur - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (__array[i] == t)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1ll</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">T&amp; ArrayList&lt;T&gt;::<span class=\"built_in\">at</span>(<span class=\"type\">size_t</span> i) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (i &gt;= __capacity || i &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"string\">&quot;Exception : Index out of range!&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> __array[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> ArrayList&lt;T&gt;::<span class=\"built_in\">add</span>(<span class=\"type\">const</span> T&amp; t) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (cur == __capacity)</span><br><span class=\"line\">\t\t<span class=\"built_in\">recreate</span>();</span><br><span class=\"line\">\t__array[cur++] = t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> ArrayList&lt;T&gt;::<span class=\"built_in\">insert</span>(<span class=\"type\">size_t</span> i, <span class=\"type\">const</span> T&amp; t) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (cur &gt;= __capacity)</span><br><span class=\"line\">\t\t<span class=\"built_in\">recreate</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> k = cur; k &gt; i; k--) &#123;</span><br><span class=\"line\">\t\t__array[k] = __array[k - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t__array[i] = t;</span><br><span class=\"line\">\tcur++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">T ArrayList&lt;T&gt;::<span class=\"built_in\">remove</span>(<span class=\"type\">size_t</span> i) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (i &gt;= __capacity || i &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"string\">&quot;Exception : Index out of range :(&quot;</span>;</span><br><span class=\"line\">\tT t = <span class=\"built_in\">move</span>(__array[i]); <span class=\"comment\">// 不能返回引用</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> k = i; k &lt; cur - <span class=\"number\">1</span>; k++) &#123;</span><br><span class=\"line\">\t\t__array[k] = __array[k + <span class=\"number\">1</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t--cur;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">bool</span> ArrayList&lt;T&gt;::<span class=\"built_in\">empty</span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> cur == <span class=\"number\">0</span> ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">ArrayList&lt;T&gt;::~<span class=\"built_in\">ArrayList</span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span>[] __array; <span class=\"comment\">// 还可以调用?</span></span><br><span class=\"line\">\t__array = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> ArrayList&lt;T&gt;::forEach(<span class=\"built_in\">void</span> (*func)(T)) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; cur; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">func</span>(__array[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">bool</span> ArrayList&lt;T&gt;::<span class=\"built_in\">equals</span>(ArrayList&lt;T&gt;&amp; al) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>-&gt;cur != al.<span class=\"built_in\">size</span>())</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>-&gt;cur; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (__array[i] != al.<span class=\"built_in\">at</span>(i))</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> ArrayList&lt;T&gt;::<span class=\"built_in\">reverse</span>() &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">reverse</span>(<span class=\"number\">0</span>, cur);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> ArrayList&lt;T&gt;::<span class=\"built_in\">reverse</span>(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (i &gt;= j)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">swap</span>(i, j);</span><br><span class=\"line\">\t<span class=\"built_in\">reverse</span>(++i, --j);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">U</span>&gt;</span><br><span class=\"line\">std::ostream&amp; <span class=\"keyword\">operator</span>&lt;&lt;(std::ostream&amp; os, <span class=\"type\">const</span> ArrayList&lt;U&gt;&amp; l) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (l.__array != <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; l.cur; i++) &#123;</span><br><span class=\"line\">\t\t\tos &lt;&lt; *(l.__array + i) &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\tos &lt;&lt; <span class=\"string\">&quot;null &quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> os;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">U</span>&gt;</span><br><span class=\"line\">std::ostream&amp; <span class=\"keyword\">operator</span>&lt;&lt;(std::ostream&amp; os, <span class=\"type\">const</span> ArrayList&lt;U&gt;* l) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (l-&gt;__array != <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; l-&gt;cur; i++) &#123;</span><br><span class=\"line\">\t\t\tos &lt;&lt; *(l-&gt;__array + i) &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\tos &lt;&lt; <span class=\"string\">&quot;null &quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> os;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-数组测试代码\"><a href=\"#2-数组测试代码\" class=\"headerlink\" title=\"2. 数组测试代码\"></a>2. 数组测试代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;ArrayList.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\">ArrayList&lt;string&gt;* al = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">ArrayList&lt;string&gt; al1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tal = <span class=\"keyword\">new</span> <span class=\"built_in\">ArrayList</span>&lt;string&gt;();</span><br><span class=\"line\">\tcout &lt;&lt; al-&gt;<span class=\"built_in\">empty</span>() &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">\tal-&gt;<span class=\"built_in\">add</span>(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">\tal-&gt;<span class=\"built_in\">add</span>(<span class=\"string\">&quot;Tang&quot;</span>);</span><br><span class=\"line\">\tal-&gt;<span class=\"built_in\">add</span>(<span class=\"string\">&quot;Quanwei&quot;</span>);</span><br><span class=\"line\">\tal-&gt;<span class=\"built_in\">add</span>(<span class=\"string\">&quot;.&quot;</span>);</span><br><span class=\"line\">\tal-&gt;<span class=\"built_in\">add</span>(<span class=\"string\">&quot;How&#x27;s&quot;</span>);</span><br><span class=\"line\">\tal-&gt;<span class=\"built_in\">add</span>(<span class=\"string\">&quot;everything&quot;</span>);</span><br><span class=\"line\">\tal-&gt;<span class=\"built_in\">add</span>(<span class=\"string\">&quot;going&quot;</span>);</span><br><span class=\"line\">\tal-&gt;<span class=\"built_in\">add</span>(<span class=\"string\">&quot;?&quot;</span>);</span><br><span class=\"line\">\tal-&gt;<span class=\"built_in\">add</span>(<span class=\"string\">&quot; :) &quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">testEquals</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tal1.<span class=\"built_in\">add</span>(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">\tal1.<span class=\"built_in\">add</span>(<span class=\"string\">&quot;Tang&quot;</span>);</span><br><span class=\"line\">\tal1.<span class=\"built_in\">add</span>(<span class=\"string\">&quot;Quanwei&quot;</span>);</span><br><span class=\"line\">\tal1.<span class=\"built_in\">add</span>(<span class=\"string\">&quot;.&quot;</span>);</span><br><span class=\"line\">\tal1.<span class=\"built_in\">add</span>(<span class=\"string\">&quot;How&#x27;s&quot;</span>);</span><br><span class=\"line\">\tal1.<span class=\"built_in\">add</span>(<span class=\"string\">&quot;everything&quot;</span>);</span><br><span class=\"line\">\tal1.<span class=\"built_in\">add</span>(<span class=\"string\">&quot;going&quot;</span>);</span><br><span class=\"line\">\tal1.<span class=\"built_in\">add</span>(<span class=\"string\">&quot;?&quot;</span>);</span><br><span class=\"line\">\tal1.<span class=\"built_in\">add</span>(<span class=\"string\">&quot; :) &quot;</span>);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;al==al1 &quot;</span> &lt;&lt; al-&gt;<span class=\"built_in\">equals</span>(al1) &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">\tal1.<span class=\"built_in\">remove</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;al==al1 &quot;</span> &lt;&lt; al-&gt;<span class=\"built_in\">equals</span>(al1) &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">init</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">testEquals</span>();</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;forEach:\\n&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> func = [](string x) -&gt; <span class=\"type\">void</span> &#123; cout &lt;&lt; x &lt;&lt; <span class=\"string\">&quot; &quot;</span>; &#125;;</span><br><span class=\"line\">\tal-&gt;forEach(func);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">\tcout &lt;&lt; al &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">\tal-&gt;<span class=\"built_in\">insert</span>(<span class=\"number\">0</span>, <span class=\"string\">&quot;Hi&quot;</span>);</span><br><span class=\"line\">\tcout &lt;&lt; al &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">\tal-&gt;<span class=\"built_in\">insert</span>(al-&gt;<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>, <span class=\"string\">&quot;Hi&quot;</span>);</span><br><span class=\"line\">\tcout &lt;&lt; al &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">\tal-&gt;<span class=\"built_in\">insert</span>(al-&gt;<span class=\"built_in\">size</span>(), <span class=\"string\">&quot;Hi&quot;</span>);</span><br><span class=\"line\">\tcout &lt;&lt; al &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">\tcout &lt;&lt; al-&gt;<span class=\"built_in\">indexOf</span>(<span class=\"string\">&quot;Hi&quot;</span>) &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">\tcout &lt;&lt; al-&gt;<span class=\"built_in\">indexOf</span>(<span class=\"string\">&quot;Quanwei&quot;</span>) &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">\tcout &lt;&lt; al-&gt;<span class=\"built_in\">lastIndexOf</span>(<span class=\"string\">&quot;Quanwei&quot;</span>) &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">\tcout &lt;&lt; al-&gt;<span class=\"built_in\">lastIndexOf</span>(<span class=\"string\">&quot;Quanwe&quot;</span>) &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">\tcout &lt;&lt; al &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; al-&gt;<span class=\"built_in\">at</span>(<span class=\"number\">3</span>) &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">\t\tcout &lt;&lt; al-&gt;<span class=\"built_in\">at</span>(<span class=\"number\">100</span>) &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">catch</span> (<span class=\"type\">const</span> <span class=\"type\">char</span>* e) &#123;</span><br><span class=\"line\">\t\tcerr &lt;&lt; e &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;remove: &quot;</span> &lt;&lt; al-&gt;<span class=\"built_in\">remove</span>(<span class=\"number\">1</span>) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;remove: &quot;</span> &lt;&lt; al-&gt;<span class=\"built_in\">remove</span>(<span class=\"number\">2</span>) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;remove: &quot;</span> &lt;&lt; al-&gt;<span class=\"built_in\">remove</span>(<span class=\"number\">3</span>) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;remove: &quot;</span> &lt;&lt; al-&gt;<span class=\"built_in\">remove</span>(<span class=\"number\">103</span>) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">catch</span> (<span class=\"type\">const</span> <span class=\"type\">char</span>* e) &#123;</span><br><span class=\"line\">\t\tcerr &lt;&lt; e &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; al &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">\tal-&gt;~<span class=\"built_in\">ArrayList</span>();</span><br><span class=\"line\">\tcout &lt;&lt; al &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> al1 = <span class=\"keyword\">new</span> <span class=\"built_in\">ArrayList</span>&lt;<span class=\"type\">int</span>&gt;();</span><br><span class=\"line\">\tcout &lt;&lt; al1;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">\tcout &lt;&lt; al &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">\tal-&gt;<span class=\"built_in\">reverse</span>();</span><br><span class=\"line\">\tcout &lt;&lt; al &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"cover":false,"excerpt":"<h1 id=\"线性表\"><a href=\"#线性表\" class=\"headerlink\" title=\"线性表\"></a>线性表</h1><hr>\n<h2 id=\"1-数组\"><a href=\"#1-数组\" class=\"headerlink\" title=\"1. 数组\"></a>1. 数组</h2>","more":"<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> __ARRAYLIST_H__</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __ARRAYLIST_H__</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ostream&gt;</span> <span class=\"comment\">// ostream</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span> <span class=\"comment\">// memset</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ArrayList</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tT* __array;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">size_t</span> __capacity;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">size_t</span> cur;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">static</span> <span class=\"type\">size_t</span> DEFAULT_LENGTH;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 使用特定值n分配内存</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param n 初始元素的个数</span></span><br><span class=\"line\"><span class=\"comment\">\t * @return ArrayList对象的引用</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\">ArrayList&amp; <span class=\"title\">create</span><span class=\"params\">(<span class=\"type\">size_t</span> n)</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 使用默认值分配内存</span></span><br><span class=\"line\"><span class=\"comment\">\t * @return ArrayList对象的引用</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\">ArrayList&amp; <span class=\"title\">recreate</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * i&lt;-&gt;j</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param i</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param j</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 初始化(使用默认值)</span></span><br><span class=\"line\"><span class=\"comment\">\t *</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"built_in\">ArrayList</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 初始化</span></span><br><span class=\"line\"><span class=\"comment\">\t *</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param n 初始化元素的个数</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"built_in\">ArrayList</span>(<span class=\"type\">size_t</span> n);</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 获取当前已经使用的数组大小</span></span><br><span class=\"line\"><span class=\"comment\">\t *</span></span><br><span class=\"line\"><span class=\"comment\">\t * @return cur</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">size_t</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 获取分配的数组最大长度</span></span><br><span class=\"line\"><span class=\"comment\">\t *</span></span><br><span class=\"line\"><span class=\"comment\">\t * @return __capacity</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">size_t</span> <span class=\"title\">capacity</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 获取元素对应的下标(从前到后)</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param t 待查找的元素</span></span><br><span class=\"line\"><span class=\"comment\">\t * @return 元素对应的下标, 或者-1(表示没有找到)</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">indexOf</span><span class=\"params\">(<span class=\"type\">const</span> T&amp; t)</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 获取元素对应的下标(从后到前)</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param t 待查找的元素</span></span><br><span class=\"line\"><span class=\"comment\">\t * @return 元素对应的下标, 或者-1(表示没有找到)</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">lastIndexOf</span><span class=\"params\">(<span class=\"type\">const</span> T&amp; t)</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 获取下标对应的元素</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param i 下标</span></span><br><span class=\"line\"><span class=\"comment\">\t * @throws Index out of length</span></span><br><span class=\"line\"><span class=\"comment\">\t * @return 如果没报错: 下标对应的元素</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\">T&amp; <span class=\"title\">at</span><span class=\"params\">(<span class=\"type\">size_t</span> i)</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 添加新元素</span></span><br><span class=\"line\"><span class=\"comment\">\t *</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param t 待添加的元素</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">const</span> T&amp; t)</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 插入元素</span></span><br><span class=\"line\"><span class=\"comment\">\t *</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param i 待插入的下标</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param t 待插入的元素</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"type\">size_t</span> i, <span class=\"type\">const</span> T&amp; t)</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 删除指定元素</span></span><br><span class=\"line\"><span class=\"comment\">\t *</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param i 待删的元素的下标</span></span><br><span class=\"line\"><span class=\"comment\">\t * @throws Exception : Index out of range</span></span><br><span class=\"line\"><span class=\"comment\">\t * @return 被删除的元素</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\">T <span class=\"title\">remove</span><span class=\"params\">(<span class=\"type\">size_t</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 判断是否为空(没有元素)</span></span><br><span class=\"line\"><span class=\"comment\">\t * @return true如果为空, 否则false</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">empty</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 释放内存&amp;指针置空</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t~<span class=\"built_in\">ArrayList</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 对每一个元素做func操作</span></span><br><span class=\"line\"><span class=\"comment\">\t *</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param func 消费函数</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">forEach</span><span class=\"params\">(<span class=\"type\">void</span> (*func)(T))</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 判断是否相同</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param al 需要判断的数组</span></span><br><span class=\"line\"><span class=\"comment\">\t * @return true 相同, 否则false</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">equals</span><span class=\"params\">(ArrayList&lt;T&gt;&amp; al)</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 反转数组</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">reverse</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 部分反转数组</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param i 开始下标(包括)</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param j 结束下标(包括)</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">friend</span> <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>==(ArrayList&lt;T&gt;&amp; al1, ArrayList&lt;T&gt;&amp; al2);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">friend</span> <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>!=(ArrayList&lt;T&gt;&amp; al1, ArrayList&lt;T&gt;&amp; al2);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 将数组元素输出到标准流</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param os 标准输出流对象</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param al 数组对象</span></span><br><span class=\"line\"><span class=\"comment\">\t * @return 标准输出流对象</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">U</span>&gt;</span><br><span class=\"line\">\t<span class=\"keyword\">friend</span> std::ostream&amp; <span class=\"keyword\">operator</span>&lt;&lt;(std::ostream&amp; os, <span class=\"type\">const</span> ArrayList&lt;U&gt;&amp; al);</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 将数组元素输出到标准流</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param os 标准输出流对象</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param al 数组对象的指针</span></span><br><span class=\"line\"><span class=\"comment\">\t * @return 标准输出流对象</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">U</span>&gt;</span><br><span class=\"line\">\t<span class=\"keyword\">friend</span> std::ostream&amp; <span class=\"keyword\">operator</span>&lt;&lt;(std::ostream&amp; os, <span class=\"type\">const</span> ArrayList&lt;U&gt;* al);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">size_t</span> ArrayList&lt;T&gt;::DEFAULT_LENGTH = <span class=\"number\">8</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">ArrayList&lt;T&gt;&amp; ArrayList&lt;T&gt;::<span class=\"built_in\">create</span>(<span class=\"type\">size_t</span> n) &#123;</span><br><span class=\"line\">\t__capacity = n;</span><br><span class=\"line\">\tcur = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t__array = <span class=\"keyword\">new</span> T[n];</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(__array, <span class=\"number\">0</span>, n * <span class=\"built_in\">sizeof</span>(T));</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">ArrayList&lt;T&gt;&amp; ArrayList&lt;T&gt;::<span class=\"built_in\">recreate</span>() &#123;</span><br><span class=\"line\">\tT* a = <span class=\"keyword\">new</span> T[__capacity * <span class=\"number\">2</span>];</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(a, <span class=\"number\">0</span>, __capacity * <span class=\"number\">2</span> * <span class=\"built_in\">sizeof</span>(T));</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>, l = __capacity; i &lt; l; i++) &#123;</span><br><span class=\"line\">\t\ta[i] = __array[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t__capacity *= <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span>[] __array;</span><br><span class=\"line\">\t__array = a;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> ArrayList&lt;T&gt;::<span class=\"built_in\">swap</span>(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j) &#123;</span><br><span class=\"line\">\tT tmp = <span class=\"keyword\">this</span>-&gt;__array[i];</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;__array[i] = <span class=\"keyword\">this</span>-&gt;__array[j];</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;__array[j] = tmp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">ArrayList&lt;T&gt;::<span class=\"built_in\">ArrayList</span>() &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">create</span>(DEFAULT_LENGTH); <span class=\"comment\">// 不接收</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">ArrayList&lt;T&gt;::<span class=\"built_in\">ArrayList</span>(<span class=\"type\">size_t</span> n) &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">create</span>(n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">size_t</span> ArrayList&lt;T&gt;::<span class=\"built_in\">size</span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> cur;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">size_t</span> ArrayList&lt;T&gt;::<span class=\"built_in\">capacity</span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> __capacity;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> ArrayList&lt;T&gt;::<span class=\"built_in\">indexOf</span>(<span class=\"type\">const</span> T&amp; t) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; cur; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (__array[i] == t)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1ll</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> ArrayList&lt;T&gt;::<span class=\"built_in\">lastIndexOf</span>(<span class=\"type\">const</span> T&amp; t) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">long</span> <span class=\"type\">long</span> i = cur - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (__array[i] == t)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1ll</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">T&amp; ArrayList&lt;T&gt;::<span class=\"built_in\">at</span>(<span class=\"type\">size_t</span> i) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (i &gt;= __capacity || i &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"string\">&quot;Exception : Index out of range!&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> __array[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> ArrayList&lt;T&gt;::<span class=\"built_in\">add</span>(<span class=\"type\">const</span> T&amp; t) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (cur == __capacity)</span><br><span class=\"line\">\t\t<span class=\"built_in\">recreate</span>();</span><br><span class=\"line\">\t__array[cur++] = t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> ArrayList&lt;T&gt;::<span class=\"built_in\">insert</span>(<span class=\"type\">size_t</span> i, <span class=\"type\">const</span> T&amp; t) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (cur &gt;= __capacity)</span><br><span class=\"line\">\t\t<span class=\"built_in\">recreate</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> k = cur; k &gt; i; k--) &#123;</span><br><span class=\"line\">\t\t__array[k] = __array[k - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t__array[i] = t;</span><br><span class=\"line\">\tcur++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">T ArrayList&lt;T&gt;::<span class=\"built_in\">remove</span>(<span class=\"type\">size_t</span> i) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (i &gt;= __capacity || i &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"string\">&quot;Exception : Index out of range :(&quot;</span>;</span><br><span class=\"line\">\tT t = <span class=\"built_in\">move</span>(__array[i]); <span class=\"comment\">// 不能返回引用</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> k = i; k &lt; cur - <span class=\"number\">1</span>; k++) &#123;</span><br><span class=\"line\">\t\t__array[k] = __array[k + <span class=\"number\">1</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t--cur;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">bool</span> ArrayList&lt;T&gt;::<span class=\"built_in\">empty</span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> cur == <span class=\"number\">0</span> ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">ArrayList&lt;T&gt;::~<span class=\"built_in\">ArrayList</span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span>[] __array; <span class=\"comment\">// 还可以调用?</span></span><br><span class=\"line\">\t__array = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> ArrayList&lt;T&gt;::forEach(<span class=\"built_in\">void</span> (*func)(T)) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; cur; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">func</span>(__array[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">bool</span> ArrayList&lt;T&gt;::<span class=\"built_in\">equals</span>(ArrayList&lt;T&gt;&amp; al) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>-&gt;cur != al.<span class=\"built_in\">size</span>())</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>-&gt;cur; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (__array[i] != al.<span class=\"built_in\">at</span>(i))</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> ArrayList&lt;T&gt;::<span class=\"built_in\">reverse</span>() &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">reverse</span>(<span class=\"number\">0</span>, cur);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> ArrayList&lt;T&gt;::<span class=\"built_in\">reverse</span>(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (i &gt;= j)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">swap</span>(i, j);</span><br><span class=\"line\">\t<span class=\"built_in\">reverse</span>(++i, --j);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">U</span>&gt;</span><br><span class=\"line\">std::ostream&amp; <span class=\"keyword\">operator</span>&lt;&lt;(std::ostream&amp; os, <span class=\"type\">const</span> ArrayList&lt;U&gt;&amp; l) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (l.__array != <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; l.cur; i++) &#123;</span><br><span class=\"line\">\t\t\tos &lt;&lt; *(l.__array + i) &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\tos &lt;&lt; <span class=\"string\">&quot;null &quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> os;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">U</span>&gt;</span><br><span class=\"line\">std::ostream&amp; <span class=\"keyword\">operator</span>&lt;&lt;(std::ostream&amp; os, <span class=\"type\">const</span> ArrayList&lt;U&gt;* l) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (l-&gt;__array != <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; l-&gt;cur; i++) &#123;</span><br><span class=\"line\">\t\t\tos &lt;&lt; *(l-&gt;__array + i) &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\tos &lt;&lt; <span class=\"string\">&quot;null &quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> os;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-数组测试代码\"><a href=\"#2-数组测试代码\" class=\"headerlink\" title=\"2. 数组测试代码\"></a>2. 数组测试代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;ArrayList.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\">ArrayList&lt;string&gt;* al = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">ArrayList&lt;string&gt; al1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tal = <span class=\"keyword\">new</span> <span class=\"built_in\">ArrayList</span>&lt;string&gt;();</span><br><span class=\"line\">\tcout &lt;&lt; al-&gt;<span class=\"built_in\">empty</span>() &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">\tal-&gt;<span class=\"built_in\">add</span>(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">\tal-&gt;<span class=\"built_in\">add</span>(<span class=\"string\">&quot;Tang&quot;</span>);</span><br><span class=\"line\">\tal-&gt;<span class=\"built_in\">add</span>(<span class=\"string\">&quot;Quanwei&quot;</span>);</span><br><span class=\"line\">\tal-&gt;<span class=\"built_in\">add</span>(<span class=\"string\">&quot;.&quot;</span>);</span><br><span class=\"line\">\tal-&gt;<span class=\"built_in\">add</span>(<span class=\"string\">&quot;How&#x27;s&quot;</span>);</span><br><span class=\"line\">\tal-&gt;<span class=\"built_in\">add</span>(<span class=\"string\">&quot;everything&quot;</span>);</span><br><span class=\"line\">\tal-&gt;<span class=\"built_in\">add</span>(<span class=\"string\">&quot;going&quot;</span>);</span><br><span class=\"line\">\tal-&gt;<span class=\"built_in\">add</span>(<span class=\"string\">&quot;?&quot;</span>);</span><br><span class=\"line\">\tal-&gt;<span class=\"built_in\">add</span>(<span class=\"string\">&quot; :) &quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">testEquals</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tal1.<span class=\"built_in\">add</span>(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">\tal1.<span class=\"built_in\">add</span>(<span class=\"string\">&quot;Tang&quot;</span>);</span><br><span class=\"line\">\tal1.<span class=\"built_in\">add</span>(<span class=\"string\">&quot;Quanwei&quot;</span>);</span><br><span class=\"line\">\tal1.<span class=\"built_in\">add</span>(<span class=\"string\">&quot;.&quot;</span>);</span><br><span class=\"line\">\tal1.<span class=\"built_in\">add</span>(<span class=\"string\">&quot;How&#x27;s&quot;</span>);</span><br><span class=\"line\">\tal1.<span class=\"built_in\">add</span>(<span class=\"string\">&quot;everything&quot;</span>);</span><br><span class=\"line\">\tal1.<span class=\"built_in\">add</span>(<span class=\"string\">&quot;going&quot;</span>);</span><br><span class=\"line\">\tal1.<span class=\"built_in\">add</span>(<span class=\"string\">&quot;?&quot;</span>);</span><br><span class=\"line\">\tal1.<span class=\"built_in\">add</span>(<span class=\"string\">&quot; :) &quot;</span>);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;al==al1 &quot;</span> &lt;&lt; al-&gt;<span class=\"built_in\">equals</span>(al1) &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">\tal1.<span class=\"built_in\">remove</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;al==al1 &quot;</span> &lt;&lt; al-&gt;<span class=\"built_in\">equals</span>(al1) &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">init</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">testEquals</span>();</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;forEach:\\n&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> func = [](string x) -&gt; <span class=\"type\">void</span> &#123; cout &lt;&lt; x &lt;&lt; <span class=\"string\">&quot; &quot;</span>; &#125;;</span><br><span class=\"line\">\tal-&gt;forEach(func);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">\tcout &lt;&lt; al &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">\tal-&gt;<span class=\"built_in\">insert</span>(<span class=\"number\">0</span>, <span class=\"string\">&quot;Hi&quot;</span>);</span><br><span class=\"line\">\tcout &lt;&lt; al &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">\tal-&gt;<span class=\"built_in\">insert</span>(al-&gt;<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>, <span class=\"string\">&quot;Hi&quot;</span>);</span><br><span class=\"line\">\tcout &lt;&lt; al &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">\tal-&gt;<span class=\"built_in\">insert</span>(al-&gt;<span class=\"built_in\">size</span>(), <span class=\"string\">&quot;Hi&quot;</span>);</span><br><span class=\"line\">\tcout &lt;&lt; al &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">\tcout &lt;&lt; al-&gt;<span class=\"built_in\">indexOf</span>(<span class=\"string\">&quot;Hi&quot;</span>) &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">\tcout &lt;&lt; al-&gt;<span class=\"built_in\">indexOf</span>(<span class=\"string\">&quot;Quanwei&quot;</span>) &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">\tcout &lt;&lt; al-&gt;<span class=\"built_in\">lastIndexOf</span>(<span class=\"string\">&quot;Quanwei&quot;</span>) &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">\tcout &lt;&lt; al-&gt;<span class=\"built_in\">lastIndexOf</span>(<span class=\"string\">&quot;Quanwe&quot;</span>) &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">\tcout &lt;&lt; al &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; al-&gt;<span class=\"built_in\">at</span>(<span class=\"number\">3</span>) &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">\t\tcout &lt;&lt; al-&gt;<span class=\"built_in\">at</span>(<span class=\"number\">100</span>) &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">catch</span> (<span class=\"type\">const</span> <span class=\"type\">char</span>* e) &#123;</span><br><span class=\"line\">\t\tcerr &lt;&lt; e &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;remove: &quot;</span> &lt;&lt; al-&gt;<span class=\"built_in\">remove</span>(<span class=\"number\">1</span>) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;remove: &quot;</span> &lt;&lt; al-&gt;<span class=\"built_in\">remove</span>(<span class=\"number\">2</span>) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;remove: &quot;</span> &lt;&lt; al-&gt;<span class=\"built_in\">remove</span>(<span class=\"number\">3</span>) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;remove: &quot;</span> &lt;&lt; al-&gt;<span class=\"built_in\">remove</span>(<span class=\"number\">103</span>) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">catch</span> (<span class=\"type\">const</span> <span class=\"type\">char</span>* e) &#123;</span><br><span class=\"line\">\t\tcerr &lt;&lt; e &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; al &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">\tal-&gt;~<span class=\"built_in\">ArrayList</span>();</span><br><span class=\"line\">\tcout &lt;&lt; al &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> al1 = <span class=\"keyword\">new</span> <span class=\"built_in\">ArrayList</span>&lt;<span class=\"type\">int</span>&gt;();</span><br><span class=\"line\">\tcout &lt;&lt; al1;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">\tcout &lt;&lt; al &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">\tal-&gt;<span class=\"built_in\">reverse</span>();</span><br><span class=\"line\">\tcout &lt;&lt; al &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"线性表 - 链表","date":"2022-03-09T04:39:19.000Z","_content":"\n# 线性表\n\n---\n\n## 1. 链表\n<!-- more -->\n```cpp\n#ifndef __LINKEDLIST_H_\n#define __LINKEDLIST_H__\n#include <bits/stdc++.h>\n/**\n *  @brief 单链表的节点\n *  @tparam T  节点元素类型(class类型比较适用)\n */\ntemplate <class T>\nclass Node {\npublic:\n\tT val;\n\tNode* next;\n\tNode() = default;\n\tNode(const T& t, Node* nxt = nullptr) : val(t), next(nxt) {}\n};\n/**\n *  @brief 头节点不为空的单链表\n *  @tparam T  节点元素类型(class类型比较适用)\n */\ntemplate <class T>\nclass LinkedList {\nprivate:\n\tNode<T>* __head;\n\tNode<T>* __tail;\n\tunsigned __size;\n\npublic:\n\t/**\n\t * 初始化\n\t */\n\tLinkedList() : __head(nullptr), __tail(nullptr), __size(0) {}\n\t/**\n\t * 初始化\n\t * @param a 数组\n\t * @param n 长度\n\t */\n\tLinkedList(T* a, int n);\n\t/**\n\t * 头插\n\t * @param t 待插元素\n\t */\n\tvoid insertHead(const T& t);\n\t/**\n\t * 尾插\n\t * @param t 待插元素\n\t */\n\tvoid insertTail(const T& t);\n\t/**\n\t * 按下标插入\n\t * @param i 下标\n\t * @param t 待插元素\n\t */\n\tvoid insert(unsigned i, const T& t);\n\t/**\n\t * 移除头节点\n\t * @return 被移除的节点值\n\t */\n\tT removeHead();\n\t/**\n\t * 移除尾节点\n\t * @return 被移除的节点值\n\t */\n\tT removeTail();\n\t/**\n\t * 移除元素\n\t * @param t 待语移除的元素\n\t * @return true 元素存在, 否则false\n\t */\n\tbool remove(const T& t);\n\t/**\n\t * 判断链表是否为空\n\t * @return true空, 否则false\n\t */\n\tbool empty() { return __size == 0 ? true : false; }\n\t/**\n\t * 获取链表长度\n\t * @return size\n\t */\n\tunsigned size() { return __size; }\n\t/**\n\t * 链表反转\n\t */\n\tvoid reverse();\n\t/**\n\t * 链表部分反转 { 0 -> i } , 下标从零开始\n\t * @param i 起始节点下标(包括)\n\t * @throws Exception : Index out of range !\n\t */\n\tvoid reverse(unsigned i);\n\t/**\n\t * 链表部分反转 { i -> j } , 下标从零开始\n\t * @param i 起始节点下标(包括)\n\t * @param j 结束节点下标(包括)\n\t * @throws Exception : Index out of range !\n\t */\n\tvoid reverse(unsigned i, unsigned j);\n\t/**\n\t * 由t获取元素的下标(从零开始)\n\t * @param t 待查找元素\n\t * @return 下标 或者 -1\n\t * @throws Exception : Empty List :(\n\t */\n\tint indexOf(T t);\n\t/**\n\t * 由下标获取元素\n\t * @param index 下标\n\t * @return 下标对应得元素\n\t * @throws Exception : Index out of range !\n\t */\n\tT at(int index);\n\t/**\n\t * 删除链表, 释放空间\n\t */\n\t~LinkedList();\n\t/**\n\t * 将链表元素输出到标准流\n\t * @param os 标准输出流对象\n\t * @param l 链表对象\n\t * @return 标准输出流对象\n\t */\n\ttemplate <class U>\n\tfriend std::ostream& operator<<(std::ostream& os, const LinkedList<U>& l);\n};\ntemplate <class T>\nLinkedList<T>::LinkedList(T* a, int n) {\n\tLinkedList();\n\tfor (; --n != -1;)\n\t\tinsertTail(a[n]);\n}\ntemplate <class T>\nvoid LinkedList<T>::insertHead(const T& t) {\n\tNode<T>* node = new Node<T>(t);\n\tif (__head == nullptr) {\n\t\t__head = node;\n\t\t__tail = __head;\n\t}\n\telse {\n\t\tnode->next = __head;\n\t\t__head = node;\n\t}\n\t++__size;\n}\ntemplate <class T>\nvoid LinkedList<T>::insertTail(const T& t) {\n\tNode<T>* node = new Node<T>(t);\n\tif (__tail == nullptr) {\n\t\t__tail = node;\n\t\t__head = __tail;\n\t}\n\telse {\n\t\t__tail->next = node;\n\t\t__tail = __tail->next;\n\t}\n\t++__size;\n}\ntemplate <class T>\nvoid LinkedList<T>::insert(unsigned i, const T& t) {\n\tNode<T>* node = new Node<T>(t);\n\t// 没有元素或i>__size\n\tif (__head == nullptr || i > __size) {\n\t\tinsertTail(t);\n\t\treturn;\n\t}\n\tif (i == 0) {\n\t\tinsertHead(t);\n\t\treturn;\n\t}\n\tNode<T>*pre = nullptr, *p = __head;\n\t// 从零开始\n\twhile (--i) {\n\t\tpre = p;\n\t\tp = p->next;\n\t}\n\t// 更新__tail\n\tnode->next = p;\n\tpre->next = node;\n\t++__size;\n}\ntemplate <class T>\nT LinkedList<T>::removeHead() {\n\tif (__size == 0)\n\t\tthrow \"Exception : Remove form an empty List :(\";\n\t--__size;\n\tNode<T>* p = __head;\n\tT ret = std::move(p->val);\n\t__head = __head->next;\n\tdelete p;\n\treturn ret;\n}\ntemplate <class T>\nT LinkedList<T>::removeTail() {\n\tif (__size == 0)\n\t\tthrow \"Exception : Remove form an empty List :(\";\n\t--__size;\n\tNode<T>* p = __head;\n\tfor (Node<T>* i = __head; i->next != nullptr; i = i->next)\n\t\tp = i;\n\tif (p == __head) { // 第一个\n\t\tT t = __head->val;\n\t\tdelete __head;\n\t\t__head = nullptr;\n\t\t__tail = nullptr;\n\t\treturn t;\n\t}\n\tNode<T>* node = p->next;\n\tT ret = std::move(node->val);\n\tp->next = nullptr;\n\t__tail = p;\n\tdelete node;\n\treturn ret;\n}\ntemplate <class T>\nbool LinkedList<T>::remove(const T& t) {\n\tif (__size == 0)\n\t\tthrow \"Exception : Remove form an empty List :(\";\n\tNode<T>* p = __head;\n\tNode<T>* i = __head;\n\t// 要删的前一个\n\tfor (; i != nullptr && i->val != t; i = i->next) {\n\t\tp = i;\n\t}\n\tif (i == nullptr) { // 没有\n\t\treturn false;\n\t}\n\tif (p == __head) { // 第一个\n\t\tremoveHead();\n\t\treturn true;\n\t}\n\tNode<T>* node = p->next;\n\tp->next = node->next;\n\tdelete node;\n\t--__size;\n\treturn true;\n}\ntemplate <class T>\nvoid LinkedList<T>::reverse() {\n\t__tail = __head;\n\tfor (Node<T>*p = __head->next, *pre = __head; p; pre->next = p) {\n\t\tNode<T>* node = p;\n\t\tp = p->next;\n\t\tnode->next = __head;\n\t\t__head = node;\n\t}\n}\ntemplate <class T>\nvoid LinkedList<T>::reverse(unsigned i) {\n\tif (i < 0 || i >= __size)\n\t\tthrow \"Exception : Index out of range !\";\n\tif (i == __size) {\n\t\treverse();\n\t\treturn;\n\t}\n\tNode<T>*tail = __head, *head = __head;\n\tfor (int k = 0; k < i; ++k) {\n\t\ttail = tail->next;\n\t}\n\tfor (Node<T>*p = __head->next, *pre = __head; p != tail; pre->next = p) {\n\t\tNode<T>* node = p;\n\t\tp = p->next;\n\t\tnode->next = __head;\n\t\t__head = node;\n\t}\n\thead->next = tail;\n}\ntemplate <class T>\nvoid LinkedList<T>::reverse(unsigned i, unsigned j) {\n\tif (i < 0 || i > j || j >= __size)\n\t\tthrow \"Exception : Index out of range !\";\n\tif (i == j)\n\t\treturn;\n\tif (i == 0) {\n\t\treverse(j);\n\t\treturn;\n\t}\n\tNode<T>*pre = __head, *s, *p = pre->next, *next = nullptr;\n\tint k = 1;\n\tfor (; k < i; ++k) { // find start\n\t\tpre = p;\n\t\tp = p->next;\n\t}\n\tfor (; k < j; ++k) // find end\n\t\tp = p->next;\n\tnext = p->next;\n\tp = pre->next;\n\tk = j - i + 1; // 操作次数\n\tfor (; k--;) { // 如法炮制\n\t\tNode<T>* node = p;\n\t\tp = p->next;\n\t\tnode->next = next;\n\t\tnext = node;\n\t}\n\tpre->next = next;\n}\ntemplate <class T>\nint LinkedList<T>::indexOf(T t) {\n\tif (__head == nullptr)\n\t\tthrow \"Exception : Empty List :(\";\n\tint index = 0;\n\tfor (Node<T>* p = __head; p != nullptr; p = p->next) {\n\t\tif (p->val == t)\n\t\t\treturn index;\n\t\t++index;\n\t}\n\treturn -1;\n}\ntemplate <class T>\nT LinkedList<T>::at(int i) {\n\tif (i < 0 || i >= __size)\n\t\tthrow \"Exception : Index out of range !\";\n\tNode<T>* p = __head;\n\tfor (; i--;)\n\t\tp = p->next;\n\treturn p->val;\n}\ntemplate <class T>\nLinkedList<T>::~LinkedList() {\n\twhile (__head != nullptr) {\n\t\tNode<T> p = __head;\n\t\t__head = __head->next;\n\t\tdelete p;\n\t}\n\t__tail = nullptr;\n}\ntemplate <class U>\nstd::ostream& operator<<(std::ostream& os, const LinkedList<U>& l) {\n\tif (l.__head != nullptr)\n\t\tfor (Node<U>* i = l.__head; i != nullptr; i = i->next) {\n\t\t\tos << i->val << \" \";\n\t\t}\n\telse\n\t\tos << \"null \";\n\treturn os;\n}\n#endif\n```\n\n## 2. 测试代码\n\n```cpp\n#include \"LinkedList.h\"\nusing namespace std;\nLinkedList<string>* ll;\nvoid init() {\n\tcout << \"----\\n初始化\\n\";\n\tll = new LinkedList<string>();\n\tll->insertHead(\"Quanwei\");\n\tll->insertHead(\"Tang\");\n\tll->insertHead(\"Hi\");\n\tll->insertTail(\"Hello\");\n\tll->insertTail(\"Linked\");\n\tll->insertTail(\"List\");\n\tll->insertTail(\"Node\");\n\tcout << \"init: \" << *ll << \"\\n\";\n}\nvoid testInsert() {\n\tcout << \"----\\n插入测试:\\n\";\n\tll->insert(0, \"芜湖~\");\n\tcout << \"insert: \\n\"\n\t\t << *ll << \"\\n\";\n\tll->insert(0, \"芜湖~\");\n\tcout << \"insert: \\n\"\n\t\t << *ll << \"\\n\";\n\tll->insert(ll->size(), \"尾巴前面一个~\");\n\tcout << \"insert: \\n\"\n\t\t << *ll << \"\\n\";\n\tll->insert(ll->size() + 1, \"尾巴后面一个~\");\n\tcout << \"insert: \\n\"\n\t\t << *ll << \"\\n\";\n\tll->insert(100, \"ll->insert(100, \\\"\\\");\");\n\tcout << \"insert: \\n\"\n\t\t << *ll << \"\\n\";\n\tll->insert(-100, \"ll->insert(-100, \\\"\\\");\");\n\tcout << \"insert: \\n\"\n\t\t << *ll << \"\\n\";\n}\nvoid testIndexOf() {\n\tcout << \"----\\n测试获取元素下标: \\n\";\n\tcout << \"ll->indexOf(\\\"ll->insert(-100, \\\"\\\");\\\")\\t\" << ll->indexOf(\"ll->insert(-100, \\\"\\\");\") << '\\n';\n\tcout << \"ll->indexOf(\\\"芜湖~\\\")\\t\" << ll->indexOf(\"芜湖~\") << '\\n';\n}\nvoid testAt() {\n\tcout << \"----\\n测试通过下标获取: \\n\";\n\tcout << \"at(0): \" << ll->at(0) << '\\n';\n\tcout << \"at(size-1): \" << ll->at(ll->size() - 1) << '\\n';\n}\nvoid testReverse() {\n\tcout << \"----\\n测试数组反转: \\n\";\n\tll->reverse();\n\tcout << \"全部反转后: \\n\"\n\t\t << *ll << '\\n';\n\tll->reverse(5);\n\tcout << \"反转 [0, 5] 后: \\n\"\n\t\t << *ll << '\\n';\n\tll->reverse(2, ll->size() - 2);\n\tcout << \"反转 [2, ll->size()-2] 后: \\n\"\n\t\t << *ll << '\\n';\n}\nvoid testRemove() {\n\tcout << \"----\\n测试移除元素: \\n\";\n\tcout << \"removeHead: \" << ll->removeHead() << '\\n';\n\tcout << \"removeTail: \" << ll->removeTail() << '\\n';\n\tcout << \"remove(\\\" Tang \\\"): \" << (ll->remove(\"Tang\") ? \"true\" : \"false\") << '\\n';\n\tcout << \"remove(\\\" Tang \\\"): \" << (ll->remove(\"Tang\") ? \"true\" : \"false\") << '\\n';\n\tcout << \"移除后: \" << *ll << '\\n';\n}\nvoid testException() {\n\ttry {\n\t\tcout << \"at(-1): \";\n\t\tcout << ll->at(-1) << '\\n';\n\t}\n\tcatch (const char* e) {\n\t\tstd::cerr << e << '\\n';\n\t}\n}\nint main(int argc, char const* argv[]) {\n\tinit();\n\ttestInsert();\n\ttestIndexOf();\n\ttestAt();\n\ttestReverse();\n\ttestRemove();\n\ttestException();\n\treturn 0;\n}\n```\n","source":"_posts/线性表-链表.md","raw":"---\ntitle: 线性表 - 链表\ndate: 2022-03-09 12:39:19\ntags: Data Structure\n---\n\n# 线性表\n\n---\n\n## 1. 链表\n<!-- more -->\n```cpp\n#ifndef __LINKEDLIST_H_\n#define __LINKEDLIST_H__\n#include <bits/stdc++.h>\n/**\n *  @brief 单链表的节点\n *  @tparam T  节点元素类型(class类型比较适用)\n */\ntemplate <class T>\nclass Node {\npublic:\n\tT val;\n\tNode* next;\n\tNode() = default;\n\tNode(const T& t, Node* nxt = nullptr) : val(t), next(nxt) {}\n};\n/**\n *  @brief 头节点不为空的单链表\n *  @tparam T  节点元素类型(class类型比较适用)\n */\ntemplate <class T>\nclass LinkedList {\nprivate:\n\tNode<T>* __head;\n\tNode<T>* __tail;\n\tunsigned __size;\n\npublic:\n\t/**\n\t * 初始化\n\t */\n\tLinkedList() : __head(nullptr), __tail(nullptr), __size(0) {}\n\t/**\n\t * 初始化\n\t * @param a 数组\n\t * @param n 长度\n\t */\n\tLinkedList(T* a, int n);\n\t/**\n\t * 头插\n\t * @param t 待插元素\n\t */\n\tvoid insertHead(const T& t);\n\t/**\n\t * 尾插\n\t * @param t 待插元素\n\t */\n\tvoid insertTail(const T& t);\n\t/**\n\t * 按下标插入\n\t * @param i 下标\n\t * @param t 待插元素\n\t */\n\tvoid insert(unsigned i, const T& t);\n\t/**\n\t * 移除头节点\n\t * @return 被移除的节点值\n\t */\n\tT removeHead();\n\t/**\n\t * 移除尾节点\n\t * @return 被移除的节点值\n\t */\n\tT removeTail();\n\t/**\n\t * 移除元素\n\t * @param t 待语移除的元素\n\t * @return true 元素存在, 否则false\n\t */\n\tbool remove(const T& t);\n\t/**\n\t * 判断链表是否为空\n\t * @return true空, 否则false\n\t */\n\tbool empty() { return __size == 0 ? true : false; }\n\t/**\n\t * 获取链表长度\n\t * @return size\n\t */\n\tunsigned size() { return __size; }\n\t/**\n\t * 链表反转\n\t */\n\tvoid reverse();\n\t/**\n\t * 链表部分反转 { 0 -> i } , 下标从零开始\n\t * @param i 起始节点下标(包括)\n\t * @throws Exception : Index out of range !\n\t */\n\tvoid reverse(unsigned i);\n\t/**\n\t * 链表部分反转 { i -> j } , 下标从零开始\n\t * @param i 起始节点下标(包括)\n\t * @param j 结束节点下标(包括)\n\t * @throws Exception : Index out of range !\n\t */\n\tvoid reverse(unsigned i, unsigned j);\n\t/**\n\t * 由t获取元素的下标(从零开始)\n\t * @param t 待查找元素\n\t * @return 下标 或者 -1\n\t * @throws Exception : Empty List :(\n\t */\n\tint indexOf(T t);\n\t/**\n\t * 由下标获取元素\n\t * @param index 下标\n\t * @return 下标对应得元素\n\t * @throws Exception : Index out of range !\n\t */\n\tT at(int index);\n\t/**\n\t * 删除链表, 释放空间\n\t */\n\t~LinkedList();\n\t/**\n\t * 将链表元素输出到标准流\n\t * @param os 标准输出流对象\n\t * @param l 链表对象\n\t * @return 标准输出流对象\n\t */\n\ttemplate <class U>\n\tfriend std::ostream& operator<<(std::ostream& os, const LinkedList<U>& l);\n};\ntemplate <class T>\nLinkedList<T>::LinkedList(T* a, int n) {\n\tLinkedList();\n\tfor (; --n != -1;)\n\t\tinsertTail(a[n]);\n}\ntemplate <class T>\nvoid LinkedList<T>::insertHead(const T& t) {\n\tNode<T>* node = new Node<T>(t);\n\tif (__head == nullptr) {\n\t\t__head = node;\n\t\t__tail = __head;\n\t}\n\telse {\n\t\tnode->next = __head;\n\t\t__head = node;\n\t}\n\t++__size;\n}\ntemplate <class T>\nvoid LinkedList<T>::insertTail(const T& t) {\n\tNode<T>* node = new Node<T>(t);\n\tif (__tail == nullptr) {\n\t\t__tail = node;\n\t\t__head = __tail;\n\t}\n\telse {\n\t\t__tail->next = node;\n\t\t__tail = __tail->next;\n\t}\n\t++__size;\n}\ntemplate <class T>\nvoid LinkedList<T>::insert(unsigned i, const T& t) {\n\tNode<T>* node = new Node<T>(t);\n\t// 没有元素或i>__size\n\tif (__head == nullptr || i > __size) {\n\t\tinsertTail(t);\n\t\treturn;\n\t}\n\tif (i == 0) {\n\t\tinsertHead(t);\n\t\treturn;\n\t}\n\tNode<T>*pre = nullptr, *p = __head;\n\t// 从零开始\n\twhile (--i) {\n\t\tpre = p;\n\t\tp = p->next;\n\t}\n\t// 更新__tail\n\tnode->next = p;\n\tpre->next = node;\n\t++__size;\n}\ntemplate <class T>\nT LinkedList<T>::removeHead() {\n\tif (__size == 0)\n\t\tthrow \"Exception : Remove form an empty List :(\";\n\t--__size;\n\tNode<T>* p = __head;\n\tT ret = std::move(p->val);\n\t__head = __head->next;\n\tdelete p;\n\treturn ret;\n}\ntemplate <class T>\nT LinkedList<T>::removeTail() {\n\tif (__size == 0)\n\t\tthrow \"Exception : Remove form an empty List :(\";\n\t--__size;\n\tNode<T>* p = __head;\n\tfor (Node<T>* i = __head; i->next != nullptr; i = i->next)\n\t\tp = i;\n\tif (p == __head) { // 第一个\n\t\tT t = __head->val;\n\t\tdelete __head;\n\t\t__head = nullptr;\n\t\t__tail = nullptr;\n\t\treturn t;\n\t}\n\tNode<T>* node = p->next;\n\tT ret = std::move(node->val);\n\tp->next = nullptr;\n\t__tail = p;\n\tdelete node;\n\treturn ret;\n}\ntemplate <class T>\nbool LinkedList<T>::remove(const T& t) {\n\tif (__size == 0)\n\t\tthrow \"Exception : Remove form an empty List :(\";\n\tNode<T>* p = __head;\n\tNode<T>* i = __head;\n\t// 要删的前一个\n\tfor (; i != nullptr && i->val != t; i = i->next) {\n\t\tp = i;\n\t}\n\tif (i == nullptr) { // 没有\n\t\treturn false;\n\t}\n\tif (p == __head) { // 第一个\n\t\tremoveHead();\n\t\treturn true;\n\t}\n\tNode<T>* node = p->next;\n\tp->next = node->next;\n\tdelete node;\n\t--__size;\n\treturn true;\n}\ntemplate <class T>\nvoid LinkedList<T>::reverse() {\n\t__tail = __head;\n\tfor (Node<T>*p = __head->next, *pre = __head; p; pre->next = p) {\n\t\tNode<T>* node = p;\n\t\tp = p->next;\n\t\tnode->next = __head;\n\t\t__head = node;\n\t}\n}\ntemplate <class T>\nvoid LinkedList<T>::reverse(unsigned i) {\n\tif (i < 0 || i >= __size)\n\t\tthrow \"Exception : Index out of range !\";\n\tif (i == __size) {\n\t\treverse();\n\t\treturn;\n\t}\n\tNode<T>*tail = __head, *head = __head;\n\tfor (int k = 0; k < i; ++k) {\n\t\ttail = tail->next;\n\t}\n\tfor (Node<T>*p = __head->next, *pre = __head; p != tail; pre->next = p) {\n\t\tNode<T>* node = p;\n\t\tp = p->next;\n\t\tnode->next = __head;\n\t\t__head = node;\n\t}\n\thead->next = tail;\n}\ntemplate <class T>\nvoid LinkedList<T>::reverse(unsigned i, unsigned j) {\n\tif (i < 0 || i > j || j >= __size)\n\t\tthrow \"Exception : Index out of range !\";\n\tif (i == j)\n\t\treturn;\n\tif (i == 0) {\n\t\treverse(j);\n\t\treturn;\n\t}\n\tNode<T>*pre = __head, *s, *p = pre->next, *next = nullptr;\n\tint k = 1;\n\tfor (; k < i; ++k) { // find start\n\t\tpre = p;\n\t\tp = p->next;\n\t}\n\tfor (; k < j; ++k) // find end\n\t\tp = p->next;\n\tnext = p->next;\n\tp = pre->next;\n\tk = j - i + 1; // 操作次数\n\tfor (; k--;) { // 如法炮制\n\t\tNode<T>* node = p;\n\t\tp = p->next;\n\t\tnode->next = next;\n\t\tnext = node;\n\t}\n\tpre->next = next;\n}\ntemplate <class T>\nint LinkedList<T>::indexOf(T t) {\n\tif (__head == nullptr)\n\t\tthrow \"Exception : Empty List :(\";\n\tint index = 0;\n\tfor (Node<T>* p = __head; p != nullptr; p = p->next) {\n\t\tif (p->val == t)\n\t\t\treturn index;\n\t\t++index;\n\t}\n\treturn -1;\n}\ntemplate <class T>\nT LinkedList<T>::at(int i) {\n\tif (i < 0 || i >= __size)\n\t\tthrow \"Exception : Index out of range !\";\n\tNode<T>* p = __head;\n\tfor (; i--;)\n\t\tp = p->next;\n\treturn p->val;\n}\ntemplate <class T>\nLinkedList<T>::~LinkedList() {\n\twhile (__head != nullptr) {\n\t\tNode<T> p = __head;\n\t\t__head = __head->next;\n\t\tdelete p;\n\t}\n\t__tail = nullptr;\n}\ntemplate <class U>\nstd::ostream& operator<<(std::ostream& os, const LinkedList<U>& l) {\n\tif (l.__head != nullptr)\n\t\tfor (Node<U>* i = l.__head; i != nullptr; i = i->next) {\n\t\t\tos << i->val << \" \";\n\t\t}\n\telse\n\t\tos << \"null \";\n\treturn os;\n}\n#endif\n```\n\n## 2. 测试代码\n\n```cpp\n#include \"LinkedList.h\"\nusing namespace std;\nLinkedList<string>* ll;\nvoid init() {\n\tcout << \"----\\n初始化\\n\";\n\tll = new LinkedList<string>();\n\tll->insertHead(\"Quanwei\");\n\tll->insertHead(\"Tang\");\n\tll->insertHead(\"Hi\");\n\tll->insertTail(\"Hello\");\n\tll->insertTail(\"Linked\");\n\tll->insertTail(\"List\");\n\tll->insertTail(\"Node\");\n\tcout << \"init: \" << *ll << \"\\n\";\n}\nvoid testInsert() {\n\tcout << \"----\\n插入测试:\\n\";\n\tll->insert(0, \"芜湖~\");\n\tcout << \"insert: \\n\"\n\t\t << *ll << \"\\n\";\n\tll->insert(0, \"芜湖~\");\n\tcout << \"insert: \\n\"\n\t\t << *ll << \"\\n\";\n\tll->insert(ll->size(), \"尾巴前面一个~\");\n\tcout << \"insert: \\n\"\n\t\t << *ll << \"\\n\";\n\tll->insert(ll->size() + 1, \"尾巴后面一个~\");\n\tcout << \"insert: \\n\"\n\t\t << *ll << \"\\n\";\n\tll->insert(100, \"ll->insert(100, \\\"\\\");\");\n\tcout << \"insert: \\n\"\n\t\t << *ll << \"\\n\";\n\tll->insert(-100, \"ll->insert(-100, \\\"\\\");\");\n\tcout << \"insert: \\n\"\n\t\t << *ll << \"\\n\";\n}\nvoid testIndexOf() {\n\tcout << \"----\\n测试获取元素下标: \\n\";\n\tcout << \"ll->indexOf(\\\"ll->insert(-100, \\\"\\\");\\\")\\t\" << ll->indexOf(\"ll->insert(-100, \\\"\\\");\") << '\\n';\n\tcout << \"ll->indexOf(\\\"芜湖~\\\")\\t\" << ll->indexOf(\"芜湖~\") << '\\n';\n}\nvoid testAt() {\n\tcout << \"----\\n测试通过下标获取: \\n\";\n\tcout << \"at(0): \" << ll->at(0) << '\\n';\n\tcout << \"at(size-1): \" << ll->at(ll->size() - 1) << '\\n';\n}\nvoid testReverse() {\n\tcout << \"----\\n测试数组反转: \\n\";\n\tll->reverse();\n\tcout << \"全部反转后: \\n\"\n\t\t << *ll << '\\n';\n\tll->reverse(5);\n\tcout << \"反转 [0, 5] 后: \\n\"\n\t\t << *ll << '\\n';\n\tll->reverse(2, ll->size() - 2);\n\tcout << \"反转 [2, ll->size()-2] 后: \\n\"\n\t\t << *ll << '\\n';\n}\nvoid testRemove() {\n\tcout << \"----\\n测试移除元素: \\n\";\n\tcout << \"removeHead: \" << ll->removeHead() << '\\n';\n\tcout << \"removeTail: \" << ll->removeTail() << '\\n';\n\tcout << \"remove(\\\" Tang \\\"): \" << (ll->remove(\"Tang\") ? \"true\" : \"false\") << '\\n';\n\tcout << \"remove(\\\" Tang \\\"): \" << (ll->remove(\"Tang\") ? \"true\" : \"false\") << '\\n';\n\tcout << \"移除后: \" << *ll << '\\n';\n}\nvoid testException() {\n\ttry {\n\t\tcout << \"at(-1): \";\n\t\tcout << ll->at(-1) << '\\n';\n\t}\n\tcatch (const char* e) {\n\t\tstd::cerr << e << '\\n';\n\t}\n}\nint main(int argc, char const* argv[]) {\n\tinit();\n\ttestInsert();\n\ttestIndexOf();\n\ttestAt();\n\ttestReverse();\n\ttestRemove();\n\ttestException();\n\treturn 0;\n}\n```\n","slug":"线性表-链表","published":1,"updated":"2022-04-15T09:51:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5vj006wlv9eamcfdbo1","content":"<h1 id=\"线性表\"><a href=\"#线性表\" class=\"headerlink\" title=\"线性表\"></a>线性表</h1><hr>\n<h2 id=\"1-链表\"><a href=\"#1-链表\" class=\"headerlink\" title=\"1. 链表\"></a>1. 链表</h2><span id=\"more\"></span>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> __LINKEDLIST_H_</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __LINKEDLIST_H__</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  @brief 单链表的节点</span></span><br><span class=\"line\"><span class=\"comment\"> *  @tparam T  节点元素类型(class类型比较适用)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tT val;</span><br><span class=\"line\">\tNode* next;</span><br><span class=\"line\">\t<span class=\"built_in\">Node</span>() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">Node</span>(<span class=\"type\">const</span> T&amp; t, Node* nxt = <span class=\"literal\">nullptr</span>) : <span class=\"built_in\">val</span>(t), <span class=\"built_in\">next</span>(nxt) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  @brief 头节点不为空的单链表</span></span><br><span class=\"line\"><span class=\"comment\"> *  @tparam T  节点元素类型(class类型比较适用)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LinkedList</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tNode&lt;T&gt;* __head;</span><br><span class=\"line\">\tNode&lt;T&gt;* __tail;</span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> __size;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 初始化</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"built_in\">LinkedList</span>() : __head(<span class=\"literal\">nullptr</span>), __tail(<span class=\"literal\">nullptr</span>), __size(<span class=\"number\">0</span>) &#123;&#125;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 初始化</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param a 数组</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param n 长度</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"built_in\">LinkedList</span>(T* a, <span class=\"type\">int</span> n);</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 头插</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param t 待插元素</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insertHead</span><span class=\"params\">(<span class=\"type\">const</span> T&amp; t)</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 尾插</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param t 待插元素</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insertTail</span><span class=\"params\">(<span class=\"type\">const</span> T&amp; t)</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 按下标插入</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param i 下标</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param t 待插元素</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"type\">unsigned</span> i, <span class=\"type\">const</span> T&amp; t)</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 移除头节点</span></span><br><span class=\"line\"><span class=\"comment\">\t * @return 被移除的节点值</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\">T <span class=\"title\">removeHead</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 移除尾节点</span></span><br><span class=\"line\"><span class=\"comment\">\t * @return 被移除的节点值</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\">T <span class=\"title\">removeTail</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 移除元素</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param t 待语移除的元素</span></span><br><span class=\"line\"><span class=\"comment\">\t * @return true 元素存在, 否则false</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">remove</span><span class=\"params\">(<span class=\"type\">const</span> T&amp; t)</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 判断链表是否为空</span></span><br><span class=\"line\"><span class=\"comment\">\t * @return true空, 否则false</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">empty</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> __size == <span class=\"number\">0</span> ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>; &#125;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 获取链表长度</span></span><br><span class=\"line\"><span class=\"comment\">\t * @return size</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">unsigned</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> __size; &#125;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 链表反转</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">reverse</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 链表部分反转 &#123; 0 -&gt; i &#125; , 下标从零开始</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param i 起始节点下标(包括)</span></span><br><span class=\"line\"><span class=\"comment\">\t * @throws Exception : Index out of range !</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"type\">unsigned</span> i)</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 链表部分反转 &#123; i -&gt; j &#125; , 下标从零开始</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param i 起始节点下标(包括)</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param j 结束节点下标(包括)</span></span><br><span class=\"line\"><span class=\"comment\">\t * @throws Exception : Index out of range !</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"type\">unsigned</span> i, <span class=\"type\">unsigned</span> j)</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 由t获取元素的下标(从零开始)</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param t 待查找元素</span></span><br><span class=\"line\"><span class=\"comment\">\t * @return 下标 或者 -1</span></span><br><span class=\"line\"><span class=\"comment\">\t * @throws Exception : Empty List :(</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">indexOf</span><span class=\"params\">(T t)</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 由下标获取元素</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param index 下标</span></span><br><span class=\"line\"><span class=\"comment\">\t * @return 下标对应得元素</span></span><br><span class=\"line\"><span class=\"comment\">\t * @throws Exception : Index out of range !</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\">T <span class=\"title\">at</span><span class=\"params\">(<span class=\"type\">int</span> index)</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 删除链表, 释放空间</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t~<span class=\"built_in\">LinkedList</span>();</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 将链表元素输出到标准流</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param os 标准输出流对象</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param l 链表对象</span></span><br><span class=\"line\"><span class=\"comment\">\t * @return 标准输出流对象</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">U</span>&gt;</span><br><span class=\"line\">\t<span class=\"keyword\">friend</span> std::ostream&amp; <span class=\"keyword\">operator</span>&lt;&lt;(std::ostream&amp; os, <span class=\"type\">const</span> LinkedList&lt;U&gt;&amp; l);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">LinkedList&lt;T&gt;::<span class=\"built_in\">LinkedList</span>(T* a, <span class=\"type\">int</span> n) &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">LinkedList</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; --n != <span class=\"number\">-1</span>;)</span><br><span class=\"line\">\t\t<span class=\"built_in\">insertTail</span>(a[n]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> LinkedList&lt;T&gt;::<span class=\"built_in\">insertHead</span>(<span class=\"type\">const</span> T&amp; t) &#123;</span><br><span class=\"line\">\tNode&lt;T&gt;* node = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>&lt;T&gt;(t);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (__head == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">\t\t__head = node;</span><br><span class=\"line\">\t\t__tail = __head;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tnode-&gt;next = __head;</span><br><span class=\"line\">\t\t__head = node;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t++__size;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> LinkedList&lt;T&gt;::<span class=\"built_in\">insertTail</span>(<span class=\"type\">const</span> T&amp; t) &#123;</span><br><span class=\"line\">\tNode&lt;T&gt;* node = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>&lt;T&gt;(t);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (__tail == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">\t\t__tail = node;</span><br><span class=\"line\">\t\t__head = __tail;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t__tail-&gt;next = node;</span><br><span class=\"line\">\t\t__tail = __tail-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t++__size;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> LinkedList&lt;T&gt;::<span class=\"built_in\">insert</span>(<span class=\"type\">unsigned</span> i, <span class=\"type\">const</span> T&amp; t) &#123;</span><br><span class=\"line\">\tNode&lt;T&gt;* node = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>&lt;T&gt;(t);</span><br><span class=\"line\">\t<span class=\"comment\">// 没有元素或i&gt;__size</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (__head == <span class=\"literal\">nullptr</span> || i &gt; __size) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">insertTail</span>(t);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (i == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">insertHead</span>(t);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tNode&lt;T&gt;*pre = <span class=\"literal\">nullptr</span>, *p = __head;</span><br><span class=\"line\">\t<span class=\"comment\">// 从零开始</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (--i) &#123;</span><br><span class=\"line\">\t\tpre = p;</span><br><span class=\"line\">\t\tp = p-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 更新__tail</span></span><br><span class=\"line\">\tnode-&gt;next = p;</span><br><span class=\"line\">\tpre-&gt;next = node;</span><br><span class=\"line\">\t++__size;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">T LinkedList&lt;T&gt;::<span class=\"built_in\">removeHead</span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (__size == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"string\">&quot;Exception : Remove form an empty List :(&quot;</span>;</span><br><span class=\"line\">\t--__size;</span><br><span class=\"line\">\tNode&lt;T&gt;* p = __head;</span><br><span class=\"line\">\tT ret = std::<span class=\"built_in\">move</span>(p-&gt;val);</span><br><span class=\"line\">\t__head = __head-&gt;next;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> p;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">T LinkedList&lt;T&gt;::<span class=\"built_in\">removeTail</span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (__size == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"string\">&quot;Exception : Remove form an empty List :(&quot;</span>;</span><br><span class=\"line\">\t--__size;</span><br><span class=\"line\">\tNode&lt;T&gt;* p = __head;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (Node&lt;T&gt;* i = __head; i-&gt;next != <span class=\"literal\">nullptr</span>; i = i-&gt;next)</span><br><span class=\"line\">\t\tp = i;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p == __head) &#123; <span class=\"comment\">// 第一个</span></span><br><span class=\"line\">\t\tT t = __head-&gt;val;</span><br><span class=\"line\">\t\t<span class=\"keyword\">delete</span> __head;</span><br><span class=\"line\">\t\t__head = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t\t__tail = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> t;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tNode&lt;T&gt;* node = p-&gt;next;</span><br><span class=\"line\">\tT ret = std::<span class=\"built_in\">move</span>(node-&gt;val);</span><br><span class=\"line\">\tp-&gt;next = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t__tail = p;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> node;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">bool</span> LinkedList&lt;T&gt;::<span class=\"built_in\">remove</span>(<span class=\"type\">const</span> T&amp; t) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (__size == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"string\">&quot;Exception : Remove form an empty List :(&quot;</span>;</span><br><span class=\"line\">\tNode&lt;T&gt;* p = __head;</span><br><span class=\"line\">\tNode&lt;T&gt;* i = __head;</span><br><span class=\"line\">\t<span class=\"comment\">// 要删的前一个</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; i != <span class=\"literal\">nullptr</span> &amp;&amp; i-&gt;val != t; i = i-&gt;next) &#123;</span><br><span class=\"line\">\t\tp = i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (i == <span class=\"literal\">nullptr</span>) &#123; <span class=\"comment\">// 没有</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p == __head) &#123; <span class=\"comment\">// 第一个</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">removeHead</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tNode&lt;T&gt;* node = p-&gt;next;</span><br><span class=\"line\">\tp-&gt;next = node-&gt;next;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> node;</span><br><span class=\"line\">\t--__size;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> LinkedList&lt;T&gt;::<span class=\"built_in\">reverse</span>() &#123;</span><br><span class=\"line\">\t__tail = __head;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (Node&lt;T&gt;*p = __head-&gt;next, *pre = __head; p; pre-&gt;next = p) &#123;</span><br><span class=\"line\">\t\tNode&lt;T&gt;* node = p;</span><br><span class=\"line\">\t\tp = p-&gt;next;</span><br><span class=\"line\">\t\tnode-&gt;next = __head;</span><br><span class=\"line\">\t\t__head = node;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> LinkedList&lt;T&gt;::<span class=\"built_in\">reverse</span>(<span class=\"type\">unsigned</span> i) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span> || i &gt;= __size)</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"string\">&quot;Exception : Index out of range !&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (i == __size) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">reverse</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tNode&lt;T&gt;*tail = __head, *head = __head;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; i; ++k) &#123;</span><br><span class=\"line\">\t\ttail = tail-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (Node&lt;T&gt;*p = __head-&gt;next, *pre = __head; p != tail; pre-&gt;next = p) &#123;</span><br><span class=\"line\">\t\tNode&lt;T&gt;* node = p;</span><br><span class=\"line\">\t\tp = p-&gt;next;</span><br><span class=\"line\">\t\tnode-&gt;next = __head;</span><br><span class=\"line\">\t\t__head = node;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\thead-&gt;next = tail;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> LinkedList&lt;T&gt;::<span class=\"built_in\">reverse</span>(<span class=\"type\">unsigned</span> i, <span class=\"type\">unsigned</span> j) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span> || i &gt; j || j &gt;= __size)</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"string\">&quot;Exception : Index out of range !&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (i == j)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (i == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">reverse</span>(j);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tNode&lt;T&gt;*pre = __head, *s, *p = pre-&gt;next, *next = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; k &lt; i; ++k) &#123; <span class=\"comment\">// find start</span></span><br><span class=\"line\">\t\tpre = p;</span><br><span class=\"line\">\t\tp = p-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; k &lt; j; ++k) <span class=\"comment\">// find end</span></span><br><span class=\"line\">\t\tp = p-&gt;next;</span><br><span class=\"line\">\tnext = p-&gt;next;</span><br><span class=\"line\">\tp = pre-&gt;next;</span><br><span class=\"line\">\tk = j - i + <span class=\"number\">1</span>; <span class=\"comment\">// 操作次数</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; k--;) &#123; <span class=\"comment\">// 如法炮制</span></span><br><span class=\"line\">\t\tNode&lt;T&gt;* node = p;</span><br><span class=\"line\">\t\tp = p-&gt;next;</span><br><span class=\"line\">\t\tnode-&gt;next = next;</span><br><span class=\"line\">\t\tnext = node;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpre-&gt;next = next;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">int</span> LinkedList&lt;T&gt;::<span class=\"built_in\">indexOf</span>(T t) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (__head == <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"string\">&quot;Exception : Empty List :(&quot;</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (Node&lt;T&gt;* p = __head; p != <span class=\"literal\">nullptr</span>; p = p-&gt;next) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (p-&gt;val == t)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> index;</span><br><span class=\"line\">\t\t++index;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">T LinkedList&lt;T&gt;::<span class=\"built_in\">at</span>(<span class=\"type\">int</span> i) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span> || i &gt;= __size)</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"string\">&quot;Exception : Index out of range !&quot;</span>;</span><br><span class=\"line\">\tNode&lt;T&gt;* p = __head;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; i--;)</span><br><span class=\"line\">\t\tp = p-&gt;next;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> p-&gt;val;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">LinkedList&lt;T&gt;::~<span class=\"built_in\">LinkedList</span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (__head != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">\t\tNode&lt;T&gt; p = __head;</span><br><span class=\"line\">\t\t__head = __head-&gt;next;</span><br><span class=\"line\">\t\t<span class=\"keyword\">delete</span> p;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t__tail = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">U</span>&gt;</span><br><span class=\"line\">std::ostream&amp; <span class=\"keyword\">operator</span>&lt;&lt;(std::ostream&amp; os, <span class=\"type\">const</span> LinkedList&lt;U&gt;&amp; l) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (l.__head != <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (Node&lt;U&gt;* i = l.__head; i != <span class=\"literal\">nullptr</span>; i = i-&gt;next) &#123;</span><br><span class=\"line\">\t\t\tos &lt;&lt; i-&gt;val &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\tos &lt;&lt; <span class=\"string\">&quot;null &quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> os;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-测试代码\"><a href=\"#2-测试代码\" class=\"headerlink\" title=\"2. 测试代码\"></a>2. 测试代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;LinkedList.h&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\">LinkedList&lt;string&gt;* ll;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;----\\n初始化\\n&quot;</span>;</span><br><span class=\"line\">\tll = <span class=\"keyword\">new</span> <span class=\"built_in\">LinkedList</span>&lt;string&gt;();</span><br><span class=\"line\">\tll-&gt;<span class=\"built_in\">insertHead</span>(<span class=\"string\">&quot;Quanwei&quot;</span>);</span><br><span class=\"line\">\tll-&gt;<span class=\"built_in\">insertHead</span>(<span class=\"string\">&quot;Tang&quot;</span>);</span><br><span class=\"line\">\tll-&gt;<span class=\"built_in\">insertHead</span>(<span class=\"string\">&quot;Hi&quot;</span>);</span><br><span class=\"line\">\tll-&gt;<span class=\"built_in\">insertTail</span>(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">\tll-&gt;<span class=\"built_in\">insertTail</span>(<span class=\"string\">&quot;Linked&quot;</span>);</span><br><span class=\"line\">\tll-&gt;<span class=\"built_in\">insertTail</span>(<span class=\"string\">&quot;List&quot;</span>);</span><br><span class=\"line\">\tll-&gt;<span class=\"built_in\">insertTail</span>(<span class=\"string\">&quot;Node&quot;</span>);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;init: &quot;</span> &lt;&lt; *ll &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">testInsert</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;----\\n插入测试:\\n&quot;</span>;</span><br><span class=\"line\">\tll-&gt;<span class=\"built_in\">insert</span>(<span class=\"number\">0</span>, <span class=\"string\">&quot;芜湖~&quot;</span>);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;insert: \\n&quot;</span></span><br><span class=\"line\">\t\t &lt;&lt; *ll &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">\tll-&gt;<span class=\"built_in\">insert</span>(<span class=\"number\">0</span>, <span class=\"string\">&quot;芜湖~&quot;</span>);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;insert: \\n&quot;</span></span><br><span class=\"line\">\t\t &lt;&lt; *ll &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">\tll-&gt;<span class=\"built_in\">insert</span>(ll-&gt;<span class=\"built_in\">size</span>(), <span class=\"string\">&quot;尾巴前面一个~&quot;</span>);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;insert: \\n&quot;</span></span><br><span class=\"line\">\t\t &lt;&lt; *ll &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">\tll-&gt;<span class=\"built_in\">insert</span>(ll-&gt;<span class=\"built_in\">size</span>() + <span class=\"number\">1</span>, <span class=\"string\">&quot;尾巴后面一个~&quot;</span>);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;insert: \\n&quot;</span></span><br><span class=\"line\">\t\t &lt;&lt; *ll &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">\tll-&gt;<span class=\"built_in\">insert</span>(<span class=\"number\">100</span>, <span class=\"string\">&quot;ll-&gt;insert(100, \\&quot;\\&quot;);&quot;</span>);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;insert: \\n&quot;</span></span><br><span class=\"line\">\t\t &lt;&lt; *ll &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">\tll-&gt;<span class=\"built_in\">insert</span>(<span class=\"number\">-100</span>, <span class=\"string\">&quot;ll-&gt;insert(-100, \\&quot;\\&quot;);&quot;</span>);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;insert: \\n&quot;</span></span><br><span class=\"line\">\t\t &lt;&lt; *ll &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">testIndexOf</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;----\\n测试获取元素下标: \\n&quot;</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;ll-&gt;indexOf(\\&quot;ll-&gt;insert(-100, \\&quot;\\&quot;);\\&quot;)\\t&quot;</span> &lt;&lt; ll-&gt;<span class=\"built_in\">indexOf</span>(<span class=\"string\">&quot;ll-&gt;insert(-100, \\&quot;\\&quot;);&quot;</span>) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;ll-&gt;indexOf(\\&quot;芜湖~\\&quot;)\\t&quot;</span> &lt;&lt; ll-&gt;<span class=\"built_in\">indexOf</span>(<span class=\"string\">&quot;芜湖~&quot;</span>) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">testAt</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;----\\n测试通过下标获取: \\n&quot;</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;at(0): &quot;</span> &lt;&lt; ll-&gt;<span class=\"built_in\">at</span>(<span class=\"number\">0</span>) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;at(size-1): &quot;</span> &lt;&lt; ll-&gt;<span class=\"built_in\">at</span>(ll-&gt;<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">testReverse</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;----\\n测试数组反转: \\n&quot;</span>;</span><br><span class=\"line\">\tll-&gt;<span class=\"built_in\">reverse</span>();</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;全部反转后: \\n&quot;</span></span><br><span class=\"line\">\t\t &lt;&lt; *ll &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\tll-&gt;<span class=\"built_in\">reverse</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;反转 [0, 5] 后: \\n&quot;</span></span><br><span class=\"line\">\t\t &lt;&lt; *ll &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\tll-&gt;<span class=\"built_in\">reverse</span>(<span class=\"number\">2</span>, ll-&gt;<span class=\"built_in\">size</span>() - <span class=\"number\">2</span>);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;反转 [2, ll-&gt;size()-2] 后: \\n&quot;</span></span><br><span class=\"line\">\t\t &lt;&lt; *ll &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">testRemove</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;----\\n测试移除元素: \\n&quot;</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;removeHead: &quot;</span> &lt;&lt; ll-&gt;<span class=\"built_in\">removeHead</span>() &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;removeTail: &quot;</span> &lt;&lt; ll-&gt;<span class=\"built_in\">removeTail</span>() &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;remove(\\&quot; Tang \\&quot;): &quot;</span> &lt;&lt; (ll-&gt;<span class=\"built_in\">remove</span>(<span class=\"string\">&quot;Tang&quot;</span>) ? <span class=\"string\">&quot;true&quot;</span> : <span class=\"string\">&quot;false&quot;</span>) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;remove(\\&quot; Tang \\&quot;): &quot;</span> &lt;&lt; (ll-&gt;<span class=\"built_in\">remove</span>(<span class=\"string\">&quot;Tang&quot;</span>) ? <span class=\"string\">&quot;true&quot;</span> : <span class=\"string\">&quot;false&quot;</span>) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;移除后: &quot;</span> &lt;&lt; *ll &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">testException</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;at(-1): &quot;</span>;</span><br><span class=\"line\">\t\tcout &lt;&lt; ll-&gt;<span class=\"built_in\">at</span>(<span class=\"number\">-1</span>) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">catch</span> (<span class=\"type\">const</span> <span class=\"type\">char</span>* e) &#123;</span><br><span class=\"line\">\t\tstd::cerr &lt;&lt; e &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> <span class=\"type\">const</span>* argv[])</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">init</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">testInsert</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">testIndexOf</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">testAt</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">testReverse</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">testRemove</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">testException</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"cover":false,"excerpt":"<h1 id=\"线性表\"><a href=\"#线性表\" class=\"headerlink\" title=\"线性表\"></a>线性表</h1><hr>\n<h2 id=\"1-链表\"><a href=\"#1-链表\" class=\"headerlink\" title=\"1. 链表\"></a>1. 链表</h2>","more":"<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> __LINKEDLIST_H_</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __LINKEDLIST_H__</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  @brief 单链表的节点</span></span><br><span class=\"line\"><span class=\"comment\"> *  @tparam T  节点元素类型(class类型比较适用)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tT val;</span><br><span class=\"line\">\tNode* next;</span><br><span class=\"line\">\t<span class=\"built_in\">Node</span>() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">Node</span>(<span class=\"type\">const</span> T&amp; t, Node* nxt = <span class=\"literal\">nullptr</span>) : <span class=\"built_in\">val</span>(t), <span class=\"built_in\">next</span>(nxt) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  @brief 头节点不为空的单链表</span></span><br><span class=\"line\"><span class=\"comment\"> *  @tparam T  节点元素类型(class类型比较适用)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LinkedList</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tNode&lt;T&gt;* __head;</span><br><span class=\"line\">\tNode&lt;T&gt;* __tail;</span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> __size;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 初始化</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"built_in\">LinkedList</span>() : __head(<span class=\"literal\">nullptr</span>), __tail(<span class=\"literal\">nullptr</span>), __size(<span class=\"number\">0</span>) &#123;&#125;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 初始化</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param a 数组</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param n 长度</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"built_in\">LinkedList</span>(T* a, <span class=\"type\">int</span> n);</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 头插</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param t 待插元素</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insertHead</span><span class=\"params\">(<span class=\"type\">const</span> T&amp; t)</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 尾插</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param t 待插元素</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insertTail</span><span class=\"params\">(<span class=\"type\">const</span> T&amp; t)</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 按下标插入</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param i 下标</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param t 待插元素</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"type\">unsigned</span> i, <span class=\"type\">const</span> T&amp; t)</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 移除头节点</span></span><br><span class=\"line\"><span class=\"comment\">\t * @return 被移除的节点值</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\">T <span class=\"title\">removeHead</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 移除尾节点</span></span><br><span class=\"line\"><span class=\"comment\">\t * @return 被移除的节点值</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\">T <span class=\"title\">removeTail</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 移除元素</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param t 待语移除的元素</span></span><br><span class=\"line\"><span class=\"comment\">\t * @return true 元素存在, 否则false</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">remove</span><span class=\"params\">(<span class=\"type\">const</span> T&amp; t)</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 判断链表是否为空</span></span><br><span class=\"line\"><span class=\"comment\">\t * @return true空, 否则false</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">empty</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> __size == <span class=\"number\">0</span> ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>; &#125;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 获取链表长度</span></span><br><span class=\"line\"><span class=\"comment\">\t * @return size</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">unsigned</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> __size; &#125;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 链表反转</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">reverse</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 链表部分反转 &#123; 0 -&gt; i &#125; , 下标从零开始</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param i 起始节点下标(包括)</span></span><br><span class=\"line\"><span class=\"comment\">\t * @throws Exception : Index out of range !</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"type\">unsigned</span> i)</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 链表部分反转 &#123; i -&gt; j &#125; , 下标从零开始</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param i 起始节点下标(包括)</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param j 结束节点下标(包括)</span></span><br><span class=\"line\"><span class=\"comment\">\t * @throws Exception : Index out of range !</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"type\">unsigned</span> i, <span class=\"type\">unsigned</span> j)</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 由t获取元素的下标(从零开始)</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param t 待查找元素</span></span><br><span class=\"line\"><span class=\"comment\">\t * @return 下标 或者 -1</span></span><br><span class=\"line\"><span class=\"comment\">\t * @throws Exception : Empty List :(</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">indexOf</span><span class=\"params\">(T t)</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 由下标获取元素</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param index 下标</span></span><br><span class=\"line\"><span class=\"comment\">\t * @return 下标对应得元素</span></span><br><span class=\"line\"><span class=\"comment\">\t * @throws Exception : Index out of range !</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\">T <span class=\"title\">at</span><span class=\"params\">(<span class=\"type\">int</span> index)</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 删除链表, 释放空间</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t~<span class=\"built_in\">LinkedList</span>();</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 将链表元素输出到标准流</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param os 标准输出流对象</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param l 链表对象</span></span><br><span class=\"line\"><span class=\"comment\">\t * @return 标准输出流对象</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">U</span>&gt;</span><br><span class=\"line\">\t<span class=\"keyword\">friend</span> std::ostream&amp; <span class=\"keyword\">operator</span>&lt;&lt;(std::ostream&amp; os, <span class=\"type\">const</span> LinkedList&lt;U&gt;&amp; l);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">LinkedList&lt;T&gt;::<span class=\"built_in\">LinkedList</span>(T* a, <span class=\"type\">int</span> n) &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">LinkedList</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; --n != <span class=\"number\">-1</span>;)</span><br><span class=\"line\">\t\t<span class=\"built_in\">insertTail</span>(a[n]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> LinkedList&lt;T&gt;::<span class=\"built_in\">insertHead</span>(<span class=\"type\">const</span> T&amp; t) &#123;</span><br><span class=\"line\">\tNode&lt;T&gt;* node = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>&lt;T&gt;(t);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (__head == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">\t\t__head = node;</span><br><span class=\"line\">\t\t__tail = __head;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tnode-&gt;next = __head;</span><br><span class=\"line\">\t\t__head = node;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t++__size;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> LinkedList&lt;T&gt;::<span class=\"built_in\">insertTail</span>(<span class=\"type\">const</span> T&amp; t) &#123;</span><br><span class=\"line\">\tNode&lt;T&gt;* node = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>&lt;T&gt;(t);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (__tail == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">\t\t__tail = node;</span><br><span class=\"line\">\t\t__head = __tail;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t__tail-&gt;next = node;</span><br><span class=\"line\">\t\t__tail = __tail-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t++__size;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> LinkedList&lt;T&gt;::<span class=\"built_in\">insert</span>(<span class=\"type\">unsigned</span> i, <span class=\"type\">const</span> T&amp; t) &#123;</span><br><span class=\"line\">\tNode&lt;T&gt;* node = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>&lt;T&gt;(t);</span><br><span class=\"line\">\t<span class=\"comment\">// 没有元素或i&gt;__size</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (__head == <span class=\"literal\">nullptr</span> || i &gt; __size) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">insertTail</span>(t);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (i == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">insertHead</span>(t);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tNode&lt;T&gt;*pre = <span class=\"literal\">nullptr</span>, *p = __head;</span><br><span class=\"line\">\t<span class=\"comment\">// 从零开始</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (--i) &#123;</span><br><span class=\"line\">\t\tpre = p;</span><br><span class=\"line\">\t\tp = p-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 更新__tail</span></span><br><span class=\"line\">\tnode-&gt;next = p;</span><br><span class=\"line\">\tpre-&gt;next = node;</span><br><span class=\"line\">\t++__size;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">T LinkedList&lt;T&gt;::<span class=\"built_in\">removeHead</span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (__size == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"string\">&quot;Exception : Remove form an empty List :(&quot;</span>;</span><br><span class=\"line\">\t--__size;</span><br><span class=\"line\">\tNode&lt;T&gt;* p = __head;</span><br><span class=\"line\">\tT ret = std::<span class=\"built_in\">move</span>(p-&gt;val);</span><br><span class=\"line\">\t__head = __head-&gt;next;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> p;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">T LinkedList&lt;T&gt;::<span class=\"built_in\">removeTail</span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (__size == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"string\">&quot;Exception : Remove form an empty List :(&quot;</span>;</span><br><span class=\"line\">\t--__size;</span><br><span class=\"line\">\tNode&lt;T&gt;* p = __head;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (Node&lt;T&gt;* i = __head; i-&gt;next != <span class=\"literal\">nullptr</span>; i = i-&gt;next)</span><br><span class=\"line\">\t\tp = i;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p == __head) &#123; <span class=\"comment\">// 第一个</span></span><br><span class=\"line\">\t\tT t = __head-&gt;val;</span><br><span class=\"line\">\t\t<span class=\"keyword\">delete</span> __head;</span><br><span class=\"line\">\t\t__head = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t\t__tail = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> t;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tNode&lt;T&gt;* node = p-&gt;next;</span><br><span class=\"line\">\tT ret = std::<span class=\"built_in\">move</span>(node-&gt;val);</span><br><span class=\"line\">\tp-&gt;next = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t__tail = p;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> node;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">bool</span> LinkedList&lt;T&gt;::<span class=\"built_in\">remove</span>(<span class=\"type\">const</span> T&amp; t) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (__size == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"string\">&quot;Exception : Remove form an empty List :(&quot;</span>;</span><br><span class=\"line\">\tNode&lt;T&gt;* p = __head;</span><br><span class=\"line\">\tNode&lt;T&gt;* i = __head;</span><br><span class=\"line\">\t<span class=\"comment\">// 要删的前一个</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; i != <span class=\"literal\">nullptr</span> &amp;&amp; i-&gt;val != t; i = i-&gt;next) &#123;</span><br><span class=\"line\">\t\tp = i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (i == <span class=\"literal\">nullptr</span>) &#123; <span class=\"comment\">// 没有</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p == __head) &#123; <span class=\"comment\">// 第一个</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">removeHead</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tNode&lt;T&gt;* node = p-&gt;next;</span><br><span class=\"line\">\tp-&gt;next = node-&gt;next;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> node;</span><br><span class=\"line\">\t--__size;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> LinkedList&lt;T&gt;::<span class=\"built_in\">reverse</span>() &#123;</span><br><span class=\"line\">\t__tail = __head;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (Node&lt;T&gt;*p = __head-&gt;next, *pre = __head; p; pre-&gt;next = p) &#123;</span><br><span class=\"line\">\t\tNode&lt;T&gt;* node = p;</span><br><span class=\"line\">\t\tp = p-&gt;next;</span><br><span class=\"line\">\t\tnode-&gt;next = __head;</span><br><span class=\"line\">\t\t__head = node;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> LinkedList&lt;T&gt;::<span class=\"built_in\">reverse</span>(<span class=\"type\">unsigned</span> i) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span> || i &gt;= __size)</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"string\">&quot;Exception : Index out of range !&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (i == __size) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">reverse</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tNode&lt;T&gt;*tail = __head, *head = __head;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; i; ++k) &#123;</span><br><span class=\"line\">\t\ttail = tail-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (Node&lt;T&gt;*p = __head-&gt;next, *pre = __head; p != tail; pre-&gt;next = p) &#123;</span><br><span class=\"line\">\t\tNode&lt;T&gt;* node = p;</span><br><span class=\"line\">\t\tp = p-&gt;next;</span><br><span class=\"line\">\t\tnode-&gt;next = __head;</span><br><span class=\"line\">\t\t__head = node;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\thead-&gt;next = tail;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> LinkedList&lt;T&gt;::<span class=\"built_in\">reverse</span>(<span class=\"type\">unsigned</span> i, <span class=\"type\">unsigned</span> j) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span> || i &gt; j || j &gt;= __size)</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"string\">&quot;Exception : Index out of range !&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (i == j)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (i == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">reverse</span>(j);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tNode&lt;T&gt;*pre = __head, *s, *p = pre-&gt;next, *next = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; k &lt; i; ++k) &#123; <span class=\"comment\">// find start</span></span><br><span class=\"line\">\t\tpre = p;</span><br><span class=\"line\">\t\tp = p-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; k &lt; j; ++k) <span class=\"comment\">// find end</span></span><br><span class=\"line\">\t\tp = p-&gt;next;</span><br><span class=\"line\">\tnext = p-&gt;next;</span><br><span class=\"line\">\tp = pre-&gt;next;</span><br><span class=\"line\">\tk = j - i + <span class=\"number\">1</span>; <span class=\"comment\">// 操作次数</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; k--;) &#123; <span class=\"comment\">// 如法炮制</span></span><br><span class=\"line\">\t\tNode&lt;T&gt;* node = p;</span><br><span class=\"line\">\t\tp = p-&gt;next;</span><br><span class=\"line\">\t\tnode-&gt;next = next;</span><br><span class=\"line\">\t\tnext = node;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpre-&gt;next = next;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">int</span> LinkedList&lt;T&gt;::<span class=\"built_in\">indexOf</span>(T t) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (__head == <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"string\">&quot;Exception : Empty List :(&quot;</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (Node&lt;T&gt;* p = __head; p != <span class=\"literal\">nullptr</span>; p = p-&gt;next) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (p-&gt;val == t)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> index;</span><br><span class=\"line\">\t\t++index;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">T LinkedList&lt;T&gt;::<span class=\"built_in\">at</span>(<span class=\"type\">int</span> i) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span> || i &gt;= __size)</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"string\">&quot;Exception : Index out of range !&quot;</span>;</span><br><span class=\"line\">\tNode&lt;T&gt;* p = __head;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; i--;)</span><br><span class=\"line\">\t\tp = p-&gt;next;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> p-&gt;val;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">LinkedList&lt;T&gt;::~<span class=\"built_in\">LinkedList</span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (__head != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">\t\tNode&lt;T&gt; p = __head;</span><br><span class=\"line\">\t\t__head = __head-&gt;next;</span><br><span class=\"line\">\t\t<span class=\"keyword\">delete</span> p;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t__tail = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">U</span>&gt;</span><br><span class=\"line\">std::ostream&amp; <span class=\"keyword\">operator</span>&lt;&lt;(std::ostream&amp; os, <span class=\"type\">const</span> LinkedList&lt;U&gt;&amp; l) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (l.__head != <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (Node&lt;U&gt;* i = l.__head; i != <span class=\"literal\">nullptr</span>; i = i-&gt;next) &#123;</span><br><span class=\"line\">\t\t\tos &lt;&lt; i-&gt;val &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\tos &lt;&lt; <span class=\"string\">&quot;null &quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> os;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-测试代码\"><a href=\"#2-测试代码\" class=\"headerlink\" title=\"2. 测试代码\"></a>2. 测试代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;LinkedList.h&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\">LinkedList&lt;string&gt;* ll;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;----\\n初始化\\n&quot;</span>;</span><br><span class=\"line\">\tll = <span class=\"keyword\">new</span> <span class=\"built_in\">LinkedList</span>&lt;string&gt;();</span><br><span class=\"line\">\tll-&gt;<span class=\"built_in\">insertHead</span>(<span class=\"string\">&quot;Quanwei&quot;</span>);</span><br><span class=\"line\">\tll-&gt;<span class=\"built_in\">insertHead</span>(<span class=\"string\">&quot;Tang&quot;</span>);</span><br><span class=\"line\">\tll-&gt;<span class=\"built_in\">insertHead</span>(<span class=\"string\">&quot;Hi&quot;</span>);</span><br><span class=\"line\">\tll-&gt;<span class=\"built_in\">insertTail</span>(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">\tll-&gt;<span class=\"built_in\">insertTail</span>(<span class=\"string\">&quot;Linked&quot;</span>);</span><br><span class=\"line\">\tll-&gt;<span class=\"built_in\">insertTail</span>(<span class=\"string\">&quot;List&quot;</span>);</span><br><span class=\"line\">\tll-&gt;<span class=\"built_in\">insertTail</span>(<span class=\"string\">&quot;Node&quot;</span>);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;init: &quot;</span> &lt;&lt; *ll &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">testInsert</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;----\\n插入测试:\\n&quot;</span>;</span><br><span class=\"line\">\tll-&gt;<span class=\"built_in\">insert</span>(<span class=\"number\">0</span>, <span class=\"string\">&quot;芜湖~&quot;</span>);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;insert: \\n&quot;</span></span><br><span class=\"line\">\t\t &lt;&lt; *ll &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">\tll-&gt;<span class=\"built_in\">insert</span>(<span class=\"number\">0</span>, <span class=\"string\">&quot;芜湖~&quot;</span>);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;insert: \\n&quot;</span></span><br><span class=\"line\">\t\t &lt;&lt; *ll &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">\tll-&gt;<span class=\"built_in\">insert</span>(ll-&gt;<span class=\"built_in\">size</span>(), <span class=\"string\">&quot;尾巴前面一个~&quot;</span>);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;insert: \\n&quot;</span></span><br><span class=\"line\">\t\t &lt;&lt; *ll &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">\tll-&gt;<span class=\"built_in\">insert</span>(ll-&gt;<span class=\"built_in\">size</span>() + <span class=\"number\">1</span>, <span class=\"string\">&quot;尾巴后面一个~&quot;</span>);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;insert: \\n&quot;</span></span><br><span class=\"line\">\t\t &lt;&lt; *ll &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">\tll-&gt;<span class=\"built_in\">insert</span>(<span class=\"number\">100</span>, <span class=\"string\">&quot;ll-&gt;insert(100, \\&quot;\\&quot;);&quot;</span>);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;insert: \\n&quot;</span></span><br><span class=\"line\">\t\t &lt;&lt; *ll &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">\tll-&gt;<span class=\"built_in\">insert</span>(<span class=\"number\">-100</span>, <span class=\"string\">&quot;ll-&gt;insert(-100, \\&quot;\\&quot;);&quot;</span>);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;insert: \\n&quot;</span></span><br><span class=\"line\">\t\t &lt;&lt; *ll &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">testIndexOf</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;----\\n测试获取元素下标: \\n&quot;</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;ll-&gt;indexOf(\\&quot;ll-&gt;insert(-100, \\&quot;\\&quot;);\\&quot;)\\t&quot;</span> &lt;&lt; ll-&gt;<span class=\"built_in\">indexOf</span>(<span class=\"string\">&quot;ll-&gt;insert(-100, \\&quot;\\&quot;);&quot;</span>) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;ll-&gt;indexOf(\\&quot;芜湖~\\&quot;)\\t&quot;</span> &lt;&lt; ll-&gt;<span class=\"built_in\">indexOf</span>(<span class=\"string\">&quot;芜湖~&quot;</span>) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">testAt</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;----\\n测试通过下标获取: \\n&quot;</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;at(0): &quot;</span> &lt;&lt; ll-&gt;<span class=\"built_in\">at</span>(<span class=\"number\">0</span>) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;at(size-1): &quot;</span> &lt;&lt; ll-&gt;<span class=\"built_in\">at</span>(ll-&gt;<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">testReverse</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;----\\n测试数组反转: \\n&quot;</span>;</span><br><span class=\"line\">\tll-&gt;<span class=\"built_in\">reverse</span>();</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;全部反转后: \\n&quot;</span></span><br><span class=\"line\">\t\t &lt;&lt; *ll &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\tll-&gt;<span class=\"built_in\">reverse</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;反转 [0, 5] 后: \\n&quot;</span></span><br><span class=\"line\">\t\t &lt;&lt; *ll &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\tll-&gt;<span class=\"built_in\">reverse</span>(<span class=\"number\">2</span>, ll-&gt;<span class=\"built_in\">size</span>() - <span class=\"number\">2</span>);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;反转 [2, ll-&gt;size()-2] 后: \\n&quot;</span></span><br><span class=\"line\">\t\t &lt;&lt; *ll &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">testRemove</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;----\\n测试移除元素: \\n&quot;</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;removeHead: &quot;</span> &lt;&lt; ll-&gt;<span class=\"built_in\">removeHead</span>() &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;removeTail: &quot;</span> &lt;&lt; ll-&gt;<span class=\"built_in\">removeTail</span>() &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;remove(\\&quot; Tang \\&quot;): &quot;</span> &lt;&lt; (ll-&gt;<span class=\"built_in\">remove</span>(<span class=\"string\">&quot;Tang&quot;</span>) ? <span class=\"string\">&quot;true&quot;</span> : <span class=\"string\">&quot;false&quot;</span>) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;remove(\\&quot; Tang \\&quot;): &quot;</span> &lt;&lt; (ll-&gt;<span class=\"built_in\">remove</span>(<span class=\"string\">&quot;Tang&quot;</span>) ? <span class=\"string\">&quot;true&quot;</span> : <span class=\"string\">&quot;false&quot;</span>) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;移除后: &quot;</span> &lt;&lt; *ll &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">testException</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;at(-1): &quot;</span>;</span><br><span class=\"line\">\t\tcout &lt;&lt; ll-&gt;<span class=\"built_in\">at</span>(<span class=\"number\">-1</span>) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">catch</span> (<span class=\"type\">const</span> <span class=\"type\">char</span>* e) &#123;</span><br><span class=\"line\">\t\tstd::cerr &lt;&lt; e &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> <span class=\"type\">const</span>* argv[])</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">init</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">testInsert</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">testIndexOf</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">testAt</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">testReverse</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">testRemove</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">testException</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"网络编程模型","date":"2023-05-22T13:53:21.000Z","cover":"2023/05/22/网络编程模型/2023-05-22-22-34-09.png","_content":"# 网络编程模型\n\n网络编程模型的核心：\n\n    服务器如何管理连接\n\n    服务器如何处理请求 \n\n以上两个设计点最终都和操作系统的 I/O 模型及进程模型相关\n\n    I/O模型：阻塞 、非阻塞、同步 、异步 \n\n    进程模型：单进程、 多进程、多线程\n\n## PPC (Process per Connection)\n\n![](2023-05-22-21-55-38.png)\n\n1. 父进程接受连接（图中accept）\n2. 父进程“fork”子进程（图中fork）\n3. 子进程处理连接的读写请求（图中子进程read、业务处理、write）\n4. 子进程关闭连接（图中子进程中的close）\n\nPPC 模式实现简单，比较适合服务器的连接数没那么多的情况(eg. pgsql)\n\n而互联网兴起后，服务器的并发和访问量从几十剧增到成千上万，这种模式的弊端就凸显出来了，主要体现在如下几个方面:  \n1. fork代价高：站在操作系统的角度，创建一个进程的代价是很高的，需要分配很多内核资源，需要将内存映像从父进程复制到子进程。\n2. 父子进程通信复杂：父进程“fork”子进程时，文件描述符可以通过内存映像复制从父进程传到子进程，但“fork”完成后，父子进程通信就比较麻烦了，需要采用IPC(InterprocessCommunication)之类的进程通信方案。\n3. 进程数量增大后对操作系统压力较大：如果每个连接存活时间比较长，而且新的连接又源源不断的进来，则进程数量会越来越多，操作系统进程调度和切换的频率也越来越高，系统的压力也会越来越大。\n\n因此，一般情况下，PPC方案能处理的并发连接数量最大也就几百。\n\n针对PPC模式不同的缺点，产生了不同的解决方案\n\n## prefofk 提前创建进程\n\n省去“fork”进程的操作，让用户的访问更快、体验更好\n\n![](2023-05-22-21-59-46.png)\n\n\nprefork的实现关键就是多个子进程都accept同一个socket，当有新的接进入时，操作系统保证只有一个进程能最后accept成功\n\nprefork模式和PPC一样，还是存在父子进程通信复杂、支持的并发连接数量有限的问题\n\n## TPC (Thread per Connection)\n\n![](2023-05-22-22-02-22.png)\n\n1. 父进程接受连接（图中accept）\n2. 父进程创建子线程（图中pthread）\n3. 子线程处理连接的读写请求（图中子线程read、业务处理、rite）\n4. 子线程关闭连接（图中子线程中的close）\n\nTPC虽然解决了fork代价高和进程通信复杂的问题，但是也引入了新的问题:\n\n1. 创建线程虽然比创建进程代价低，但并不是没有代价，高并发时（例如每秒上万连接）还是有性能问题\n2. 无须进程间通信，但是线程间的互斥和共享又引入了复杂度，可能一不小心就导致了死锁问题\n3. 多线程会出现互相影响的情况，某个线程出现异常时，可能导致整个进程退出（例\n如内存越界）\n4. TPC还是存在CPU线程调度和切换代价的问题。\n \n因此，TPC方案本质上和PPC方案基本类似，在并发几百连接的场景下，反而更多的是采用PPC的方案，因为PPC方案不会有死锁的风险，也不会多进程互相影响，稳定性更高。\n\n## prethread 预先创建线程，省去创建线程的操作\n\n实现方式：\n\n1. 主进程accept，然后将连接交给某个线程处理。\n2. 子线程都尝试去accept，最终只有一个钱程accept成功\n\n![](2023-05-22-22-12-09.png) \n\n## Reactor 非阻塞同步网络模型模型\n\n>下面就是大名鼎鼎的、厉害得不得了的 **Reactor** 模型！！！\n\nPPC方案最主要的问题就是每个连接都要创建进程（以PPC和进程为例，换成TPC和线程，原理是一样的），连接结束后进程就销毁了，这样做其实是很大的浪费。为了解决这个问题，一个自然而然的想法就是资源复用，即不再单独为每个连接创建进程，而是创建一个进程池，将连接分配给进程，一个进程可以处理多个连接的业务。\n\n引入资源池的处理方式后，会引出一个新的问题：进程如何才能高效地处理多个连接的业务？当一个连接一个进程时，进程可以采用“read－＞业务处理－＞write”的处理流程，如果当前连接没有数据可以读，则进程就**阻塞**在read操作上。这种阻塞的方式在一个连接一个进程的场景下没有问题，但如果一个进程处理多个连接，进程阻塞在某个连接的read操作上，此时即使其他连接有数据可读，进程也无法去处理，很显然这样是无法做到高性能的。\n\n解决这个问题的最简单的方式是将 read 操作改为非阻塞，然后进程不断地轮询多个连接。  \n这种方式能够解决阻塞的问题，但解决的方式并不优雅。首先轮询是要消耗 CPU 的；其次如果一个进程处理几千上万的连接，则轮询的效率是很低的。\n为了能够更好地解决上述问题，一种自然而然的想法就是只有当连接上有数据的时候进程才去处理，这就是 I/O 多路复用技术的来源。\n\nI/O 多路复用技术归纳起来有如下两个关键实现点：\n1. 当多条连接共用一个阻塞对象后，进程只需要在一个阻塞对象上等待，而无须再轮询所有连接。\n2. 当某条连接有新的数据可以处理时，操作系统会通知进程，进程从阻塞状态返回，开始进行业务处理。\n\nReactor：即I/O多路复用统一监昕事件，收到事件后分配（Dispatch）给某个进程\nReactor模式的具体实现方案灵活多变，主要体现在如下两点\n1. Reactor的数量可以变化：可以是一个Reactor，也可以是多个Reactor\n2. 资源池的数量可以变化：以进程为例，可以是单个进程，也可以是多个进程（线程类似）\n\n### 单 Reactor 单进/线程\n\n![](2023-05-22-22-19-44.png)\n\n1. Reactor对象通过select监控连接事件，收到事件后通过dispatch进行分发。\n2. 如果是连接建立的事件，则由Acceptor处理，Acceptor通过accept接受连接，并创\n3. 建一个Handler来处理连接后续的各种事件。\n4. 如果不是连接建立事件，则Reactor会调用连接对应的Handler(第2步中创建的Handler)来进行响应。\n5. Handler会完成read-＞业务处理－＞send的完整业务流程。\n\n单Reactor单进程的模式优点就是很简单，没有进程间通信，没有进程竞争，全部都在同一个进程内完成。但其缺点也是非常明显，具体表现如下：\n\n1. 只有一个进程，无法发挥多核CPU的性能；只能采取部署多个系统来利用多核CPU,但这样会带来运维复杂度，本来只要维护一个系统，用这种方式需要在一台机器上维护多套系统。\n2. Handler在处理某个连接上的业务时，整个进程无法处理其他连接的事件，很容易导致性能瓶颈。\n\n因此，单Reactor单进程的方案在实践中应用场景不多，只适用于业务处理非常快速的场景，目前比较著名的开源软件中使用单Reactor单进程的是Redis。\n\n### 单 Reactor 多线程（不是多进程）\n\n![](2023-05-22-22-25-16.png)\n\n1. 主线程中，Reactor对象通过select监控连接事件，收到事件后通过dispatch进行分发。\n2. 如果是连接建立的事件，则由Acceptor处理，Acceptor通过accept接受连接，并创建一个Handler来处理连接后续的各种事件。\n3. 如果不是连接建立事件，则Reactor会调用连接对应的Handler(第2步中创建的Handler)来进行响应。\n4. Handler只负责响应事件，不进行业务处理；Handler通过read读取到数据后，会发给Processor进行业务处理。\n5. Processor会在独立的子钱程中完成真正的业务处理，然后将响应结果发给主进程的Handler处理；Handler收到响应后通过send将响应结果返回给client。\n \n单Reactor多线程方案能够充分利用多核多CPU的处理能力，但同时也存在如下问题：\n1. 多线程数据共享和访问比较复杂。例如，子线程完成业务处理后，要把结果传递给主线程的Reactor进行发送，这里涉及共享数据的互斥和保护机制。以Java的NIO为例，Selector是线程安全的，但是通过elector.selectKeys()返回的键的集合是非线程安全的，对selectedkeys的处理必须单线程处理或采取同步措施进行保护。\n2. Reactor承担所有事件的监昕和响应，只在主线程中运行，瞬间高并发时会成为性能瓶颈。\n\n\n### 多 Reactor 多进程/线程\n\n为了解决单 Reactor 多线程的问题，最直观的方法就是将单 Reactor 改为多 Reactor ，这就产生了第三个方案：  \n多Reactor多进程/线程!\n\n多Reactor多进程/线程方案示意图如下（以进程为例）\n\n![](2023-05-22-22-29-46.png)\n\n方案详细说明如下：\n\n1. 父进程中mainReactor对象通过select监控连接建立事件，收到事件后通过Acceptor接收，将新的连接分配给某个子进程。\n2. 子进程的subReactor将mainReactor分配的连接加入连接队列进行监听，并创建一个Handler用于处理连接的各种事件。\n3. 当有新的事件发生时，subReactor会调用连接对应的Handler(即第2步中创建的Handler)来进行响应。\n4. Handler完成read -> 业务处理 -> send的完整业务流程。\n\n多Reactor多进程/线程的方案看起来比单Reactor多线程要复杂，但实际实现时反而更加简单，主要原因如下：\n\n1. 父进程和子进程的职责非常明确，父进程只负责接收新连接，子进程负责完成后续的业务处理。\n2. 父进程和子进程的交互很简单，父进程只需要把新连接传给子进程，子进程无须返回数据。\n3. 子进程之间是互相独立的，无须同步共享之类的处理（这里仅限于网络模型相关的select、read、send等无须同步共享，“业务处理”还是有可能需要同步共享的）。\n\n目前采用多Reactor多进程实现的著名的开源系统是Nginx，采用多Reactor多线程实现有Memcache和Netty.\n\n## Proactor 非阻塞异步网络模型\n\n>接下来就是举世闻名的、牛逼得不得了的 **Proactor** 模型！！！\n\n![](2023-05-22-22-34-09.png)\n\n方案详细说明如下：\n\n1. ProactorInitiator负责创建Proactor和Handler，并将Proactor和Handler都通过As归chronousOperationProcessor注册到内核。\n2. AsynchronousOperationProcessor负责处理注册请求，并完成1/0操作。\n3. AsynchronousOperationProcessor完成I/O操作后通知Proactor。\n4. Proactor根据不同的事件类型回调不同的Handler进行业务处理。\n5. Handler完成业务处理，Handler也可以注册新的Handler到内核进程。\n\n理论上Proactor比Reactor效率要高一些，异步I/O能够充分利用DMA特性，让I/O操作与计算重叠。\n\n但实现真正的异步I/O，操作系统需要做大量的工作，目前Windows下通过IOCP实现了真正的异步I/O，\n而在Linux系统下的AIO并不完善，因此在Linux下实现高并发网络编程时都是以Reactor模式为主","source":"_posts/网络编程模型.md","raw":"---\ntitle: 网络编程模型\ndate: 2023-05-22 21:53:21\ntags: 网络\ncover: 2023-05-22-22-34-09.png\n---\n# 网络编程模型\n\n网络编程模型的核心：\n\n    服务器如何管理连接\n\n    服务器如何处理请求 \n\n以上两个设计点最终都和操作系统的 I/O 模型及进程模型相关\n\n    I/O模型：阻塞 、非阻塞、同步 、异步 \n\n    进程模型：单进程、 多进程、多线程\n\n## PPC (Process per Connection)\n\n![](2023-05-22-21-55-38.png)\n\n1. 父进程接受连接（图中accept）\n2. 父进程“fork”子进程（图中fork）\n3. 子进程处理连接的读写请求（图中子进程read、业务处理、write）\n4. 子进程关闭连接（图中子进程中的close）\n\nPPC 模式实现简单，比较适合服务器的连接数没那么多的情况(eg. pgsql)\n\n而互联网兴起后，服务器的并发和访问量从几十剧增到成千上万，这种模式的弊端就凸显出来了，主要体现在如下几个方面:  \n1. fork代价高：站在操作系统的角度，创建一个进程的代价是很高的，需要分配很多内核资源，需要将内存映像从父进程复制到子进程。\n2. 父子进程通信复杂：父进程“fork”子进程时，文件描述符可以通过内存映像复制从父进程传到子进程，但“fork”完成后，父子进程通信就比较麻烦了，需要采用IPC(InterprocessCommunication)之类的进程通信方案。\n3. 进程数量增大后对操作系统压力较大：如果每个连接存活时间比较长，而且新的连接又源源不断的进来，则进程数量会越来越多，操作系统进程调度和切换的频率也越来越高，系统的压力也会越来越大。\n\n因此，一般情况下，PPC方案能处理的并发连接数量最大也就几百。\n\n针对PPC模式不同的缺点，产生了不同的解决方案\n\n## prefofk 提前创建进程\n\n省去“fork”进程的操作，让用户的访问更快、体验更好\n\n![](2023-05-22-21-59-46.png)\n\n\nprefork的实现关键就是多个子进程都accept同一个socket，当有新的接进入时，操作系统保证只有一个进程能最后accept成功\n\nprefork模式和PPC一样，还是存在父子进程通信复杂、支持的并发连接数量有限的问题\n\n## TPC (Thread per Connection)\n\n![](2023-05-22-22-02-22.png)\n\n1. 父进程接受连接（图中accept）\n2. 父进程创建子线程（图中pthread）\n3. 子线程处理连接的读写请求（图中子线程read、业务处理、rite）\n4. 子线程关闭连接（图中子线程中的close）\n\nTPC虽然解决了fork代价高和进程通信复杂的问题，但是也引入了新的问题:\n\n1. 创建线程虽然比创建进程代价低，但并不是没有代价，高并发时（例如每秒上万连接）还是有性能问题\n2. 无须进程间通信，但是线程间的互斥和共享又引入了复杂度，可能一不小心就导致了死锁问题\n3. 多线程会出现互相影响的情况，某个线程出现异常时，可能导致整个进程退出（例\n如内存越界）\n4. TPC还是存在CPU线程调度和切换代价的问题。\n \n因此，TPC方案本质上和PPC方案基本类似，在并发几百连接的场景下，反而更多的是采用PPC的方案，因为PPC方案不会有死锁的风险，也不会多进程互相影响，稳定性更高。\n\n## prethread 预先创建线程，省去创建线程的操作\n\n实现方式：\n\n1. 主进程accept，然后将连接交给某个线程处理。\n2. 子线程都尝试去accept，最终只有一个钱程accept成功\n\n![](2023-05-22-22-12-09.png) \n\n## Reactor 非阻塞同步网络模型模型\n\n>下面就是大名鼎鼎的、厉害得不得了的 **Reactor** 模型！！！\n\nPPC方案最主要的问题就是每个连接都要创建进程（以PPC和进程为例，换成TPC和线程，原理是一样的），连接结束后进程就销毁了，这样做其实是很大的浪费。为了解决这个问题，一个自然而然的想法就是资源复用，即不再单独为每个连接创建进程，而是创建一个进程池，将连接分配给进程，一个进程可以处理多个连接的业务。\n\n引入资源池的处理方式后，会引出一个新的问题：进程如何才能高效地处理多个连接的业务？当一个连接一个进程时，进程可以采用“read－＞业务处理－＞write”的处理流程，如果当前连接没有数据可以读，则进程就**阻塞**在read操作上。这种阻塞的方式在一个连接一个进程的场景下没有问题，但如果一个进程处理多个连接，进程阻塞在某个连接的read操作上，此时即使其他连接有数据可读，进程也无法去处理，很显然这样是无法做到高性能的。\n\n解决这个问题的最简单的方式是将 read 操作改为非阻塞，然后进程不断地轮询多个连接。  \n这种方式能够解决阻塞的问题，但解决的方式并不优雅。首先轮询是要消耗 CPU 的；其次如果一个进程处理几千上万的连接，则轮询的效率是很低的。\n为了能够更好地解决上述问题，一种自然而然的想法就是只有当连接上有数据的时候进程才去处理，这就是 I/O 多路复用技术的来源。\n\nI/O 多路复用技术归纳起来有如下两个关键实现点：\n1. 当多条连接共用一个阻塞对象后，进程只需要在一个阻塞对象上等待，而无须再轮询所有连接。\n2. 当某条连接有新的数据可以处理时，操作系统会通知进程，进程从阻塞状态返回，开始进行业务处理。\n\nReactor：即I/O多路复用统一监昕事件，收到事件后分配（Dispatch）给某个进程\nReactor模式的具体实现方案灵活多变，主要体现在如下两点\n1. Reactor的数量可以变化：可以是一个Reactor，也可以是多个Reactor\n2. 资源池的数量可以变化：以进程为例，可以是单个进程，也可以是多个进程（线程类似）\n\n### 单 Reactor 单进/线程\n\n![](2023-05-22-22-19-44.png)\n\n1. Reactor对象通过select监控连接事件，收到事件后通过dispatch进行分发。\n2. 如果是连接建立的事件，则由Acceptor处理，Acceptor通过accept接受连接，并创\n3. 建一个Handler来处理连接后续的各种事件。\n4. 如果不是连接建立事件，则Reactor会调用连接对应的Handler(第2步中创建的Handler)来进行响应。\n5. Handler会完成read-＞业务处理－＞send的完整业务流程。\n\n单Reactor单进程的模式优点就是很简单，没有进程间通信，没有进程竞争，全部都在同一个进程内完成。但其缺点也是非常明显，具体表现如下：\n\n1. 只有一个进程，无法发挥多核CPU的性能；只能采取部署多个系统来利用多核CPU,但这样会带来运维复杂度，本来只要维护一个系统，用这种方式需要在一台机器上维护多套系统。\n2. Handler在处理某个连接上的业务时，整个进程无法处理其他连接的事件，很容易导致性能瓶颈。\n\n因此，单Reactor单进程的方案在实践中应用场景不多，只适用于业务处理非常快速的场景，目前比较著名的开源软件中使用单Reactor单进程的是Redis。\n\n### 单 Reactor 多线程（不是多进程）\n\n![](2023-05-22-22-25-16.png)\n\n1. 主线程中，Reactor对象通过select监控连接事件，收到事件后通过dispatch进行分发。\n2. 如果是连接建立的事件，则由Acceptor处理，Acceptor通过accept接受连接，并创建一个Handler来处理连接后续的各种事件。\n3. 如果不是连接建立事件，则Reactor会调用连接对应的Handler(第2步中创建的Handler)来进行响应。\n4. Handler只负责响应事件，不进行业务处理；Handler通过read读取到数据后，会发给Processor进行业务处理。\n5. Processor会在独立的子钱程中完成真正的业务处理，然后将响应结果发给主进程的Handler处理；Handler收到响应后通过send将响应结果返回给client。\n \n单Reactor多线程方案能够充分利用多核多CPU的处理能力，但同时也存在如下问题：\n1. 多线程数据共享和访问比较复杂。例如，子线程完成业务处理后，要把结果传递给主线程的Reactor进行发送，这里涉及共享数据的互斥和保护机制。以Java的NIO为例，Selector是线程安全的，但是通过elector.selectKeys()返回的键的集合是非线程安全的，对selectedkeys的处理必须单线程处理或采取同步措施进行保护。\n2. Reactor承担所有事件的监昕和响应，只在主线程中运行，瞬间高并发时会成为性能瓶颈。\n\n\n### 多 Reactor 多进程/线程\n\n为了解决单 Reactor 多线程的问题，最直观的方法就是将单 Reactor 改为多 Reactor ，这就产生了第三个方案：  \n多Reactor多进程/线程!\n\n多Reactor多进程/线程方案示意图如下（以进程为例）\n\n![](2023-05-22-22-29-46.png)\n\n方案详细说明如下：\n\n1. 父进程中mainReactor对象通过select监控连接建立事件，收到事件后通过Acceptor接收，将新的连接分配给某个子进程。\n2. 子进程的subReactor将mainReactor分配的连接加入连接队列进行监听，并创建一个Handler用于处理连接的各种事件。\n3. 当有新的事件发生时，subReactor会调用连接对应的Handler(即第2步中创建的Handler)来进行响应。\n4. Handler完成read -> 业务处理 -> send的完整业务流程。\n\n多Reactor多进程/线程的方案看起来比单Reactor多线程要复杂，但实际实现时反而更加简单，主要原因如下：\n\n1. 父进程和子进程的职责非常明确，父进程只负责接收新连接，子进程负责完成后续的业务处理。\n2. 父进程和子进程的交互很简单，父进程只需要把新连接传给子进程，子进程无须返回数据。\n3. 子进程之间是互相独立的，无须同步共享之类的处理（这里仅限于网络模型相关的select、read、send等无须同步共享，“业务处理”还是有可能需要同步共享的）。\n\n目前采用多Reactor多进程实现的著名的开源系统是Nginx，采用多Reactor多线程实现有Memcache和Netty.\n\n## Proactor 非阻塞异步网络模型\n\n>接下来就是举世闻名的、牛逼得不得了的 **Proactor** 模型！！！\n\n![](2023-05-22-22-34-09.png)\n\n方案详细说明如下：\n\n1. ProactorInitiator负责创建Proactor和Handler，并将Proactor和Handler都通过As归chronousOperationProcessor注册到内核。\n2. AsynchronousOperationProcessor负责处理注册请求，并完成1/0操作。\n3. AsynchronousOperationProcessor完成I/O操作后通知Proactor。\n4. Proactor根据不同的事件类型回调不同的Handler进行业务处理。\n5. Handler完成业务处理，Handler也可以注册新的Handler到内核进程。\n\n理论上Proactor比Reactor效率要高一些，异步I/O能够充分利用DMA特性，让I/O操作与计算重叠。\n\n但实现真正的异步I/O，操作系统需要做大量的工作，目前Windows下通过IOCP实现了真正的异步I/O，\n而在Linux系统下的AIO并不完善，因此在Linux下实现高并发网络编程时都是以Reactor模式为主","slug":"网络编程模型","published":1,"updated":"2023-06-23T01:07:19.845Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5vj006ylv9e199a7gcc","content":"<h1 id=\"网络编程模型\"><a href=\"#网络编程模型\" class=\"headerlink\" title=\"网络编程模型\"></a>网络编程模型</h1><p>网络编程模型的核心：</p>\n<pre><code>服务器如何管理连接\n\n服务器如何处理请求 \n</code></pre>\n<p>以上两个设计点最终都和操作系统的 I&#x2F;O 模型及进程模型相关</p>\n<pre><code>I/O模型：阻塞 、非阻塞、同步 、异步 \n\n进程模型：单进程、 多进程、多线程\n</code></pre>\n<h2 id=\"PPC-Process-per-Connection\"><a href=\"#PPC-Process-per-Connection\" class=\"headerlink\" title=\"PPC (Process per Connection)\"></a>PPC (Process per Connection)</h2><p><img src=\"/2023/05/22/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B/2023-05-22-21-55-38.png\"></p>\n<ol>\n<li>父进程接受连接（图中accept）</li>\n<li>父进程“fork”子进程（图中fork）</li>\n<li>子进程处理连接的读写请求（图中子进程read、业务处理、write）</li>\n<li>子进程关闭连接（图中子进程中的close）</li>\n</ol>\n<p>PPC 模式实现简单，比较适合服务器的连接数没那么多的情况(eg. pgsql)</p>\n<p>而互联网兴起后，服务器的并发和访问量从几十剧增到成千上万，这种模式的弊端就凸显出来了，主要体现在如下几个方面:  </p>\n<ol>\n<li>fork代价高：站在操作系统的角度，创建一个进程的代价是很高的，需要分配很多内核资源，需要将内存映像从父进程复制到子进程。</li>\n<li>父子进程通信复杂：父进程“fork”子进程时，文件描述符可以通过内存映像复制从父进程传到子进程，但“fork”完成后，父子进程通信就比较麻烦了，需要采用IPC(InterprocessCommunication)之类的进程通信方案。</li>\n<li>进程数量增大后对操作系统压力较大：如果每个连接存活时间比较长，而且新的连接又源源不断的进来，则进程数量会越来越多，操作系统进程调度和切换的频率也越来越高，系统的压力也会越来越大。</li>\n</ol>\n<p>因此，一般情况下，PPC方案能处理的并发连接数量最大也就几百。</p>\n<p>针对PPC模式不同的缺点，产生了不同的解决方案</p>\n<h2 id=\"prefofk-提前创建进程\"><a href=\"#prefofk-提前创建进程\" class=\"headerlink\" title=\"prefofk 提前创建进程\"></a>prefofk 提前创建进程</h2><p>省去“fork”进程的操作，让用户的访问更快、体验更好</p>\n<p><img src=\"/2023/05/22/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B/2023-05-22-21-59-46.png\"></p>\n<p>prefork的实现关键就是多个子进程都accept同一个socket，当有新的接进入时，操作系统保证只有一个进程能最后accept成功</p>\n<p>prefork模式和PPC一样，还是存在父子进程通信复杂、支持的并发连接数量有限的问题</p>\n<h2 id=\"TPC-Thread-per-Connection\"><a href=\"#TPC-Thread-per-Connection\" class=\"headerlink\" title=\"TPC (Thread per Connection)\"></a>TPC (Thread per Connection)</h2><p><img src=\"/2023/05/22/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B/2023-05-22-22-02-22.png\"></p>\n<ol>\n<li>父进程接受连接（图中accept）</li>\n<li>父进程创建子线程（图中pthread）</li>\n<li>子线程处理连接的读写请求（图中子线程read、业务处理、rite）</li>\n<li>子线程关闭连接（图中子线程中的close）</li>\n</ol>\n<p>TPC虽然解决了fork代价高和进程通信复杂的问题，但是也引入了新的问题:</p>\n<ol>\n<li>创建线程虽然比创建进程代价低，但并不是没有代价，高并发时（例如每秒上万连接）还是有性能问题</li>\n<li>无须进程间通信，但是线程间的互斥和共享又引入了复杂度，可能一不小心就导致了死锁问题</li>\n<li>多线程会出现互相影响的情况，某个线程出现异常时，可能导致整个进程退出（例<br>如内存越界）</li>\n<li>TPC还是存在CPU线程调度和切换代价的问题。</li>\n</ol>\n<p>因此，TPC方案本质上和PPC方案基本类似，在并发几百连接的场景下，反而更多的是采用PPC的方案，因为PPC方案不会有死锁的风险，也不会多进程互相影响，稳定性更高。</p>\n<h2 id=\"prethread-预先创建线程，省去创建线程的操作\"><a href=\"#prethread-预先创建线程，省去创建线程的操作\" class=\"headerlink\" title=\"prethread 预先创建线程，省去创建线程的操作\"></a>prethread 预先创建线程，省去创建线程的操作</h2><p>实现方式：</p>\n<ol>\n<li>主进程accept，然后将连接交给某个线程处理。</li>\n<li>子线程都尝试去accept，最终只有一个钱程accept成功</li>\n</ol>\n<p><img src=\"/2023/05/22/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B/2023-05-22-22-12-09.png\"> </p>\n<h2 id=\"Reactor-非阻塞同步网络模型模型\"><a href=\"#Reactor-非阻塞同步网络模型模型\" class=\"headerlink\" title=\"Reactor 非阻塞同步网络模型模型\"></a>Reactor 非阻塞同步网络模型模型</h2><blockquote>\n<p>下面就是大名鼎鼎的、厉害得不得了的 <strong>Reactor</strong> 模型！！！</p>\n</blockquote>\n<p>PPC方案最主要的问题就是每个连接都要创建进程（以PPC和进程为例，换成TPC和线程，原理是一样的），连接结束后进程就销毁了，这样做其实是很大的浪费。为了解决这个问题，一个自然而然的想法就是资源复用，即不再单独为每个连接创建进程，而是创建一个进程池，将连接分配给进程，一个进程可以处理多个连接的业务。</p>\n<p>引入资源池的处理方式后，会引出一个新的问题：进程如何才能高效地处理多个连接的业务？当一个连接一个进程时，进程可以采用“read－＞业务处理－＞write”的处理流程，如果当前连接没有数据可以读，则进程就<strong>阻塞</strong>在read操作上。这种阻塞的方式在一个连接一个进程的场景下没有问题，但如果一个进程处理多个连接，进程阻塞在某个连接的read操作上，此时即使其他连接有数据可读，进程也无法去处理，很显然这样是无法做到高性能的。</p>\n<p>解决这个问题的最简单的方式是将 read 操作改为非阻塞，然后进程不断地轮询多个连接。<br>这种方式能够解决阻塞的问题，但解决的方式并不优雅。首先轮询是要消耗 CPU 的；其次如果一个进程处理几千上万的连接，则轮询的效率是很低的。<br>为了能够更好地解决上述问题，一种自然而然的想法就是只有当连接上有数据的时候进程才去处理，这就是 I&#x2F;O 多路复用技术的来源。</p>\n<p>I&#x2F;O 多路复用技术归纳起来有如下两个关键实现点：</p>\n<ol>\n<li>当多条连接共用一个阻塞对象后，进程只需要在一个阻塞对象上等待，而无须再轮询所有连接。</li>\n<li>当某条连接有新的数据可以处理时，操作系统会通知进程，进程从阻塞状态返回，开始进行业务处理。</li>\n</ol>\n<p>Reactor：即I&#x2F;O多路复用统一监昕事件，收到事件后分配（Dispatch）给某个进程<br>Reactor模式的具体实现方案灵活多变，主要体现在如下两点</p>\n<ol>\n<li>Reactor的数量可以变化：可以是一个Reactor，也可以是多个Reactor</li>\n<li>资源池的数量可以变化：以进程为例，可以是单个进程，也可以是多个进程（线程类似）</li>\n</ol>\n<h3 id=\"单-Reactor-单进-线程\"><a href=\"#单-Reactor-单进-线程\" class=\"headerlink\" title=\"单 Reactor 单进&#x2F;线程\"></a>单 Reactor 单进&#x2F;线程</h3><p><img src=\"/2023/05/22/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B/2023-05-22-22-19-44.png\"></p>\n<ol>\n<li>Reactor对象通过select监控连接事件，收到事件后通过dispatch进行分发。</li>\n<li>如果是连接建立的事件，则由Acceptor处理，Acceptor通过accept接受连接，并创</li>\n<li>建一个Handler来处理连接后续的各种事件。</li>\n<li>如果不是连接建立事件，则Reactor会调用连接对应的Handler(第2步中创建的Handler)来进行响应。</li>\n<li>Handler会完成read-＞业务处理－＞send的完整业务流程。</li>\n</ol>\n<p>单Reactor单进程的模式优点就是很简单，没有进程间通信，没有进程竞争，全部都在同一个进程内完成。但其缺点也是非常明显，具体表现如下：</p>\n<ol>\n<li>只有一个进程，无法发挥多核CPU的性能；只能采取部署多个系统来利用多核CPU,但这样会带来运维复杂度，本来只要维护一个系统，用这种方式需要在一台机器上维护多套系统。</li>\n<li>Handler在处理某个连接上的业务时，整个进程无法处理其他连接的事件，很容易导致性能瓶颈。</li>\n</ol>\n<p>因此，单Reactor单进程的方案在实践中应用场景不多，只适用于业务处理非常快速的场景，目前比较著名的开源软件中使用单Reactor单进程的是Redis。</p>\n<h3 id=\"单-Reactor-多线程（不是多进程）\"><a href=\"#单-Reactor-多线程（不是多进程）\" class=\"headerlink\" title=\"单 Reactor 多线程（不是多进程）\"></a>单 Reactor 多线程（不是多进程）</h3><p><img src=\"/2023/05/22/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B/2023-05-22-22-25-16.png\"></p>\n<ol>\n<li>主线程中，Reactor对象通过select监控连接事件，收到事件后通过dispatch进行分发。</li>\n<li>如果是连接建立的事件，则由Acceptor处理，Acceptor通过accept接受连接，并创建一个Handler来处理连接后续的各种事件。</li>\n<li>如果不是连接建立事件，则Reactor会调用连接对应的Handler(第2步中创建的Handler)来进行响应。</li>\n<li>Handler只负责响应事件，不进行业务处理；Handler通过read读取到数据后，会发给Processor进行业务处理。</li>\n<li>Processor会在独立的子钱程中完成真正的业务处理，然后将响应结果发给主进程的Handler处理；Handler收到响应后通过send将响应结果返回给client。</li>\n</ol>\n<p>单Reactor多线程方案能够充分利用多核多CPU的处理能力，但同时也存在如下问题：</p>\n<ol>\n<li>多线程数据共享和访问比较复杂。例如，子线程完成业务处理后，要把结果传递给主线程的Reactor进行发送，这里涉及共享数据的互斥和保护机制。以Java的NIO为例，Selector是线程安全的，但是通过elector.selectKeys()返回的键的集合是非线程安全的，对selectedkeys的处理必须单线程处理或采取同步措施进行保护。</li>\n<li>Reactor承担所有事件的监昕和响应，只在主线程中运行，瞬间高并发时会成为性能瓶颈。</li>\n</ol>\n<h3 id=\"多-Reactor-多进程-线程\"><a href=\"#多-Reactor-多进程-线程\" class=\"headerlink\" title=\"多 Reactor 多进程&#x2F;线程\"></a>多 Reactor 多进程&#x2F;线程</h3><p>为了解决单 Reactor 多线程的问题，最直观的方法就是将单 Reactor 改为多 Reactor ，这就产生了第三个方案：<br>多Reactor多进程&#x2F;线程!</p>\n<p>多Reactor多进程&#x2F;线程方案示意图如下（以进程为例）</p>\n<p><img src=\"/2023/05/22/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B/2023-05-22-22-29-46.png\"></p>\n<p>方案详细说明如下：</p>\n<ol>\n<li>父进程中mainReactor对象通过select监控连接建立事件，收到事件后通过Acceptor接收，将新的连接分配给某个子进程。</li>\n<li>子进程的subReactor将mainReactor分配的连接加入连接队列进行监听，并创建一个Handler用于处理连接的各种事件。</li>\n<li>当有新的事件发生时，subReactor会调用连接对应的Handler(即第2步中创建的Handler)来进行响应。</li>\n<li>Handler完成read -&gt; 业务处理 -&gt; send的完整业务流程。</li>\n</ol>\n<p>多Reactor多进程&#x2F;线程的方案看起来比单Reactor多线程要复杂，但实际实现时反而更加简单，主要原因如下：</p>\n<ol>\n<li>父进程和子进程的职责非常明确，父进程只负责接收新连接，子进程负责完成后续的业务处理。</li>\n<li>父进程和子进程的交互很简单，父进程只需要把新连接传给子进程，子进程无须返回数据。</li>\n<li>子进程之间是互相独立的，无须同步共享之类的处理（这里仅限于网络模型相关的select、read、send等无须同步共享，“业务处理”还是有可能需要同步共享的）。</li>\n</ol>\n<p>目前采用多Reactor多进程实现的著名的开源系统是Nginx，采用多Reactor多线程实现有Memcache和Netty.</p>\n<h2 id=\"Proactor-非阻塞异步网络模型\"><a href=\"#Proactor-非阻塞异步网络模型\" class=\"headerlink\" title=\"Proactor 非阻塞异步网络模型\"></a>Proactor 非阻塞异步网络模型</h2><blockquote>\n<p>接下来就是举世闻名的、牛逼得不得了的 <strong>Proactor</strong> 模型！！！</p>\n</blockquote>\n<p><img src=\"/2023/05/22/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B/2023-05-22-22-34-09.png\"></p>\n<p>方案详细说明如下：</p>\n<ol>\n<li>ProactorInitiator负责创建Proactor和Handler，并将Proactor和Handler都通过As归chronousOperationProcessor注册到内核。</li>\n<li>AsynchronousOperationProcessor负责处理注册请求，并完成1&#x2F;0操作。</li>\n<li>AsynchronousOperationProcessor完成I&#x2F;O操作后通知Proactor。</li>\n<li>Proactor根据不同的事件类型回调不同的Handler进行业务处理。</li>\n<li>Handler完成业务处理，Handler也可以注册新的Handler到内核进程。</li>\n</ol>\n<p>理论上Proactor比Reactor效率要高一些，异步I&#x2F;O能够充分利用DMA特性，让I&#x2F;O操作与计算重叠。</p>\n<p>但实现真正的异步I&#x2F;O，操作系统需要做大量的工作，目前Windows下通过IOCP实现了真正的异步I&#x2F;O，<br>而在Linux系统下的AIO并不完善，因此在Linux下实现高并发网络编程时都是以Reactor模式为主</p>\n","site":{"data":{}},"cover_type":"img","excerpt":"","more":"<h1 id=\"网络编程模型\"><a href=\"#网络编程模型\" class=\"headerlink\" title=\"网络编程模型\"></a>网络编程模型</h1><p>网络编程模型的核心：</p>\n<pre><code>服务器如何管理连接\n\n服务器如何处理请求 \n</code></pre>\n<p>以上两个设计点最终都和操作系统的 I&#x2F;O 模型及进程模型相关</p>\n<pre><code>I/O模型：阻塞 、非阻塞、同步 、异步 \n\n进程模型：单进程、 多进程、多线程\n</code></pre>\n<h2 id=\"PPC-Process-per-Connection\"><a href=\"#PPC-Process-per-Connection\" class=\"headerlink\" title=\"PPC (Process per Connection)\"></a>PPC (Process per Connection)</h2><p><img src=\"/2023/05/22/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B/2023-05-22-21-55-38.png\"></p>\n<ol>\n<li>父进程接受连接（图中accept）</li>\n<li>父进程“fork”子进程（图中fork）</li>\n<li>子进程处理连接的读写请求（图中子进程read、业务处理、write）</li>\n<li>子进程关闭连接（图中子进程中的close）</li>\n</ol>\n<p>PPC 模式实现简单，比较适合服务器的连接数没那么多的情况(eg. pgsql)</p>\n<p>而互联网兴起后，服务器的并发和访问量从几十剧增到成千上万，这种模式的弊端就凸显出来了，主要体现在如下几个方面:  </p>\n<ol>\n<li>fork代价高：站在操作系统的角度，创建一个进程的代价是很高的，需要分配很多内核资源，需要将内存映像从父进程复制到子进程。</li>\n<li>父子进程通信复杂：父进程“fork”子进程时，文件描述符可以通过内存映像复制从父进程传到子进程，但“fork”完成后，父子进程通信就比较麻烦了，需要采用IPC(InterprocessCommunication)之类的进程通信方案。</li>\n<li>进程数量增大后对操作系统压力较大：如果每个连接存活时间比较长，而且新的连接又源源不断的进来，则进程数量会越来越多，操作系统进程调度和切换的频率也越来越高，系统的压力也会越来越大。</li>\n</ol>\n<p>因此，一般情况下，PPC方案能处理的并发连接数量最大也就几百。</p>\n<p>针对PPC模式不同的缺点，产生了不同的解决方案</p>\n<h2 id=\"prefofk-提前创建进程\"><a href=\"#prefofk-提前创建进程\" class=\"headerlink\" title=\"prefofk 提前创建进程\"></a>prefofk 提前创建进程</h2><p>省去“fork”进程的操作，让用户的访问更快、体验更好</p>\n<p><img src=\"/2023/05/22/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B/2023-05-22-21-59-46.png\"></p>\n<p>prefork的实现关键就是多个子进程都accept同一个socket，当有新的接进入时，操作系统保证只有一个进程能最后accept成功</p>\n<p>prefork模式和PPC一样，还是存在父子进程通信复杂、支持的并发连接数量有限的问题</p>\n<h2 id=\"TPC-Thread-per-Connection\"><a href=\"#TPC-Thread-per-Connection\" class=\"headerlink\" title=\"TPC (Thread per Connection)\"></a>TPC (Thread per Connection)</h2><p><img src=\"/2023/05/22/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B/2023-05-22-22-02-22.png\"></p>\n<ol>\n<li>父进程接受连接（图中accept）</li>\n<li>父进程创建子线程（图中pthread）</li>\n<li>子线程处理连接的读写请求（图中子线程read、业务处理、rite）</li>\n<li>子线程关闭连接（图中子线程中的close）</li>\n</ol>\n<p>TPC虽然解决了fork代价高和进程通信复杂的问题，但是也引入了新的问题:</p>\n<ol>\n<li>创建线程虽然比创建进程代价低，但并不是没有代价，高并发时（例如每秒上万连接）还是有性能问题</li>\n<li>无须进程间通信，但是线程间的互斥和共享又引入了复杂度，可能一不小心就导致了死锁问题</li>\n<li>多线程会出现互相影响的情况，某个线程出现异常时，可能导致整个进程退出（例<br>如内存越界）</li>\n<li>TPC还是存在CPU线程调度和切换代价的问题。</li>\n</ol>\n<p>因此，TPC方案本质上和PPC方案基本类似，在并发几百连接的场景下，反而更多的是采用PPC的方案，因为PPC方案不会有死锁的风险，也不会多进程互相影响，稳定性更高。</p>\n<h2 id=\"prethread-预先创建线程，省去创建线程的操作\"><a href=\"#prethread-预先创建线程，省去创建线程的操作\" class=\"headerlink\" title=\"prethread 预先创建线程，省去创建线程的操作\"></a>prethread 预先创建线程，省去创建线程的操作</h2><p>实现方式：</p>\n<ol>\n<li>主进程accept，然后将连接交给某个线程处理。</li>\n<li>子线程都尝试去accept，最终只有一个钱程accept成功</li>\n</ol>\n<p><img src=\"/2023/05/22/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B/2023-05-22-22-12-09.png\"> </p>\n<h2 id=\"Reactor-非阻塞同步网络模型模型\"><a href=\"#Reactor-非阻塞同步网络模型模型\" class=\"headerlink\" title=\"Reactor 非阻塞同步网络模型模型\"></a>Reactor 非阻塞同步网络模型模型</h2><blockquote>\n<p>下面就是大名鼎鼎的、厉害得不得了的 <strong>Reactor</strong> 模型！！！</p>\n</blockquote>\n<p>PPC方案最主要的问题就是每个连接都要创建进程（以PPC和进程为例，换成TPC和线程，原理是一样的），连接结束后进程就销毁了，这样做其实是很大的浪费。为了解决这个问题，一个自然而然的想法就是资源复用，即不再单独为每个连接创建进程，而是创建一个进程池，将连接分配给进程，一个进程可以处理多个连接的业务。</p>\n<p>引入资源池的处理方式后，会引出一个新的问题：进程如何才能高效地处理多个连接的业务？当一个连接一个进程时，进程可以采用“read－＞业务处理－＞write”的处理流程，如果当前连接没有数据可以读，则进程就<strong>阻塞</strong>在read操作上。这种阻塞的方式在一个连接一个进程的场景下没有问题，但如果一个进程处理多个连接，进程阻塞在某个连接的read操作上，此时即使其他连接有数据可读，进程也无法去处理，很显然这样是无法做到高性能的。</p>\n<p>解决这个问题的最简单的方式是将 read 操作改为非阻塞，然后进程不断地轮询多个连接。<br>这种方式能够解决阻塞的问题，但解决的方式并不优雅。首先轮询是要消耗 CPU 的；其次如果一个进程处理几千上万的连接，则轮询的效率是很低的。<br>为了能够更好地解决上述问题，一种自然而然的想法就是只有当连接上有数据的时候进程才去处理，这就是 I&#x2F;O 多路复用技术的来源。</p>\n<p>I&#x2F;O 多路复用技术归纳起来有如下两个关键实现点：</p>\n<ol>\n<li>当多条连接共用一个阻塞对象后，进程只需要在一个阻塞对象上等待，而无须再轮询所有连接。</li>\n<li>当某条连接有新的数据可以处理时，操作系统会通知进程，进程从阻塞状态返回，开始进行业务处理。</li>\n</ol>\n<p>Reactor：即I&#x2F;O多路复用统一监昕事件，收到事件后分配（Dispatch）给某个进程<br>Reactor模式的具体实现方案灵活多变，主要体现在如下两点</p>\n<ol>\n<li>Reactor的数量可以变化：可以是一个Reactor，也可以是多个Reactor</li>\n<li>资源池的数量可以变化：以进程为例，可以是单个进程，也可以是多个进程（线程类似）</li>\n</ol>\n<h3 id=\"单-Reactor-单进-线程\"><a href=\"#单-Reactor-单进-线程\" class=\"headerlink\" title=\"单 Reactor 单进&#x2F;线程\"></a>单 Reactor 单进&#x2F;线程</h3><p><img src=\"/2023/05/22/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B/2023-05-22-22-19-44.png\"></p>\n<ol>\n<li>Reactor对象通过select监控连接事件，收到事件后通过dispatch进行分发。</li>\n<li>如果是连接建立的事件，则由Acceptor处理，Acceptor通过accept接受连接，并创</li>\n<li>建一个Handler来处理连接后续的各种事件。</li>\n<li>如果不是连接建立事件，则Reactor会调用连接对应的Handler(第2步中创建的Handler)来进行响应。</li>\n<li>Handler会完成read-＞业务处理－＞send的完整业务流程。</li>\n</ol>\n<p>单Reactor单进程的模式优点就是很简单，没有进程间通信，没有进程竞争，全部都在同一个进程内完成。但其缺点也是非常明显，具体表现如下：</p>\n<ol>\n<li>只有一个进程，无法发挥多核CPU的性能；只能采取部署多个系统来利用多核CPU,但这样会带来运维复杂度，本来只要维护一个系统，用这种方式需要在一台机器上维护多套系统。</li>\n<li>Handler在处理某个连接上的业务时，整个进程无法处理其他连接的事件，很容易导致性能瓶颈。</li>\n</ol>\n<p>因此，单Reactor单进程的方案在实践中应用场景不多，只适用于业务处理非常快速的场景，目前比较著名的开源软件中使用单Reactor单进程的是Redis。</p>\n<h3 id=\"单-Reactor-多线程（不是多进程）\"><a href=\"#单-Reactor-多线程（不是多进程）\" class=\"headerlink\" title=\"单 Reactor 多线程（不是多进程）\"></a>单 Reactor 多线程（不是多进程）</h3><p><img src=\"/2023/05/22/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B/2023-05-22-22-25-16.png\"></p>\n<ol>\n<li>主线程中，Reactor对象通过select监控连接事件，收到事件后通过dispatch进行分发。</li>\n<li>如果是连接建立的事件，则由Acceptor处理，Acceptor通过accept接受连接，并创建一个Handler来处理连接后续的各种事件。</li>\n<li>如果不是连接建立事件，则Reactor会调用连接对应的Handler(第2步中创建的Handler)来进行响应。</li>\n<li>Handler只负责响应事件，不进行业务处理；Handler通过read读取到数据后，会发给Processor进行业务处理。</li>\n<li>Processor会在独立的子钱程中完成真正的业务处理，然后将响应结果发给主进程的Handler处理；Handler收到响应后通过send将响应结果返回给client。</li>\n</ol>\n<p>单Reactor多线程方案能够充分利用多核多CPU的处理能力，但同时也存在如下问题：</p>\n<ol>\n<li>多线程数据共享和访问比较复杂。例如，子线程完成业务处理后，要把结果传递给主线程的Reactor进行发送，这里涉及共享数据的互斥和保护机制。以Java的NIO为例，Selector是线程安全的，但是通过elector.selectKeys()返回的键的集合是非线程安全的，对selectedkeys的处理必须单线程处理或采取同步措施进行保护。</li>\n<li>Reactor承担所有事件的监昕和响应，只在主线程中运行，瞬间高并发时会成为性能瓶颈。</li>\n</ol>\n<h3 id=\"多-Reactor-多进程-线程\"><a href=\"#多-Reactor-多进程-线程\" class=\"headerlink\" title=\"多 Reactor 多进程&#x2F;线程\"></a>多 Reactor 多进程&#x2F;线程</h3><p>为了解决单 Reactor 多线程的问题，最直观的方法就是将单 Reactor 改为多 Reactor ，这就产生了第三个方案：<br>多Reactor多进程&#x2F;线程!</p>\n<p>多Reactor多进程&#x2F;线程方案示意图如下（以进程为例）</p>\n<p><img src=\"/2023/05/22/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B/2023-05-22-22-29-46.png\"></p>\n<p>方案详细说明如下：</p>\n<ol>\n<li>父进程中mainReactor对象通过select监控连接建立事件，收到事件后通过Acceptor接收，将新的连接分配给某个子进程。</li>\n<li>子进程的subReactor将mainReactor分配的连接加入连接队列进行监听，并创建一个Handler用于处理连接的各种事件。</li>\n<li>当有新的事件发生时，subReactor会调用连接对应的Handler(即第2步中创建的Handler)来进行响应。</li>\n<li>Handler完成read -&gt; 业务处理 -&gt; send的完整业务流程。</li>\n</ol>\n<p>多Reactor多进程&#x2F;线程的方案看起来比单Reactor多线程要复杂，但实际实现时反而更加简单，主要原因如下：</p>\n<ol>\n<li>父进程和子进程的职责非常明确，父进程只负责接收新连接，子进程负责完成后续的业务处理。</li>\n<li>父进程和子进程的交互很简单，父进程只需要把新连接传给子进程，子进程无须返回数据。</li>\n<li>子进程之间是互相独立的，无须同步共享之类的处理（这里仅限于网络模型相关的select、read、send等无须同步共享，“业务处理”还是有可能需要同步共享的）。</li>\n</ol>\n<p>目前采用多Reactor多进程实现的著名的开源系统是Nginx，采用多Reactor多线程实现有Memcache和Netty.</p>\n<h2 id=\"Proactor-非阻塞异步网络模型\"><a href=\"#Proactor-非阻塞异步网络模型\" class=\"headerlink\" title=\"Proactor 非阻塞异步网络模型\"></a>Proactor 非阻塞异步网络模型</h2><blockquote>\n<p>接下来就是举世闻名的、牛逼得不得了的 <strong>Proactor</strong> 模型！！！</p>\n</blockquote>\n<p><img src=\"/2023/05/22/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B/2023-05-22-22-34-09.png\"></p>\n<p>方案详细说明如下：</p>\n<ol>\n<li>ProactorInitiator负责创建Proactor和Handler，并将Proactor和Handler都通过As归chronousOperationProcessor注册到内核。</li>\n<li>AsynchronousOperationProcessor负责处理注册请求，并完成1&#x2F;0操作。</li>\n<li>AsynchronousOperationProcessor完成I&#x2F;O操作后通知Proactor。</li>\n<li>Proactor根据不同的事件类型回调不同的Handler进行业务处理。</li>\n<li>Handler完成业务处理，Handler也可以注册新的Handler到内核进程。</li>\n</ol>\n<p>理论上Proactor比Reactor效率要高一些，异步I&#x2F;O能够充分利用DMA特性，让I&#x2F;O操作与计算重叠。</p>\n<p>但实现真正的异步I&#x2F;O，操作系统需要做大量的工作，目前Windows下通过IOCP实现了真正的异步I&#x2F;O，<br>而在Linux系统下的AIO并不完善，因此在Linux下实现高并发网络编程时都是以Reactor模式为主</p>\n"},{"title":"自然语言处理学习规划","date":"2023-10-01T11:02:36.000Z","cover":false,"_content":"\n## 自然语言处理学习规划\n\n1. 学习基础知识：了解自然语言处理的基本概念、技术和应用场景。\n2. 学习编程语言：学习Python编程语言，掌握常用的自然语言处理库，如nltk、spaCy等。\n3. 学习文本处理技术：学习文本预处理技术，如分词、词性标注、命名实体识别、情感分析等。\n4. 学习语言模型：学习语言模型的概念和原理，掌握常用的语言模型，如n-gram模型、神经网络语言模型等。\n5. 学习机器翻译：学习机器翻译的原理和技术，掌握常用的机器翻译模型，如统计机器翻译、神经网络机器翻译等。\n6. 学习对话系统：学习对话系统的原理和技术，掌握常用的对话系统框架，如Seq2Seq、Transformer等。\n7. 实践项目：完成自然语言处理相关的实践项目，如情感分析、机器翻译、对话系统等。\n\n\n## 自然语言处理（Natural Language Processing，简称NLP）\n\n是一门研究如何使计算机能够理解、处理和生成人类语言的学科。以下是自然语言处理的基本概念、技术和应用场景的介绍：\n\n基本概念：\n1. 语言模型：用于对语言的概率进行建模，包括n-gram模型、神经网络语言模型等。\n2. 分词：将连续的文本切分成有意义的词语。\n3. 词性标注：为文本中的每个词语标注其词性，如名词、动词、形容词等。\n4. 命名实体识别：识别文本中的具体实体，如人名、地名、组织机构等。\n5. 语义角色标注：对句子中的每个词语进行语义角色的标注，如施事者、受事者等。\n\n基本技术：\n1. 文本预处理：包括分词、去除停用词、词干化等，用于清洗和规范化文本数据。\n2. 文本分类：将文本分为不同的类别或标签，如情感分类、主题分类等。\n3. 信息抽取：从文本中提取结构化的信息，如实体关系、事件等。\n4. 机器翻译：将一种语言的文本翻译成另一种语言的文本。\n5. 问答系统：根据用户的问题，从文本中找到相关的答案。\n6. 对话系统：与用户进行自然语言交互，实现智能对话。\n\n应用场景：\n1. 搜索引擎：通过分析用户的查询意图，提供相关的搜索结果。\n2. 情感分析：分析文本中的情感倾向，如正面、负面或中性。\n3. 社交媒体分析：分析社交媒体上的用户评论和观点。\n4. 机器翻译：实现跨语言的文本翻译，如中英互译。\n5. 语音识别：将语音转换为文本，实现语音助手和语音输入等功能。\n6. 自动摘要：从大量文本中自动提取关键信息，生成摘要。\n7. 智能客服：通过对话系统实现自动化的客户服务。\n\n这些只是自然语言处理的一部分概念、技术和应用场景，随着技术的发展，NLP在各个领域都有广泛的应用。\n\n## 常用的自然语言处理库\n\n1. Natural Language Toolkit (NLTK)：Python的自然语言处理工具包，提供了丰富的语料库、算法和工具，可用于文本分析、语言模型、文本分类等任务。\n2. Stanford CoreNLP：由斯坦福大学开发的自然语言处理工具包，支持分词、词性标注、命名实体识别、句法分析、情感分析等任务。\n3. spaCy：Python的自然语言处理工具包，提供了高效的分词、词性标注、命名实体识别、句法分析等功能。\n4. Gensim：Python的自然语言处理工具包，主要用于文本相似度计算、主题建模等任务。\n5. TextBlob：Python的自然语言处理工具包，提供了文本分析、情感分析、语言翻译等功能。\n6. OpenNLP：Java的自然语言处理工具包，支持分词、词性标注、命名实体识别、句法分析等任务。\n7. Apache Lucene：Java的全文检索引擎，支持分词、词性标注、命名实体识别等任务。\n\n这些自然语言处理库都有各自的优点和适用场景，可以根据实际需求选择合适的工具包。\n\n## 常用的文本预处理\n\n1. 分词（Tokenization）：将连续的文本切分成有意义的词语（token）。常见的分词方法包括基于规则的分词、基于统计的分词和基于机器学习的分词。\n\n2. 去除停用词（Stopword Removal）：停用词是指在文本中频繁出现但没有实际意义的词语，如“的”、“是”、“在”等。去除停用词可以减少文本中的噪音，提高后续处理的效果。\n\n3. 词干化（Stemming）：将词语还原为其词干形式，去除词语的词缀。例如，将“running”和“runs”都还原为“run”。常用的词干化算法有Porter算法和Lancaster算法。\n\n4. 词形归一化（Lemmatization）：将词语还原为其基本形式（词元），即词的词性和时态都统一。与词干化不同，词形归一化考虑了词语的上下文和语法规则。例如，将“better”还原为“good”。\n\n5. 去除特殊字符和标点符号：将文本中的特殊字符、标点符号和HTML标签等去除或替换为空格，以便后续处理。\n\n6. 文本规范化：对文本进行一些规范化操作，如转换为小写字母、处理缩写词、数字的处理等，以保持文本的一致性。\n\n7. 文本向量化：将文本转换为数值向量的形式，以便机器学习算法的处理。常用的文本向量化方法有词袋模型（Bag-of-Words）、TF-IDF（Term Frequency-Inverse Document Frequency）等。\n\n\n以上是一些常用的文本预处理技术，通过学习和掌握这些技术，可以提高文本处理的效果和质量。在实际应用中，根据具体任务的需求，可以选择适合的预处理技术进行处理。\n\n文本向量化是将文本数据转换为数值向量的过程，以便计算机可以对其进行处理和分析。文本向量化是自然语言处理（NLP）和文本挖掘中的重要步骤之一，常用于文本分类、情感分析、文本聚类等任务。\n\n## 去除停用词\n在自然语言处理中，停用词（Stopwords）是指在文本中频繁出现但没有实际意义的词语，如“的”、“是”、“在”等。\n可以减少文本中的噪音，提高后续处理的效果。下面是使用NLTK进行停用词去除的示例代码：\n\n首先，确保已经安装NLTK包和相应的数据集：\n\n```python\npip install nltk\n```\n\n然后，在Python中导入NLTK库并下载必要的数据集：\n\n```python\nimport nltk\n\n# 下载必要的数据集\nnltk.download('stopwords')\n```\n\n接下来，使用NLTK的`stopwords`模块加载英文停用词表：\n\n```python\nfrom nltk.corpus import stopwords\n\n# 加载英文停用词表\nstop_words = set(stopwords.words('english'))\n\n# 打印停用词表\nprint(stop_words)\n```\n\n运行以上代码，将会输出以下结果：\n\n```\n{'itself', 'mustn', 'herself', 'other', 'mightn', 'down', 'during', 'where', 'out', 'has', 'as', 'wasn', 'or', 'have', 'now', 'no', 'yourselves', 'had', 'when', 'weren', 'hasn', 'the', 't', 'above', 'under', 'those', 'before', 're', 'am', 'll', 'doe...', 'an', 'been', 'doesn', 'been', 'isn', 'y', 'for', 'we', 'did', 'ourselves', 'ma', 'than', 'they', 'should', 'he', 'ours', 'are', 'will', 'just', 'her', 'myself', 'wouldn', 'through', 'himself', 'shouldn', 'my', 'so', 'who', 'him', 'most', 'each'}\n```\n\n可以看到，NLTK的`stopwords`模块加载了英文停用词表，并返回了一个包含停用词的集合。\n\n接下来，可以使用Python的列表推导式和条件语句，对文本进行停用词去除：\n\n```python\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\n\n# 加载英文停用词表\nstop_words = set(stopwords.words('english'))\n\n# 定义要处理的文本\ntext = \"This is an example sentence to demonstrate stopword removal.\"\n\n# 对文本进行分词\ntokens = word_tokenize(text)\n\n# 去除停用词\nfiltered_tokens = [token for token in tokens if token.lower() not in stop_words]\n\n# 输出结果\nprint(filtered_tokens)\n```\n\n运行以上代码，将会输出以下结果：\n\n```\n['example', 'sentence', 'demonstrate', 'stopword', 'removal', '.']\n```\n\n可以看到，经过停用词去除后，文本中的停用词“is”、“an”、“to”、“this”等被成功去除，只保留了实际有意义的词语。\n\n希望以上示例能够帮助你理解和使用NLTK进行停用词去除。需要注意的是，停用词表的选择和使用需要根据具体的任务和语言环境进行调整。\n\n## 词干化（Stemming）\n是一种文本预处理技术，用于将词语还原为其词干形式，去除词语的词缀。词干是指词语的基本形式，可以通过去除词缀来获得。词干化可以减少词语的变体，将具有相同词根的词语归并为同一形式，从而简化文本处理和分析。下面是使用NLTK进行词干化的示例代码：\n\n首先，确保已经安装NLTK包和相应的数据集：\n\n```python\npip install nltk\n```\n\n然后，在Python中导入NLTK库并下载必要的数据集：\n\n```python\nimport nltk\n\n# 下载必要的数据集\nnltk.download('punkt')\nnltk.download('averaged_perceptron_tagger')\nnltk.download('wordnet')\n```\n\n接下来，使用NLTK的`PorterStemmer`类进行词干化：\n\n```python\nfrom nltk.stem import PorterStemmer\nfrom nltk.tokenize import word_tokenize\n\n# 创建PorterStemmer对象\nstemmer = PorterStemmer()\n\n# 定义要进行词干化的文本\ntext = \"running runs\"\n\n# 对文本进行分词\ntokens = word_tokenize(text)\n\n# 对分词结果进行词干化\nstemmed_tokens = [stemmer.stem(token) for token in tokens]\n\n# 输出词干化结果\nprint(stemmed_tokens)\n```\n\n运行以上代码，将会输出以下结果：\n\n```\n['run', 'run']\n```\n\n可以看到，NLTK的`PorterStemmer`类将输入的文本中的词语进行了词干化，并返回了一个包含词干化结果的列表。\n\n除了`PorterStemmer`类，NLTK还提供了其他的词干化类，如`LancasterStemmer`和`SnowballStemmer`，可以根据具体的需求选择适合的词干化类进行文本处理。\n\n需要注意的是，词干化是一种基于规则的简单处理方法，可能会存在一些不准确的情况，如将“running”和“runs”都还原为“run”。如果需要更精确的词形还原，可以考虑使用词形归一化（Lemmatization）等更复杂的技术。\n\n希望以上示例能够帮助你理解和使用NLTK进行词干化。\n\n## 词形归一化（Lemmatization）\n是一种文本预处理技术，用于将词语还原为其标准形式，即词元（Lemma），从而减少词语的变体，将具有相同词根的词语归并为同一形式，从而简化文本处理和分析。与词干化不同，词形归一化考虑了词语的上下文语境和词性，因此可以得到更精确的结果。下面是使用NLTK进行词形归一化的示例代码：\n\n首先，确保已经安装NLTK包和相应的数据集：\n\n```python\npip install nltk\n```\n\n然后，在Python中导入NLTK库并下载必要的数据集：\n\n```python\nimport nltk\n\n# 下载必要的数据集\nnltk.download('punkt')\nnltk.download('averaged_perceptron_tagger')\nnltk.download('wordnet')\n```\n\n接下来，使用NLTK的`WordNetLemmatizer`类进行词形归一化：\n\n```python\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.tokenize import word_tokenize\nfrom nltk.corpus import wordnet\n\n# 创建WordNetLemmatizer对象\nlemmatizer = WordNetLemmatizer()\n\n# 定义要进行词形归一化的文本\ntext = \"The striped bats are hanging on their feet for best\"\n\n# 对文本进行分词和词性标注\ntokens = word_tokenize(text)\ntagged_tokens = nltk.pos_tag(tokens)\n\n# 定义函数将词性标注转换为WordNet词性标记\ndef get_wordnet_pos(tag):\n    if tag.startswith('J'):\n        return wordnet.ADJ\n    elif tag.startswith('V'):\n        return wordnet.VERB\n    elif tag.startswith('N'):\n        return wordnet.NOUN\n    elif tag.startswith('R'):\n        return wordnet.ADV\n    else:\n        return wordnet.NOUN\n\n# 对分词结果进行词形归一化\nlemmatized_tokens = [lemmatizer.lemmatize(token, get_wordnet_pos(tag)) for token, tag in tagged_tokens]\n\n# 输出词形归一化结果\nprint(lemmatized_tokens)\n```\n\n运行以上代码，将会输出以下结果：\n\n```\n['The', 'striped', 'bat', 'be', 'hang', 'on', 'their', 'foot', 'for', 'best']\n```\n\n可以看到，NLTK的`WordNetLemmatizer`类将输入的文本中的词语进行了词形归一化，并返回了一个包含词形归一化结果的列表。在进行词形归一化之前，需要先对文本进行分词和词性标注，并将词性标注转换为WordNet词性标记，以便`WordNetLemmatizer`类能够正确地识别词语的词性和上下文语境。\n\n需要注意的是，词形归一化是一种相对复杂的处理方法，需要考虑词语的上下文语境和词性等因素，因此可能会比词干化更慢，但得到的结果更加准确。如果需要更快速的处理方法，可以考虑先使用词干化等简单的处理方法进行预处理，再使用词形归一化进行进一步处理。\n\n希望以上示例能够帮助你理解和使用NLTK进行词形归一化。\n\n## 下面介绍几种常见的文本向量化方法：\n\n1. 词袋模型（Bag-of-Words）：将文本看作是一个词语的集合，忽略了词语的顺序和语法结构，只关注词汇的出现频率。可以使用CountVectorizer或TfidfVectorizer等工具库来实现词袋模型。\n\n2. TF-IDF向量化：TF-IDF（Term Frequency-Inverse Document Frequency）是一种用于评估一个词语在文档中的重要程度的统计方法。TF-IDF向量化将文本表示为每个词语的TF-IDF权重，其中TF（词频）表示词语在文档中出现的频率，IDF（逆文档频率）表示词语在整个文档集合中的重要程度。可以使用TfidfVectorizer来实现TF-IDF向量化。\n\n3. Word2Vec向量化：Word2Vec是一种基于神经网络的词向量表示方法，它将每个词语映射到一个固定长度的向量空间中，使得具有相似语义的词语在向量空间中距离较近。Word2Vec向量化可以捕捉到词语之间的语义关系，常用于文本相似度计算等任务。可以使用gensim库来实现Word2Vec向量化。\n\n4. 文档嵌入（Document Embedding）：文档嵌入是将整个文档表示为一个固定长度的向量的方法，常用于文本分类和文本聚类等任务。常见的文档嵌入方法包括Doc2Vec和BERT（Bidirectional Encoder Representations from Transformers）等。可以使用gensim库来实现Doc2Vec向量化，使用Hugging Face的transformers库来实现BERT向量化。\n\n以上是一些常见的文本向量化方法，每种方法都有其特点和适用场景。在实际应用中，可以根据具体任务的需求和数据的特点选择合适的文本向量化方法。\n\n## Word2Vec是一种基于神经网络的词向量表示方法\n它将每个词语映射到一个固定长度的向量空间中，使得具有相似语义的词语在向量空间中距离较近。Word2Vec向量化可以捕捉到词语之间的语义关系，常用于文本相似度计算、文本分类、情感分析等任务。\n\nWord2Vec模型有两种训练方法：Skip-gram和CBOW（Continuous Bag-of-Words）。Skip-gram模型是通过一个词语预测其周围的上下文词语，而CBOW模型则是通过周围的上下文词语预测目标词语。这两种模型都可以用于生成词向量。\n\n在使用Word2Vec进行文本向量化时，一般有以下几个步骤：\n\n1. 数据准备：准备一个大型的文本语料库作为训练数据，可以是预处理后的文本数据集或者是大规模的语料库。\n\n2. 分词：将文本数据进行分词处理，将句子分解为单词或者词语。\n\n3. 构建Word2Vec模型：使用分词后的文本数据训练Word2Vec模型。可以使用gensim库中的Word2Vec类来构建和训练模型。\n\n4. 获取词向量：训练完成后，可以通过模型获取每个词语的词向量表示。可以使用`model.wv[word]`来获取指定词语的词向量。\n\n5. 应用词向量：可以将词向量用于文本分类、文本相似度计算等任务。可以通过计算词语之间的余弦相似度或欧氏距离来度量词语之间的语义相似度。\n\n在使用Word2Vec进行文本向量化时，需要注意以下几点：\n\n- 训练数据的规模对结果影响较大，通常需要大规模的语料库来训练更准确的词向量。\n- 对于生僻词或者低频词，可能无法得到准确的词向量表示。\n- 可以使用预训练的Word2Vec模型，如Google News Word2Vec或GloVe等，来获取通用的词向量表示。\n\n总之，Word2Vec向量化是一种有效的文本向量化方法，可以捕捉到词语之间的语义关系，用于文本分类、文本相似度计算等任务。","source":"_posts/自然语言处理学习规划.md","raw":"---\ntitle: 自然语言处理学习规划\ntags: 自然语言处理学习规划\ndate: 2023-10-01 19:02:36\ncover:\n---\n\n## 自然语言处理学习规划\n\n1. 学习基础知识：了解自然语言处理的基本概念、技术和应用场景。\n2. 学习编程语言：学习Python编程语言，掌握常用的自然语言处理库，如nltk、spaCy等。\n3. 学习文本处理技术：学习文本预处理技术，如分词、词性标注、命名实体识别、情感分析等。\n4. 学习语言模型：学习语言模型的概念和原理，掌握常用的语言模型，如n-gram模型、神经网络语言模型等。\n5. 学习机器翻译：学习机器翻译的原理和技术，掌握常用的机器翻译模型，如统计机器翻译、神经网络机器翻译等。\n6. 学习对话系统：学习对话系统的原理和技术，掌握常用的对话系统框架，如Seq2Seq、Transformer等。\n7. 实践项目：完成自然语言处理相关的实践项目，如情感分析、机器翻译、对话系统等。\n\n\n## 自然语言处理（Natural Language Processing，简称NLP）\n\n是一门研究如何使计算机能够理解、处理和生成人类语言的学科。以下是自然语言处理的基本概念、技术和应用场景的介绍：\n\n基本概念：\n1. 语言模型：用于对语言的概率进行建模，包括n-gram模型、神经网络语言模型等。\n2. 分词：将连续的文本切分成有意义的词语。\n3. 词性标注：为文本中的每个词语标注其词性，如名词、动词、形容词等。\n4. 命名实体识别：识别文本中的具体实体，如人名、地名、组织机构等。\n5. 语义角色标注：对句子中的每个词语进行语义角色的标注，如施事者、受事者等。\n\n基本技术：\n1. 文本预处理：包括分词、去除停用词、词干化等，用于清洗和规范化文本数据。\n2. 文本分类：将文本分为不同的类别或标签，如情感分类、主题分类等。\n3. 信息抽取：从文本中提取结构化的信息，如实体关系、事件等。\n4. 机器翻译：将一种语言的文本翻译成另一种语言的文本。\n5. 问答系统：根据用户的问题，从文本中找到相关的答案。\n6. 对话系统：与用户进行自然语言交互，实现智能对话。\n\n应用场景：\n1. 搜索引擎：通过分析用户的查询意图，提供相关的搜索结果。\n2. 情感分析：分析文本中的情感倾向，如正面、负面或中性。\n3. 社交媒体分析：分析社交媒体上的用户评论和观点。\n4. 机器翻译：实现跨语言的文本翻译，如中英互译。\n5. 语音识别：将语音转换为文本，实现语音助手和语音输入等功能。\n6. 自动摘要：从大量文本中自动提取关键信息，生成摘要。\n7. 智能客服：通过对话系统实现自动化的客户服务。\n\n这些只是自然语言处理的一部分概念、技术和应用场景，随着技术的发展，NLP在各个领域都有广泛的应用。\n\n## 常用的自然语言处理库\n\n1. Natural Language Toolkit (NLTK)：Python的自然语言处理工具包，提供了丰富的语料库、算法和工具，可用于文本分析、语言模型、文本分类等任务。\n2. Stanford CoreNLP：由斯坦福大学开发的自然语言处理工具包，支持分词、词性标注、命名实体识别、句法分析、情感分析等任务。\n3. spaCy：Python的自然语言处理工具包，提供了高效的分词、词性标注、命名实体识别、句法分析等功能。\n4. Gensim：Python的自然语言处理工具包，主要用于文本相似度计算、主题建模等任务。\n5. TextBlob：Python的自然语言处理工具包，提供了文本分析、情感分析、语言翻译等功能。\n6. OpenNLP：Java的自然语言处理工具包，支持分词、词性标注、命名实体识别、句法分析等任务。\n7. Apache Lucene：Java的全文检索引擎，支持分词、词性标注、命名实体识别等任务。\n\n这些自然语言处理库都有各自的优点和适用场景，可以根据实际需求选择合适的工具包。\n\n## 常用的文本预处理\n\n1. 分词（Tokenization）：将连续的文本切分成有意义的词语（token）。常见的分词方法包括基于规则的分词、基于统计的分词和基于机器学习的分词。\n\n2. 去除停用词（Stopword Removal）：停用词是指在文本中频繁出现但没有实际意义的词语，如“的”、“是”、“在”等。去除停用词可以减少文本中的噪音，提高后续处理的效果。\n\n3. 词干化（Stemming）：将词语还原为其词干形式，去除词语的词缀。例如，将“running”和“runs”都还原为“run”。常用的词干化算法有Porter算法和Lancaster算法。\n\n4. 词形归一化（Lemmatization）：将词语还原为其基本形式（词元），即词的词性和时态都统一。与词干化不同，词形归一化考虑了词语的上下文和语法规则。例如，将“better”还原为“good”。\n\n5. 去除特殊字符和标点符号：将文本中的特殊字符、标点符号和HTML标签等去除或替换为空格，以便后续处理。\n\n6. 文本规范化：对文本进行一些规范化操作，如转换为小写字母、处理缩写词、数字的处理等，以保持文本的一致性。\n\n7. 文本向量化：将文本转换为数值向量的形式，以便机器学习算法的处理。常用的文本向量化方法有词袋模型（Bag-of-Words）、TF-IDF（Term Frequency-Inverse Document Frequency）等。\n\n\n以上是一些常用的文本预处理技术，通过学习和掌握这些技术，可以提高文本处理的效果和质量。在实际应用中，根据具体任务的需求，可以选择适合的预处理技术进行处理。\n\n文本向量化是将文本数据转换为数值向量的过程，以便计算机可以对其进行处理和分析。文本向量化是自然语言处理（NLP）和文本挖掘中的重要步骤之一，常用于文本分类、情感分析、文本聚类等任务。\n\n## 去除停用词\n在自然语言处理中，停用词（Stopwords）是指在文本中频繁出现但没有实际意义的词语，如“的”、“是”、“在”等。\n可以减少文本中的噪音，提高后续处理的效果。下面是使用NLTK进行停用词去除的示例代码：\n\n首先，确保已经安装NLTK包和相应的数据集：\n\n```python\npip install nltk\n```\n\n然后，在Python中导入NLTK库并下载必要的数据集：\n\n```python\nimport nltk\n\n# 下载必要的数据集\nnltk.download('stopwords')\n```\n\n接下来，使用NLTK的`stopwords`模块加载英文停用词表：\n\n```python\nfrom nltk.corpus import stopwords\n\n# 加载英文停用词表\nstop_words = set(stopwords.words('english'))\n\n# 打印停用词表\nprint(stop_words)\n```\n\n运行以上代码，将会输出以下结果：\n\n```\n{'itself', 'mustn', 'herself', 'other', 'mightn', 'down', 'during', 'where', 'out', 'has', 'as', 'wasn', 'or', 'have', 'now', 'no', 'yourselves', 'had', 'when', 'weren', 'hasn', 'the', 't', 'above', 'under', 'those', 'before', 're', 'am', 'll', 'doe...', 'an', 'been', 'doesn', 'been', 'isn', 'y', 'for', 'we', 'did', 'ourselves', 'ma', 'than', 'they', 'should', 'he', 'ours', 'are', 'will', 'just', 'her', 'myself', 'wouldn', 'through', 'himself', 'shouldn', 'my', 'so', 'who', 'him', 'most', 'each'}\n```\n\n可以看到，NLTK的`stopwords`模块加载了英文停用词表，并返回了一个包含停用词的集合。\n\n接下来，可以使用Python的列表推导式和条件语句，对文本进行停用词去除：\n\n```python\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\n\n# 加载英文停用词表\nstop_words = set(stopwords.words('english'))\n\n# 定义要处理的文本\ntext = \"This is an example sentence to demonstrate stopword removal.\"\n\n# 对文本进行分词\ntokens = word_tokenize(text)\n\n# 去除停用词\nfiltered_tokens = [token for token in tokens if token.lower() not in stop_words]\n\n# 输出结果\nprint(filtered_tokens)\n```\n\n运行以上代码，将会输出以下结果：\n\n```\n['example', 'sentence', 'demonstrate', 'stopword', 'removal', '.']\n```\n\n可以看到，经过停用词去除后，文本中的停用词“is”、“an”、“to”、“this”等被成功去除，只保留了实际有意义的词语。\n\n希望以上示例能够帮助你理解和使用NLTK进行停用词去除。需要注意的是，停用词表的选择和使用需要根据具体的任务和语言环境进行调整。\n\n## 词干化（Stemming）\n是一种文本预处理技术，用于将词语还原为其词干形式，去除词语的词缀。词干是指词语的基本形式，可以通过去除词缀来获得。词干化可以减少词语的变体，将具有相同词根的词语归并为同一形式，从而简化文本处理和分析。下面是使用NLTK进行词干化的示例代码：\n\n首先，确保已经安装NLTK包和相应的数据集：\n\n```python\npip install nltk\n```\n\n然后，在Python中导入NLTK库并下载必要的数据集：\n\n```python\nimport nltk\n\n# 下载必要的数据集\nnltk.download('punkt')\nnltk.download('averaged_perceptron_tagger')\nnltk.download('wordnet')\n```\n\n接下来，使用NLTK的`PorterStemmer`类进行词干化：\n\n```python\nfrom nltk.stem import PorterStemmer\nfrom nltk.tokenize import word_tokenize\n\n# 创建PorterStemmer对象\nstemmer = PorterStemmer()\n\n# 定义要进行词干化的文本\ntext = \"running runs\"\n\n# 对文本进行分词\ntokens = word_tokenize(text)\n\n# 对分词结果进行词干化\nstemmed_tokens = [stemmer.stem(token) for token in tokens]\n\n# 输出词干化结果\nprint(stemmed_tokens)\n```\n\n运行以上代码，将会输出以下结果：\n\n```\n['run', 'run']\n```\n\n可以看到，NLTK的`PorterStemmer`类将输入的文本中的词语进行了词干化，并返回了一个包含词干化结果的列表。\n\n除了`PorterStemmer`类，NLTK还提供了其他的词干化类，如`LancasterStemmer`和`SnowballStemmer`，可以根据具体的需求选择适合的词干化类进行文本处理。\n\n需要注意的是，词干化是一种基于规则的简单处理方法，可能会存在一些不准确的情况，如将“running”和“runs”都还原为“run”。如果需要更精确的词形还原，可以考虑使用词形归一化（Lemmatization）等更复杂的技术。\n\n希望以上示例能够帮助你理解和使用NLTK进行词干化。\n\n## 词形归一化（Lemmatization）\n是一种文本预处理技术，用于将词语还原为其标准形式，即词元（Lemma），从而减少词语的变体，将具有相同词根的词语归并为同一形式，从而简化文本处理和分析。与词干化不同，词形归一化考虑了词语的上下文语境和词性，因此可以得到更精确的结果。下面是使用NLTK进行词形归一化的示例代码：\n\n首先，确保已经安装NLTK包和相应的数据集：\n\n```python\npip install nltk\n```\n\n然后，在Python中导入NLTK库并下载必要的数据集：\n\n```python\nimport nltk\n\n# 下载必要的数据集\nnltk.download('punkt')\nnltk.download('averaged_perceptron_tagger')\nnltk.download('wordnet')\n```\n\n接下来，使用NLTK的`WordNetLemmatizer`类进行词形归一化：\n\n```python\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.tokenize import word_tokenize\nfrom nltk.corpus import wordnet\n\n# 创建WordNetLemmatizer对象\nlemmatizer = WordNetLemmatizer()\n\n# 定义要进行词形归一化的文本\ntext = \"The striped bats are hanging on their feet for best\"\n\n# 对文本进行分词和词性标注\ntokens = word_tokenize(text)\ntagged_tokens = nltk.pos_tag(tokens)\n\n# 定义函数将词性标注转换为WordNet词性标记\ndef get_wordnet_pos(tag):\n    if tag.startswith('J'):\n        return wordnet.ADJ\n    elif tag.startswith('V'):\n        return wordnet.VERB\n    elif tag.startswith('N'):\n        return wordnet.NOUN\n    elif tag.startswith('R'):\n        return wordnet.ADV\n    else:\n        return wordnet.NOUN\n\n# 对分词结果进行词形归一化\nlemmatized_tokens = [lemmatizer.lemmatize(token, get_wordnet_pos(tag)) for token, tag in tagged_tokens]\n\n# 输出词形归一化结果\nprint(lemmatized_tokens)\n```\n\n运行以上代码，将会输出以下结果：\n\n```\n['The', 'striped', 'bat', 'be', 'hang', 'on', 'their', 'foot', 'for', 'best']\n```\n\n可以看到，NLTK的`WordNetLemmatizer`类将输入的文本中的词语进行了词形归一化，并返回了一个包含词形归一化结果的列表。在进行词形归一化之前，需要先对文本进行分词和词性标注，并将词性标注转换为WordNet词性标记，以便`WordNetLemmatizer`类能够正确地识别词语的词性和上下文语境。\n\n需要注意的是，词形归一化是一种相对复杂的处理方法，需要考虑词语的上下文语境和词性等因素，因此可能会比词干化更慢，但得到的结果更加准确。如果需要更快速的处理方法，可以考虑先使用词干化等简单的处理方法进行预处理，再使用词形归一化进行进一步处理。\n\n希望以上示例能够帮助你理解和使用NLTK进行词形归一化。\n\n## 下面介绍几种常见的文本向量化方法：\n\n1. 词袋模型（Bag-of-Words）：将文本看作是一个词语的集合，忽略了词语的顺序和语法结构，只关注词汇的出现频率。可以使用CountVectorizer或TfidfVectorizer等工具库来实现词袋模型。\n\n2. TF-IDF向量化：TF-IDF（Term Frequency-Inverse Document Frequency）是一种用于评估一个词语在文档中的重要程度的统计方法。TF-IDF向量化将文本表示为每个词语的TF-IDF权重，其中TF（词频）表示词语在文档中出现的频率，IDF（逆文档频率）表示词语在整个文档集合中的重要程度。可以使用TfidfVectorizer来实现TF-IDF向量化。\n\n3. Word2Vec向量化：Word2Vec是一种基于神经网络的词向量表示方法，它将每个词语映射到一个固定长度的向量空间中，使得具有相似语义的词语在向量空间中距离较近。Word2Vec向量化可以捕捉到词语之间的语义关系，常用于文本相似度计算等任务。可以使用gensim库来实现Word2Vec向量化。\n\n4. 文档嵌入（Document Embedding）：文档嵌入是将整个文档表示为一个固定长度的向量的方法，常用于文本分类和文本聚类等任务。常见的文档嵌入方法包括Doc2Vec和BERT（Bidirectional Encoder Representations from Transformers）等。可以使用gensim库来实现Doc2Vec向量化，使用Hugging Face的transformers库来实现BERT向量化。\n\n以上是一些常见的文本向量化方法，每种方法都有其特点和适用场景。在实际应用中，可以根据具体任务的需求和数据的特点选择合适的文本向量化方法。\n\n## Word2Vec是一种基于神经网络的词向量表示方法\n它将每个词语映射到一个固定长度的向量空间中，使得具有相似语义的词语在向量空间中距离较近。Word2Vec向量化可以捕捉到词语之间的语义关系，常用于文本相似度计算、文本分类、情感分析等任务。\n\nWord2Vec模型有两种训练方法：Skip-gram和CBOW（Continuous Bag-of-Words）。Skip-gram模型是通过一个词语预测其周围的上下文词语，而CBOW模型则是通过周围的上下文词语预测目标词语。这两种模型都可以用于生成词向量。\n\n在使用Word2Vec进行文本向量化时，一般有以下几个步骤：\n\n1. 数据准备：准备一个大型的文本语料库作为训练数据，可以是预处理后的文本数据集或者是大规模的语料库。\n\n2. 分词：将文本数据进行分词处理，将句子分解为单词或者词语。\n\n3. 构建Word2Vec模型：使用分词后的文本数据训练Word2Vec模型。可以使用gensim库中的Word2Vec类来构建和训练模型。\n\n4. 获取词向量：训练完成后，可以通过模型获取每个词语的词向量表示。可以使用`model.wv[word]`来获取指定词语的词向量。\n\n5. 应用词向量：可以将词向量用于文本分类、文本相似度计算等任务。可以通过计算词语之间的余弦相似度或欧氏距离来度量词语之间的语义相似度。\n\n在使用Word2Vec进行文本向量化时，需要注意以下几点：\n\n- 训练数据的规模对结果影响较大，通常需要大规模的语料库来训练更准确的词向量。\n- 对于生僻词或者低频词，可能无法得到准确的词向量表示。\n- 可以使用预训练的Word2Vec模型，如Google News Word2Vec或GloVe等，来获取通用的词向量表示。\n\n总之，Word2Vec向量化是一种有效的文本向量化方法，可以捕捉到词语之间的语义关系，用于文本分类、文本相似度计算等任务。","slug":"自然语言处理学习规划","published":1,"updated":"2023-10-01T13:18:00.387Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5vk0071lv9ecfe6evn5","content":"<h2 id=\"自然语言处理学习规划\"><a href=\"#自然语言处理学习规划\" class=\"headerlink\" title=\"自然语言处理学习规划\"></a>自然语言处理学习规划</h2><ol>\n<li>学习基础知识：了解自然语言处理的基本概念、技术和应用场景。</li>\n<li>学习编程语言：学习Python编程语言，掌握常用的自然语言处理库，如nltk、spaCy等。</li>\n<li>学习文本处理技术：学习文本预处理技术，如分词、词性标注、命名实体识别、情感分析等。</li>\n<li>学习语言模型：学习语言模型的概念和原理，掌握常用的语言模型，如n-gram模型、神经网络语言模型等。</li>\n<li>学习机器翻译：学习机器翻译的原理和技术，掌握常用的机器翻译模型，如统计机器翻译、神经网络机器翻译等。</li>\n<li>学习对话系统：学习对话系统的原理和技术，掌握常用的对话系统框架，如Seq2Seq、Transformer等。</li>\n<li>实践项目：完成自然语言处理相关的实践项目，如情感分析、机器翻译、对话系统等。</li>\n</ol>\n<h2 id=\"自然语言处理（Natural-Language-Processing，简称NLP）\"><a href=\"#自然语言处理（Natural-Language-Processing，简称NLP）\" class=\"headerlink\" title=\"自然语言处理（Natural Language Processing，简称NLP）\"></a>自然语言处理（Natural Language Processing，简称NLP）</h2><p>是一门研究如何使计算机能够理解、处理和生成人类语言的学科。以下是自然语言处理的基本概念、技术和应用场景的介绍：</p>\n<p>基本概念：</p>\n<ol>\n<li>语言模型：用于对语言的概率进行建模，包括n-gram模型、神经网络语言模型等。</li>\n<li>分词：将连续的文本切分成有意义的词语。</li>\n<li>词性标注：为文本中的每个词语标注其词性，如名词、动词、形容词等。</li>\n<li>命名实体识别：识别文本中的具体实体，如人名、地名、组织机构等。</li>\n<li>语义角色标注：对句子中的每个词语进行语义角色的标注，如施事者、受事者等。</li>\n</ol>\n<p>基本技术：</p>\n<ol>\n<li>文本预处理：包括分词、去除停用词、词干化等，用于清洗和规范化文本数据。</li>\n<li>文本分类：将文本分为不同的类别或标签，如情感分类、主题分类等。</li>\n<li>信息抽取：从文本中提取结构化的信息，如实体关系、事件等。</li>\n<li>机器翻译：将一种语言的文本翻译成另一种语言的文本。</li>\n<li>问答系统：根据用户的问题，从文本中找到相关的答案。</li>\n<li>对话系统：与用户进行自然语言交互，实现智能对话。</li>\n</ol>\n<p>应用场景：</p>\n<ol>\n<li>搜索引擎：通过分析用户的查询意图，提供相关的搜索结果。</li>\n<li>情感分析：分析文本中的情感倾向，如正面、负面或中性。</li>\n<li>社交媒体分析：分析社交媒体上的用户评论和观点。</li>\n<li>机器翻译：实现跨语言的文本翻译，如中英互译。</li>\n<li>语音识别：将语音转换为文本，实现语音助手和语音输入等功能。</li>\n<li>自动摘要：从大量文本中自动提取关键信息，生成摘要。</li>\n<li>智能客服：通过对话系统实现自动化的客户服务。</li>\n</ol>\n<p>这些只是自然语言处理的一部分概念、技术和应用场景，随着技术的发展，NLP在各个领域都有广泛的应用。</p>\n<h2 id=\"常用的自然语言处理库\"><a href=\"#常用的自然语言处理库\" class=\"headerlink\" title=\"常用的自然语言处理库\"></a>常用的自然语言处理库</h2><ol>\n<li>Natural Language Toolkit (NLTK)：Python的自然语言处理工具包，提供了丰富的语料库、算法和工具，可用于文本分析、语言模型、文本分类等任务。</li>\n<li>Stanford CoreNLP：由斯坦福大学开发的自然语言处理工具包，支持分词、词性标注、命名实体识别、句法分析、情感分析等任务。</li>\n<li>spaCy：Python的自然语言处理工具包，提供了高效的分词、词性标注、命名实体识别、句法分析等功能。</li>\n<li>Gensim：Python的自然语言处理工具包，主要用于文本相似度计算、主题建模等任务。</li>\n<li>TextBlob：Python的自然语言处理工具包，提供了文本分析、情感分析、语言翻译等功能。</li>\n<li>OpenNLP：Java的自然语言处理工具包，支持分词、词性标注、命名实体识别、句法分析等任务。</li>\n<li>Apache Lucene：Java的全文检索引擎，支持分词、词性标注、命名实体识别等任务。</li>\n</ol>\n<p>这些自然语言处理库都有各自的优点和适用场景，可以根据实际需求选择合适的工具包。</p>\n<h2 id=\"常用的文本预处理\"><a href=\"#常用的文本预处理\" class=\"headerlink\" title=\"常用的文本预处理\"></a>常用的文本预处理</h2><ol>\n<li><p>分词（Tokenization）：将连续的文本切分成有意义的词语（token）。常见的分词方法包括基于规则的分词、基于统计的分词和基于机器学习的分词。</p>\n</li>\n<li><p>去除停用词（Stopword Removal）：停用词是指在文本中频繁出现但没有实际意义的词语，如“的”、“是”、“在”等。去除停用词可以减少文本中的噪音，提高后续处理的效果。</p>\n</li>\n<li><p>词干化（Stemming）：将词语还原为其词干形式，去除词语的词缀。例如，将“running”和“runs”都还原为“run”。常用的词干化算法有Porter算法和Lancaster算法。</p>\n</li>\n<li><p>词形归一化（Lemmatization）：将词语还原为其基本形式（词元），即词的词性和时态都统一。与词干化不同，词形归一化考虑了词语的上下文和语法规则。例如，将“better”还原为“good”。</p>\n</li>\n<li><p>去除特殊字符和标点符号：将文本中的特殊字符、标点符号和HTML标签等去除或替换为空格，以便后续处理。</p>\n</li>\n<li><p>文本规范化：对文本进行一些规范化操作，如转换为小写字母、处理缩写词、数字的处理等，以保持文本的一致性。</p>\n</li>\n<li><p>文本向量化：将文本转换为数值向量的形式，以便机器学习算法的处理。常用的文本向量化方法有词袋模型（Bag-of-Words）、TF-IDF（Term Frequency-Inverse Document Frequency）等。</p>\n</li>\n</ol>\n<p>以上是一些常用的文本预处理技术，通过学习和掌握这些技术，可以提高文本处理的效果和质量。在实际应用中，根据具体任务的需求，可以选择适合的预处理技术进行处理。</p>\n<p>文本向量化是将文本数据转换为数值向量的过程，以便计算机可以对其进行处理和分析。文本向量化是自然语言处理（NLP）和文本挖掘中的重要步骤之一，常用于文本分类、情感分析、文本聚类等任务。</p>\n<h2 id=\"去除停用词\"><a href=\"#去除停用词\" class=\"headerlink\" title=\"去除停用词\"></a>去除停用词</h2><p>在自然语言处理中，停用词（Stopwords）是指在文本中频繁出现但没有实际意义的词语，如“的”、“是”、“在”等。<br>可以减少文本中的噪音，提高后续处理的效果。下面是使用NLTK进行停用词去除的示例代码：</p>\n<p>首先，确保已经安装NLTK包和相应的数据集：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install nltk</span><br></pre></td></tr></table></figure>\n\n<p>然后，在Python中导入NLTK库并下载必要的数据集：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> nltk</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下载必要的数据集</span></span><br><span class=\"line\">nltk.download(<span class=\"string\">&#x27;stopwords&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>接下来，使用NLTK的<code>stopwords</code>模块加载英文停用词表：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> nltk.corpus <span class=\"keyword\">import</span> stopwords</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 加载英文停用词表</span></span><br><span class=\"line\">stop_words = <span class=\"built_in\">set</span>(stopwords.words(<span class=\"string\">&#x27;english&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打印停用词表</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(stop_words)</span><br></pre></td></tr></table></figure>\n\n<p>运行以上代码，将会输出以下结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#x27;itself&#x27;, &#x27;mustn&#x27;, &#x27;herself&#x27;, &#x27;other&#x27;, &#x27;mightn&#x27;, &#x27;down&#x27;, &#x27;during&#x27;, &#x27;where&#x27;, &#x27;out&#x27;, &#x27;has&#x27;, &#x27;as&#x27;, &#x27;wasn&#x27;, &#x27;or&#x27;, &#x27;have&#x27;, &#x27;now&#x27;, &#x27;no&#x27;, &#x27;yourselves&#x27;, &#x27;had&#x27;, &#x27;when&#x27;, &#x27;weren&#x27;, &#x27;hasn&#x27;, &#x27;the&#x27;, &#x27;t&#x27;, &#x27;above&#x27;, &#x27;under&#x27;, &#x27;those&#x27;, &#x27;before&#x27;, &#x27;re&#x27;, &#x27;am&#x27;, &#x27;ll&#x27;, &#x27;doe...&#x27;, &#x27;an&#x27;, &#x27;been&#x27;, &#x27;doesn&#x27;, &#x27;been&#x27;, &#x27;isn&#x27;, &#x27;y&#x27;, &#x27;for&#x27;, &#x27;we&#x27;, &#x27;did&#x27;, &#x27;ourselves&#x27;, &#x27;ma&#x27;, &#x27;than&#x27;, &#x27;they&#x27;, &#x27;should&#x27;, &#x27;he&#x27;, &#x27;ours&#x27;, &#x27;are&#x27;, &#x27;will&#x27;, &#x27;just&#x27;, &#x27;her&#x27;, &#x27;myself&#x27;, &#x27;wouldn&#x27;, &#x27;through&#x27;, &#x27;himself&#x27;, &#x27;shouldn&#x27;, &#x27;my&#x27;, &#x27;so&#x27;, &#x27;who&#x27;, &#x27;him&#x27;, &#x27;most&#x27;, &#x27;each&#x27;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，NLTK的<code>stopwords</code>模块加载了英文停用词表，并返回了一个包含停用词的集合。</p>\n<p>接下来，可以使用Python的列表推导式和条件语句，对文本进行停用词去除：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> nltk.corpus <span class=\"keyword\">import</span> stopwords</span><br><span class=\"line\"><span class=\"keyword\">from</span> nltk.tokenize <span class=\"keyword\">import</span> word_tokenize</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 加载英文停用词表</span></span><br><span class=\"line\">stop_words = <span class=\"built_in\">set</span>(stopwords.words(<span class=\"string\">&#x27;english&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义要处理的文本</span></span><br><span class=\"line\">text = <span class=\"string\">&quot;This is an example sentence to demonstrate stopword removal.&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 对文本进行分词</span></span><br><span class=\"line\">tokens = word_tokenize(text)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 去除停用词</span></span><br><span class=\"line\">filtered_tokens = [token <span class=\"keyword\">for</span> token <span class=\"keyword\">in</span> tokens <span class=\"keyword\">if</span> token.lower() <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> stop_words]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出结果</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(filtered_tokens)</span><br></pre></td></tr></table></figure>\n\n<p>运行以上代码，将会输出以下结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&#x27;example&#x27;, &#x27;sentence&#x27;, &#x27;demonstrate&#x27;, &#x27;stopword&#x27;, &#x27;removal&#x27;, &#x27;.&#x27;]</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，经过停用词去除后，文本中的停用词“is”、“an”、“to”、“this”等被成功去除，只保留了实际有意义的词语。</p>\n<p>希望以上示例能够帮助你理解和使用NLTK进行停用词去除。需要注意的是，停用词表的选择和使用需要根据具体的任务和语言环境进行调整。</p>\n<h2 id=\"词干化（Stemming）\"><a href=\"#词干化（Stemming）\" class=\"headerlink\" title=\"词干化（Stemming）\"></a>词干化（Stemming）</h2><p>是一种文本预处理技术，用于将词语还原为其词干形式，去除词语的词缀。词干是指词语的基本形式，可以通过去除词缀来获得。词干化可以减少词语的变体，将具有相同词根的词语归并为同一形式，从而简化文本处理和分析。下面是使用NLTK进行词干化的示例代码：</p>\n<p>首先，确保已经安装NLTK包和相应的数据集：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install nltk</span><br></pre></td></tr></table></figure>\n\n<p>然后，在Python中导入NLTK库并下载必要的数据集：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> nltk</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下载必要的数据集</span></span><br><span class=\"line\">nltk.download(<span class=\"string\">&#x27;punkt&#x27;</span>)</span><br><span class=\"line\">nltk.download(<span class=\"string\">&#x27;averaged_perceptron_tagger&#x27;</span>)</span><br><span class=\"line\">nltk.download(<span class=\"string\">&#x27;wordnet&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>接下来，使用NLTK的<code>PorterStemmer</code>类进行词干化：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> nltk.stem <span class=\"keyword\">import</span> PorterStemmer</span><br><span class=\"line\"><span class=\"keyword\">from</span> nltk.tokenize <span class=\"keyword\">import</span> word_tokenize</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建PorterStemmer对象</span></span><br><span class=\"line\">stemmer = PorterStemmer()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义要进行词干化的文本</span></span><br><span class=\"line\">text = <span class=\"string\">&quot;running runs&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 对文本进行分词</span></span><br><span class=\"line\">tokens = word_tokenize(text)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 对分词结果进行词干化</span></span><br><span class=\"line\">stemmed_tokens = [stemmer.stem(token) <span class=\"keyword\">for</span> token <span class=\"keyword\">in</span> tokens]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出词干化结果</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(stemmed_tokens)</span><br></pre></td></tr></table></figure>\n\n<p>运行以上代码，将会输出以下结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&#x27;run&#x27;, &#x27;run&#x27;]</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，NLTK的<code>PorterStemmer</code>类将输入的文本中的词语进行了词干化，并返回了一个包含词干化结果的列表。</p>\n<p>除了<code>PorterStemmer</code>类，NLTK还提供了其他的词干化类，如<code>LancasterStemmer</code>和<code>SnowballStemmer</code>，可以根据具体的需求选择适合的词干化类进行文本处理。</p>\n<p>需要注意的是，词干化是一种基于规则的简单处理方法，可能会存在一些不准确的情况，如将“running”和“runs”都还原为“run”。如果需要更精确的词形还原，可以考虑使用词形归一化（Lemmatization）等更复杂的技术。</p>\n<p>希望以上示例能够帮助你理解和使用NLTK进行词干化。</p>\n<h2 id=\"词形归一化（Lemmatization）\"><a href=\"#词形归一化（Lemmatization）\" class=\"headerlink\" title=\"词形归一化（Lemmatization）\"></a>词形归一化（Lemmatization）</h2><p>是一种文本预处理技术，用于将词语还原为其标准形式，即词元（Lemma），从而减少词语的变体，将具有相同词根的词语归并为同一形式，从而简化文本处理和分析。与词干化不同，词形归一化考虑了词语的上下文语境和词性，因此可以得到更精确的结果。下面是使用NLTK进行词形归一化的示例代码：</p>\n<p>首先，确保已经安装NLTK包和相应的数据集：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install nltk</span><br></pre></td></tr></table></figure>\n\n<p>然后，在Python中导入NLTK库并下载必要的数据集：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> nltk</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下载必要的数据集</span></span><br><span class=\"line\">nltk.download(<span class=\"string\">&#x27;punkt&#x27;</span>)</span><br><span class=\"line\">nltk.download(<span class=\"string\">&#x27;averaged_perceptron_tagger&#x27;</span>)</span><br><span class=\"line\">nltk.download(<span class=\"string\">&#x27;wordnet&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>接下来，使用NLTK的<code>WordNetLemmatizer</code>类进行词形归一化：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> nltk.stem <span class=\"keyword\">import</span> WordNetLemmatizer</span><br><span class=\"line\"><span class=\"keyword\">from</span> nltk.tokenize <span class=\"keyword\">import</span> word_tokenize</span><br><span class=\"line\"><span class=\"keyword\">from</span> nltk.corpus <span class=\"keyword\">import</span> wordnet</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建WordNetLemmatizer对象</span></span><br><span class=\"line\">lemmatizer = WordNetLemmatizer()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义要进行词形归一化的文本</span></span><br><span class=\"line\">text = <span class=\"string\">&quot;The striped bats are hanging on their feet for best&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 对文本进行分词和词性标注</span></span><br><span class=\"line\">tokens = word_tokenize(text)</span><br><span class=\"line\">tagged_tokens = nltk.pos_tag(tokens)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义函数将词性标注转换为WordNet词性标记</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_wordnet_pos</span>(<span class=\"params\">tag</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> tag.startswith(<span class=\"string\">&#x27;J&#x27;</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> wordnet.ADJ</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> tag.startswith(<span class=\"string\">&#x27;V&#x27;</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> wordnet.VERB</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> tag.startswith(<span class=\"string\">&#x27;N&#x27;</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> wordnet.NOUN</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> tag.startswith(<span class=\"string\">&#x27;R&#x27;</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> wordnet.ADV</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> wordnet.NOUN</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 对分词结果进行词形归一化</span></span><br><span class=\"line\">lemmatized_tokens = [lemmatizer.lemmatize(token, get_wordnet_pos(tag)) <span class=\"keyword\">for</span> token, tag <span class=\"keyword\">in</span> tagged_tokens]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出词形归一化结果</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(lemmatized_tokens)</span><br></pre></td></tr></table></figure>\n\n<p>运行以上代码，将会输出以下结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&#x27;The&#x27;, &#x27;striped&#x27;, &#x27;bat&#x27;, &#x27;be&#x27;, &#x27;hang&#x27;, &#x27;on&#x27;, &#x27;their&#x27;, &#x27;foot&#x27;, &#x27;for&#x27;, &#x27;best&#x27;]</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，NLTK的<code>WordNetLemmatizer</code>类将输入的文本中的词语进行了词形归一化，并返回了一个包含词形归一化结果的列表。在进行词形归一化之前，需要先对文本进行分词和词性标注，并将词性标注转换为WordNet词性标记，以便<code>WordNetLemmatizer</code>类能够正确地识别词语的词性和上下文语境。</p>\n<p>需要注意的是，词形归一化是一种相对复杂的处理方法，需要考虑词语的上下文语境和词性等因素，因此可能会比词干化更慢，但得到的结果更加准确。如果需要更快速的处理方法，可以考虑先使用词干化等简单的处理方法进行预处理，再使用词形归一化进行进一步处理。</p>\n<p>希望以上示例能够帮助你理解和使用NLTK进行词形归一化。</p>\n<h2 id=\"下面介绍几种常见的文本向量化方法：\"><a href=\"#下面介绍几种常见的文本向量化方法：\" class=\"headerlink\" title=\"下面介绍几种常见的文本向量化方法：\"></a>下面介绍几种常见的文本向量化方法：</h2><ol>\n<li><p>词袋模型（Bag-of-Words）：将文本看作是一个词语的集合，忽略了词语的顺序和语法结构，只关注词汇的出现频率。可以使用CountVectorizer或TfidfVectorizer等工具库来实现词袋模型。</p>\n</li>\n<li><p>TF-IDF向量化：TF-IDF（Term Frequency-Inverse Document Frequency）是一种用于评估一个词语在文档中的重要程度的统计方法。TF-IDF向量化将文本表示为每个词语的TF-IDF权重，其中TF（词频）表示词语在文档中出现的频率，IDF（逆文档频率）表示词语在整个文档集合中的重要程度。可以使用TfidfVectorizer来实现TF-IDF向量化。</p>\n</li>\n<li><p>Word2Vec向量化：Word2Vec是一种基于神经网络的词向量表示方法，它将每个词语映射到一个固定长度的向量空间中，使得具有相似语义的词语在向量空间中距离较近。Word2Vec向量化可以捕捉到词语之间的语义关系，常用于文本相似度计算等任务。可以使用gensim库来实现Word2Vec向量化。</p>\n</li>\n<li><p>文档嵌入（Document Embedding）：文档嵌入是将整个文档表示为一个固定长度的向量的方法，常用于文本分类和文本聚类等任务。常见的文档嵌入方法包括Doc2Vec和BERT（Bidirectional Encoder Representations from Transformers）等。可以使用gensim库来实现Doc2Vec向量化，使用Hugging Face的transformers库来实现BERT向量化。</p>\n</li>\n</ol>\n<p>以上是一些常见的文本向量化方法，每种方法都有其特点和适用场景。在实际应用中，可以根据具体任务的需求和数据的特点选择合适的文本向量化方法。</p>\n<h2 id=\"Word2Vec是一种基于神经网络的词向量表示方法\"><a href=\"#Word2Vec是一种基于神经网络的词向量表示方法\" class=\"headerlink\" title=\"Word2Vec是一种基于神经网络的词向量表示方法\"></a>Word2Vec是一种基于神经网络的词向量表示方法</h2><p>它将每个词语映射到一个固定长度的向量空间中，使得具有相似语义的词语在向量空间中距离较近。Word2Vec向量化可以捕捉到词语之间的语义关系，常用于文本相似度计算、文本分类、情感分析等任务。</p>\n<p>Word2Vec模型有两种训练方法：Skip-gram和CBOW（Continuous Bag-of-Words）。Skip-gram模型是通过一个词语预测其周围的上下文词语，而CBOW模型则是通过周围的上下文词语预测目标词语。这两种模型都可以用于生成词向量。</p>\n<p>在使用Word2Vec进行文本向量化时，一般有以下几个步骤：</p>\n<ol>\n<li><p>数据准备：准备一个大型的文本语料库作为训练数据，可以是预处理后的文本数据集或者是大规模的语料库。</p>\n</li>\n<li><p>分词：将文本数据进行分词处理，将句子分解为单词或者词语。</p>\n</li>\n<li><p>构建Word2Vec模型：使用分词后的文本数据训练Word2Vec模型。可以使用gensim库中的Word2Vec类来构建和训练模型。</p>\n</li>\n<li><p>获取词向量：训练完成后，可以通过模型获取每个词语的词向量表示。可以使用<code>model.wv[word]</code>来获取指定词语的词向量。</p>\n</li>\n<li><p>应用词向量：可以将词向量用于文本分类、文本相似度计算等任务。可以通过计算词语之间的余弦相似度或欧氏距离来度量词语之间的语义相似度。</p>\n</li>\n</ol>\n<p>在使用Word2Vec进行文本向量化时，需要注意以下几点：</p>\n<ul>\n<li>训练数据的规模对结果影响较大，通常需要大规模的语料库来训练更准确的词向量。</li>\n<li>对于生僻词或者低频词，可能无法得到准确的词向量表示。</li>\n<li>可以使用预训练的Word2Vec模型，如Google News Word2Vec或GloVe等，来获取通用的词向量表示。</li>\n</ul>\n<p>总之，Word2Vec向量化是一种有效的文本向量化方法，可以捕捉到词语之间的语义关系，用于文本分类、文本相似度计算等任务。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"自然语言处理学习规划\"><a href=\"#自然语言处理学习规划\" class=\"headerlink\" title=\"自然语言处理学习规划\"></a>自然语言处理学习规划</h2><ol>\n<li>学习基础知识：了解自然语言处理的基本概念、技术和应用场景。</li>\n<li>学习编程语言：学习Python编程语言，掌握常用的自然语言处理库，如nltk、spaCy等。</li>\n<li>学习文本处理技术：学习文本预处理技术，如分词、词性标注、命名实体识别、情感分析等。</li>\n<li>学习语言模型：学习语言模型的概念和原理，掌握常用的语言模型，如n-gram模型、神经网络语言模型等。</li>\n<li>学习机器翻译：学习机器翻译的原理和技术，掌握常用的机器翻译模型，如统计机器翻译、神经网络机器翻译等。</li>\n<li>学习对话系统：学习对话系统的原理和技术，掌握常用的对话系统框架，如Seq2Seq、Transformer等。</li>\n<li>实践项目：完成自然语言处理相关的实践项目，如情感分析、机器翻译、对话系统等。</li>\n</ol>\n<h2 id=\"自然语言处理（Natural-Language-Processing，简称NLP）\"><a href=\"#自然语言处理（Natural-Language-Processing，简称NLP）\" class=\"headerlink\" title=\"自然语言处理（Natural Language Processing，简称NLP）\"></a>自然语言处理（Natural Language Processing，简称NLP）</h2><p>是一门研究如何使计算机能够理解、处理和生成人类语言的学科。以下是自然语言处理的基本概念、技术和应用场景的介绍：</p>\n<p>基本概念：</p>\n<ol>\n<li>语言模型：用于对语言的概率进行建模，包括n-gram模型、神经网络语言模型等。</li>\n<li>分词：将连续的文本切分成有意义的词语。</li>\n<li>词性标注：为文本中的每个词语标注其词性，如名词、动词、形容词等。</li>\n<li>命名实体识别：识别文本中的具体实体，如人名、地名、组织机构等。</li>\n<li>语义角色标注：对句子中的每个词语进行语义角色的标注，如施事者、受事者等。</li>\n</ol>\n<p>基本技术：</p>\n<ol>\n<li>文本预处理：包括分词、去除停用词、词干化等，用于清洗和规范化文本数据。</li>\n<li>文本分类：将文本分为不同的类别或标签，如情感分类、主题分类等。</li>\n<li>信息抽取：从文本中提取结构化的信息，如实体关系、事件等。</li>\n<li>机器翻译：将一种语言的文本翻译成另一种语言的文本。</li>\n<li>问答系统：根据用户的问题，从文本中找到相关的答案。</li>\n<li>对话系统：与用户进行自然语言交互，实现智能对话。</li>\n</ol>\n<p>应用场景：</p>\n<ol>\n<li>搜索引擎：通过分析用户的查询意图，提供相关的搜索结果。</li>\n<li>情感分析：分析文本中的情感倾向，如正面、负面或中性。</li>\n<li>社交媒体分析：分析社交媒体上的用户评论和观点。</li>\n<li>机器翻译：实现跨语言的文本翻译，如中英互译。</li>\n<li>语音识别：将语音转换为文本，实现语音助手和语音输入等功能。</li>\n<li>自动摘要：从大量文本中自动提取关键信息，生成摘要。</li>\n<li>智能客服：通过对话系统实现自动化的客户服务。</li>\n</ol>\n<p>这些只是自然语言处理的一部分概念、技术和应用场景，随着技术的发展，NLP在各个领域都有广泛的应用。</p>\n<h2 id=\"常用的自然语言处理库\"><a href=\"#常用的自然语言处理库\" class=\"headerlink\" title=\"常用的自然语言处理库\"></a>常用的自然语言处理库</h2><ol>\n<li>Natural Language Toolkit (NLTK)：Python的自然语言处理工具包，提供了丰富的语料库、算法和工具，可用于文本分析、语言模型、文本分类等任务。</li>\n<li>Stanford CoreNLP：由斯坦福大学开发的自然语言处理工具包，支持分词、词性标注、命名实体识别、句法分析、情感分析等任务。</li>\n<li>spaCy：Python的自然语言处理工具包，提供了高效的分词、词性标注、命名实体识别、句法分析等功能。</li>\n<li>Gensim：Python的自然语言处理工具包，主要用于文本相似度计算、主题建模等任务。</li>\n<li>TextBlob：Python的自然语言处理工具包，提供了文本分析、情感分析、语言翻译等功能。</li>\n<li>OpenNLP：Java的自然语言处理工具包，支持分词、词性标注、命名实体识别、句法分析等任务。</li>\n<li>Apache Lucene：Java的全文检索引擎，支持分词、词性标注、命名实体识别等任务。</li>\n</ol>\n<p>这些自然语言处理库都有各自的优点和适用场景，可以根据实际需求选择合适的工具包。</p>\n<h2 id=\"常用的文本预处理\"><a href=\"#常用的文本预处理\" class=\"headerlink\" title=\"常用的文本预处理\"></a>常用的文本预处理</h2><ol>\n<li><p>分词（Tokenization）：将连续的文本切分成有意义的词语（token）。常见的分词方法包括基于规则的分词、基于统计的分词和基于机器学习的分词。</p>\n</li>\n<li><p>去除停用词（Stopword Removal）：停用词是指在文本中频繁出现但没有实际意义的词语，如“的”、“是”、“在”等。去除停用词可以减少文本中的噪音，提高后续处理的效果。</p>\n</li>\n<li><p>词干化（Stemming）：将词语还原为其词干形式，去除词语的词缀。例如，将“running”和“runs”都还原为“run”。常用的词干化算法有Porter算法和Lancaster算法。</p>\n</li>\n<li><p>词形归一化（Lemmatization）：将词语还原为其基本形式（词元），即词的词性和时态都统一。与词干化不同，词形归一化考虑了词语的上下文和语法规则。例如，将“better”还原为“good”。</p>\n</li>\n<li><p>去除特殊字符和标点符号：将文本中的特殊字符、标点符号和HTML标签等去除或替换为空格，以便后续处理。</p>\n</li>\n<li><p>文本规范化：对文本进行一些规范化操作，如转换为小写字母、处理缩写词、数字的处理等，以保持文本的一致性。</p>\n</li>\n<li><p>文本向量化：将文本转换为数值向量的形式，以便机器学习算法的处理。常用的文本向量化方法有词袋模型（Bag-of-Words）、TF-IDF（Term Frequency-Inverse Document Frequency）等。</p>\n</li>\n</ol>\n<p>以上是一些常用的文本预处理技术，通过学习和掌握这些技术，可以提高文本处理的效果和质量。在实际应用中，根据具体任务的需求，可以选择适合的预处理技术进行处理。</p>\n<p>文本向量化是将文本数据转换为数值向量的过程，以便计算机可以对其进行处理和分析。文本向量化是自然语言处理（NLP）和文本挖掘中的重要步骤之一，常用于文本分类、情感分析、文本聚类等任务。</p>\n<h2 id=\"去除停用词\"><a href=\"#去除停用词\" class=\"headerlink\" title=\"去除停用词\"></a>去除停用词</h2><p>在自然语言处理中，停用词（Stopwords）是指在文本中频繁出现但没有实际意义的词语，如“的”、“是”、“在”等。<br>可以减少文本中的噪音，提高后续处理的效果。下面是使用NLTK进行停用词去除的示例代码：</p>\n<p>首先，确保已经安装NLTK包和相应的数据集：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install nltk</span><br></pre></td></tr></table></figure>\n\n<p>然后，在Python中导入NLTK库并下载必要的数据集：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> nltk</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下载必要的数据集</span></span><br><span class=\"line\">nltk.download(<span class=\"string\">&#x27;stopwords&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>接下来，使用NLTK的<code>stopwords</code>模块加载英文停用词表：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> nltk.corpus <span class=\"keyword\">import</span> stopwords</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 加载英文停用词表</span></span><br><span class=\"line\">stop_words = <span class=\"built_in\">set</span>(stopwords.words(<span class=\"string\">&#x27;english&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打印停用词表</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(stop_words)</span><br></pre></td></tr></table></figure>\n\n<p>运行以上代码，将会输出以下结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#x27;itself&#x27;, &#x27;mustn&#x27;, &#x27;herself&#x27;, &#x27;other&#x27;, &#x27;mightn&#x27;, &#x27;down&#x27;, &#x27;during&#x27;, &#x27;where&#x27;, &#x27;out&#x27;, &#x27;has&#x27;, &#x27;as&#x27;, &#x27;wasn&#x27;, &#x27;or&#x27;, &#x27;have&#x27;, &#x27;now&#x27;, &#x27;no&#x27;, &#x27;yourselves&#x27;, &#x27;had&#x27;, &#x27;when&#x27;, &#x27;weren&#x27;, &#x27;hasn&#x27;, &#x27;the&#x27;, &#x27;t&#x27;, &#x27;above&#x27;, &#x27;under&#x27;, &#x27;those&#x27;, &#x27;before&#x27;, &#x27;re&#x27;, &#x27;am&#x27;, &#x27;ll&#x27;, &#x27;doe...&#x27;, &#x27;an&#x27;, &#x27;been&#x27;, &#x27;doesn&#x27;, &#x27;been&#x27;, &#x27;isn&#x27;, &#x27;y&#x27;, &#x27;for&#x27;, &#x27;we&#x27;, &#x27;did&#x27;, &#x27;ourselves&#x27;, &#x27;ma&#x27;, &#x27;than&#x27;, &#x27;they&#x27;, &#x27;should&#x27;, &#x27;he&#x27;, &#x27;ours&#x27;, &#x27;are&#x27;, &#x27;will&#x27;, &#x27;just&#x27;, &#x27;her&#x27;, &#x27;myself&#x27;, &#x27;wouldn&#x27;, &#x27;through&#x27;, &#x27;himself&#x27;, &#x27;shouldn&#x27;, &#x27;my&#x27;, &#x27;so&#x27;, &#x27;who&#x27;, &#x27;him&#x27;, &#x27;most&#x27;, &#x27;each&#x27;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，NLTK的<code>stopwords</code>模块加载了英文停用词表，并返回了一个包含停用词的集合。</p>\n<p>接下来，可以使用Python的列表推导式和条件语句，对文本进行停用词去除：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> nltk.corpus <span class=\"keyword\">import</span> stopwords</span><br><span class=\"line\"><span class=\"keyword\">from</span> nltk.tokenize <span class=\"keyword\">import</span> word_tokenize</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 加载英文停用词表</span></span><br><span class=\"line\">stop_words = <span class=\"built_in\">set</span>(stopwords.words(<span class=\"string\">&#x27;english&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义要处理的文本</span></span><br><span class=\"line\">text = <span class=\"string\">&quot;This is an example sentence to demonstrate stopword removal.&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 对文本进行分词</span></span><br><span class=\"line\">tokens = word_tokenize(text)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 去除停用词</span></span><br><span class=\"line\">filtered_tokens = [token <span class=\"keyword\">for</span> token <span class=\"keyword\">in</span> tokens <span class=\"keyword\">if</span> token.lower() <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> stop_words]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出结果</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(filtered_tokens)</span><br></pre></td></tr></table></figure>\n\n<p>运行以上代码，将会输出以下结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&#x27;example&#x27;, &#x27;sentence&#x27;, &#x27;demonstrate&#x27;, &#x27;stopword&#x27;, &#x27;removal&#x27;, &#x27;.&#x27;]</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，经过停用词去除后，文本中的停用词“is”、“an”、“to”、“this”等被成功去除，只保留了实际有意义的词语。</p>\n<p>希望以上示例能够帮助你理解和使用NLTK进行停用词去除。需要注意的是，停用词表的选择和使用需要根据具体的任务和语言环境进行调整。</p>\n<h2 id=\"词干化（Stemming）\"><a href=\"#词干化（Stemming）\" class=\"headerlink\" title=\"词干化（Stemming）\"></a>词干化（Stemming）</h2><p>是一种文本预处理技术，用于将词语还原为其词干形式，去除词语的词缀。词干是指词语的基本形式，可以通过去除词缀来获得。词干化可以减少词语的变体，将具有相同词根的词语归并为同一形式，从而简化文本处理和分析。下面是使用NLTK进行词干化的示例代码：</p>\n<p>首先，确保已经安装NLTK包和相应的数据集：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install nltk</span><br></pre></td></tr></table></figure>\n\n<p>然后，在Python中导入NLTK库并下载必要的数据集：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> nltk</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下载必要的数据集</span></span><br><span class=\"line\">nltk.download(<span class=\"string\">&#x27;punkt&#x27;</span>)</span><br><span class=\"line\">nltk.download(<span class=\"string\">&#x27;averaged_perceptron_tagger&#x27;</span>)</span><br><span class=\"line\">nltk.download(<span class=\"string\">&#x27;wordnet&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>接下来，使用NLTK的<code>PorterStemmer</code>类进行词干化：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> nltk.stem <span class=\"keyword\">import</span> PorterStemmer</span><br><span class=\"line\"><span class=\"keyword\">from</span> nltk.tokenize <span class=\"keyword\">import</span> word_tokenize</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建PorterStemmer对象</span></span><br><span class=\"line\">stemmer = PorterStemmer()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义要进行词干化的文本</span></span><br><span class=\"line\">text = <span class=\"string\">&quot;running runs&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 对文本进行分词</span></span><br><span class=\"line\">tokens = word_tokenize(text)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 对分词结果进行词干化</span></span><br><span class=\"line\">stemmed_tokens = [stemmer.stem(token) <span class=\"keyword\">for</span> token <span class=\"keyword\">in</span> tokens]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出词干化结果</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(stemmed_tokens)</span><br></pre></td></tr></table></figure>\n\n<p>运行以上代码，将会输出以下结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&#x27;run&#x27;, &#x27;run&#x27;]</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，NLTK的<code>PorterStemmer</code>类将输入的文本中的词语进行了词干化，并返回了一个包含词干化结果的列表。</p>\n<p>除了<code>PorterStemmer</code>类，NLTK还提供了其他的词干化类，如<code>LancasterStemmer</code>和<code>SnowballStemmer</code>，可以根据具体的需求选择适合的词干化类进行文本处理。</p>\n<p>需要注意的是，词干化是一种基于规则的简单处理方法，可能会存在一些不准确的情况，如将“running”和“runs”都还原为“run”。如果需要更精确的词形还原，可以考虑使用词形归一化（Lemmatization）等更复杂的技术。</p>\n<p>希望以上示例能够帮助你理解和使用NLTK进行词干化。</p>\n<h2 id=\"词形归一化（Lemmatization）\"><a href=\"#词形归一化（Lemmatization）\" class=\"headerlink\" title=\"词形归一化（Lemmatization）\"></a>词形归一化（Lemmatization）</h2><p>是一种文本预处理技术，用于将词语还原为其标准形式，即词元（Lemma），从而减少词语的变体，将具有相同词根的词语归并为同一形式，从而简化文本处理和分析。与词干化不同，词形归一化考虑了词语的上下文语境和词性，因此可以得到更精确的结果。下面是使用NLTK进行词形归一化的示例代码：</p>\n<p>首先，确保已经安装NLTK包和相应的数据集：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install nltk</span><br></pre></td></tr></table></figure>\n\n<p>然后，在Python中导入NLTK库并下载必要的数据集：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> nltk</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下载必要的数据集</span></span><br><span class=\"line\">nltk.download(<span class=\"string\">&#x27;punkt&#x27;</span>)</span><br><span class=\"line\">nltk.download(<span class=\"string\">&#x27;averaged_perceptron_tagger&#x27;</span>)</span><br><span class=\"line\">nltk.download(<span class=\"string\">&#x27;wordnet&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>接下来，使用NLTK的<code>WordNetLemmatizer</code>类进行词形归一化：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> nltk.stem <span class=\"keyword\">import</span> WordNetLemmatizer</span><br><span class=\"line\"><span class=\"keyword\">from</span> nltk.tokenize <span class=\"keyword\">import</span> word_tokenize</span><br><span class=\"line\"><span class=\"keyword\">from</span> nltk.corpus <span class=\"keyword\">import</span> wordnet</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建WordNetLemmatizer对象</span></span><br><span class=\"line\">lemmatizer = WordNetLemmatizer()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义要进行词形归一化的文本</span></span><br><span class=\"line\">text = <span class=\"string\">&quot;The striped bats are hanging on their feet for best&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 对文本进行分词和词性标注</span></span><br><span class=\"line\">tokens = word_tokenize(text)</span><br><span class=\"line\">tagged_tokens = nltk.pos_tag(tokens)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义函数将词性标注转换为WordNet词性标记</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_wordnet_pos</span>(<span class=\"params\">tag</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> tag.startswith(<span class=\"string\">&#x27;J&#x27;</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> wordnet.ADJ</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> tag.startswith(<span class=\"string\">&#x27;V&#x27;</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> wordnet.VERB</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> tag.startswith(<span class=\"string\">&#x27;N&#x27;</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> wordnet.NOUN</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> tag.startswith(<span class=\"string\">&#x27;R&#x27;</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> wordnet.ADV</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> wordnet.NOUN</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 对分词结果进行词形归一化</span></span><br><span class=\"line\">lemmatized_tokens = [lemmatizer.lemmatize(token, get_wordnet_pos(tag)) <span class=\"keyword\">for</span> token, tag <span class=\"keyword\">in</span> tagged_tokens]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出词形归一化结果</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(lemmatized_tokens)</span><br></pre></td></tr></table></figure>\n\n<p>运行以上代码，将会输出以下结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&#x27;The&#x27;, &#x27;striped&#x27;, &#x27;bat&#x27;, &#x27;be&#x27;, &#x27;hang&#x27;, &#x27;on&#x27;, &#x27;their&#x27;, &#x27;foot&#x27;, &#x27;for&#x27;, &#x27;best&#x27;]</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，NLTK的<code>WordNetLemmatizer</code>类将输入的文本中的词语进行了词形归一化，并返回了一个包含词形归一化结果的列表。在进行词形归一化之前，需要先对文本进行分词和词性标注，并将词性标注转换为WordNet词性标记，以便<code>WordNetLemmatizer</code>类能够正确地识别词语的词性和上下文语境。</p>\n<p>需要注意的是，词形归一化是一种相对复杂的处理方法，需要考虑词语的上下文语境和词性等因素，因此可能会比词干化更慢，但得到的结果更加准确。如果需要更快速的处理方法，可以考虑先使用词干化等简单的处理方法进行预处理，再使用词形归一化进行进一步处理。</p>\n<p>希望以上示例能够帮助你理解和使用NLTK进行词形归一化。</p>\n<h2 id=\"下面介绍几种常见的文本向量化方法：\"><a href=\"#下面介绍几种常见的文本向量化方法：\" class=\"headerlink\" title=\"下面介绍几种常见的文本向量化方法：\"></a>下面介绍几种常见的文本向量化方法：</h2><ol>\n<li><p>词袋模型（Bag-of-Words）：将文本看作是一个词语的集合，忽略了词语的顺序和语法结构，只关注词汇的出现频率。可以使用CountVectorizer或TfidfVectorizer等工具库来实现词袋模型。</p>\n</li>\n<li><p>TF-IDF向量化：TF-IDF（Term Frequency-Inverse Document Frequency）是一种用于评估一个词语在文档中的重要程度的统计方法。TF-IDF向量化将文本表示为每个词语的TF-IDF权重，其中TF（词频）表示词语在文档中出现的频率，IDF（逆文档频率）表示词语在整个文档集合中的重要程度。可以使用TfidfVectorizer来实现TF-IDF向量化。</p>\n</li>\n<li><p>Word2Vec向量化：Word2Vec是一种基于神经网络的词向量表示方法，它将每个词语映射到一个固定长度的向量空间中，使得具有相似语义的词语在向量空间中距离较近。Word2Vec向量化可以捕捉到词语之间的语义关系，常用于文本相似度计算等任务。可以使用gensim库来实现Word2Vec向量化。</p>\n</li>\n<li><p>文档嵌入（Document Embedding）：文档嵌入是将整个文档表示为一个固定长度的向量的方法，常用于文本分类和文本聚类等任务。常见的文档嵌入方法包括Doc2Vec和BERT（Bidirectional Encoder Representations from Transformers）等。可以使用gensim库来实现Doc2Vec向量化，使用Hugging Face的transformers库来实现BERT向量化。</p>\n</li>\n</ol>\n<p>以上是一些常见的文本向量化方法，每种方法都有其特点和适用场景。在实际应用中，可以根据具体任务的需求和数据的特点选择合适的文本向量化方法。</p>\n<h2 id=\"Word2Vec是一种基于神经网络的词向量表示方法\"><a href=\"#Word2Vec是一种基于神经网络的词向量表示方法\" class=\"headerlink\" title=\"Word2Vec是一种基于神经网络的词向量表示方法\"></a>Word2Vec是一种基于神经网络的词向量表示方法</h2><p>它将每个词语映射到一个固定长度的向量空间中，使得具有相似语义的词语在向量空间中距离较近。Word2Vec向量化可以捕捉到词语之间的语义关系，常用于文本相似度计算、文本分类、情感分析等任务。</p>\n<p>Word2Vec模型有两种训练方法：Skip-gram和CBOW（Continuous Bag-of-Words）。Skip-gram模型是通过一个词语预测其周围的上下文词语，而CBOW模型则是通过周围的上下文词语预测目标词语。这两种模型都可以用于生成词向量。</p>\n<p>在使用Word2Vec进行文本向量化时，一般有以下几个步骤：</p>\n<ol>\n<li><p>数据准备：准备一个大型的文本语料库作为训练数据，可以是预处理后的文本数据集或者是大规模的语料库。</p>\n</li>\n<li><p>分词：将文本数据进行分词处理，将句子分解为单词或者词语。</p>\n</li>\n<li><p>构建Word2Vec模型：使用分词后的文本数据训练Word2Vec模型。可以使用gensim库中的Word2Vec类来构建和训练模型。</p>\n</li>\n<li><p>获取词向量：训练完成后，可以通过模型获取每个词语的词向量表示。可以使用<code>model.wv[word]</code>来获取指定词语的词向量。</p>\n</li>\n<li><p>应用词向量：可以将词向量用于文本分类、文本相似度计算等任务。可以通过计算词语之间的余弦相似度或欧氏距离来度量词语之间的语义相似度。</p>\n</li>\n</ol>\n<p>在使用Word2Vec进行文本向量化时，需要注意以下几点：</p>\n<ul>\n<li>训练数据的规模对结果影响较大，通常需要大规模的语料库来训练更准确的词向量。</li>\n<li>对于生僻词或者低频词，可能无法得到准确的词向量表示。</li>\n<li>可以使用预训练的Word2Vec模型，如Google News Word2Vec或GloVe等，来获取通用的词向量表示。</li>\n</ul>\n<p>总之，Word2Vec向量化是一种有效的文本向量化方法，可以捕捉到词语之间的语义关系，用于文本分类、文本相似度计算等任务。</p>\n"},{"title":"软件测试","date":"2023-06-13T10:05:15.000Z","cover":false,"_content":"\n## 软件测试概念\n\n我认为概念是推理的基础,认识概念才能正确的运用相关技术\n\n>软件测试是什么\n\n一种发现软件缺陷的的活动\n\n评估软件的特性或能力,确定其是否达到预期\n\n>为什么要软件测试\n\n为了保证软件质量\n\n>关于软件测试的两种观点\n\n1. 测试是为了证伪(Myers)\n\n    假设程序是错误的,证明其正确\n\n2. 测试是为了证明软件是正确的(Bill Hetzel)\n\n    假设程序是正确的\n\n>什么是软件质量\n\n即产品所满足的特性\n\n这些特性可能是用户的需求,产品固有的性质或者是行业标准所规定的\n\n>内部质量\n\n主要是代码,极其相关的特性\n\n>外部质量\n\n主要是产品的功能\n\n>使用质量\n\n从场景和用户的角度出发分析质量\n\n>软件缺陷\n\n从内部看: 软件设计,开发,维护的不合理\n\n从外部看: 软件功能的失效或违背\n\n## 软件测试分类\n\n按阶段分:\n1. 需求评审: 需求 SRS 是否完整,正确,清晰\n2. 设计评审: 设计结果是否符合需求\n3. 单元测试: 函数,类,模块\n4. 集成测试: 几个完成的单元作为系统一起测试\n5. 系统测试: 测试整个系统(软件,硬件)\n6. 验收测试: 用户参与,在用户环境,使用用户数据作测试\n7. alpha测试: 开放外部用户参与测试\n8. beta测试: 如果不出问题就是正式版\n\n按测试目标分:\n1. 功能测试: 测试功能是否按预定的方式工作\n2. 负载(压力)测试: 测试系统在高负载情况下的表现\n3. 性能测试: 测试不同负载情况下的各种指标\n4. 安全性测试: 测试系统的访问控制和攻击防呼能力\n5. 恢复测试: 系统发生灾难后恢复到灾难前的能力\n6. 安装测试: 在多种用户环境下,测试能否正常安装\n7. 兼容性测试: 测试软件在不同运行环境(硬件,软件)下的表现\n8. 可用性测试: 测试服务正常运行的时间百分比\n9. 可靠性测试: 测试用户访问服务时，服务按预期运行的可能性\n\n按测试对象分:\n1. 单元测试\n2. 接口测试\n3. 系统测试\n4. 数据测试\n5. 界面测试\n6. 文档测试\n\n## 测试的 动 静 黑 白\n\n动 | 静 : 软件是否运行\n \n黑 | 白 : 源代码是否可见\n\n\n|      | 百盒                | 黑盒           |\n| ---- | ------------------- | -------------- |\n| 静态 | 源程序语法检查,评审 | 评审非技术文档 |\n| 动态 | 调试                | 输入输出测试   |","source":"_posts/软件测试.md","raw":"---\ntitle: 软件测试\ndate: 2023-06-13 18:05:15\ntags: 软件测试\ncover:\n---\n\n## 软件测试概念\n\n我认为概念是推理的基础,认识概念才能正确的运用相关技术\n\n>软件测试是什么\n\n一种发现软件缺陷的的活动\n\n评估软件的特性或能力,确定其是否达到预期\n\n>为什么要软件测试\n\n为了保证软件质量\n\n>关于软件测试的两种观点\n\n1. 测试是为了证伪(Myers)\n\n    假设程序是错误的,证明其正确\n\n2. 测试是为了证明软件是正确的(Bill Hetzel)\n\n    假设程序是正确的\n\n>什么是软件质量\n\n即产品所满足的特性\n\n这些特性可能是用户的需求,产品固有的性质或者是行业标准所规定的\n\n>内部质量\n\n主要是代码,极其相关的特性\n\n>外部质量\n\n主要是产品的功能\n\n>使用质量\n\n从场景和用户的角度出发分析质量\n\n>软件缺陷\n\n从内部看: 软件设计,开发,维护的不合理\n\n从外部看: 软件功能的失效或违背\n\n## 软件测试分类\n\n按阶段分:\n1. 需求评审: 需求 SRS 是否完整,正确,清晰\n2. 设计评审: 设计结果是否符合需求\n3. 单元测试: 函数,类,模块\n4. 集成测试: 几个完成的单元作为系统一起测试\n5. 系统测试: 测试整个系统(软件,硬件)\n6. 验收测试: 用户参与,在用户环境,使用用户数据作测试\n7. alpha测试: 开放外部用户参与测试\n8. beta测试: 如果不出问题就是正式版\n\n按测试目标分:\n1. 功能测试: 测试功能是否按预定的方式工作\n2. 负载(压力)测试: 测试系统在高负载情况下的表现\n3. 性能测试: 测试不同负载情况下的各种指标\n4. 安全性测试: 测试系统的访问控制和攻击防呼能力\n5. 恢复测试: 系统发生灾难后恢复到灾难前的能力\n6. 安装测试: 在多种用户环境下,测试能否正常安装\n7. 兼容性测试: 测试软件在不同运行环境(硬件,软件)下的表现\n8. 可用性测试: 测试服务正常运行的时间百分比\n9. 可靠性测试: 测试用户访问服务时，服务按预期运行的可能性\n\n按测试对象分:\n1. 单元测试\n2. 接口测试\n3. 系统测试\n4. 数据测试\n5. 界面测试\n6. 文档测试\n\n## 测试的 动 静 黑 白\n\n动 | 静 : 软件是否运行\n \n黑 | 白 : 源代码是否可见\n\n\n|      | 百盒                | 黑盒           |\n| ---- | ------------------- | -------------- |\n| 静态 | 源程序语法检查,评审 | 评审非技术文档 |\n| 动态 | 调试                | 输入输出测试   |","slug":"软件测试","published":1,"updated":"2023-06-23T01:07:44.899Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5vk0073lv9e8fsm0ikg","content":"<h2 id=\"软件测试概念\"><a href=\"#软件测试概念\" class=\"headerlink\" title=\"软件测试概念\"></a>软件测试概念</h2><p>我认为概念是推理的基础,认识概念才能正确的运用相关技术</p>\n<blockquote>\n<p>软件测试是什么</p>\n</blockquote>\n<p>一种发现软件缺陷的的活动</p>\n<p>评估软件的特性或能力,确定其是否达到预期</p>\n<blockquote>\n<p>为什么要软件测试</p>\n</blockquote>\n<p>为了保证软件质量</p>\n<blockquote>\n<p>关于软件测试的两种观点</p>\n</blockquote>\n<ol>\n<li><p>测试是为了证伪(Myers)</p>\n<p> 假设程序是错误的,证明其正确</p>\n</li>\n<li><p>测试是为了证明软件是正确的(Bill Hetzel)</p>\n<p> 假设程序是正确的</p>\n</li>\n</ol>\n<blockquote>\n<p>什么是软件质量</p>\n</blockquote>\n<p>即产品所满足的特性</p>\n<p>这些特性可能是用户的需求,产品固有的性质或者是行业标准所规定的</p>\n<blockquote>\n<p>内部质量</p>\n</blockquote>\n<p>主要是代码,极其相关的特性</p>\n<blockquote>\n<p>外部质量</p>\n</blockquote>\n<p>主要是产品的功能</p>\n<blockquote>\n<p>使用质量</p>\n</blockquote>\n<p>从场景和用户的角度出发分析质量</p>\n<blockquote>\n<p>软件缺陷</p>\n</blockquote>\n<p>从内部看: 软件设计,开发,维护的不合理</p>\n<p>从外部看: 软件功能的失效或违背</p>\n<h2 id=\"软件测试分类\"><a href=\"#软件测试分类\" class=\"headerlink\" title=\"软件测试分类\"></a>软件测试分类</h2><p>按阶段分:</p>\n<ol>\n<li>需求评审: 需求 SRS 是否完整,正确,清晰</li>\n<li>设计评审: 设计结果是否符合需求</li>\n<li>单元测试: 函数,类,模块</li>\n<li>集成测试: 几个完成的单元作为系统一起测试</li>\n<li>系统测试: 测试整个系统(软件,硬件)</li>\n<li>验收测试: 用户参与,在用户环境,使用用户数据作测试</li>\n<li>alpha测试: 开放外部用户参与测试</li>\n<li>beta测试: 如果不出问题就是正式版</li>\n</ol>\n<p>按测试目标分:</p>\n<ol>\n<li>功能测试: 测试功能是否按预定的方式工作</li>\n<li>负载(压力)测试: 测试系统在高负载情况下的表现</li>\n<li>性能测试: 测试不同负载情况下的各种指标</li>\n<li>安全性测试: 测试系统的访问控制和攻击防呼能力</li>\n<li>恢复测试: 系统发生灾难后恢复到灾难前的能力</li>\n<li>安装测试: 在多种用户环境下,测试能否正常安装</li>\n<li>兼容性测试: 测试软件在不同运行环境(硬件,软件)下的表现</li>\n<li>可用性测试: 测试服务正常运行的时间百分比</li>\n<li>可靠性测试: 测试用户访问服务时，服务按预期运行的可能性</li>\n</ol>\n<p>按测试对象分:</p>\n<ol>\n<li>单元测试</li>\n<li>接口测试</li>\n<li>系统测试</li>\n<li>数据测试</li>\n<li>界面测试</li>\n<li>文档测试</li>\n</ol>\n<h2 id=\"测试的-动-静-黑-白\"><a href=\"#测试的-动-静-黑-白\" class=\"headerlink\" title=\"测试的 动 静 黑 白\"></a>测试的 动 静 黑 白</h2><p>动 | 静 : 软件是否运行</p>\n<p>黑 | 白 : 源代码是否可见</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>百盒</th>\n<th>黑盒</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>静态</td>\n<td>源程序语法检查,评审</td>\n<td>评审非技术文档</td>\n</tr>\n<tr>\n<td>动态</td>\n<td>调试</td>\n<td>输入输出测试</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"软件测试概念\"><a href=\"#软件测试概念\" class=\"headerlink\" title=\"软件测试概念\"></a>软件测试概念</h2><p>我认为概念是推理的基础,认识概念才能正确的运用相关技术</p>\n<blockquote>\n<p>软件测试是什么</p>\n</blockquote>\n<p>一种发现软件缺陷的的活动</p>\n<p>评估软件的特性或能力,确定其是否达到预期</p>\n<blockquote>\n<p>为什么要软件测试</p>\n</blockquote>\n<p>为了保证软件质量</p>\n<blockquote>\n<p>关于软件测试的两种观点</p>\n</blockquote>\n<ol>\n<li><p>测试是为了证伪(Myers)</p>\n<p> 假设程序是错误的,证明其正确</p>\n</li>\n<li><p>测试是为了证明软件是正确的(Bill Hetzel)</p>\n<p> 假设程序是正确的</p>\n</li>\n</ol>\n<blockquote>\n<p>什么是软件质量</p>\n</blockquote>\n<p>即产品所满足的特性</p>\n<p>这些特性可能是用户的需求,产品固有的性质或者是行业标准所规定的</p>\n<blockquote>\n<p>内部质量</p>\n</blockquote>\n<p>主要是代码,极其相关的特性</p>\n<blockquote>\n<p>外部质量</p>\n</blockquote>\n<p>主要是产品的功能</p>\n<blockquote>\n<p>使用质量</p>\n</blockquote>\n<p>从场景和用户的角度出发分析质量</p>\n<blockquote>\n<p>软件缺陷</p>\n</blockquote>\n<p>从内部看: 软件设计,开发,维护的不合理</p>\n<p>从外部看: 软件功能的失效或违背</p>\n<h2 id=\"软件测试分类\"><a href=\"#软件测试分类\" class=\"headerlink\" title=\"软件测试分类\"></a>软件测试分类</h2><p>按阶段分:</p>\n<ol>\n<li>需求评审: 需求 SRS 是否完整,正确,清晰</li>\n<li>设计评审: 设计结果是否符合需求</li>\n<li>单元测试: 函数,类,模块</li>\n<li>集成测试: 几个完成的单元作为系统一起测试</li>\n<li>系统测试: 测试整个系统(软件,硬件)</li>\n<li>验收测试: 用户参与,在用户环境,使用用户数据作测试</li>\n<li>alpha测试: 开放外部用户参与测试</li>\n<li>beta测试: 如果不出问题就是正式版</li>\n</ol>\n<p>按测试目标分:</p>\n<ol>\n<li>功能测试: 测试功能是否按预定的方式工作</li>\n<li>负载(压力)测试: 测试系统在高负载情况下的表现</li>\n<li>性能测试: 测试不同负载情况下的各种指标</li>\n<li>安全性测试: 测试系统的访问控制和攻击防呼能力</li>\n<li>恢复测试: 系统发生灾难后恢复到灾难前的能力</li>\n<li>安装测试: 在多种用户环境下,测试能否正常安装</li>\n<li>兼容性测试: 测试软件在不同运行环境(硬件,软件)下的表现</li>\n<li>可用性测试: 测试服务正常运行的时间百分比</li>\n<li>可靠性测试: 测试用户访问服务时，服务按预期运行的可能性</li>\n</ol>\n<p>按测试对象分:</p>\n<ol>\n<li>单元测试</li>\n<li>接口测试</li>\n<li>系统测试</li>\n<li>数据测试</li>\n<li>界面测试</li>\n<li>文档测试</li>\n</ol>\n<h2 id=\"测试的-动-静-黑-白\"><a href=\"#测试的-动-静-黑-白\" class=\"headerlink\" title=\"测试的 动 静 黑 白\"></a>测试的 动 静 黑 白</h2><p>动 | 静 : 软件是否运行</p>\n<p>黑 | 白 : 源代码是否可见</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>百盒</th>\n<th>黑盒</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>静态</td>\n<td>源程序语法检查,评审</td>\n<td>评审非技术文档</td>\n</tr>\n<tr>\n<td>动态</td>\n<td>调试</td>\n<td>输入输出测试</td>\n</tr>\n</tbody></table>\n"},{"title":"队列","date":"2022-04-13T07:03:47.000Z","_content":"\n# 队列\n\n## 1. 基于数组的队列\n\n<!-- more -->\n\n```cpp\n#ifndef __QUEUE_H__\n#define __QUEUE_H__\n/**\n * 顺序队列(基于数组)\n *\n */\ntemplate <typename T>\nclass Queue {\nprivate:\n\tT* a;\n\tconst static int DEFAULT_SIZE = 16;\n\tint size;\n\tint rear, front;\n\npublic:\n\t/* 初始化 */\n\tQueue();\n\t/**\n\t * @param n 队列长度\n\t */\n\tQueue(int n);\n\t/* 释放空间 */\n\t~Queue();\n\t/**\n\t * @param t 入队的元素\n\t * @return 空间满了?false:true\n\t */\n\tbool enQueue(T t);\n\t/* 出队 */\n\tT deQueue();\n\t/* 取对头 */\n\tT getHead();\n\t/* 判断是否为空 */\n\tbool empty();\n};\ntemplate <typename T>\nQueue<T>::Queue() {\n\ta = new T[DEFAULT_SIZE];\n\tmemset(a, 0, DEFAULT_SIZE * sizeof(T));\n\tsize = DEFAULT_SIZE;\n\trear = front = 0;\n}\ntemplate <typename T>\nQueue<T>::Queue(int n) {\n\ta = new T[n + 1];\n\tmemset(a, 0, (n + 1) * sizeof(T));\n\tsize = n + 1;\n\trear = front = 0;\n}\ntemplate <typename T>\nQueue<T>::~Queue() {\n\tdelete a;\n}\ntemplate <typename T>\nbool Queue<T>::enQueue(T t) {\n\tif ((rear + 1) % size != front) {\n\t\trear = (rear + 1) % size;\n\t\ta[rear] = t;\n\t\treturn true;\n\t}\n\treturn false;\n}\ntemplate <typename T>\nT Queue<T>::deQueue() {\n\tif (rear != front) {\n\t\tfront = (front + 1) % size;\n\t\treturn a[front];\n\t}\n\treturn nullptr;\n}\ntemplate <typename T>\nT Queue<T>::getHead() {\n\tif (rear != front)\n\t\treturn a[front];\n\treturn nullptr;\n}\ntemplate <typename T>\nbool Queue<T>::empty() {\n\treturn rear == front ? true : false;\n}\n\n#endif\n```\n\n## 2. LinkedQueue\n\n```cpp\n\n#ifndef __LINKED_QUEUE_H__\n#define __LINKED_QUEUE_H__\ntemplate <typename T>\nclass Node {\npublic:\n\tT val;\n\tNode<T>* next;\n\tNode(T t) : val(t) {}\n};\ntemplate <typename T>\nclass LinkedQueue {\nprivate:\n\tNode<T>*head, *tail;\n\npublic:\n\t/* 初始化 */\n\tLinkedQueue();\n\t/* 析构 */\n\t~LinkedQueue();\n\t/* 入队 */\n\tbool enQueue(T t);\n\t/* 出队 */\n\tT deQueue();\n\t/* 获取头元素 */\n\tT getHead();\n\t/* 判空 */\n\tbool empty();\n};\ntemplate <typename T>\nLinkedQueue<T>::LinkedQueue() {\n\thead = nullptr;\n\ttail = nullptr;\n}\ntemplate <typename T>\nLinkedQueue<T>::~LinkedQueue() {\n\twhile (head != nullptr) {\n\t\tNode<T> p = head;\n\t\thead = head->next;\n\t\tdelete p;\n\t}\n\ttail = nullptr;\n}\ntemplate <typename T>\nbool LinkedQueue<T>::enQueue(T t) {\n\tNode<T>* node = new Node<T>(t);\n\tif (head == nullptr) {\n\t\thead = node;\n\t\ttail = node;\n\t\treturn true;\n\t}\n\ttail->next = node;\n\ttail = node;\n\treturn true;\n}\ntemplate <typename T>\nT LinkedQueue<T>::deQueue() {\n\tif (head != nullptr) {\n\t\tNode<T>* node = head;\n\t\tT val = head->val;\n\t\thead = head->next;\n\t\tdelete node;\n\t\treturn val;\n\t}\n\treturn nullptr;\n}\ntemplate <typename T>\nT LinkedQueue<T>::getHead() {\n\treturn head;\n}\ntemplate <typename T>\nbool LinkedQueue<T>::empty() {\n\treturn head == nullptr;\n}\n#endif\n\n```\n","source":"_posts/队列.md","raw":"---\ntitle: 队列\ndate: 2022-04-13 15:03:47\ntags: Data Structure\n---\n\n# 队列\n\n## 1. 基于数组的队列\n\n<!-- more -->\n\n```cpp\n#ifndef __QUEUE_H__\n#define __QUEUE_H__\n/**\n * 顺序队列(基于数组)\n *\n */\ntemplate <typename T>\nclass Queue {\nprivate:\n\tT* a;\n\tconst static int DEFAULT_SIZE = 16;\n\tint size;\n\tint rear, front;\n\npublic:\n\t/* 初始化 */\n\tQueue();\n\t/**\n\t * @param n 队列长度\n\t */\n\tQueue(int n);\n\t/* 释放空间 */\n\t~Queue();\n\t/**\n\t * @param t 入队的元素\n\t * @return 空间满了?false:true\n\t */\n\tbool enQueue(T t);\n\t/* 出队 */\n\tT deQueue();\n\t/* 取对头 */\n\tT getHead();\n\t/* 判断是否为空 */\n\tbool empty();\n};\ntemplate <typename T>\nQueue<T>::Queue() {\n\ta = new T[DEFAULT_SIZE];\n\tmemset(a, 0, DEFAULT_SIZE * sizeof(T));\n\tsize = DEFAULT_SIZE;\n\trear = front = 0;\n}\ntemplate <typename T>\nQueue<T>::Queue(int n) {\n\ta = new T[n + 1];\n\tmemset(a, 0, (n + 1) * sizeof(T));\n\tsize = n + 1;\n\trear = front = 0;\n}\ntemplate <typename T>\nQueue<T>::~Queue() {\n\tdelete a;\n}\ntemplate <typename T>\nbool Queue<T>::enQueue(T t) {\n\tif ((rear + 1) % size != front) {\n\t\trear = (rear + 1) % size;\n\t\ta[rear] = t;\n\t\treturn true;\n\t}\n\treturn false;\n}\ntemplate <typename T>\nT Queue<T>::deQueue() {\n\tif (rear != front) {\n\t\tfront = (front + 1) % size;\n\t\treturn a[front];\n\t}\n\treturn nullptr;\n}\ntemplate <typename T>\nT Queue<T>::getHead() {\n\tif (rear != front)\n\t\treturn a[front];\n\treturn nullptr;\n}\ntemplate <typename T>\nbool Queue<T>::empty() {\n\treturn rear == front ? true : false;\n}\n\n#endif\n```\n\n## 2. LinkedQueue\n\n```cpp\n\n#ifndef __LINKED_QUEUE_H__\n#define __LINKED_QUEUE_H__\ntemplate <typename T>\nclass Node {\npublic:\n\tT val;\n\tNode<T>* next;\n\tNode(T t) : val(t) {}\n};\ntemplate <typename T>\nclass LinkedQueue {\nprivate:\n\tNode<T>*head, *tail;\n\npublic:\n\t/* 初始化 */\n\tLinkedQueue();\n\t/* 析构 */\n\t~LinkedQueue();\n\t/* 入队 */\n\tbool enQueue(T t);\n\t/* 出队 */\n\tT deQueue();\n\t/* 获取头元素 */\n\tT getHead();\n\t/* 判空 */\n\tbool empty();\n};\ntemplate <typename T>\nLinkedQueue<T>::LinkedQueue() {\n\thead = nullptr;\n\ttail = nullptr;\n}\ntemplate <typename T>\nLinkedQueue<T>::~LinkedQueue() {\n\twhile (head != nullptr) {\n\t\tNode<T> p = head;\n\t\thead = head->next;\n\t\tdelete p;\n\t}\n\ttail = nullptr;\n}\ntemplate <typename T>\nbool LinkedQueue<T>::enQueue(T t) {\n\tNode<T>* node = new Node<T>(t);\n\tif (head == nullptr) {\n\t\thead = node;\n\t\ttail = node;\n\t\treturn true;\n\t}\n\ttail->next = node;\n\ttail = node;\n\treturn true;\n}\ntemplate <typename T>\nT LinkedQueue<T>::deQueue() {\n\tif (head != nullptr) {\n\t\tNode<T>* node = head;\n\t\tT val = head->val;\n\t\thead = head->next;\n\t\tdelete node;\n\t\treturn val;\n\t}\n\treturn nullptr;\n}\ntemplate <typename T>\nT LinkedQueue<T>::getHead() {\n\treturn head;\n}\ntemplate <typename T>\nbool LinkedQueue<T>::empty() {\n\treturn head == nullptr;\n}\n#endif\n\n```\n","slug":"队列","published":1,"updated":"2022-04-15T10:07:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqpau5vl0075lv9ednhy3j31","content":"<h1 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h1><h2 id=\"1-基于数组的队列\"><a href=\"#1-基于数组的队列\" class=\"headerlink\" title=\"1. 基于数组的队列\"></a>1. 基于数组的队列</h2><span id=\"more\"></span>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> __QUEUE_H__</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __QUEUE_H__</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 顺序队列(基于数组)</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Queue</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tT* a;</span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">static</span> <span class=\"type\">int</span> DEFAULT_SIZE = <span class=\"number\">16</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> size;</span><br><span class=\"line\">\t<span class=\"type\">int</span> rear, front;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">/* 初始化 */</span></span><br><span class=\"line\">\t<span class=\"built_in\">Queue</span>();</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param n 队列长度</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"built_in\">Queue</span>(<span class=\"type\">int</span> n);</span><br><span class=\"line\">\t<span class=\"comment\">/* 释放空间 */</span></span><br><span class=\"line\">\t~<span class=\"built_in\">Queue</span>();</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param t 入队的元素</span></span><br><span class=\"line\"><span class=\"comment\">\t * @return 空间满了?false:true</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">enQueue</span><span class=\"params\">(T t)</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/* 出队 */</span></span><br><span class=\"line\">\t<span class=\"function\">T <span class=\"title\">deQueue</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/* 取对头 */</span></span><br><span class=\"line\">\t<span class=\"function\">T <span class=\"title\">getHead</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/* 判断是否为空 */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">empty</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">Queue&lt;T&gt;::<span class=\"built_in\">Queue</span>() &#123;</span><br><span class=\"line\">\ta = <span class=\"keyword\">new</span> T[DEFAULT_SIZE];</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(a, <span class=\"number\">0</span>, DEFAULT_SIZE * <span class=\"built_in\">sizeof</span>(T));</span><br><span class=\"line\">\tsize = DEFAULT_SIZE;</span><br><span class=\"line\">\trear = front = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">Queue&lt;T&gt;::<span class=\"built_in\">Queue</span>(<span class=\"type\">int</span> n) &#123;</span><br><span class=\"line\">\ta = <span class=\"keyword\">new</span> T[n + <span class=\"number\">1</span>];</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(a, <span class=\"number\">0</span>, (n + <span class=\"number\">1</span>) * <span class=\"built_in\">sizeof</span>(T));</span><br><span class=\"line\">\tsize = n + <span class=\"number\">1</span>;</span><br><span class=\"line\">\trear = front = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">Queue&lt;T&gt;::~<span class=\"built_in\">Queue</span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"type\">bool</span> Queue&lt;T&gt;::<span class=\"built_in\">enQueue</span>(T t) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ((rear + <span class=\"number\">1</span>) % size != front) &#123;</span><br><span class=\"line\">\t\trear = (rear + <span class=\"number\">1</span>) % size;</span><br><span class=\"line\">\t\ta[rear] = t;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">T Queue&lt;T&gt;::<span class=\"built_in\">deQueue</span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (rear != front) &#123;</span><br><span class=\"line\">\t\tfront = (front + <span class=\"number\">1</span>) % size;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a[front];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">T Queue&lt;T&gt;::<span class=\"built_in\">getHead</span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (rear != front)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a[front];</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"type\">bool</span> Queue&lt;T&gt;::<span class=\"built_in\">empty</span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> rear == front ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-LinkedQueue\"><a href=\"#2-LinkedQueue\" class=\"headerlink\" title=\"2. LinkedQueue\"></a>2. LinkedQueue</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> __LINKED_QUEUE_H__</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __LINKED_QUEUE_H__</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tT val;</span><br><span class=\"line\">\tNode&lt;T&gt;* next;</span><br><span class=\"line\">\t<span class=\"built_in\">Node</span>(T t) : <span class=\"built_in\">val</span>(t) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LinkedQueue</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tNode&lt;T&gt;*head, *tail;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">/* 初始化 */</span></span><br><span class=\"line\">\t<span class=\"built_in\">LinkedQueue</span>();</span><br><span class=\"line\">\t<span class=\"comment\">/* 析构 */</span></span><br><span class=\"line\">\t~<span class=\"built_in\">LinkedQueue</span>();</span><br><span class=\"line\">\t<span class=\"comment\">/* 入队 */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">enQueue</span><span class=\"params\">(T t)</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/* 出队 */</span></span><br><span class=\"line\">\t<span class=\"function\">T <span class=\"title\">deQueue</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/* 获取头元素 */</span></span><br><span class=\"line\">\t<span class=\"function\">T <span class=\"title\">getHead</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/* 判空 */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">empty</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">LinkedQueue&lt;T&gt;::<span class=\"built_in\">LinkedQueue</span>() &#123;</span><br><span class=\"line\">\thead = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\ttail = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">LinkedQueue&lt;T&gt;::~<span class=\"built_in\">LinkedQueue</span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (head != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">\t\tNode&lt;T&gt; p = head;</span><br><span class=\"line\">\t\thead = head-&gt;next;</span><br><span class=\"line\">\t\t<span class=\"keyword\">delete</span> p;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ttail = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"type\">bool</span> LinkedQueue&lt;T&gt;::<span class=\"built_in\">enQueue</span>(T t) &#123;</span><br><span class=\"line\">\tNode&lt;T&gt;* node = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>&lt;T&gt;(t);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (head == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">\t\thead = node;</span><br><span class=\"line\">\t\ttail = node;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ttail-&gt;next = node;</span><br><span class=\"line\">\ttail = node;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">T LinkedQueue&lt;T&gt;::<span class=\"built_in\">deQueue</span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (head != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">\t\tNode&lt;T&gt;* node = head;</span><br><span class=\"line\">\t\tT val = head-&gt;val;</span><br><span class=\"line\">\t\thead = head-&gt;next;</span><br><span class=\"line\">\t\t<span class=\"keyword\">delete</span> node;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> val;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">T LinkedQueue&lt;T&gt;::<span class=\"built_in\">getHead</span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"type\">bool</span> LinkedQueue&lt;T&gt;::<span class=\"built_in\">empty</span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> head == <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"cover":false,"excerpt":"<h1 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h1><h2 id=\"1-基于数组的队列\"><a href=\"#1-基于数组的队列\" class=\"headerlink\" title=\"1. 基于数组的队列\"></a>1. 基于数组的队列</h2>","more":"<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> __QUEUE_H__</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __QUEUE_H__</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 顺序队列(基于数组)</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Queue</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tT* a;</span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">static</span> <span class=\"type\">int</span> DEFAULT_SIZE = <span class=\"number\">16</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> size;</span><br><span class=\"line\">\t<span class=\"type\">int</span> rear, front;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">/* 初始化 */</span></span><br><span class=\"line\">\t<span class=\"built_in\">Queue</span>();</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param n 队列长度</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"built_in\">Queue</span>(<span class=\"type\">int</span> n);</span><br><span class=\"line\">\t<span class=\"comment\">/* 释放空间 */</span></span><br><span class=\"line\">\t~<span class=\"built_in\">Queue</span>();</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param t 入队的元素</span></span><br><span class=\"line\"><span class=\"comment\">\t * @return 空间满了?false:true</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">enQueue</span><span class=\"params\">(T t)</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/* 出队 */</span></span><br><span class=\"line\">\t<span class=\"function\">T <span class=\"title\">deQueue</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/* 取对头 */</span></span><br><span class=\"line\">\t<span class=\"function\">T <span class=\"title\">getHead</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/* 判断是否为空 */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">empty</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">Queue&lt;T&gt;::<span class=\"built_in\">Queue</span>() &#123;</span><br><span class=\"line\">\ta = <span class=\"keyword\">new</span> T[DEFAULT_SIZE];</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(a, <span class=\"number\">0</span>, DEFAULT_SIZE * <span class=\"built_in\">sizeof</span>(T));</span><br><span class=\"line\">\tsize = DEFAULT_SIZE;</span><br><span class=\"line\">\trear = front = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">Queue&lt;T&gt;::<span class=\"built_in\">Queue</span>(<span class=\"type\">int</span> n) &#123;</span><br><span class=\"line\">\ta = <span class=\"keyword\">new</span> T[n + <span class=\"number\">1</span>];</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(a, <span class=\"number\">0</span>, (n + <span class=\"number\">1</span>) * <span class=\"built_in\">sizeof</span>(T));</span><br><span class=\"line\">\tsize = n + <span class=\"number\">1</span>;</span><br><span class=\"line\">\trear = front = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">Queue&lt;T&gt;::~<span class=\"built_in\">Queue</span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"type\">bool</span> Queue&lt;T&gt;::<span class=\"built_in\">enQueue</span>(T t) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ((rear + <span class=\"number\">1</span>) % size != front) &#123;</span><br><span class=\"line\">\t\trear = (rear + <span class=\"number\">1</span>) % size;</span><br><span class=\"line\">\t\ta[rear] = t;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">T Queue&lt;T&gt;::<span class=\"built_in\">deQueue</span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (rear != front) &#123;</span><br><span class=\"line\">\t\tfront = (front + <span class=\"number\">1</span>) % size;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a[front];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">T Queue&lt;T&gt;::<span class=\"built_in\">getHead</span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (rear != front)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a[front];</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"type\">bool</span> Queue&lt;T&gt;::<span class=\"built_in\">empty</span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> rear == front ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-LinkedQueue\"><a href=\"#2-LinkedQueue\" class=\"headerlink\" title=\"2. LinkedQueue\"></a>2. LinkedQueue</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> __LINKED_QUEUE_H__</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __LINKED_QUEUE_H__</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tT val;</span><br><span class=\"line\">\tNode&lt;T&gt;* next;</span><br><span class=\"line\">\t<span class=\"built_in\">Node</span>(T t) : <span class=\"built_in\">val</span>(t) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LinkedQueue</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tNode&lt;T&gt;*head, *tail;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">/* 初始化 */</span></span><br><span class=\"line\">\t<span class=\"built_in\">LinkedQueue</span>();</span><br><span class=\"line\">\t<span class=\"comment\">/* 析构 */</span></span><br><span class=\"line\">\t~<span class=\"built_in\">LinkedQueue</span>();</span><br><span class=\"line\">\t<span class=\"comment\">/* 入队 */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">enQueue</span><span class=\"params\">(T t)</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/* 出队 */</span></span><br><span class=\"line\">\t<span class=\"function\">T <span class=\"title\">deQueue</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/* 获取头元素 */</span></span><br><span class=\"line\">\t<span class=\"function\">T <span class=\"title\">getHead</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/* 判空 */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">empty</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">LinkedQueue&lt;T&gt;::<span class=\"built_in\">LinkedQueue</span>() &#123;</span><br><span class=\"line\">\thead = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\ttail = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">LinkedQueue&lt;T&gt;::~<span class=\"built_in\">LinkedQueue</span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (head != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">\t\tNode&lt;T&gt; p = head;</span><br><span class=\"line\">\t\thead = head-&gt;next;</span><br><span class=\"line\">\t\t<span class=\"keyword\">delete</span> p;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ttail = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"type\">bool</span> LinkedQueue&lt;T&gt;::<span class=\"built_in\">enQueue</span>(T t) &#123;</span><br><span class=\"line\">\tNode&lt;T&gt;* node = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>&lt;T&gt;(t);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (head == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">\t\thead = node;</span><br><span class=\"line\">\t\ttail = node;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ttail-&gt;next = node;</span><br><span class=\"line\">\ttail = node;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">T LinkedQueue&lt;T&gt;::<span class=\"built_in\">deQueue</span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (head != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">\t\tNode&lt;T&gt;* node = head;</span><br><span class=\"line\">\t\tT val = head-&gt;val;</span><br><span class=\"line\">\t\thead = head-&gt;next;</span><br><span class=\"line\">\t\t<span class=\"keyword\">delete</span> node;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> val;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">T LinkedQueue&lt;T&gt;::<span class=\"built_in\">getHead</span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"type\">bool</span> LinkedQueue&lt;T&gt;::<span class=\"built_in\">empty</span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> head == <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"}],"PostAsset":[{"_id":"source/_posts/Archlinux-Mail/2023-04-04_21-56.png","slug":"2023-04-04_21-56.png","post":"clqpau5ty0003lv9e99kd1mgw","modified":0,"renderable":0},{"_id":"source/_posts/Archlinux-Mail/mail.jpg","slug":"mail.jpg","post":"clqpau5ty0003lv9e99kd1mgw","modified":0,"renderable":0},{"_id":"source/_posts/Archlinux-入门/arch.png","slug":"arch.png","post":"clqpau5u10006lv9e2eib86g5","modified":0,"renderable":0},{"_id":"source/_posts/Docker-Oracle-12c/j1.png","slug":"j1.png","post":"clqpau5u9000olv9eh11p3fu4","modified":0,"renderable":0},{"_id":"source/_posts/Docker-Oracle-12c/logs.png","slug":"logs.png","post":"clqpau5u9000olv9eh11p3fu4","modified":0,"renderable":0},{"_id":"source/_posts/Docker-PostgreSQL/2023-08-02-19-36-43.png","slug":"2023-08-02-19-36-43.png","post":"clqpau5u9000plv9e0nksevs2","modified":0,"renderable":0},{"_id":"source/_posts/Docker-PostgreSQL/2023-08-02-19-37-22.png","slug":"2023-08-02-19-37-22.png","post":"clqpau5u9000plv9e0nksevs2","modified":0,"renderable":0},{"_id":"source/_posts/Docker-PostgreSQL/2023-08-02-19-44-15.png","slug":"2023-08-02-19-44-15.png","post":"clqpau5u9000plv9e0nksevs2","modified":0,"renderable":0},{"_id":"source/_posts/Docker-PostgreSQL/2023-08-02-19-44-54.png","slug":"2023-08-02-19-44-54.png","post":"clqpau5u9000plv9e0nksevs2","modified":0,"renderable":0},{"_id":"source/_posts/Docker-PostgreSQL/2023-08-02-19-46-38.png","slug":"2023-08-02-19-46-38.png","post":"clqpau5u9000plv9e0nksevs2","modified":0,"renderable":0},{"_id":"source/_posts/Docker-PostgreSQL/2023-08-02-20-01-25.png","slug":"2023-08-02-20-01-25.png","post":"clqpau5u9000plv9e0nksevs2","modified":0,"renderable":0},{"_id":"source/_posts/GraphQL-Apollo/2023-06-23-09-26-28.png","slug":"2023-06-23-09-26-28.png","post":"clqpau5uc0010lv9efwhfe73e","modified":0,"renderable":0},{"_id":"source/_posts/GraphQL/2023-06-21-20-17-07.png","slug":"2023-06-21-20-17-07.png","post":"clqpau5ud0013lv9e2i5s9y5q","modified":0,"renderable":0},{"_id":"source/_posts/KeyCloak/2023-08-02-17-57-00.png","slug":"2023-08-02-17-57-00.png","post":"clqpau5ug001ilv9e4s749fmx","modified":0,"renderable":0},{"_id":"source/_posts/KeyCloak/2023-08-02-18-02-37.png","slug":"2023-08-02-18-02-37.png","post":"clqpau5ug001ilv9e4s749fmx","modified":0,"renderable":0},{"_id":"source/_posts/KeyCloak/2023-08-02-18-03-04.png","slug":"2023-08-02-18-03-04.png","post":"clqpau5ug001ilv9e4s749fmx","modified":0,"renderable":0},{"_id":"source/_posts/KeyCloak/2023-08-02-18-03-23.png","slug":"2023-08-02-18-03-23.png","post":"clqpau5ug001ilv9e4s749fmx","modified":0,"renderable":0},{"_id":"source/_posts/KeyCloak/2023-08-02-18-04-00.png","slug":"2023-08-02-18-04-00.png","post":"clqpau5ug001ilv9e4s749fmx","modified":0,"renderable":0},{"_id":"source/_posts/KeyCloak/2023-08-02-18-04-29.png","slug":"2023-08-02-18-04-29.png","post":"clqpau5ug001ilv9e4s749fmx","modified":0,"renderable":0},{"_id":"source/_posts/KeyCloak/2023-08-02-18-04-49.png","slug":"2023-08-02-18-04-49.png","post":"clqpau5ug001ilv9e4s749fmx","modified":0,"renderable":0},{"_id":"source/_posts/Linux-Vim/2023-05-07-16-24-23.png","slug":"2023-05-07-16-24-23.png","post":"clqpau5ui001qlv9e2oco9mvq","modified":0,"renderable":0},{"_id":"source/_posts/Linux-Vim/advanced1.png","slug":"advanced1.png","post":"clqpau5ui001qlv9e2oco9mvq","modified":0,"renderable":0},{"_id":"source/_posts/Linux-Vim/entry1.png","slug":"entry1.png","post":"clqpau5ui001qlv9e2oco9mvq","modified":0,"renderable":0},{"_id":"source/_posts/Linux-Vim/morden1.png","slug":"morden1.png","post":"clqpau5ui001qlv9e2oco9mvq","modified":0,"renderable":0},{"_id":"source/_posts/Linux-Vim/text1.png","slug":"text1.png","post":"clqpau5ui001qlv9e2oco9mvq","modified":0,"renderable":0},{"_id":"source/_posts/Linux-小技巧/2023-06-12-18-11-54.png","slug":"2023-06-12-18-11-54.png","post":"clqpau5uk001ylv9efaf9hbw5","modified":0,"renderable":0},{"_id":"source/_posts/Linux-期末复习/2023-06-12-19-25-43.png","slug":"2023-06-12-19-25-43.png","post":"clqpau5ul0020lv9e68lnb1zm","modified":0,"renderable":0},{"_id":"source/_posts/Linux-期末复习/2023-06-12-19-25-52.png","slug":"2023-06-12-19-25-52.png","post":"clqpau5ul0020lv9e68lnb1zm","modified":0,"renderable":0},{"_id":"source/_posts/Linux-权限/2023-05-21-13-15-56.png","slug":"2023-05-21-13-15-56.png","post":"clqpau5ul0023lv9edxge0ku7","modified":0,"renderable":0},{"_id":"source/_posts/Linux-权限/2023-05-21-13-19-41.png","slug":"2023-05-21-13-19-41.png","post":"clqpau5ul0023lv9edxge0ku7","modified":0,"renderable":0},{"_id":"source/_posts/Linux-权限/2023-05-21-13-40-02.png","slug":"2023-05-21-13-40-02.png","post":"clqpau5ul0023lv9edxge0ku7","modified":0,"renderable":0},{"_id":"source/_posts/Linux-权限/2023-05-21-13-45-20.png","slug":"2023-05-21-13-45-20.png","post":"clqpau5ul0023lv9edxge0ku7","modified":0,"renderable":0},{"_id":"source/_posts/Linux-计划任务/2023-05-22-17-07-46.png","slug":"2023-05-22-17-07-46.png","post":"clqpau5un002alv9edr7idrfv","modified":0,"renderable":0},{"_id":"source/_posts/Linux-计划任务/2023-05-22-17-08-24.png","slug":"2023-05-22-17-08-24.png","post":"clqpau5un002alv9edr7idrfv","modified":0,"renderable":0},{"_id":"source/_posts/Linux-计划任务/2023-05-22-17-11-14.png","slug":"2023-05-22-17-11-14.png","post":"clqpau5un002alv9edr7idrfv","modified":0,"renderable":0},{"_id":"source/_posts/Linux-计划任务/2023-05-22-17-11-34.png","slug":"2023-05-22-17-11-34.png","post":"clqpau5un002alv9edr7idrfv","modified":0,"renderable":0},{"_id":"source/_posts/MongoDB/2023-06-10-20-54-19.png","slug":"2023-06-10-20-54-19.png","post":"clqpau5uo002flv9ehn8idiji","modified":0,"renderable":0},{"_id":"source/_posts/MongoDB/2023-06-10-21-02-13.png","slug":"2023-06-10-21-02-13.png","post":"clqpau5uo002flv9ehn8idiji","modified":0,"renderable":0},{"_id":"source/_posts/MongoDB/2023-06-10-21-02-34.png","slug":"2023-06-10-21-02-34.png","post":"clqpau5uo002flv9ehn8idiji","modified":0,"renderable":0},{"_id":"source/_posts/MongoDB/2023-06-10-21-02-58.png","slug":"2023-06-10-21-02-58.png","post":"clqpau5uo002flv9ehn8idiji","modified":0,"renderable":0},{"_id":"source/_posts/MongoDB/2023-06-10-21-22-01.png","slug":"2023-06-10-21-22-01.png","post":"clqpau5uo002flv9ehn8idiji","modified":0,"renderable":0},{"_id":"source/_posts/Oracle-DBA/2023-05-07-17-11-39.png","slug":"2023-05-07-17-11-39.png","post":"clqpau5ut0034lv9eeepv0bf3","modified":0,"renderable":0},{"_id":"source/_posts/Oracle-DBA/2023-05-07-17-15-34.png","slug":"2023-05-07-17-15-34.png","post":"clqpau5ut0034lv9eeepv0bf3","modified":0,"renderable":0},{"_id":"source/_posts/Oracle-DBA/2023-05-07-17-21-09.png","slug":"2023-05-07-17-21-09.png","post":"clqpau5ut0034lv9eeepv0bf3","modified":0,"renderable":0},{"_id":"source/_posts/Oracle-DBA/2023-05-07-17-44-18.png","slug":"2023-05-07-17-44-18.png","post":"clqpau5ut0034lv9eeepv0bf3","modified":0,"renderable":0},{"_id":"source/_posts/Oracle-DBA/2023-05-07-18-03-58.png","slug":"2023-05-07-18-03-58.png","post":"clqpau5ut0034lv9eeepv0bf3","modified":0,"renderable":0},{"_id":"source/_posts/Oracle-DBA/2023-05-07-18-04-36.png","slug":"2023-05-07-18-04-36.png","post":"clqpau5ut0034lv9eeepv0bf3","modified":0,"renderable":0},{"_id":"source/_posts/Oracle-Log-File/P%.png","slug":"P%.png","post":"clqpau5ut0036lv9e3jjh53lo","modified":0,"renderable":0},{"_id":"source/_posts/Oracle-Log-File/P3.png","slug":"P3.png","post":"clqpau5ut0036lv9e3jjh53lo","modified":0,"renderable":0},{"_id":"source/_posts/Oracle-Log-File/P4.png","slug":"P4.png","post":"clqpau5ut0036lv9e3jjh53lo","modified":0,"renderable":0},{"_id":"source/_posts/Oracle-Log-File/P6.png","slug":"P6.png","post":"clqpau5ut0036lv9e3jjh53lo","modified":0,"renderable":0},{"_id":"source/_posts/Oracle-Log-File/Picture1.png","slug":"Picture1.png","post":"clqpau5ut0036lv9e3jjh53lo","modified":0,"renderable":0},{"_id":"source/_posts/Oracle-Log-File/Picture2.png","slug":"Picture2.png","post":"clqpau5ut0036lv9e3jjh53lo","modified":0,"renderable":0},{"_id":"source/_posts/RESTful-API/2023-06-21-21-23-36.png","slug":"2023-06-21-21-23-36.png","post":"clqpau5uw003jlv9eb283hiot","modified":0,"renderable":0},{"_id":"source/_posts/RHEL-YUM-本地源配置/2023-05-18-10-04-26.png","slug":"2023-05-18-10-04-26.png","post":"clqpau5uy003olv9e9ezy5meg","modified":0,"renderable":0},{"_id":"source/_posts/RHEL-YUM-本地源配置/2023-05-18-10-10-50.png","slug":"2023-05-18-10-10-50.png","post":"clqpau5uy003olv9e9ezy5meg","modified":0,"renderable":0},{"_id":"source/_posts/RHEL-YUM-本地源配置/2023-05-18-10-15-20.png","slug":"2023-05-18-10-15-20.png","post":"clqpau5uy003olv9e9ezy5meg","modified":0,"renderable":0},{"_id":"source/_posts/RHEL-YUM-本地源配置/2023-05-18-10-28-51.png","slug":"2023-05-18-10-28-51.png","post":"clqpau5uy003olv9e9ezy5meg","modified":0,"renderable":0},{"_id":"source/_posts/RHEL-YUM-本地源配置/2023-05-18-10-45-28.png","slug":"2023-05-18-10-45-28.png","post":"clqpau5uy003olv9e9ezy5meg","modified":0,"renderable":0},{"_id":"source/_posts/RHEL-RPM-软件包管理/2023-05-18-10-39-54.png","slug":"2023-05-18-10-39-54.png","post":"clqpau5ux003llv9e3d5i29ls","modified":0,"renderable":0},{"_id":"source/_posts/RHEL-RPM-软件包管理/2023-05-18-10-41-18.png","slug":"2023-05-18-10-41-18.png","post":"clqpau5ux003llv9e3d5i29ls","modified":0,"renderable":0},{"_id":"source/_posts/RHEL-RPM-软件包管理/2023-05-18-10-46-24.png","slug":"2023-05-18-10-46-24.png","post":"clqpau5ux003llv9e3d5i29ls","modified":0,"renderable":0},{"_id":"source/_posts/RHEL-RPM-软件包管理/2023-05-18-11-02-55.png","slug":"2023-05-18-11-02-55.png","post":"clqpau5ux003llv9e3d5i29ls","modified":0,"renderable":0},{"_id":"source/_posts/RHEL-RPM-软件包管理/2023-05-18-11-04-40.png","slug":"2023-05-18-11-04-40.png","post":"clqpau5ux003llv9e3d5i29ls","modified":0,"renderable":0},{"_id":"source/_posts/RHEL-RPM-软件包管理/2023-05-18-11-05-26.png","slug":"2023-05-18-11-05-26.png","post":"clqpau5ux003llv9e3d5i29ls","modified":0,"renderable":0},{"_id":"source/_posts/RHEL-RPM-软件包管理/2023-05-18-11-05-53.png","slug":"2023-05-18-11-05-53.png","post":"clqpau5ux003llv9e3d5i29ls","modified":0,"renderable":0},{"_id":"source/_posts/RHEL-RPM-软件包管理/2023-05-18-11-07-13.png","slug":"2023-05-18-11-07-13.png","post":"clqpau5ux003llv9e3d5i29ls","modified":0,"renderable":0},{"_id":"source/_posts/RHEL-RPM-软件包管理/2023-05-18-11-08-52.png","slug":"2023-05-18-11-08-52.png","post":"clqpau5ux003llv9e3d5i29ls","modified":0,"renderable":0},{"_id":"source/_posts/RHEL-RPM-软件包管理/2023-05-18-11-09-38.png","slug":"2023-05-18-11-09-38.png","post":"clqpau5ux003llv9e3d5i29ls","modified":0,"renderable":0},{"_id":"source/_posts/RHEL-RPM-软件包管理/2023-05-18-11-13-57.png","slug":"2023-05-18-11-13-57.png","post":"clqpau5ux003llv9e3d5i29ls","modified":0,"renderable":0},{"_id":"source/_posts/RHEL-RPM-软件包管理/2023-05-18-11-15-25.png","slug":"2023-05-18-11-15-25.png","post":"clqpau5ux003llv9e3d5i29ls","modified":0,"renderable":0},{"_id":"source/_posts/RHEL-RPM-软件包管理/2023-05-18-11-16-17.png","slug":"2023-05-18-11-16-17.png","post":"clqpau5ux003llv9e3d5i29ls","modified":0,"renderable":0},{"_id":"source/_posts/RHEL-RPM-软件包管理/2023-05-18-11-18-14.png","slug":"2023-05-18-11-18-14.png","post":"clqpau5ux003llv9e3d5i29ls","modified":0,"renderable":0},{"_id":"source/_posts/React-Websocket-实现网络聊天室/2023-06-09-16-16-42.png","slug":"2023-06-09-16-16-42.png","post":"clqpau5uy003qlv9e7l6v02gf","modified":0,"renderable":0},{"_id":"source/_posts/React-Websocket-实现网络聊天室/2023-06-11-20-41-29.png","slug":"2023-06-11-20-41-29.png","post":"clqpau5uy003qlv9e7l6v02gf","modified":0,"renderable":0},{"_id":"source/_posts/React-中的hook/2023-06-04-17-08-49.png","slug":"2023-06-04-17-08-49.png","post":"clqpau5uz003slv9efbsfc063","modified":0,"renderable":0},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-40-16.png","slug":"2023-06-09-18-40-16.png","post":"clqpau5vb006clv9eh14690o1","modified":0,"renderable":0},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-41-35.png","slug":"2023-06-09-18-41-35.png","post":"clqpau5vb006clv9eh14690o1","modified":0,"renderable":0},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-41-59.png","slug":"2023-06-09-18-41-59.png","post":"clqpau5vb006clv9eh14690o1","modified":0,"renderable":0},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-42-16.png","slug":"2023-06-09-18-42-16.png","post":"clqpau5vb006clv9eh14690o1","modified":0,"renderable":0},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-42-30.png","slug":"2023-06-09-18-42-30.png","post":"clqpau5vb006clv9eh14690o1","modified":0,"renderable":0},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-42-36.png","slug":"2023-06-09-18-42-36.png","post":"clqpau5vb006clv9eh14690o1","modified":0,"renderable":0},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-43-47.png","slug":"2023-06-09-18-43-47.png","post":"clqpau5vb006clv9eh14690o1","modified":0,"renderable":0},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-43-56.png","slug":"2023-06-09-18-43-56.png","post":"clqpau5vb006clv9eh14690o1","modified":0,"renderable":0},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-44-04.png","slug":"2023-06-09-18-44-04.png","post":"clqpau5vb006clv9eh14690o1","modified":0,"renderable":0},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-44-13.png","slug":"2023-06-09-18-44-13.png","post":"clqpau5vb006clv9eh14690o1","modified":0,"renderable":0},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-44-26.png","slug":"2023-06-09-18-44-26.png","post":"clqpau5vb006clv9eh14690o1","modified":0,"renderable":0},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-44-45.png","slug":"2023-06-09-18-44-45.png","post":"clqpau5vb006clv9eh14690o1","modified":0,"renderable":0},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-44-50.png","slug":"2023-06-09-18-44-50.png","post":"clqpau5vb006clv9eh14690o1","modified":0,"renderable":0},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-45-09.png","slug":"2023-06-09-18-45-09.png","post":"clqpau5vb006clv9eh14690o1","modified":0,"renderable":0},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-45-27.png","slug":"2023-06-09-18-45-27.png","post":"clqpau5vb006clv9eh14690o1","modified":0,"renderable":0},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-45-34.png","slug":"2023-06-09-18-45-34.png","post":"clqpau5vb006clv9eh14690o1","modified":0,"renderable":0},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-45-40.png","slug":"2023-06-09-18-45-40.png","post":"clqpau5vb006clv9eh14690o1","modified":0,"renderable":0},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-45-47.png","slug":"2023-06-09-18-45-47.png","post":"clqpau5vb006clv9eh14690o1","modified":0,"renderable":0},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-45-53.png","slug":"2023-06-09-18-45-53.png","post":"clqpau5vb006clv9eh14690o1","modified":0,"renderable":0},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-45-59.png","slug":"2023-06-09-18-45-59.png","post":"clqpau5vb006clv9eh14690o1","modified":0,"renderable":0},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-46-22.png","slug":"2023-06-09-18-46-22.png","post":"clqpau5vb006clv9eh14690o1","modified":0,"renderable":0},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-46-31.png","slug":"2023-06-09-18-46-31.png","post":"clqpau5vb006clv9eh14690o1","modified":0,"renderable":0},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-46-36.png","slug":"2023-06-09-18-46-36.png","post":"clqpau5vb006clv9eh14690o1","modified":0,"renderable":0},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-46-52.png","slug":"2023-06-09-18-46-52.png","post":"clqpau5vb006clv9eh14690o1","modified":0,"renderable":0},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-46-59.png","slug":"2023-06-09-18-46-59.png","post":"clqpau5vb006clv9eh14690o1","modified":0,"renderable":0},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-47-10.png","slug":"2023-06-09-18-47-10.png","post":"clqpau5vb006clv9eh14690o1","modified":0,"renderable":0},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-47-14.png","slug":"2023-06-09-18-47-14.png","post":"clqpau5vb006clv9eh14690o1","modified":0,"renderable":0},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-47-20.png","slug":"2023-06-09-18-47-20.png","post":"clqpau5vb006clv9eh14690o1","modified":0,"renderable":0},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-47-29.png","slug":"2023-06-09-18-47-29.png","post":"clqpau5vb006clv9eh14690o1","modified":0,"renderable":0},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-47-48.png","slug":"2023-06-09-18-47-48.png","post":"clqpau5vb006clv9eh14690o1","modified":0,"renderable":0},{"_id":"source/_posts/React-版-Postman/2023-06-09-18-47-53.png","slug":"2023-06-09-18-47-53.png","post":"clqpau5vb006clv9eh14690o1","modified":0,"renderable":0},{"_id":"source/_posts/将Gitee-Pages-转移到自己的服务器/2023-05-22-19-24-53.png","slug":"2023-05-22-19-24-53.png","post":"clqpau5vg006plv9e05xw8j9h","modified":0,"renderable":0},{"_id":"source/_posts/将Gitee-Pages-转移到自己的服务器/2023-05-22-19-27-41.png","slug":"2023-05-22-19-27-41.png","post":"clqpau5vg006plv9e05xw8j9h","modified":0,"renderable":0},{"_id":"source/_posts/将Gitee-Pages-转移到自己的服务器/2023-05-22-19-30-02.png","slug":"2023-05-22-19-30-02.png","post":"clqpau5vg006plv9e05xw8j9h","modified":0,"renderable":0},{"_id":"source/_posts/将Gitee-Pages-转移到自己的服务器/2023-05-22-19-50-03.png","slug":"2023-05-22-19-50-03.png","post":"clqpau5vg006plv9e05xw8j9h","modified":0,"renderable":0},{"_id":"source/_posts/将Gitee-Pages-转移到自己的服务器/2023-05-22-19-50-32.png","slug":"2023-05-22-19-50-32.png","post":"clqpau5vg006plv9e05xw8j9h","modified":0,"renderable":0},{"_id":"source/_posts/网络编程模型/2023-05-22-21-55-38.png","slug":"2023-05-22-21-55-38.png","post":"clqpau5vj006ylv9e199a7gcc","modified":0,"renderable":0},{"_id":"source/_posts/网络编程模型/2023-05-22-21-59-46.png","slug":"2023-05-22-21-59-46.png","post":"clqpau5vj006ylv9e199a7gcc","modified":0,"renderable":0},{"_id":"source/_posts/网络编程模型/2023-05-22-22-02-22.png","slug":"2023-05-22-22-02-22.png","post":"clqpau5vj006ylv9e199a7gcc","modified":0,"renderable":0},{"_id":"source/_posts/网络编程模型/2023-05-22-22-12-09.png","slug":"2023-05-22-22-12-09.png","post":"clqpau5vj006ylv9e199a7gcc","modified":0,"renderable":0},{"_id":"source/_posts/网络编程模型/2023-05-22-22-19-44.png","slug":"2023-05-22-22-19-44.png","post":"clqpau5vj006ylv9e199a7gcc","modified":0,"renderable":0},{"_id":"source/_posts/网络编程模型/2023-05-22-22-25-16.png","slug":"2023-05-22-22-25-16.png","post":"clqpau5vj006ylv9e199a7gcc","modified":0,"renderable":0},{"_id":"source/_posts/网络编程模型/2023-05-22-22-29-46.png","slug":"2023-05-22-22-29-46.png","post":"clqpau5vj006ylv9e199a7gcc","modified":0,"renderable":0},{"_id":"source/_posts/网络编程模型/2023-05-22-22-34-09.png","slug":"2023-05-22-22-34-09.png","post":"clqpau5vj006ylv9e199a7gcc","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"clqpau5u20007lv9ea9lu8qse","tag_id":"clqpau5tz0004lv9e7ev25orr","_id":"clqpau5u4000alv9ecu99bzzu"},{"post_id":"clqpau5tv0001lv9ednprexea","tag_id":"clqpau5tz0004lv9e7ev25orr","_id":"clqpau5u5000clv9e11bba7yr"},{"post_id":"clqpau5u20008lv9ef75e2qjt","tag_id":"clqpau5tz0004lv9e7ev25orr","_id":"clqpau5u6000flv9e7xkg2qi5"},{"post_id":"clqpau5ty0003lv9e99kd1mgw","tag_id":"clqpau5tz0004lv9e7ev25orr","_id":"clqpau5u6000hlv9e86vrbk2n"},{"post_id":"clqpau5u10006lv9e2eib86g5","tag_id":"clqpau5tz0004lv9e7ev25orr","_id":"clqpau5u7000klv9e7l8u93em"},{"post_id":"clqpau5u4000blv9e8gpp6j8k","tag_id":"clqpau5u7000jlv9e83153ydr","_id":"clqpau5ua000slv9e38gn5g6s"},{"post_id":"clqpau5u4000blv9e8gpp6j8k","tag_id":"clqpau5u8000nlv9e0hzeduqc","_id":"clqpau5ub000ulv9egc1c8pld"},{"post_id":"clqpau5ua000rlv9ehy9m367d","tag_id":"clqpau5tz0004lv9e7ev25orr","_id":"clqpau5uc000xlv9ed04m7v4a"},{"post_id":"clqpau5ua000rlv9ehy9m367d","tag_id":"clqpau5ua000qlv9e1kvr76xm","_id":"clqpau5uc000zlv9ee6ikcdhd"},{"post_id":"clqpau5u5000dlv9eccizczqr","tag_id":"clqpau5ua000qlv9e1kvr76xm","_id":"clqpau5ud0012lv9e21xs69qt"},{"post_id":"clqpau5u5000dlv9eccizczqr","tag_id":"clqpau5ub000vlv9e5vsr30qd","_id":"clqpau5ud0014lv9e08979dwm"},{"post_id":"clqpau5u6000glv9eei8z7m63","tag_id":"clqpau5ua000qlv9e1kvr76xm","_id":"clqpau5uf001blv9ebltq1qn0"},{"post_id":"clqpau5u6000glv9eei8z7m63","tag_id":"clqpau5ud0016lv9e3rdv7fuc","_id":"clqpau5uf001dlv9e4yrf0zd5"},{"post_id":"clqpau5u6000ilv9efsh4ajft","tag_id":"clqpau5ua000qlv9e1kvr76xm","_id":"clqpau5uh001jlv9ed2u791w2"},{"post_id":"clqpau5u6000ilv9efsh4ajft","tag_id":"clqpau5uf001elv9edsfo3dqv","_id":"clqpau5uh001llv9eddjzb2nz"},{"post_id":"clqpau5uh001klv9ehmuuec53","tag_id":"clqpau5tz0004lv9e7ev25orr","_id":"clqpau5ui001olv9efyl6h94q"},{"post_id":"clqpau5ui001plv9e9x5wba01","tag_id":"clqpau5tz0004lv9e7ev25orr","_id":"clqpau5uj001slv9edo2sban3"},{"post_id":"clqpau5u7000llv9e1ofj0fkw","tag_id":"clqpau5ug001hlv9e40mlgx9f","_id":"clqpau5uj001ulv9ecjj745vk"},{"post_id":"clqpau5u7000llv9e1ofj0fkw","tag_id":"clqpau5uh001mlv9e79crcl7e","_id":"clqpau5uk001xlv9e70dzdk1x"},{"post_id":"clqpau5uj001tlv9e8ngwer8d","tag_id":"clqpau5tz0004lv9e7ev25orr","_id":"clqpau5ul001zlv9ebnls4w77"},{"post_id":"clqpau5u8000mlv9e5iza4c7l","tag_id":"clqpau5uj001rlv9ed07p4cbl","_id":"clqpau5ul0022lv9e5hibhife"},{"post_id":"clqpau5uj001vlv9egdq74bi4","tag_id":"clqpau5tz0004lv9e7ev25orr","_id":"clqpau5um0024lv9eeswn325z"},{"post_id":"clqpau5uk001ylv9efaf9hbw5","tag_id":"clqpau5tz0004lv9e7ev25orr","_id":"clqpau5um0027lv9e4ix3cb34"},{"post_id":"clqpau5ul0023lv9edxge0ku7","tag_id":"clqpau5tz0004lv9e7ev25orr","_id":"clqpau5un0029lv9e1xze9m72"},{"post_id":"clqpau5u9000olv9eh11p3fu4","tag_id":"clqpau5ug001hlv9e40mlgx9f","_id":"clqpau5un002clv9e40s3f8n7"},{"post_id":"clqpau5u9000olv9eh11p3fu4","tag_id":"clqpau5uh001mlv9e79crcl7e","_id":"clqpau5un002elv9e0o9wbw2a"},{"post_id":"clqpau5um0025lv9e4p1eeb22","tag_id":"clqpau5tz0004lv9e7ev25orr","_id":"clqpau5uo002hlv9e0j8265tt"},{"post_id":"clqpau5um0028lv9e65at2quh","tag_id":"clqpau5tz0004lv9e7ev25orr","_id":"clqpau5uo002jlv9e07xo3jj5"},{"post_id":"clqpau5un002alv9edr7idrfv","tag_id":"clqpau5tz0004lv9e7ev25orr","_id":"clqpau5up002llv9ea4021g9q"},{"post_id":"clqpau5u9000plv9e0nksevs2","tag_id":"clqpau5ua000qlv9e1kvr76xm","_id":"clqpau5up002olv9e1urlgwj2"},{"post_id":"clqpau5u9000plv9e0nksevs2","tag_id":"clqpau5un002blv9e5ezncbu8","_id":"clqpau5uq002qlv9e8zdggryd"},{"post_id":"clqpau5uo002flv9ehn8idiji","tag_id":"clqpau5ug001hlv9e40mlgx9f","_id":"clqpau5ur002tlv9ef64sae4g"},{"post_id":"clqpau5uo002flv9ehn8idiji","tag_id":"clqpau5ua000qlv9e1kvr76xm","_id":"clqpau5ur002vlv9e48xd9hd4"},{"post_id":"clqpau5ua000tlv9e8xdres99","tag_id":"clqpau5uo002glv9ehb8tdvv6","_id":"clqpau5us002ylv9eehs0cnlb"},{"post_id":"clqpau5ua000tlv9e8xdres99","tag_id":"clqpau5up002mlv9e96ma3tde","_id":"clqpau5us0030lv9e1vks6fhu"},{"post_id":"clqpau5ub000wlv9e0eru5gyp","tag_id":"clqpau5uq002slv9e0obxekn8","_id":"clqpau5ut0033lv9efd3dau3d"},{"post_id":"clqpau5uc000ylv9ee8zqg16q","tag_id":"clqpau5uq002slv9e0obxekn8","_id":"clqpau5ut0035lv9e4fd69hgl"},{"post_id":"clqpau5ut0034lv9eeepv0bf3","tag_id":"clqpau5ug001hlv9e40mlgx9f","_id":"clqpau5uu0038lv9e25hze5j5"},{"post_id":"clqpau5ut0034lv9eeepv0bf3","tag_id":"clqpau5uh001mlv9e79crcl7e","_id":"clqpau5uu003alv9e7ald1u43"},{"post_id":"clqpau5ut0036lv9e3jjh53lo","tag_id":"clqpau5ug001hlv9e40mlgx9f","_id":"clqpau5uv003clv9e77ooft72"},{"post_id":"clqpau5ut0036lv9e3jjh53lo","tag_id":"clqpau5uh001mlv9e79crcl7e","_id":"clqpau5uw003flv9eg89u9k64"},{"post_id":"clqpau5uu0039lv9e7zsx6yva","tag_id":"clqpau5ug001hlv9e40mlgx9f","_id":"clqpau5uw003hlv9eecmq9pjp"},{"post_id":"clqpau5uu0039lv9e7zsx6yva","tag_id":"clqpau5uh001mlv9e79crcl7e","_id":"clqpau5ux003klv9ea3o9dali"},{"post_id":"clqpau5uc0010lv9efwhfe73e","tag_id":"clqpau5us0032lv9ehfnsal6r","_id":"clqpau5ux003mlv9e3jr520vk"},{"post_id":"clqpau5uc0010lv9efwhfe73e","tag_id":"clqpau5uu0037lv9e5j6z85v6","_id":"clqpau5uy003plv9e4unwahog"},{"post_id":"clqpau5uw003glv9e8gnggkiy","tag_id":"clqpau5un002blv9e5ezncbu8","_id":"clqpau5uz003rlv9ecnh1a5h4"},{"post_id":"clqpau5uw003glv9e8gnggkiy","tag_id":"clqpau5ug001hlv9e40mlgx9f","_id":"clqpau5uz003ulv9eezgr88yq"},{"post_id":"clqpau5ud0013lv9e2i5s9y5q","tag_id":"clqpau5uu0037lv9e5j6z85v6","_id":"clqpau5uz003vlv9e3rja9kja"},{"post_id":"clqpau5ud0013lv9e2i5s9y5q","tag_id":"clqpau5us0032lv9ehfnsal6r","_id":"clqpau5v0003xlv9e9x1tfhis"},{"post_id":"clqpau5ux003llv9e3d5i29ls","tag_id":"clqpau5tz0004lv9e7ev25orr","_id":"clqpau5v0003ylv9eaa025bbm"},{"post_id":"clqpau5ud0015lv9e0n7o1qvl","tag_id":"clqpau5ux003nlv9eez5dekta","_id":"clqpau5v00040lv9ebk5wclc2"},{"post_id":"clqpau5ue0017lv9egj8u8kjl","tag_id":"clqpau5ux003nlv9eez5dekta","_id":"clqpau5v00041lv9e810c24i4"},{"post_id":"clqpau5ue0018lv9egfk4hmly","tag_id":"clqpau5ux003nlv9eez5dekta","_id":"clqpau5v00043lv9e7lt1du8m"},{"post_id":"clqpau5ue0018lv9egfk4hmly","tag_id":"clqpau5ug001hlv9e40mlgx9f","_id":"clqpau5v00044lv9efjrs7i0q"},{"post_id":"clqpau5uf001alv9e0wfp1f6v","tag_id":"clqpau5ux003nlv9eez5dekta","_id":"clqpau5v00046lv9eedm4aykm"},{"post_id":"clqpau5uf001clv9e1f564vpd","tag_id":"clqpau5ux003nlv9eez5dekta","_id":"clqpau5v00048lv9e7q3k4cjp"},{"post_id":"clqpau5ug001flv9e7o85cjcs","tag_id":"clqpau5ux003nlv9eez5dekta","_id":"clqpau5v0004alv9e7bxtap9c"},{"post_id":"clqpau5ug001glv9e57g5h3ll","tag_id":"clqpau5tz0004lv9e7ev25orr","_id":"clqpau5v1004dlv9edvgn5lgp"},{"post_id":"clqpau5ug001glv9e57g5h3ll","tag_id":"clqpau5v00049lv9efa2ud9hi","_id":"clqpau5v1004elv9e50aq24ti"},{"post_id":"clqpau5ug001glv9e57g5h3ll","tag_id":"clqpau5v1004blv9edxp3hfq4","_id":"clqpau5v1004glv9e8iolfrrh"},{"post_id":"clqpau5ug001ilv9e4s749fmx","tag_id":"clqpau5v1004clv9e2iqeddt2","_id":"clqpau5v1004ilv9efgeidkrb"},{"post_id":"clqpau5ug001ilv9e4s749fmx","tag_id":"clqpau5v1004flv9ebxdw24cw","_id":"clqpau5v1004jlv9e1kkf9pbt"},{"post_id":"clqpau5uh001nlv9e8atf357g","tag_id":"clqpau5tz0004lv9e7ev25orr","_id":"clqpau5v2004mlv9e1w2a4jf7"},{"post_id":"clqpau5uh001nlv9e8atf357g","tag_id":"clqpau5v1004hlv9e5wzahgd2","_id":"clqpau5v2004nlv9e2xs7h6jc"},{"post_id":"clqpau5uh001nlv9e8atf357g","tag_id":"clqpau5v1004klv9e1mf8ahli","_id":"clqpau5v2004plv9e43aw5dpd"},{"post_id":"clqpau5ui001qlv9e2oco9mvq","tag_id":"clqpau5tz0004lv9e7ev25orr","_id":"clqpau5v2004qlv9e07b32zvu"},{"post_id":"clqpau5ui001qlv9e2oco9mvq","tag_id":"clqpau5v1004llv9ed9pm7o8r","_id":"clqpau5v2004slv9e93jzcjnl"},{"post_id":"clqpau5un002dlv9eb9zb9uop","tag_id":"clqpau5v2004olv9egiez1zqx","_id":"clqpau5v3004ulv9e453z9l1w"},{"post_id":"clqpau5un002dlv9eb9zb9uop","tag_id":"clqpau5v2004rlv9ebrtm3ogo","_id":"clqpau5v3004vlv9ed4et8518"},{"post_id":"clqpau5uo002ilv9e4f883wve","tag_id":"clqpau5v2004tlv9e7e5gfhch","_id":"clqpau5v3004xlv9eg8o2h5fi"},{"post_id":"clqpau5uo002klv9e17rb1qci","tag_id":"clqpau5ux003nlv9eez5dekta","_id":"clqpau5v30050lv9egfbn2nlj"},{"post_id":"clqpau5uo002klv9e17rb1qci","tag_id":"clqpau5v3004ylv9e0kto7pt1","_id":"clqpau5v30051lv9ehtw94q6s"},{"post_id":"clqpau5up002nlv9e9oxs3f53","tag_id":"clqpau5ug001hlv9e40mlgx9f","_id":"clqpau5v40053lv9egtjlgqxn"},{"post_id":"clqpau5up002nlv9e9oxs3f53","tag_id":"clqpau5uh001mlv9e79crcl7e","_id":"clqpau5v40054lv9e0e9tefq3"},{"post_id":"clqpau5up002nlv9e9oxs3f53","tag_id":"clqpau5v3004zlv9ef4zq0p8a","_id":"clqpau5v40056lv9e5pav0kiq"},{"post_id":"clqpau5up002plv9e0x335t9b","tag_id":"clqpau5ug001hlv9e40mlgx9f","_id":"clqpau5v40057lv9e6ivy6ci4"},{"post_id":"clqpau5up002plv9e0x335t9b","tag_id":"clqpau5uh001mlv9e79crcl7e","_id":"clqpau5v40059lv9edx0y98wm"},{"post_id":"clqpau5up002plv9e0x335t9b","tag_id":"clqpau5v3004zlv9ef4zq0p8a","_id":"clqpau5v4005alv9eaxq8ggle"},{"post_id":"clqpau5uq002rlv9e1rdmddtb","tag_id":"clqpau5ug001hlv9e40mlgx9f","_id":"clqpau5v5005clv9ehrdufr32"},{"post_id":"clqpau5uq002rlv9e1rdmddtb","tag_id":"clqpau5uh001mlv9e79crcl7e","_id":"clqpau5v5005dlv9eh9j4d31y"},{"post_id":"clqpau5uq002rlv9e1rdmddtb","tag_id":"clqpau5v3004zlv9ef4zq0p8a","_id":"clqpau5v5005flv9e7r723vci"},{"post_id":"clqpau5ur002ulv9e13ze0mn5","tag_id":"clqpau5ug001hlv9e40mlgx9f","_id":"clqpau5v5005glv9e4acd7ye2"},{"post_id":"clqpau5ur002ulv9e13ze0mn5","tag_id":"clqpau5uh001mlv9e79crcl7e","_id":"clqpau5v5005ilv9eb1eg9usk"},{"post_id":"clqpau5ur002ulv9e13ze0mn5","tag_id":"clqpau5v3004zlv9ef4zq0p8a","_id":"clqpau5v5005jlv9egqdehg8b"},{"post_id":"clqpau5ur002wlv9ebfht683t","tag_id":"clqpau5ug001hlv9e40mlgx9f","_id":"clqpau5v5005llv9e299idze2"},{"post_id":"clqpau5ur002wlv9ebfht683t","tag_id":"clqpau5uh001mlv9e79crcl7e","_id":"clqpau5v5005mlv9eb5kvbw08"},{"post_id":"clqpau5ur002wlv9ebfht683t","tag_id":"clqpau5v3004zlv9ef4zq0p8a","_id":"clqpau5v5005olv9e0yu4d7gb"},{"post_id":"clqpau5us002zlv9e22xngdvx","tag_id":"clqpau5ug001hlv9e40mlgx9f","_id":"clqpau5v6005plv9efpio5cna"},{"post_id":"clqpau5us002zlv9e22xngdvx","tag_id":"clqpau5uh001mlv9e79crcl7e","_id":"clqpau5v6005rlv9ea5i17ohr"},{"post_id":"clqpau5us002zlv9e22xngdvx","tag_id":"clqpau5v3004zlv9ef4zq0p8a","_id":"clqpau5v6005slv9eet3ddsks"},{"post_id":"clqpau5us0031lv9ef180fser","tag_id":"clqpau5v5005hlv9e849zboya","_id":"clqpau5v6005ulv9ecqp19xr8"},{"post_id":"clqpau5us0031lv9ef180fser","tag_id":"clqpau5ug001hlv9e40mlgx9f","_id":"clqpau5v6005vlv9e3hh7ae7c"},{"post_id":"clqpau5uv003blv9e0k8p7idk","tag_id":"clqpau5ug001hlv9e40mlgx9f","_id":"clqpau5v6005xlv9e9ofzcwu1"},{"post_id":"clqpau5uv003blv9e0k8p7idk","tag_id":"clqpau5uh001mlv9e79crcl7e","_id":"clqpau5v6005ylv9e6clhdj7t"},{"post_id":"clqpau5uv003blv9e0k8p7idk","tag_id":"clqpau5v3004zlv9ef4zq0p8a","_id":"clqpau5v6005zlv9efmrdae9c"},{"post_id":"clqpau5uv003elv9e35oie02j","tag_id":"clqpau5ug001hlv9e40mlgx9f","_id":"clqpau5v70061lv9e2rymhupa"},{"post_id":"clqpau5uv003elv9e35oie02j","tag_id":"clqpau5uh001mlv9e79crcl7e","_id":"clqpau5v70062lv9e8u8b7i7d"},{"post_id":"clqpau5uv003elv9e35oie02j","tag_id":"clqpau5v3004zlv9ef4zq0p8a","_id":"clqpau5v70064lv9e6sos2rul"},{"post_id":"clqpau5uw003jlv9eb283hiot","tag_id":"clqpau5v6005qlv9e8x8h47mo","_id":"clqpau5v70065lv9e7u5zeg95"},{"post_id":"clqpau5uy003olv9e9ezy5meg","tag_id":"clqpau5v6005tlv9ediqzc0sn","_id":"clqpau5v70066lv9e6tpe03ao"},{"post_id":"clqpau5uy003qlv9e7l6v02gf","tag_id":"clqpau5uu0037lv9e5j6z85v6","_id":"clqpau5v70067lv9ef8t5fjum"},{"post_id":"clqpau5uy003qlv9e7l6v02gf","tag_id":"clqpau5v6005wlv9egbfk2ojm","_id":"clqpau5v70068lv9efl1274cg"},{"post_id":"clqpau5uy003qlv9e7l6v02gf","tag_id":"clqpau5v60060lv9e7z2o0rd3","_id":"clqpau5v70069lv9e1p4n030a"},{"post_id":"clqpau5uz003slv9efbsfc063","tag_id":"clqpau5uu0037lv9e5j6z85v6","_id":"clqpau5v7006alv9e2kl3a8ge"},{"post_id":"clqpau5uz003slv9efbsfc063","tag_id":"clqpau5v6005wlv9egbfk2ojm","_id":"clqpau5v7006blv9ehkc31v6h"},{"post_id":"clqpau5vb006clv9eh14690o1","tag_id":"clqpau5uu0037lv9e5j6z85v6","_id":"clqpau5vc006elv9eftnm79io"},{"post_id":"clqpau5vb006clv9eh14690o1","tag_id":"clqpau5v6005wlv9egbfk2ojm","_id":"clqpau5vd006hlv9e7m4v1wnz"},{"post_id":"clqpau5vb006dlv9edsig5puv","tag_id":"clqpau5uu0037lv9e5j6z85v6","_id":"clqpau5vf006mlv9e4chge3n9"},{"post_id":"clqpau5vb006dlv9edsig5puv","tag_id":"clqpau5vd006glv9e1aiqg49w","_id":"clqpau5vg006olv9e7vhwb4uj"},{"post_id":"clqpau5vd006ilv9e00oxg2c9","tag_id":"clqpau5vf006llv9e5w8m5cln","_id":"clqpau5vi006slv9eaiit6nzk"},{"post_id":"clqpau5vg006plv9e05xw8j9h","tag_id":"clqpau5tz0004lv9e7ev25orr","_id":"clqpau5vi006ulv9egy769wb1"},{"post_id":"clqpau5vg006plv9e05xw8j9h","tag_id":"clqpau5uq002slv9e0obxekn8","_id":"clqpau5vj006xlv9eg1iacd9v"},{"post_id":"clqpau5vh006rlv9e570jf92v","tag_id":"clqpau5vh006qlv9e8lqicw1g","_id":"clqpau5vj006zlv9efagl1oe4"},{"post_id":"clqpau5ve006jlv9ec8z58a0x","tag_id":"clqpau5vh006qlv9e8lqicw1g","_id":"clqpau5vk0072lv9eemvme3z2"},{"post_id":"clqpau5vi006tlv9e5aps81pt","tag_id":"clqpau5vh006qlv9e8lqicw1g","_id":"clqpau5vl0074lv9eezki316v"},{"post_id":"clqpau5vj006wlv9eamcfdbo1","tag_id":"clqpau5vh006qlv9e8lqicw1g","_id":"clqpau5vm0077lv9ead3m6uyv"},{"post_id":"clqpau5vf006klv9eej302xxz","tag_id":"clqpau5vi006vlv9ehxwugv77","_id":"clqpau5vm0078lv9e912u1krr"},{"post_id":"clqpau5vf006nlv9e0mez7uxh","tag_id":"clqpau5vj0070lv9e1sw4eq7f","_id":"clqpau5vm0079lv9e85zd2ymq"},{"post_id":"clqpau5vl0075lv9ednhy3j31","tag_id":"clqpau5vh006qlv9e8lqicw1g","_id":"clqpau5vm007blv9e1j2vcda8"},{"post_id":"clqpau5vj006ylv9e199a7gcc","tag_id":"clqpau5vl0076lv9ede6w74j4","_id":"clqpau5vm007clv9e37sla9u2"},{"post_id":"clqpau5vk0071lv9ecfe6evn5","tag_id":"clqpau5vm007alv9eauaaf24c","_id":"clqpau5vn007elv9e1a3r8v5f"},{"post_id":"clqpau5vk0073lv9e8fsm0ikg","tag_id":"clqpau5vm007dlv9e270v6p90","_id":"clqpau5vn007flv9e579o1a90"}],"Tag":[{"name":"Linux","_id":"clqpau5tz0004lv9e7ev25orr"},{"name":"Blender","_id":"clqpau5u7000jlv9e83153ydr"},{"name":"3D","_id":"clqpau5u8000nlv9e0hzeduqc"},{"name":"Docker","_id":"clqpau5ua000qlv9e1kvr76xm"},{"name":"Chevereto 图床","_id":"clqpau5ub000vlv9e5vsr30qd"},{"name":"Draw.io","_id":"clqpau5ud0016lv9e3rdv7fuc"},{"name":"Elasticsearch","_id":"clqpau5uf001elv9edsfo3dqv"},{"name":"Database","_id":"clqpau5ug001hlv9e40mlgx9f"},{"name":"Oracle","_id":"clqpau5uh001mlv9e79crcl7e"},{"name":"Docker MySQL","_id":"clqpau5uj001rlv9ed07p4cbl"},{"name":"PostgreSQL","_id":"clqpau5un002blv9e5ezncbu8"},{"name":"FastAPI","_id":"clqpau5uo002glv9ehb8tdvv6"},{"name":"Python","_id":"clqpau5up002mlv9e96ma3tde"},{"name":"Git","_id":"clqpau5uq002slv9e0obxekn8"},{"name":"GraphQL","_id":"clqpau5us0032lv9ehfnsal6r"},{"name":"JavaScript","_id":"clqpau5uu0037lv9e5j6z85v6"},{"name":"Java","_id":"clqpau5ux003nlv9eez5dekta"},{"name":"Jenkins","_id":"clqpau5v00049lv9efa2ud9hi"},{"name":"Gitlab","_id":"clqpau5v1004blv9edxp3hfq4"},{"name":"KeyCloak","_id":"clqpau5v1004clv9e2iqeddt2"},{"name":"Identity","_id":"clqpau5v1004flv9ebxdw24cw"},{"name":"AT&T","_id":"clqpau5v1004hlv9e5wzahgd2"},{"name":"ASM","_id":"clqpau5v1004klv9e1mf8ahli"},{"name":"Vim","_id":"clqpau5v1004llv9ed9pm7o8r"},{"name":"App","_id":"clqpau5v2004olv9egiez1zqx"},{"name":"Android","_id":"clqpau5v2004rlv9ebrtm3ogo"},{"name":"Neo4j","_id":"clqpau5v2004tlv9e7e5gfhch"},{"name":"Netty","_id":"clqpau5v3004ylv9e0kto7pt1"},{"name":"PL/SQL","_id":"clqpau5v3004zlv9ef4zq0p8a"},{"name":"OpenGauss","_id":"clqpau5v5005hlv9e849zboya"},{"name":"RESTful","_id":"clqpau5v6005qlv9e8x8h47mo"},{"name":"LINUX","_id":"clqpau5v6005tlv9ediqzc0sn"},{"name":"React","_id":"clqpau5v6005wlv9egbfk2ojm"},{"name":"WebScoket","_id":"clqpau5v60060lv9e7z2o0rd3"},{"name":"WebSocket","_id":"clqpau5vd006glv9e1aiqg49w"},{"name":"基于大语言模型的医药问答研究","_id":"clqpau5vf006llv9e5w8m5cln"},{"name":"Data Structure","_id":"clqpau5vh006qlv9e8lqicw1g"},{"name":"如何看论文","_id":"clqpau5vi006vlv9ehxwugv77"},{"name":"如何阅读","_id":"clqpau5vj0070lv9e1sw4eq7f"},{"name":"网络","_id":"clqpau5vl0076lv9ede6w74j4"},{"name":"自然语言处理学习规划","_id":"clqpau5vm007alv9eauaaf24c"},{"name":"软件测试","_id":"clqpau5vm007dlv9e270v6p90"}]}}